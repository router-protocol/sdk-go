syntax = "proto3";
package routerprotocol.routerchain.inbound;


option go_package = "github.com/router-protocol/sdk-go/routerchain/inbound/types";
import "inbound/incoming_tx_status.proto"; 
import "multichain/chain_type.proto"; 
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto"; 

message EventIncomingTxCreated {  
  bytes attestation_id = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3; 
  uint64 eventNonce = 4; 
  uint64 blockHeight = 5;
  string sourceTxHash = 6; 
  uint64 sourceTimestamp = 7;
  bytes sourceSender = 8;   
  string txOrigin = 9;
  string routerBridgeContract = 10; 
  bytes payload = 11; 
  uint64 gasLimit = 12;
  string feePayer = 13;
  string routeAmount = 14 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string routeRecipient = 15; 
  bytes asmAddress = 16;
  IncomingTxStatus status = 17;   
}

message EventIncomingTxReadyToExecute {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;
  string feePayer = 5;
  cosmos.base.v1beta1.Coin txFeeInRoute = 6 [(gogoproto.nullable) = false];
}

message EventIncomingTxExecuted {
  bytes attestation_id = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3; 
  uint64 eventNonce = 4;
  bytes delegationResponse = 5;
  cosmos.base.v1beta1.Coin refundFeeInRoute = 6 [(gogoproto.nullable) = false];
}

message EventIncomingTxExecutionFailed {
  bytes attestation_id = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3; 
  uint64 eventNonce = 4;
  string delegationErrorResponse = 5;
  cosmos.base.v1beta1.Coin refundFeeInRoute = 6 [(gogoproto.nullable) = false];
}