syntax = "proto3";
package routerprotocol.routerchain.inbound;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "inbound/params.proto";
import "inbound/incoming_tx.proto";
// this line is used by starport scaffolding # 1
import "inbound/incoming_tx_status.proto";

option go_package = "github.com/router-protocol/router-chain/x/inbound/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/inbound/params";
  }
  // Queries a IncomingTx by index.
	rpc IncomingTx(QueryGetIncomingTxRequest) returns (QueryGetIncomingTxResponse) {
		option (google.api.http).get = "/router-protocol/router-chain/inbound/incoming_tx/{chain_type}/{chain_id}/{event_nonce}";
	}

	// Queries a list of IncomingTx items.
	rpc IncomingTxAll(QueryAllIncomingTxRequest) returns (QueryAllIncomingTxResponse) {
		option (google.api.http).get = "/router-protocol/router-chain/inbound/incoming_tx";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetIncomingTxRequest {
	  uint64 chain_type =1;
	  string chain_id = 2;
	  uint64 event_nonce = 3;

}

message QueryGetIncomingTxResponse {
	IncomingTx incomingTx = 1 [(gogoproto.nullable) = false];
}

message QueryAllIncomingTxRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllIncomingTxResponse {
	repeated IncomingTx incomingTx = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
