syntax = "proto3";
package routerprotocol.routerchain.inbound;


option go_package = "github.com/router-protocol/sdk-go/routerchain/inbound/types";
import "inbound/incoming_tx_status.proto"; 
import "multichain/chain_type.proto"; 
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto"; 


message IncomingTx {  
  routerprotocol.routerchain.multichain.ChainType chainType = 1;
  string chainId = 2; 
  uint64 eventNonce = 3; 
  uint64 blockHeight = 4;
  string sourceTxHash = 5; 
  uint64 sourceTimestamp = 6;
  string sourceSender = 7;   
  string routerBridgeContract = 8; 
  bytes payload = 9; 
  uint64 gasLimit = 10;
  cosmos.base.v1beta1.Coin txFeeInRoute = 11 [(gogoproto.nullable) = false];
  string feePayer = 12; 
  string routeAmount = 13 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string routeRecipient = 14; 
  string asmAddress = 15;
  IncomingTxStatus status = 16;   
}

message InboundRequestClaimHash {  
  routerprotocol.routerchain.multichain.ChainType chainType = 1;
  string chainId = 2; 
  uint64 eventNonce = 3; 
  uint64 blockHeight = 4;
  string sourceTxHash = 5; 
  uint64 sourceTimestamp = 6;
  string sourceSender = 7;   
  string routerBridgeContract = 8; 
  bytes payload = 9; 
  uint64 gasLimit = 10;
  string routeAmount = 11 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string routeRecipient = 12; 
  string asmAddress = 13;
}