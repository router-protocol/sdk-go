syntax = "proto3";
package routerprotocol.routerchain.attestation;

option go_package = "github.com/router-protocol/sdk-go/routerchain/attestation/types";

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "routerchain/attestation/claim_type.proto";
import "routerchain/multichain/chain_type.proto"; 
import "routerchain/attestation/bridge_validator.proto";

message EventAttestationVote {
  ClaimType attestationType = 1;    
  bytes attestation_id = 2;
  routerprotocol.routerchain.multichain.ChainType chainType = 3;
  string chainId = 4;    
  string contract = 5; 
  uint64 eventNonce = 6;
  string voter = 7;
}

message EventAttestationObserved {
  ClaimType attestationType = 1;
  bytes attestation_id = 2;
  routerprotocol.routerchain.multichain.ChainType chainType = 3;
  string chainId = 4; 
  string contract = 5; 
  uint64 eventNonce = 6;
}

message EventSetOrchestratorAddresses {
  string validator_address = 1;
  string orchestrator_address = 2;
  string operator_eth_address = 3;
}

message EventValsetCreate {
  uint64 valset_nonce = 1;
  uint64 valset_height = 2;
  repeated BridgeValidator valset_members = 3[(gogoproto.nullable) = false];
}

message EventValsetConfirm {
  uint64 valset_nonce = 1;
  string orchestrator_address = 2;
  string ethSigner = 3; 
  string signature = 4; 
}


message EventValsetUpdatedClaimCreated {
  bytes attestation_id = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3;   
  string contract = 4; 
  uint64 eventNonce = 5;
  uint64 valset_nonce = 6;  
  uint64 event_height = 7;
  string src_tx_hash = 8; 
  repeated BridgeValidator valset_members = 9[(gogoproto.nullable) = false];  
}
