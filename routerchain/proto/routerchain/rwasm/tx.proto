syntax = "proto3";

package routerprotocol.routerchain.rwasm;

import "gogoproto/gogo.proto";

option go_package = "github.com/router-protocol/sdk-go/routerchain/rwasm/types";

// Msg defines the Msg service.
service Msg {
  rpc ExecuteCwContract     (MsgExecuteCwContract    ) returns (MsgExecuteCwContractResponse    );
  rpc InstantiateCwContract (MsgInstantiateCwContract) returns (MsgInstantiateCwContractResponse);
  rpc CwStoreCode           (MsgCwStoreCode          ) returns (MsgCwStoreCodeResponse          );
}
message MsgExecuteCwContract {
  
  // Sender is the that actor that signed the messages
  string sender = 1;
  
  // Contract is the address of the smart contract
  string contract = 2;
  
  // Msg json encoded message to be passed to the contract
  string msg = 3;
  
  // Funds coins that are transferred to the contract on execution
  string funds = 4;
}

message MsgExecuteCwContractResponse {
  bytes data = 1;
}

message MsgInstantiateCwContract {
  string sender  = 1;
  string admin   = 2;
  uint64 code_id = 3;
  string label   = 4;
  string msg     = 5;
  string funds   = 6;
}

message MsgInstantiateCwContractResponse {
  
  // Address is the bech32 address of the new contract instance.
  string address = 1;
  
  // Data contains bytes to returned from the contract
  bytes data = 2;
}

message MsgCwStoreCode {
  string sender       = 1;
  string wasm_byte_code = 2;
}

message MsgCwStoreCodeResponse {
  // CodeID is the reference to the stored WASM code
  uint64 code_id = 1 [ (gogoproto.customname) = "CodeID" ];
  // Checksum is the sha256 hash of the stored code
  bytes checksum = 2;
}

