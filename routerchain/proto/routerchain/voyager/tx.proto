syntax = "proto3";

package routerprotocol.routerchain.voyager;

option go_package = "github.com/router-protocol/sdk-go/routerchain/voyager/types";

import "multichain/chain_type.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

// Msg defines the Msg service.
service Msg {
  rpc FundsDeposited (MsgFundsDeposited) returns (MsgFundsDepositedResponse);
  rpc FundsPaid      (MsgFundsPaid     ) returns (MsgFundsPaidResponse     );
}
message MsgFundsDeposited {
  string                                          orchestrator =  1;
  string                                          srcChainId   =  2;
  routerprotocol.routerchain.multichain.ChainType srcChainType =  3;
  string                                          srcTxHash    =  4;
  uint64                                          srcTimestamp =  5;
  string                                          contract     =  6;
  uint64                                          deposit_id   =  7;
  uint64                                          blockHeight  =  8;
  bytes                                           destChainId  =  9;
  string                                          amount       = 10 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string                                          destAmount  = 11 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string                                          srcToken     = 12;
  bytes                                          recipient    = 13;
  string                                          depositor    = 14;  
  string                                          widget_id  = 15 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

message MsgFundsDepositedResponse {}

message MsgFundsPaid {
  string orchestrator        =  1;
  string srcChainId          =  2;  
  routerprotocol.routerchain.multichain.ChainType srcChainType =  3;
  string srcTxHash           =  4;
  uint64 srcTimestamp        =  5;
  string contract            =  6;
  uint64 eventNonce          =  7;
  uint64 blockHeight         =  8;
  bytes messageHash         =  9;
  string forwarder           = 10;
  bytes forwarderRouterAddr = 11;
}

message MsgFundsPaidResponse {}

