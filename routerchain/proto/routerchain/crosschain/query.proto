syntax = "proto3";

package routerprotocol.routerchain.crosschain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "routerchain/crosschain/params.proto";
import "routerchain/crosschain/crosschain_request.proto";
import "routerchain/crosschain/crosschain_request_confirm.proto";
import "routerchain/crosschain/crosschain_ack_request.proto";
import "routerchain/crosschain/crosschain_ack_request_confirm.proto";
import "routerchain/crosschain/crosschain_ack_receipt.proto";

option go_package = "github.com/router-protocol/sdk-go/routerchain/crosschain/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/params";
  
  }
  
  // Queries a list of CrosschainRequest items.
  rpc CrosschainRequest    (QueryGetCrosschainRequestRequest) returns (QueryGetCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc CrosschainRequestAll (QueryAllCrosschainRequestRequest) returns (QueryAllCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request";
  
  }
  
  // Queries a list of CrosschainRequestConfirm items.
  rpc CrosschainRequestConfirm    (QueryGetCrosschainRequestConfirmRequest) returns (QueryGetCrosschainRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request_confirm/{sourceChainId}/{requestIdentifier}/{claimHash}/{orchestrator}";
  
  }
  rpc CrosschainRequestConfirmAll (QueryAllCrosschainRequestConfirmRequest) returns (QueryAllCrosschainRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request_confirm/{sourceChainId}/{requestIdentifier}/{claimHash}";
  
  }
  
  // Queries a list of CrosschainAckRequest items.
  rpc CrosschainAckRequest    (QueryGetCrosschainAckRequestRequest) returns (QueryGetCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc CrosschainAckRequestAll (QueryAllCrosschainAckRequestRequest) returns (QueryAllCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request";
  
  }
  
  // Queries a list of CrosschainAckRequestConfirm items.
  rpc CrosschainAckRequestConfirm    (QueryGetCrosschainAckRequestConfirmRequest) returns (QueryGetCrosschainAckRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request_confirm/{ackSrcChainId}/{ackRequestIdentifier}/{claimHash}/{orchestrator}";
  
  }
  rpc CrosschainAckRequestConfirmAll (QueryAllCrosschainAckRequestConfirmRequest) returns (QueryAllCrosschainAckRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request_confirm/{ackSrcChainId}/{ackRequestIdentifier}/{claimHash}";
  
  }
  
  // Queries a list of CrosschainAckReceipt items.
  rpc CrosschainAckReceipt    (QueryGetCrosschainAckReceiptRequest) returns (QueryGetCrosschainAckReceiptResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_receipt/{ackReceiptSrcChainId}/{ackReceiptIdentifier}";
  
  }
  rpc CrosschainAckReceiptAll (QueryAllCrosschainAckReceiptRequest) returns (QueryAllCrosschainAckReceiptResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_receipt";
  
  }
    
  // Queries a list of BlockedCrosschainRequest items.
  rpc BlockedCrosschainRequest    (QueryGetBlockedCrosschainRequestRequest) returns (QueryGetBlockedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc BlockedCrosschainRequestAll (QueryAllBlockedCrosschainRequestRequest) returns (QueryAllBlockedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_request";
  
  }
  
  // Queries a list of BlockedCrosschainAckRequest items.
  rpc BlockedCrosschainAckRequest    (QueryGetBlockedCrosschainAckRequestRequest) returns (QueryGetBlockedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc BlockedCrosschainAckRequestAll (QueryAllBlockedCrosschainAckRequestRequest) returns (QueryAllBlockedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_ack_request";
  
  }
  rpc IBCConfig                      (QueryGetIBCConfigRequest                  ) returns (QueryGetIBCConfigResponse                  ) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ibc_config";
  
  }
  
  // Queries a list of ExpiredCrosschainRequest items.
  rpc ExpiredCrosschainRequest    (QueryGetExpiredCrosschainRequestRequest) returns (QueryGetExpiredCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/expired_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc ExpiredCrosschainRequestAll (QueryAllExpiredCrosschainRequestRequest) returns (QueryAllExpiredCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/expired_crosschain_request";
  
  }
  
  // Queries a list of ExpiredCrosschainAckRequest items.
  rpc ExpiredCrosschainAckRequest    (QueryGetExpiredCrosschainAckRequestRequest) returns (QueryGetExpiredCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/expired_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc ExpiredCrosschainAckRequestAll (QueryAllExpiredCrosschainAckRequestRequest) returns (QueryAllExpiredCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/expired_crosschain_ack_request";
  
  }
  
  // Queries a list of ValidCrosschainRequest items.
  rpc ValidCrosschainRequest    (QueryGetValidCrosschainRequestRequest) returns (QueryGetValidCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/valid_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc ValidCrosschainRequestAll (QueryAllValidCrosschainRequestRequest) returns (QueryAllValidCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/valid_crosschain_request";
  
  }
  
  // Queries a list of NativeTransferedCrosschainRequest items.
  rpc NativeTransferedCrosschainRequest    (QueryGetNativeTransferedCrosschainRequestRequest) returns (QueryGetNativeTransferedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/native_transfered_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc NativeTransferedCrosschainRequestAll (QueryAllNativeTransferedCrosschainRequestRequest) returns (QueryAllNativeTransferedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/native_transfered_crosschain_request";
  
  }
  
  // Queries a list of ReadyToExecuteCrosschainRequest items.
  rpc ReadyToExecuteCrosschainRequest    (QueryGetReadyToExecuteCrosschainRequestRequest) returns (QueryGetReadyToExecuteCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc ReadyToExecuteCrosschainRequestAll (QueryAllReadyToExecuteCrosschainRequestRequest) returns (QueryAllReadyToExecuteCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_request";
  
  }
  
  // Queries a list of ExecutedCrosschainRequest items.
  rpc ExecutedCrosschainRequest    (QueryGetExecutedCrosschainRequestRequest) returns (QueryGetExecutedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/executed_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc ExecutedCrosschainRequestAll (QueryAllExecutedCrosschainRequestRequest) returns (QueryAllExecutedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/executed_crosschain_request";
  
  }
  
  // Queries a list of FeesSettledCrosschainRequest items.
  rpc FeesSettledCrosschainRequest    (QueryGetFeesSettledCrosschainRequestRequest) returns (QueryGetFeesSettledCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/fees_settled_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc FeesSettledCrosschainRequestAll (QueryAllFeesSettledCrosschainRequestRequest) returns (QueryAllFeesSettledCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/fees_settled_crosschain_request";
  
  }
  
  // Queries a list of CompletedCrosschainRequest items.
  rpc CompletedCrosschainRequest    (QueryGetCompletedCrosschainRequestRequest) returns (QueryGetCompletedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/completed_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc CompletedCrosschainRequestAll (QueryAllCompletedCrosschainRequestRequest) returns (QueryAllCompletedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/completed_crosschain_request";
  
  }
  
  // Queries a list of ValidCrosschainAckRequest items.
  rpc ValidCrosschainAckRequest    (QueryGetValidCrosschainAckRequestRequest) returns (QueryGetValidCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/valid_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc ValidCrosschainAckRequestAll (QueryAllValidCrosschainAckRequestRequest) returns (QueryAllValidCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/valid_crosschain_ack_request";
  
  }
  
  // Queries a list of ReadyToExecuteCrosschainAckRequest items.
  rpc ReadyToExecuteCrosschainAckRequest    (QueryGetReadyToExecuteCrosschainAckRequestRequest) returns (QueryGetReadyToExecuteCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc ReadyToExecuteCrosschainAckRequestAll (QueryAllReadyToExecuteCrosschainAckRequestRequest) returns (QueryAllReadyToExecuteCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_ack_request";
  
  }
  
  // Queries a list of ExecutedCrosschainAckRequest items.
  rpc ExecutedCrosschainAckRequest    (QueryGetExecutedCrosschainAckRequestRequest) returns (QueryGetExecutedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/executed_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc ExecutedCrosschainAckRequestAll (QueryAllExecutedCrosschainAckRequestRequest) returns (QueryAllExecutedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/executed_crosschain_ack_request";
  
  }
  
  // Queries a list of FeesSettledCrosschainAckRequest items.
  rpc FeesSettledCrosschainAckRequest    (QueryGetFeesSettledCrosschainAckRequestRequest) returns (QueryGetFeesSettledCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/fees_settled_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc FeesSettledCrosschainAckRequestAll (QueryAllFeesSettledCrosschainAckRequestRequest) returns (QueryAllFeesSettledCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/fees_settled_crosschain_ack_request";
  
  }
  
  // Queries a list of CompletedCrosschainAckRequest items.
  rpc CompletedCrosschainAckRequest    (QueryGetCompletedCrosschainAckRequestRequest) returns (QueryGetCompletedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/completed_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc CompletedCrosschainAckRequestAll (QueryAllCompletedCrosschainAckRequestRequest) returns (QueryAllCompletedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/completed_crosschain_ack_request";
  
  }
  
  // Queries a list of ReadyToExecuteCrosschainAckRequestByWorkflow items.
  rpc ReadyToExecuteCrosschainAckRequestByWorkflow (QueryReadyToExecuteCrosschainAckRequestByWorkflowRequest) returns (QueryReadyToExecuteCrosschainAckRequestByWorkflowResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_ack_request_by_workflow/{ackWorkflowType}";
  
  }
  
  // Queries a list of ReadyToExecuteCrosschainAckRequestByWorkflowAndRelayer items.
  rpc ReadyToExecuteCrosschainAckRequestByWorkflowAndRelayer (QueryReadyToExecuteCrosschainAckRequestByWorkflowAndRelayerRequest) returns (QueryReadyToExecuteCrosschainAckRequestByWorkflowAndRelayerResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_ack_request_by_workflow_and_relayer/{ackWorkflowType}/{ackRelayerType}";
  
  }
  
  // Queries a list of ReadyToExecuteCrosschainRequestByWorkflow items.
  rpc ReadyToExecuteCrosschainRequestByWorkflow (QueryReadyToExecuteCrosschainRequestByWorkflowRequest) returns (QueryReadyToExecuteCrosschainRequestByWorkflowResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_request_by_workflow/{workflowType}";
  
  }
  
  // Queries a list of ReadyToExecuteCrosschainRequestByWorkflowAndRelayer items.
  rpc ReadyToExecuteCrosschainRequestByWorkflowAndRelayer (QueryReadyToExecuteCrosschainRequestByWorkflowAndRelayerRequest) returns (QueryReadyToExecuteCrosschainRequestByWorkflowAndRelayerResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/ready_to_execute_crosschain_request_by_workflow_and_relayer/{workflowType}/{relayerType}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetCrosschainRequestResponse {
  repeated CrosschainRequest                      crosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination        = 2;
}

message QueryAllCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCrosschainRequestResponse {
  repeated CrosschainRequest                      crosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination        = 2;
}

message QueryGetCrosschainRequestConfirmRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
  bytes  claimHash         = 3;
  string orchestrator      = 4;
}

message QueryGetCrosschainRequestConfirmResponse {
  CrosschainRequestConfirm crosschainRequestConfirm = 1 [(gogoproto.nullable) = false];
}

message QueryAllCrosschainRequestConfirmRequest {
  string                                sourceChainId     = 1;
  uint64                                requestIdentifier = 2;
  bytes                                 claimHash         = 3;
  cosmos.base.query.v1beta1.PageRequest pagination        = 4;
}

message QueryAllCrosschainRequestConfirmResponse {
  repeated CrosschainRequestConfirm               crosschainRequestConfirm = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination               = 2;
}

message QueryGetCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   crosschainAckRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryAllCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   crosschainAckRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryGetCrosschainAckRequestConfirmRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
  bytes  claimHash            = 3;
  string orchestrator         = 4;
}

message QueryGetCrosschainAckRequestConfirmResponse {
  CrosschainAckRequestConfirm crosschainAckRequestConfirm = 1 [(gogoproto.nullable) = false];
}

message QueryAllCrosschainAckRequestConfirmRequest {
  string                                ackSrcChainId        = 1;
  uint64                                ackRequestIdentifier = 2;
  bytes                                 claimHash            = 3;
  cosmos.base.query.v1beta1.PageRequest pagination           = 4;
}

message QueryAllCrosschainAckRequestConfirmResponse {
  repeated CrosschainAckRequestConfirm            crosschainAckRequestConfirm = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                  = 2;
}

message QueryGetCrosschainAckReceiptRequest {
  string ackReceiptSrcChainId = 1;
  uint64 ackReceiptIdentifier = 2;
}

message QueryGetCrosschainAckReceiptResponse {
  repeated CrosschainAckReceipt                   crosschainAckReceipt = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryAllCrosschainAckReceiptRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCrosschainAckReceiptResponse {
  repeated CrosschainAckReceipt                   crosschainAckReceipt = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryGetBlockedCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetBlockedCrosschainRequestResponse {
  CrosschainRequest blockedCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllBlockedCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlockedCrosschainRequestResponse {
  repeated CrosschainRequest                      blockedCrosschainRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                = 2;
}

message QueryGetBlockedCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetBlockedCrosschainAckRequestResponse {
  CrosschainAckRequest blockedCrosschainAckRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllBlockedCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlockedCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   blockedCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                   = 2;
}

message QueryGetIBCConfigRequest {}

message QueryGetIBCConfigResponse {
  string port_id = 1;
}

message QueryGetExpiredCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetExpiredCrosschainRequestResponse {
  CrosschainRequest expiredCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllExpiredCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExpiredCrosschainRequestResponse {
  repeated CrosschainRequest                      expiredCrosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination               = 2;
}

message QueryGetExpiredCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetExpiredCrosschainAckRequestResponse {
  CrosschainAckRequest expiredCrosschainAckRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllExpiredCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExpiredCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   expiredCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                   = 2;
}

message QueryGetValidCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetValidCrosschainRequestResponse {
  CrosschainRequest validCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllValidCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllValidCrosschainRequestResponse {
  repeated CrosschainRequest                      validCrosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination             = 2;
}

message QueryGetNativeTransferedCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetNativeTransferedCrosschainRequestResponse {
  CrosschainRequest nativeTransferedCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllNativeTransferedCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNativeTransferedCrosschainRequestResponse {
  repeated CrosschainRequest                      nativeTransferedCrosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                        = 2;
}

message QueryGetReadyToExecuteCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetReadyToExecuteCrosschainRequestResponse {
  CrosschainRequest readyToExecuteCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllReadyToExecuteCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReadyToExecuteCrosschainRequestResponse {
  repeated CrosschainRequest                      readyToExecuteCrosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                      = 2;
}

message QueryGetExecutedCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetExecutedCrosschainRequestResponse {
  CrosschainRequest executedCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllExecutedCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExecutedCrosschainRequestResponse {
  repeated CrosschainRequest                      executedCrosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                = 2;
}

message QueryGetFeesSettledCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetFeesSettledCrosschainRequestResponse {
  CrosschainRequest feesSettledCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllFeesSettledCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFeesSettledCrosschainRequestResponse {
  repeated CrosschainRequest                      feesSettledCrosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                   = 2;
}

message QueryGetCompletedCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetCompletedCrosschainRequestResponse {
  CrosschainRequest completedCrosschainRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllCompletedCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCompletedCrosschainRequestResponse {
  repeated CrosschainRequest                      completedCrosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                 = 2;
}

message QueryGetValidCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetValidCrosschainAckRequestResponse {
  CrosschainAckRequest validCrosschainAckRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllValidCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllValidCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   validCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                 = 2;
}

message QueryGetReadyToExecuteCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetReadyToExecuteCrosschainAckRequestResponse {
  CrosschainAckRequest readyToExecuteCrosschainAckRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllReadyToExecuteCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReadyToExecuteCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   readyToExecuteCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                          = 2;
}

message QueryGetExecutedCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetExecutedCrosschainAckRequestResponse {
  CrosschainAckRequest executedCrosschainAckRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllExecutedCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExecutedCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   executedCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                    = 2;
}

message QueryGetFeesSettledCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetFeesSettledCrosschainAckRequestResponse {
  CrosschainAckRequest feesSettledCrosschainAckRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllFeesSettledCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFeesSettledCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   feesSettledCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                       = 2;
}

message QueryGetCompletedCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetCompletedCrosschainAckRequestResponse {
  CrosschainAckRequest completedCrosschainAckRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllCompletedCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCompletedCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   completedCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                     = 2;
}

message QueryReadyToExecuteCrosschainAckRequestByWorkflowRequest {
  uint64                                ackWorkflowType = 1;
  cosmos.base.query.v1beta1.PageRequest pagination      = 2;
}

message QueryReadyToExecuteCrosschainAckRequestByWorkflowResponse {
  repeated CrosschainAckRequest                   readyToExecuteCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                          = 2;
}

message QueryReadyToExecuteCrosschainAckRequestByWorkflowAndRelayerRequest {
  uint64                                ackWorkflowType = 1;
  uint64                                ackRelayerType  = 2;
  cosmos.base.query.v1beta1.PageRequest pagination      = 3;
}

message QueryReadyToExecuteCrosschainAckRequestByWorkflowAndRelayerResponse {
  repeated CrosschainAckRequest                   readyToExecuteCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                          = 2;
}

message QueryReadyToExecuteCrosschainRequestByWorkflowRequest {
  uint64                                workflowType = 1;
  cosmos.base.query.v1beta1.PageRequest pagination   = 2;
}

message QueryReadyToExecuteCrosschainRequestByWorkflowResponse {
  repeated CrosschainRequest                      readyToExecuteCrosschainRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                       = 2;
}

message QueryReadyToExecuteCrosschainRequestByWorkflowAndRelayerRequest {
  uint64                                workflowType = 1;
  uint64                                relayerType  = 2;
  cosmos.base.query.v1beta1.PageRequest pagination   = 3;
}

message QueryReadyToExecuteCrosschainRequestByWorkflowAndRelayerResponse {
  repeated CrosschainRequest                      readyToExecuteCrosschainRequests = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination        = 2;
}

