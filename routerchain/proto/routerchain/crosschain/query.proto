syntax = "proto3";

package routerprotocol.routerchain.crosschain;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "routerchain/crosschain/params.proto";
import "routerchain/crosschain/crosschain_request.proto";
import "routerchain/crosschain/crosschain_request_confirm.proto";
import "routerchain/crosschain/crosschain_ack_request.proto";
import "routerchain/crosschain/crosschain_ack_request_confirm.proto";
import "routerchain/crosschain/crosschain_ack_receipt.proto";
import "routerchain/crosschain/relayer_config.proto";

option go_package = "github.com/router-protocol/sdk-go/routerchain/crosschain/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/params";
  
  }
  
  // Queries a list of CrosschainRequest items.
  rpc CrosschainRequest    (QueryGetCrosschainRequestRequest) returns (QueryGetCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc CrosschainRequestAll (QueryAllCrosschainRequestRequest) returns (QueryAllCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request";
  
  }
  
  // Queries a list of CrosschainRequestConfirm items.
  rpc CrosschainRequestConfirm    (QueryGetCrosschainRequestConfirmRequest) returns (QueryGetCrosschainRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request_confirm/{sourceChainId}/{requestIdentifier}/{claimHash}/{orchestrator}";
  
  }
  rpc CrosschainRequestConfirmAll (QueryAllCrosschainRequestConfirmRequest) returns (QueryAllCrosschainRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_request_confirm/{sourceChainId}/{requestIdentifier}/{claimHash}";
  
  }
  
  // Queries a list of CrosschainAckRequest items.
  rpc CrosschainAckRequest    (QueryGetCrosschainAckRequestRequest) returns (QueryGetCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc CrosschainAckRequestAll (QueryAllCrosschainAckRequestRequest) returns (QueryAllCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request";
  
  }
  
  // Queries a list of CrosschainAckRequestConfirm items.
  rpc CrosschainAckRequestConfirm    (QueryGetCrosschainAckRequestConfirmRequest) returns (QueryGetCrosschainAckRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request_confirm/{ackSrcChainId}/{ackRequestIdentifier}/{claimHash}/{orchestrator}";
  
  }
  rpc CrosschainAckRequestConfirmAll (QueryAllCrosschainAckRequestConfirmRequest) returns (QueryAllCrosschainAckRequestConfirmResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_request_confirm/{ackSrcChainId}/{ackRequestIdentifier}/{claimHash}";
  
  }
  
  // Queries a list of CrosschainAckReceipt items.
  rpc CrosschainAckReceipt    (QueryGetCrosschainAckReceiptRequest) returns (QueryGetCrosschainAckReceiptResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_receipt/{ackReceiptSrcChainId}/{ackReceiptIdentifier}";
  
  }
  rpc CrosschainAckReceiptAll (QueryAllCrosschainAckReceiptRequest) returns (QueryAllCrosschainAckReceiptResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/crosschain_ack_receipt";
  
  }
  
  // Queries a list of RelayerConfig items.
  rpc RelayerConfig    (QueryGetRelayerConfigRequest) returns (QueryGetRelayerConfigResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/relayer_config/{chainId}";
  
  }
  rpc RelayerConfigAll (QueryAllRelayerConfigRequest) returns (QueryAllRelayerConfigResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/relayer_config";
  }

  // Queries a list of BlockedCrosschainRequest items.
  rpc BlockedCrosschainRequest    (QueryGetBlockedCrosschainRequestRequest) returns (QueryGetBlockedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_request/{sourceChainId}/{requestIdentifier}";
  
  }
  rpc BlockedCrosschainRequestAll (QueryAllBlockedCrosschainRequestRequest) returns (QueryAllBlockedCrosschainRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_request";
  
  }
  
  // Queries a list of BlockedCrosschainAckRequest items.
  rpc BlockedCrosschainAckRequest    (QueryGetBlockedCrosschainAckRequestRequest) returns (QueryGetBlockedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_ack_request/{ackSrcChainId}/{ackRequestIdentifier}";
  
  }
  rpc BlockedCrosschainAckRequestAll (QueryAllBlockedCrosschainAckRequestRequest) returns (QueryAllBlockedCrosschainAckRequestResponse) {
    option (google.api.http).get = "/router-protocol/router-chain/crosschain/blocked_crosschain_ack_request";
  
  }

  rpc IBCConfig(QueryGetIBCConfigRequest) returns (QueryGetIBCConfigResponse) {
		option (google.api.http).get = "/router-protocol/router-chain/crosschain/ibc_config";
	}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetCrosschainRequestResponse {
  repeated CrosschainRequest                      crosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination        = 2;
}

message QueryAllCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCrosschainRequestResponse {
  repeated CrosschainRequest                      crosschainRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination        = 2;
}

message QueryGetCrosschainRequestConfirmRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
  bytes  claimHash         = 3;
  string orchestrator      = 4;
}

message QueryGetCrosschainRequestConfirmResponse {
  CrosschainRequestConfirm crosschainRequestConfirm = 1 [(gogoproto.nullable) = false];
}

message QueryAllCrosschainRequestConfirmRequest {
  string                                sourceChainId     = 1;
  uint64                                requestIdentifier = 2;
  bytes                                 claimHash         = 3;
  cosmos.base.query.v1beta1.PageRequest pagination        = 4;
}

message QueryAllCrosschainRequestConfirmResponse {
  repeated CrosschainRequestConfirm               crosschainRequestConfirm = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination               = 2;
}

message QueryGetCrosschainAckRequestRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
}

message QueryGetCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   crosschainAckRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryAllCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCrosschainAckRequestResponse {
  repeated CrosschainAckRequest                   crosschainAckRequest = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryGetCrosschainAckRequestConfirmRequest {
  string ackSrcChainId        = 1;
  uint64 ackRequestIdentifier = 2;
  bytes  claimHash            = 3;
  string orchestrator         = 4;
}

message QueryGetCrosschainAckRequestConfirmResponse {
  CrosschainAckRequestConfirm crosschainAckRequestConfirm = 1 [(gogoproto.nullable) = false];
}

message QueryAllCrosschainAckRequestConfirmRequest {
  string                                ackSrcChainId        = 1;
  uint64                                ackRequestIdentifier = 2;
  bytes                                 claimHash            = 3;
  cosmos.base.query.v1beta1.PageRequest pagination           = 4;
}

message QueryAllCrosschainAckRequestConfirmResponse {
  repeated CrosschainAckRequestConfirm            crosschainAckRequestConfirm = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                  = 2;
}

message QueryGetCrosschainAckReceiptRequest {
  string ackReceiptSrcChainId = 1;
  uint64 ackReceiptIdentifier = 2;
}

message QueryGetCrosschainAckReceiptResponse {
  repeated CrosschainAckReceipt                   crosschainAckReceipt = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryAllCrosschainAckReceiptRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCrosschainAckReceiptResponse {
  repeated CrosschainAckReceipt                   crosschainAckReceipt = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryGetRelayerConfigRequest {
  string chainId = 1;
}

message QueryGetRelayerConfigResponse {
  RelayerConfig relayerConfig = 1 [(gogoproto.nullable) = false];
}

message QueryAllRelayerConfigRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRelayerConfigResponse {
  repeated RelayerConfig                          relayerConfig = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination    = 2;
}

message QueryGetBlockedCrosschainRequestRequest {
  string sourceChainId     = 1;
  uint64 requestIdentifier = 2;
}

message QueryGetBlockedCrosschainRequestResponse {
  repeated CrosschainRequest                      blockedCrosschainRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                = 2;
}

message QueryAllBlockedCrosschainRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlockedCrosschainRequestResponse {
  repeated CrosschainRequest                      blockedCrosschainRequests = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination                = 2;
}

message QueryGetBlockedCrosschainAckRequestRequest {
    string ackSrcChainId        = 1;
    uint64 ackRequestIdentifier = 2;
}

message QueryGetBlockedCrosschainAckRequestResponse {
    repeated CrosschainAckRequest                   blockedCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
    cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryAllBlockedCrosschainAckRequestRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlockedCrosschainAckRequestResponse {
    repeated CrosschainAckRequest                   blockedCrosschainAckRequests = 1 [(gogoproto.nullable) = false];
    cosmos.base.query.v1beta1.PageResponse pagination           = 2;
}

message QueryGetIBCConfigRequest {}

message QueryGetIBCConfigResponse {
  string port_id = 1;
}

