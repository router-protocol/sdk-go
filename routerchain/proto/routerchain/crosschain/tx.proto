syntax = "proto3";

package routerprotocol.routerchain.crosschain;

option go_package = "github.com/router-protocol/sdk-go/routerchain/crosschain/types";

import "multichain/chain_type.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "routerchain/crosschain/relayer_config.proto";

// Msg defines the Msg service.
service Msg {
  rpc CrosschainRequest           (MsgCrosschainRequest          ) returns (MsgCrosschainRequestResponse          );
  rpc ConfirmCrosschainRequest    (MsgConfirmCrosschainRequest   ) returns (MsgConfirmCrosschainRequestResponse   );
  rpc CrosschainAckRequest        (MsgCrosschainAckRequest       ) returns (MsgCrosschainAckRequestResponse       );
  rpc ConfirmCrosschainAckRequest (MsgConfirmCrosschainAckRequest) returns (MsgConfirmCrosschainAckRequestResponse);
  rpc CrosschainAckReceipt        (MsgCrosschainAckReceipt       ) returns (MsgCrosschainAckReceiptResponse       );
  rpc CreateRelayerConfig         (MsgCreateRelayerConfig        ) returns (MsgCreateRelayerConfigResponse        );
  rpc UpdateRelayerConfig         (MsgUpdateRelayerConfig        ) returns (MsgUpdateRelayerConfigResponse        );
  rpc DeleteRelayerConfig         (MsgDeleteRelayerConfig        ) returns (MsgDeleteRelayerConfigResponse        );
}
message MsgCrosschainRequest {
  string                                          orchestrator     =  1;
  string                                          src_chain_id     =  2;
  string                                          contract         =  3;
  uint64                                          request_identifier      =  4;
  uint64                                          block_height     =  5;
  string                                          source_tx_hash   =  6;
  uint64                                          src_timestamp    =  7;
  string                                          src_tx_origin    =  8;
  string                                          route_amount     =  9 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string                                           route_recipient  =  10;
  string                                          dest_chain_id    = 11;
  string                                           request_sender   = 12;
  bytes                                           request_metadata = 13;
  bytes                                           request_packet   = 14;
  routerprotocol.routerchain.multichain.ChainType src_chain_type   = 15;
  routerprotocol.routerchain.multichain.ChainType dest_chain_type  = 16;
  string                                          ethSigner        = 17;
  string                                          signature        = 18;
}

message MsgCrosschainRequestResponse {
  uint64 request_identifier = 1;
  cosmos.base.v1beta1.Coin fee_deducted = 2 [(gogoproto.nullable) = false];
}

message MsgConfirmCrosschainRequest {
  string orchestrator       = 1;
  string sourceChainId      = 2;
  uint64 request_identifier = 3;
  bytes  claimHash          = 4;
  string ethSigner          = 5;
  string signature          = 6;
}

message MsgConfirmCrosschainRequestResponse {}

message MsgCrosschainAckRequest {
  string orchestrator         =  1;
  string ack_src_chain_id              =  2;
  string contract = 3;
  uint64 ack_request_identifier           =  4;
  uint64 blockHeight          =  5;
  string destTxHash           =  6;
  string relayerRouterAddress =  7;
  string ack_dest_chain_id        =  8;
  string  request_sender       =  9;
  uint64 requestIdentifier    =  10;
  routerprotocol.routerchain.multichain.ChainType ack_src_chain_type   = 11;
  routerprotocol.routerchain.multichain.ChainType ack_dest_chain_type  = 12;
  uint64 feeConsumed = 13;
  bytes  execData             = 14;
  bool   execStatus           = 15;
  string ethSigner            = 16;
  string signature            = 17;  
}

message MsgCrosschainAckRequestResponse {}

message MsgConfirmCrosschainAckRequest {
  string orchestrator         = 1;
  string ack_src_chain_id     = 2;
  uint64 ackRequestIdentifier = 3;
  bytes  claimHash            = 4;
  string ethSigner            = 5;
  string signature            = 6;
}

message MsgConfirmCrosschainAckRequestResponse {}

message MsgCrosschainAckReceipt {
  string orchestrator         = 1;
  string ackReceiptSrcChainId              = 2;
  string contract = 3;
  uint64 ack_receipt_identifier           = 4;
  uint64 ack_receipt_blockHeight          = 5;
  string ack_receipt_txHash               = 6;
  string relayerRouterAddress = 7;
  uint64 requestIdentifier    = 8;
  string ackSrcChainId              = 9;
  uint64 ackRequestIdentifier              = 10;
  bytes  ackExecData             = 11;
  bool   ackExecStatus           = 12;
  uint64 feeConsumed = 13;
}

message MsgCrosschainAckReceiptResponse {}

message MsgCreateRelayerConfig {
  string creator        = 1;
  string chainId        = 2;
  string relayerName    = 3;
  string channel        = 4;
  bool   relayerEnabled = 5;
}

message MsgCreateRelayerConfigResponse {}

message MsgUpdateRelayerConfig {
  string creator        = 1;
  string chainId        = 2;
  string relayerName    = 3;
  string channel        = 4;
  bool   relayerEnabled = 5;
}

message MsgUpdateRelayerConfigResponse {}

message MsgDeleteRelayerConfig {
  string creator = 1;
  string chainId = 2;
}

message MsgDeleteRelayerConfigResponse {}

