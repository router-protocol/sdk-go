syntax = "proto3";

package routerprotocol.routerchain.crosschain;

option go_package = "github.com/router-protocol/sdk-go/routerchain/crosschain/types";

import "multichain/chain_type.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

// Msg defines the Msg service.
service Msg {
  rpc CrosschainRequest           (MsgCrosschainRequest          ) returns (MsgCrosschainRequestResponse          );
  rpc ConfirmCrosschainRequest    (MsgConfirmCrosschainRequest   ) returns (MsgConfirmCrosschainRequestResponse   );
  rpc CrosschainAckRequest        (MsgCrosschainAckRequest       ) returns (MsgCrosschainAckRequestResponse       );
  rpc ConfirmCrosschainAckRequest (MsgConfirmCrosschainAckRequest) returns (MsgConfirmCrosschainAckRequestResponse);
  rpc CrosschainAckReceipt        (MsgCrosschainAckReceipt       ) returns (MsgCrosschainAckReceiptResponse       );
}
message MsgCrosschainRequest {
  string                                          orchestrator     =  1;
  string                                          src_chain_id     =  2;
  uint64                                          request_identifier      =  3;
  uint64                                          block_height     =  4;
  string                                          source_tx_hash   =  5;
  uint64                                          src_timestamp    =  6;
  string                                          src_tx_origin    =  7;
  string                                          route_amount     =  8 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string                                           route_recipient  =  9;
  string                                          dest_chain_id    = 10;
  string                                           request_sender   = 11;
  bytes                                           request_metadata = 12;
  bytes                                           request_packet   = 13;
  routerprotocol.routerchain.multichain.ChainType src_chain_type   = 14;
  routerprotocol.routerchain.multichain.ChainType dest_chain_type  = 15;
  string                                          ethSigner        = 16;
  string                                          signature        = 17;
}

message MsgCrosschainRequestResponse {
  uint64                                          request_identifier      =  1;
}

message MsgConfirmCrosschainRequest {
  string orchestrator  = 1;
  string sourceChainId = 2;
  uint64 request_identifier  = 3;
  bytes  claimHash     = 4;
  string ethSigner     = 5;
  string signature     = 6;
}

message MsgConfirmCrosschainRequestResponse {}

message MsgCrosschainAckRequest {
  string orchestrator         =  1;
  string ack_src_chain_id              =  2;
  uint64 ack_request_identifier           =  3;
  uint64 blockHeight          =  4;
  string destTxHash           =  5;
  string relayerRouterAddress =  6;
  string ack_dest_chain_id        =  7;
  string  request_sender       =  8;
  uint64 requestIdentifier    =  9;
  routerprotocol.routerchain.multichain.ChainType ack_src_chain_type   = 10;
  routerprotocol.routerchain.multichain.ChainType ack_dest_chain_type  = 11;
  uint64 feeConsumed = 12;
  bytes  execData             = 13;
  bool   execStatus           = 14;
  string ethSigner            = 15;
  string signature            = 16;  
}

message MsgCrosschainAckRequestResponse {}

message MsgConfirmCrosschainAckRequest {
  string orchestrator         = 1;
  string ack_src_chain_id          = 2;
  uint64 ackRequestIdentifier = 3;
  bytes  claimHash            = 4;
  string ethSigner            = 5;
  string signature            = 6;
}

message MsgConfirmCrosschainAckRequestResponse {}

message MsgCrosschainAckReceipt {
  string orchestrator         = 1;
  string ackReceiptSrcChainId              = 2;
  uint64 ack_receipt_identifier           = 3;
  uint64 ack_receipt_blockHeight          = 4;
  string ack_receipt_txHash               = 5;
  string relayerRouterAddress = 6;
  uint64 requestIdentifier    = 7;
  string ackSrcChainId              = 8;
  uint64 ackRequestIdentifier              = 9;
  uint64 feeConsumed = 10;
}

message MsgCrosschainAckReceiptResponse {}

