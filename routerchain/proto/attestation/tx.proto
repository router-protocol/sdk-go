syntax = "proto3";
package routerprotocol.routerchain.attestation;

import "attestation/valset_confirmation.proto";
// this line is used by starport scaffolding # proto/tx/import
import "attestation/bridge_validator.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "multichain/chain_type.proto"; 

option go_package = "github.com/router-protocol/sdk-go/routerchain/attestation/types";

// Msg defines the Msg service.
service Msg {
      rpc SetOrchestratorAddress(MsgSetOrchestratorAddress) returns (MsgSetOrchestratorAddressResponse);
  rpc ValsetConfirm(MsgValsetConfirm) returns (MsgValsetConfirmResponse);
  rpc ValsetUpdatedClaim(MsgValsetUpdatedClaim) returns (MsgValsetUpdatedClaimResponse);  
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgSetOrchestratorAddress {
  string validator = 1;
  string orchestrator = 2;
  string ethAddress = 3;
}

message MsgSetOrchestratorAddressResponse {
}

message MsgValsetConfirm {
  string orchestrator = 1;
  uint64 valsetNonce = 2;
  string ethAddress = 3;
  string signature = 4;
}

message MsgValsetConfirmResponse {
}

message MsgValsetUpdatedClaim {
  string orchestrator = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2; 
  string chainId = 3;
  uint64 eventNonce = 4;
  uint64 valsetNonce = 5;
  uint64 blockHeight = 6;  
  repeated BridgeValidator members = 7 [(gogoproto.nullable) = false];
  string sourceTxHash = 8;
}

message MsgValsetUpdatedClaimResponse {
}

// this line is used by starport scaffolding # proto/tx/message
