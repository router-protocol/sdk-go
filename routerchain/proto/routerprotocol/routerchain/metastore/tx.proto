syntax = "proto3";

package routerprotocol.routerchain.metastore;

option go_package = "github.com/router-protocol/sdk-go/routerchain/metastore/types";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// Msg defines the Msg service.
service Msg {
  rpc CreateMetadataRequest  (MsgCreateMetadataRequest ) returns (MsgCreateMetadataRequestResponse );
  rpc ApproveFeepayerRequest (MsgApproveFeepayerRequest) returns (MsgApproveFeepayerRequestResponse);
  rpc RevokeFeepayerRequest  (MsgRevokeFeepayerRequest ) returns (MsgRevokeFeepayerRequestResponse );
  rpc BurnTokensRequest  (MsgBurnTokensRequest) returns (MsgBurnTokensRequestResponse);
}

message MsgCreateMetadataRequest {
  string orchestrator = 1;
  string chainId      = 2;
  string contract     = 3;
  uint64 eventNonce   = 4;
  uint64 blockHeight  = 5;
  string daapAddress  = 6;
  string feePayer     = 7;
}

message MsgCreateMetadataRequestResponse {}

message MsgApproveFeepayerRequest {
  string fee_payer    = 1;
  string chain_id     = 2;
  string dapp_address = 3;
}

message MsgApproveFeepayerRequestResponse {}

message MsgRevokeFeepayerRequest {
  string feepayer    = 1;
  string chainId     = 2;
  string dappAddress = 3;
}

message MsgRevokeFeepayerRequestResponse {}

// MsgBurnTokensRequest is the sdk.Msg type for allowing an account to burn
// the native tokens in its own address.
message MsgBurnTokensRequest {
  string sender = 1;
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false
  ];
}

message MsgBurnTokensRequestResponse {}

