syntax = "proto3";
package routerprotocol.routerchain.outbound;

import "outbound/outgoing_batch_confirm.proto";
// this line is used by starport scaffolding # proto/tx/import
import "outbound/contract_call.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "multichain/chain_type.proto"; 

option go_package = "github.com/router-protocol/sdk-go/routerchain/outbound/types";

// Msg defines the Msg service.
service Msg {
      rpc OutboundBatchRequest(MsgOutboundBatchRequest) returns (MsgOutboundBatchRequestResponse);
  rpc OutgoingBatchConfirm(MsgOutgoingBatchConfirm) returns (MsgOutgoingBatchConfirmResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgOutboundBatchRequest {
  string sender = 1;  
  routerprotocol.routerchain.multichain.ChainType destinationChainType = 2;
  string destinationChainId = 3;
  repeated ContractCall contractCalls = 4 [(gogoproto.nullable) = false];
  bool isAtomic = 5;
  cosmos.base.v1beta1.Coin relayerFee = 6 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin outgoingTxFee = 7 [(gogoproto.nullable) = false];
}

message MsgOutboundBatchRequestResponse {
}

message MsgOutgoingBatchConfirm {
  string orchestrator = 1;  
  routerprotocol.routerchain.multichain.ChainType destinationChainType = 2;
  string destinationChainId = 3;
  string outgoingBatchSender = 4;
  uint64 outgoingBatchNonce = 5;
  string ethSigner = 6;
  string signature = 7;
}
message MsgOutgoingBatchConfirmResponse {}
