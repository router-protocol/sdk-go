syntax = "proto3";
package routerprotocol.routerchain.outbound;

import "outbound/outgoing_batch_confirm.proto";
// this line is used by starport scaffolding # proto/tx/import
import "outbound/contract_call.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "multichain/chain_type.proto"; 
import "types/middleware_contract_type.proto";

option go_package = "github.com/router-protocol/sdk-go/routerchain/outbound/types";

// Msg defines the Msg service.
service Msg {
      rpc OutboundBatchRequest(MsgOutboundBatchRequest) returns (MsgOutboundBatchRequestResponse);
  rpc OutgoingBatchConfirm(MsgOutgoingBatchConfirm) returns (MsgOutgoingBatchConfirmResponse);
  rpc OutboundAckRequest(MsgOutboundAckRequest) returns (MsgOutboundAckRequestResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgOutboundBatchRequest {
  string sender = 1;  
  routerprotocol.routerchain.multichain.ChainType destinationChainType = 2;
  string destinationChainId = 3;
  repeated ContractCall contractCalls = 4 [(gogoproto.nullable) = false];
  bool isAtomic = 5;
  cosmos.base.v1beta1.Coin relayerFee = 6 [(gogoproto.nullable) = false];
  uint64 destinationGasLimit = 7;
  uint64 destinationGasPrice = 8;
  uint64 outboundAckGasLimit = 9;
  int64 expiryTimestamp = 10;
  string route_amount = 11 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  bytes route_recipient = 12;
  bytes asmAddress = 13;
  routerprotocol.routerchain.types.MiddlewareContractType middlewareContractType = 14;  
}

message MsgOutboundBatchRequestResponse {
  uint64 outbound_batch_nonce = 1; 
  cosmos.base.v1beta1.Coin outgoingTxFeeInRoute = 2 [(gogoproto.nullable) = false]; 
}

message MsgOutgoingBatchConfirm {
  string orchestrator = 1;  
  routerprotocol.routerchain.multichain.ChainType destinationChainType = 2;
  string destinationChainId = 3;
  string outgoingBatchSender = 4;
  uint64 outgoingBatchNonce = 5;
  string ethSigner = 6;
  string signature = 7;
}
message MsgOutgoingBatchConfirmResponse {}

message MsgOutboundAckRequest {
  string orchestrator = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3;
  uint64 outboundTxNonce = 4;
  string outboundTxRequestedBy = 5;
  string relayerRouterAddress = 6;
  string destinationTxHash = 7;
  uint64 feeConsumed = 8;
  uint64 eventNonce = 9;
  uint64 blockHeight = 10;  
  bytes contractAckResponses = 11;
  uint64 exeCode = 12;
  bool execStatus = 13;
  repeated bool execFlags = 14;
  repeated bytes execData = 15;

}

message MsgOutboundAckRequestResponse {
}

// this line is used by starport scaffolding # proto/tx/message