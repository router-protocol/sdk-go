syntax = "proto3";
package routerprotocol.routerchain.crosstalk;

option go_package = "github.com/router-protocol/sdk-go/routerchain/crosstalk/types";

import "crosstalk/crosstalk_request_status.proto"; 
import "crosstalk/crosstalk_ack_request_status.proto"; 
import "crosstalk/crosstalk_ack_receipt_status.proto"; 
import "crosstalk/crosstalk_request_ack_type.proto"; 
import "multichain/chain_type.proto"; 
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto"; 


message EventCrossTalkRequestCreated {
  bytes attestation_id = 1;
  uint64 eventNonce = 2;
  uint64 blockHeight = 3;
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 4; 
  string sourceChainId = 5;  
  string sourceTxHash = 6;
  uint64 sourceTimestamp = 7;
  routerprotocol.routerchain.multichain.ChainType destinationChainType = 8;
  string destinationChainId = 9;
  uint64 destinationGasLimit = 10;
  uint64 destinationGasPrice = 11;
  bytes requestSender = 12;
  string requestTxOrigin = 13;
  bool isReadCall = 14;
  uint64 requestNonce = 15;
  bool isAtomic = 16;  
  uint64 expiryTimestamp = 17;
  repeated bytes destContractAddresses = 18;
  repeated bytes destContractPayloads = 19;
  CrossTalkRequestAckType ackType = 20;
  uint64 ackGasLimit = 21;
  uint64 ackGasPrice = 22;    
  bytes asmAddress = 23;
  CrossTalkRequestStatus status = 24; 
}

message EventCrosstalkReadyToExecute {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;
  string feePayer = 5;
  cosmos.base.v1beta1.Coin destinationTxFeeInRoute = 6 [(gogoproto.nullable) = false];
}

message EventCrosstalkFeePayerUpdated {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;
  string feePayer = 5;
}

message EventCrosstalkDestGasIncremented {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;
  string feePayer = 5;
  uint64 destinationGasLimit = 6;
  uint64 destinationGasPrice = 7;
}


message EventCrosstalkCompleted {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;  
}

message EventCrosstalkRequestConfirm {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;
  string ethSigner = 5; 
  string signature = 6;   
  string orchestrator = 7;
}

message EventCrossTalkAckRequestCreated {
  bytes attestation_id = 1;
  uint64 eventNonce = 2;
  uint64 blockHeight = 3;
  string relayerRouterAddress = 4;
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 5;
  string sourceChainId = 6;
  routerprotocol.routerchain.multichain.ChainType chainType = 7;
  string chainId = 8;
  string destinationTxHash = 9; 
  uint64 eventIdentifier = 10;
  bytes crosstalkRequestSender = 11;
  uint64 crosstalkNonce = 12;
  bytes contractAckResponses = 13;
  uint64 exeCode = 14;
  bool execStatus = 15;
  repeated bool execFlags = 16;
  repeated bytes execData = 17;  
  CrossTalkAckRequestStatus status = 18; 
}

message EventCrosstalkRequestFeeSettlement {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;     
  cosmos.base.v1beta1.Coin relayerFeeInRoute = 4 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin refundFeeInRoute = 5 [(gogoproto.nullable) = false];
}


message EventCrosstalkAckGasIncremented {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;
  string feePayer = 5;
  uint64 ackGasLimit = 6;
  uint64 ackGasPrice = 7;
}


message EventCrosstalkAckRequestConfirm {  
  routerprotocol.routerchain.multichain.ChainType chainType = 1; 
  string chainId = 2; 
  uint64 eventNonce = 3; 
  bytes claimHash = 4; 
  string ethSigner = 5; 
  string signature = 6; 
  string orchestrator = 7;
}

message EventCrosstalkAckReadyToExecute {  
  routerprotocol.routerchain.multichain.ChainType chainType = 1; 
  string chainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;
  string feePayer = 5;
  cosmos.base.v1beta1.Coin txFeeInRoute = 6 [(gogoproto.nullable) = false];
}


message EventCrosstalkAckCompleted {  
  routerprotocol.routerchain.multichain.ChainType chainType = 1; 
  string chainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;  
}


message EventCrossTalkAckReceiptCreated {
  bytes attestation_id = 1;
  uint64 eventNonce = 2;
  uint64 blockHeight = 3;
  string relayerRouterAddress = 4;
  routerprotocol.routerchain.multichain.ChainType chainType = 5;
  string chainId = 6;  
  string txHash = 7; 
  uint64 eventIdentifier = 8;  
  CrossTalkAckReceiptStatus status = 18; 
}


message EventCrosstalkReceiptFeeSettlement {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;     
  cosmos.base.v1beta1.Coin relayerFeeInRoute = 4 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin refundFeeInRoute = 5 [(gogoproto.nullable) = false];
}


message EventCrosstalkReceiptCompleted {  
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 1; 
  string sourceChainId = 2; 
  uint64 eventNonce = 3;   
  bytes claimHash = 4;   
}
