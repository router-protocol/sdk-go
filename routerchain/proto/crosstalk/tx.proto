syntax = "proto3";
package routerprotocol.routerchain.crosstalk;

import "crosstalk/cross_talk_request.proto";
import "crosstalk/cross_talk_ack_request.proto";
import "crosstalk/crosstalk_request_ack_type.proto"; 
import "crosstalk/cross_talk_ack_receipt.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/router-protocol/sdk-go/routerchain/crosstalk/types";

import "multichain/chain_type.proto"; 

// Msg defines the Msg service.
service Msg {
      rpc CrossTalkRequest(MsgCrossTalkRequest) returns (MsgCrossTalkRequestResponse);
      rpc CrossTalkAckRequest(MsgCrossTalkAckRequest) returns (MsgCrossTalkAckRequestResponse);  
      rpc CrossTalkAckReceipt(MsgCrossTalkAckReceipt) returns (MsgCrossTalkAckReceiptResponse);  
  rpc SetCrosstalkFeePayer(MsgSetCrosstalkFeePayer) returns (MsgSetCrosstalkFeePayerResponse);
  rpc IncrementCrosstalkDestGas(MsgIncrementCrosstalkDestGas) returns (MsgIncrementCrosstalkDestGasResponse);
  rpc IncrementCrosstalkAckGas(MsgIncrementCrosstalkAckGas) returns (MsgIncrementCrosstalkAckGasResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgCrossTalkRequest {
  string orchestrator = 1;
  uint64 eventNonce = 2;
  uint64 blockHeight = 3;
  routerprotocol.routerchain.multichain.ChainType chainType = 4; 
  string chainId = 5;  
  string sourceTxHash = 6;
  uint64 sourceTimestamp = 7;
  routerprotocol.routerchain.multichain.ChainType destinationChainType = 8;
  string destinationChainId = 9;
  uint64 destinationGasLimit = 10;
  uint64 destinationGasPrice = 11;
  string requestSender = 12;
  string requestTxOrigin = 13;
  bool isReadCall = 14;
  uint64 requestNonce = 15;
  bool isAtomic = 16;  
  uint64 expiryTimestamp = 17;
  repeated bytes destContractAddresses = 18;
  repeated bytes destContractPayloads = 19;
  CrossTalkRequestAckType ackType = 20;
  uint64 ackGasLimit = 21;
  uint64 ackGasPrice = 22;
  string ethSigner = 23;
  string signature = 24;
  string asmAddress = 25;  
}
message MsgCrossTalkRequestResponse {}

message MsgCrossTalkAckRequest {
  string orchestrator = 1;
  uint64 eventNonce = 2;
  uint64 blockHeight = 3;
  string relayerRouterAddress = 4;
  routerprotocol.routerchain.multichain.ChainType sourceChainType = 5;
  string sourceChainId = 6;
  routerprotocol.routerchain.multichain.ChainType chainType = 7;
  string chainId = 8;
  string destinationTxHash = 9; 
  uint64 feeConsumed = 10;
  uint64 eventIdentifier = 11;
  bytes crosstalkRequestSender = 12;
  uint64 crosstalkNonce = 13;
  bytes contractAckResponses = 14;
  uint64 exeCode = 15;
  bool status = 16;
  repeated bool execFlags = 17;
  repeated bytes execData = 18;
  string ethSigner = 19;
  string signature = 20;
}
message MsgCrossTalkAckRequestResponse {}

message MsgCrossTalkAckReceipt {
  string orchestrator = 1;
  uint64 eventNonce = 2;
  uint64 blockHeight = 3;
  string relayerRouterAddress = 4;
  routerprotocol.routerchain.multichain.ChainType chainType = 5;
  string chainId = 6;
  string txHash = 7; 
  uint64 feeConsumed = 8;
  uint64 eventIdentifier = 9;  
}
message MsgCrossTalkAckReceiptResponse {}

message MsgSetCrosstalkFeePayer {
  string feePayer = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3;
  uint64 eventNonce = 4;
}

message MsgSetCrosstalkFeePayerResponse {
}

message MsgIncrementCrosstalkDestGas {
  string feePayer = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3;
  uint64 eventNonce = 4;
  uint64 destGasLimit = 5;
  uint64 destGasPrice = 6;
}

message MsgIncrementCrosstalkDestGasResponse {
}

message MsgIncrementCrosstalkAckGas {
  string feePayer = 1;
  routerprotocol.routerchain.multichain.ChainType chainType = 2;
  string chainId = 3;
  uint64 eventNonce = 4;
  uint64 ackGasLimit = 5;
  uint64 ackGasPrice = 6;
}

message MsgIncrementCrosstalkAckGasResponse {
}

// this line is used by starport scaffolding # proto/tx/message