// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metastore/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventMetadataRequestCreated struct {
	AttestationId []byte          `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType     types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId       string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce    uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight   uint64          `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DaapAddress   string          `protobuf:"bytes,6,opt,name=daapAddress,proto3" json:"daapAddress,omitempty"`
	FeePayer      string          `protobuf:"bytes,7,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
}

func (m *EventMetadataRequestCreated) Reset()         { *m = EventMetadataRequestCreated{} }
func (m *EventMetadataRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventMetadataRequestCreated) ProtoMessage()    {}
func (*EventMetadataRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5a0bd1a8eac694, []int{0}
}
func (m *EventMetadataRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMetadataRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMetadataRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMetadataRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMetadataRequestCreated.Merge(m, src)
}
func (m *EventMetadataRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventMetadataRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMetadataRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventMetadataRequestCreated proto.InternalMessageInfo

func (m *EventMetadataRequestCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventMetadataRequestCreated) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventMetadataRequestCreated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventMetadataRequestCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventMetadataRequestCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventMetadataRequestCreated) GetDaapAddress() string {
	if m != nil {
		return m.DaapAddress
	}
	return ""
}

func (m *EventMetadataRequestCreated) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

type EventMetaInfoCreated struct {
	ChainType   types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId     string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DaapAddress string          `protobuf:"bytes,3,opt,name=daapAddress,proto3" json:"daapAddress,omitempty"`
	FeePayer    string          `protobuf:"bytes,4,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
}

func (m *EventMetaInfoCreated) Reset()         { *m = EventMetaInfoCreated{} }
func (m *EventMetaInfoCreated) String() string { return proto.CompactTextString(m) }
func (*EventMetaInfoCreated) ProtoMessage()    {}
func (*EventMetaInfoCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5a0bd1a8eac694, []int{1}
}
func (m *EventMetaInfoCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMetaInfoCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMetaInfoCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMetaInfoCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMetaInfoCreated.Merge(m, src)
}
func (m *EventMetaInfoCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventMetaInfoCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMetaInfoCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventMetaInfoCreated proto.InternalMessageInfo

func (m *EventMetaInfoCreated) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventMetaInfoCreated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventMetaInfoCreated) GetDaapAddress() string {
	if m != nil {
		return m.DaapAddress
	}
	return ""
}

func (m *EventMetaInfoCreated) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

type EventFeePayerApproved struct {
	ChainType   types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId     string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DaapAddress string          `protobuf:"bytes,3,opt,name=daapAddress,proto3" json:"daapAddress,omitempty"`
	FeePayer    string          `protobuf:"bytes,4,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
}

func (m *EventFeePayerApproved) Reset()         { *m = EventFeePayerApproved{} }
func (m *EventFeePayerApproved) String() string { return proto.CompactTextString(m) }
func (*EventFeePayerApproved) ProtoMessage()    {}
func (*EventFeePayerApproved) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba5a0bd1a8eac694, []int{2}
}
func (m *EventFeePayerApproved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFeePayerApproved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFeePayerApproved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFeePayerApproved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFeePayerApproved.Merge(m, src)
}
func (m *EventFeePayerApproved) XXX_Size() int {
	return m.Size()
}
func (m *EventFeePayerApproved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFeePayerApproved.DiscardUnknown(m)
}

var xxx_messageInfo_EventFeePayerApproved proto.InternalMessageInfo

func (m *EventFeePayerApproved) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventFeePayerApproved) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventFeePayerApproved) GetDaapAddress() string {
	if m != nil {
		return m.DaapAddress
	}
	return ""
}

func (m *EventFeePayerApproved) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func init() {
	proto.RegisterType((*EventMetadataRequestCreated)(nil), "routerprotocol.routerchain.metastore.EventMetadataRequestCreated")
	proto.RegisterType((*EventMetaInfoCreated)(nil), "routerprotocol.routerchain.metastore.EventMetaInfoCreated")
	proto.RegisterType((*EventFeePayerApproved)(nil), "routerprotocol.routerchain.metastore.EventFeePayerApproved")
}

func init() { proto.RegisterFile("metastore/events.proto", fileDescriptor_ba5a0bd1a8eac694) }

var fileDescriptor_ba5a0bd1a8eac694 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x53, 0x3d, 0x6f, 0x13, 0x41,
	0x10, 0xf5, 0x3a, 0x26, 0x21, 0x0b, 0xa4, 0x38, 0x05, 0xb4, 0x72, 0xa4, 0xd5, 0x29, 0x02, 0xc9,
	0x0d, 0xb7, 0x04, 0x2a, 0xca, 0x10, 0x81, 0x70, 0x41, 0x84, 0x0e, 0x2a, 0x1a, 0x6b, 0xef, 0x76,
	0x62, 0x9f, 0xb0, 0x6f, 0x8e, 0xdd, 0x39, 0x2b, 0xfe, 0x17, 0xfc, 0x12, 0x7e, 0x02, 0xb4, 0x94,
	0x29, 0x29, 0x91, 0xfd, 0x47, 0xd0, 0xad, 0x7d, 0xe7, 0x4b, 0x8a, 0x54, 0x34, 0x69, 0x56, 0xfb,
	0xde, 0x7c, 0xe8, 0xbd, 0x27, 0x0d, 0x7f, 0x32, 0x03, 0xd2, 0x8e, 0xd0, 0x82, 0x82, 0x39, 0xe4,
	0xe4, 0xa2, 0xc2, 0x22, 0x61, 0xf0, 0xd4, 0x62, 0x49, 0x60, 0x3d, 0x48, 0x71, 0x1a, 0xad, 0x61,
	0x3a, 0xd1, 0x59, 0x1e, 0x35, 0x23, 0x7d, 0xb9, 0x9d, 0xae, 0x7e, 0x23, 0xba, 0x1c, 0x39, 0xd2,
	0x54, 0x6e, 0xb6, 0xf4, 0x8f, 0x66, 0xe5, 0x94, 0x32, 0x3f, 0xa5, 0xfc, 0x3b, 0xa2, 0x45, 0x01,
	0x9b, 0xa2, 0x4c, 0xd1, 0xcd, 0xd0, 0xa9, 0x44, 0x3b, 0x50, 0xf3, 0x93, 0x04, 0x48, 0x9f, 0xa8,
	0x14, 0xb3, 0x7c, 0x53, 0x3f, 0x1c, 0xe3, 0x18, 0xfd, 0x57, 0x55, 0xbf, 0x35, 0x7b, 0xfc, 0xa3,
	0xcb, 0x8f, 0xde, 0x56, 0x4a, 0x3f, 0x00, 0x69, 0xa3, 0x49, 0xc7, 0xf0, 0xad, 0x04, 0x47, 0x67,
	0x16, 0x34, 0x81, 0x09, 0x9e, 0xf1, 0x03, 0x4d, 0x04, 0x95, 0x8c, 0x0c, 0xf3, 0x51, 0x66, 0x04,
	0x0b, 0xd9, 0xe0, 0x61, 0xfc, 0xa8, 0xc5, 0x0e, 0x4d, 0x70, 0xce, 0xf7, 0xbd, 0xa0, 0xcf, 0x8b,
	0x02, 0x44, 0x37, 0x64, 0x83, 0x83, 0x97, 0x2f, 0xa2, 0xdb, 0x3c, 0x37, 0x46, 0xa2, 0xb3, 0x7a,
	0x2e, 0xde, 0xae, 0x08, 0x04, 0xdf, 0xf3, 0x60, 0x68, 0xc4, 0x4e, 0xc8, 0x06, 0xfb, 0x71, 0x0d,
	0x03, 0xc9, 0xb9, 0x4f, 0xf6, 0x1c, 0xf3, 0x14, 0x44, 0x2f, 0x64, 0x83, 0x5e, 0xdc, 0x62, 0x82,
	0x90, 0x3f, 0x48, 0xa6, 0x98, 0x7e, 0x7d, 0x0f, 0xd9, 0x78, 0x42, 0xe2, 0x9e, 0x6f, 0x68, 0x53,
	0x55, 0x87, 0xd1, 0xba, 0x38, 0x35, 0xc6, 0x82, 0x73, 0x62, 0xd7, 0xef, 0x6f, 0x53, 0x41, 0x9f,
	0xdf, 0xbf, 0x00, 0xf8, 0xa8, 0x17, 0x60, 0xc5, 0x9e, 0x2f, 0x37, 0xf8, 0xf8, 0x27, 0xe3, 0x87,
	0x4d, 0x60, 0xc3, 0xfc, 0x02, 0xeb, 0xa4, 0xae, 0x45, 0xc0, 0xfe, 0x6b, 0x04, 0xdd, 0xeb, 0x11,
	0xdc, 0x30, 0xb0, 0x73, 0xbb, 0x81, 0xde, 0x0d, 0x03, 0xbf, 0x18, 0x7f, 0xec, 0x0d, 0xbc, 0xdb,
	0x30, 0xa7, 0x45, 0x61, 0x71, 0x7e, 0x77, 0x1c, 0xbc, 0xf9, 0xf4, 0x7b, 0x29, 0xd9, 0xd5, 0x52,
	0xb2, 0xbf, 0x4b, 0xc9, 0xbe, 0xaf, 0x64, 0xe7, 0x6a, 0x25, 0x3b, 0x7f, 0x56, 0xb2, 0xf3, 0xe5,
	0xf5, 0x38, 0xa3, 0x49, 0x99, 0x44, 0x29, 0xce, 0xd4, 0x5a, 0xe9, 0xf3, 0x5a, 0x79, 0x8d, 0xd7,
	0xd7, 0x73, 0xa9, 0xb6, 0xa7, 0x56, 0xdd, 0x90, 0x4b, 0x76, 0x7d, 0xe3, 0xab, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x95, 0x21, 0x99, 0xc4, 0xc2, 0x03, 0x00, 0x00,
}

func (m *EventMetadataRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMetadataRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMetadataRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DaapAddress) > 0 {
		i -= len(m.DaapAddress)
		copy(dAtA[i:], m.DaapAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DaapAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMetaInfoCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMetaInfoCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMetaInfoCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DaapAddress) > 0 {
		i -= len(m.DaapAddress)
		copy(dAtA[i:], m.DaapAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DaapAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventFeePayerApproved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFeePayerApproved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFeePayerApproved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DaapAddress) > 0 {
		i -= len(m.DaapAddress)
		copy(dAtA[i:], m.DaapAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DaapAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventMetadataRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.DaapAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMetaInfoCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DaapAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventFeePayerApproved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DaapAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventMetadataRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMetadataRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMetadataRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaapAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaapAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMetaInfoCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMetaInfoCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMetaInfoCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaapAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaapAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFeePayerApproved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFeePayerApproved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFeePayerApproved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaapAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaapAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
