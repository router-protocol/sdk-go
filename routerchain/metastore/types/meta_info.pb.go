// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metastore/meta_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetaInfo struct {
	ChainType        types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId          string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DappAddress      string          `protobuf:"bytes,3,opt,name=dappAddress,proto3" json:"dappAddress,omitempty"`
	FeePayer         string          `protobuf:"bytes,4,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	FeePayerApproved bool            `protobuf:"varint,5,opt,name=feePayerApproved,proto3" json:"feePayerApproved,omitempty"`
}

func (m *MetaInfo) Reset()         { *m = MetaInfo{} }
func (m *MetaInfo) String() string { return proto.CompactTextString(m) }
func (*MetaInfo) ProtoMessage()    {}
func (*MetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6aebcf50204c79, []int{0}
}
func (m *MetaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaInfo.Merge(m, src)
}
func (m *MetaInfo) XXX_Size() int {
	return m.Size()
}
func (m *MetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MetaInfo proto.InternalMessageInfo

func (m *MetaInfo) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MetaInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MetaInfo) GetDappAddress() string {
	if m != nil {
		return m.DappAddress
	}
	return ""
}

func (m *MetaInfo) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *MetaInfo) GetFeePayerApproved() bool {
	if m != nil {
		return m.FeePayerApproved
	}
	return false
}

func init() {
	proto.RegisterType((*MetaInfo)(nil), "routerprotocol.routerchain.metastore.MetaInfo")
}

func init() { proto.RegisterFile("metastore/meta_info.proto", fileDescriptor_5a6aebcf50204c79) }

var fileDescriptor_5a6aebcf50204c79 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0x4d, 0x2d, 0x49,
	0x2c, 0x2e, 0xc9, 0x2f, 0x4a, 0xd5, 0x07, 0xb1, 0xe2, 0x33, 0xf3, 0xd2, 0xf2, 0xf5, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0x54, 0x8a, 0xf2, 0x4b, 0x4b, 0x52, 0x8b, 0xc0, 0x9c, 0xe4, 0xfc, 0x1c,
	0x3d, 0x08, 0x37, 0x39, 0x23, 0x31, 0x33, 0x4f, 0x0f, 0xae, 0x4b, 0x4a, 0x3a, 0xb7, 0x34, 0xa7,
	0x24, 0x13, 0x2c, 0xaa, 0x0f, 0x26, 0xe3, 0x4b, 0x2a, 0x0b, 0x52, 0x21, 0x46, 0x28, 0xdd, 0x63,
	0xe4, 0xe2, 0xf0, 0x4d, 0x2d, 0x49, 0xf4, 0xcc, 0x4b, 0xcb, 0x17, 0xf2, 0xe3, 0xe2, 0x04, 0x2b,
	0x08, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x32, 0xd0, 0xc3, 0x67, 0x07,
	0xdc, 0x60, 0x3d, 0x67, 0x98, 0xbe, 0x20, 0x84, 0x11, 0x42, 0x12, 0x5c, 0xec, 0x60, 0x8e, 0x67,
	0x8a, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0x2b, 0xa4, 0xc0, 0xc5, 0x9d, 0x92, 0x58,
	0x50, 0xe0, 0x98, 0x92, 0x52, 0x94, 0x5a, 0x5c, 0x2c, 0xc1, 0x0c, 0x96, 0x45, 0x16, 0x12, 0x92,
	0xe2, 0xe2, 0x48, 0x4b, 0x4d, 0x0d, 0x48, 0xac, 0x4c, 0x2d, 0x92, 0x60, 0x01, 0x4b, 0xc3, 0xf9,
	0x42, 0x5a, 0x5c, 0x02, 0x30, 0xb6, 0x63, 0x41, 0x41, 0x51, 0x7e, 0x59, 0x6a, 0x8a, 0x04, 0xab,
	0x02, 0xa3, 0x06, 0x47, 0x10, 0x86, 0xb8, 0x53, 0xf0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x44, 0x59, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43,
	0x7c, 0xa5, 0x0b, 0xf3, 0x25, 0x8c, 0x0f, 0x09, 0xb4, 0x0a, 0x7d, 0x44, 0x14, 0x80, 0x82, 0xae,
	0x38, 0x89, 0x0d, 0xac, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x09, 0x8b, 0x8d, 0x96, 0x9c,
	0x01, 0x00, 0x00,
}

func (m *MetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeePayerApproved {
		i--
		if m.FeePayerApproved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintMetaInfo(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DappAddress) > 0 {
		i -= len(m.DappAddress)
		copy(dAtA[i:], m.DappAddress)
		i = encodeVarintMetaInfo(dAtA, i, uint64(len(m.DappAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMetaInfo(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintMetaInfo(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetaInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetaInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovMetaInfo(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMetaInfo(uint64(l))
	}
	l = len(m.DappAddress)
	if l > 0 {
		n += 1 + l + sovMetaInfo(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovMetaInfo(uint64(l))
	}
	if m.FeePayerApproved {
		n += 2
	}
	return n
}

func sovMetaInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetaInfo(x uint64) (n int) {
	return sovMetaInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetaInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetaInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayerApproved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeePayerApproved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetaInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetaInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetaInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetaInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetaInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetaInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetaInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetaInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetaInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetaInfo = fmt.Errorf("proto: unexpected end of group")
)
