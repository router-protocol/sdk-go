// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inbound/incoming_tx.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IncomingTx struct {
	ChainType            types.ChainType  `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId              string           `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce           uint64           `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64           `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	SourceTxHash         string           `protobuf:"bytes,5,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	SourceSender         string           `protobuf:"bytes,6,opt,name=sourceSender,proto3" json:"sourceSender,omitempty"`
	RouterBridgeContract string           `protobuf:"bytes,7,opt,name=routerBridgeContract,proto3" json:"routerBridgeContract,omitempty"`
	Payload              string           `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	Status               IncomingTxStatus `protobuf:"varint,9,opt,name=status,proto3,enum=routerprotocol.routerchain.inbound.IncomingTxStatus" json:"status,omitempty"`
}

func (m *IncomingTx) Reset()         { *m = IncomingTx{} }
func (m *IncomingTx) String() string { return proto.CompactTextString(m) }
func (*IncomingTx) ProtoMessage()    {}
func (*IncomingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8ee1d07fc6f736f, []int{0}
}
func (m *IncomingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingTx.Merge(m, src)
}
func (m *IncomingTx) XXX_Size() int {
	return m.Size()
}
func (m *IncomingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingTx.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingTx proto.InternalMessageInfo

func (m *IncomingTx) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *IncomingTx) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *IncomingTx) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *IncomingTx) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *IncomingTx) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *IncomingTx) GetSourceSender() string {
	if m != nil {
		return m.SourceSender
	}
	return ""
}

func (m *IncomingTx) GetRouterBridgeContract() string {
	if m != nil {
		return m.RouterBridgeContract
	}
	return ""
}

func (m *IncomingTx) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *IncomingTx) GetStatus() IncomingTxStatus {
	if m != nil {
		return m.Status
	}
	return INCOMING_TX_CREATED
}

func init() {
	proto.RegisterType((*IncomingTx)(nil), "routerprotocol.routerchain.inbound.IncomingTx")
}

func init() { proto.RegisterFile("inbound/incoming_tx.proto", fileDescriptor_a8ee1d07fc6f736f) }

var fileDescriptor_a8ee1d07fc6f736f = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x5d, 0xdd, 0xdc, 0x5c, 0x14, 0x0f, 0xc1, 0x43, 0x9c, 0x50, 0xca, 0x4e, 0xbb, 0x98, 0xca,
	0x14, 0xbc, 0x6f, 0x97, 0x0d, 0x64, 0x60, 0xb7, 0x93, 0x97, 0xd1, 0xa6, 0xa1, 0x0d, 0x76, 0x49,
	0x49, 0x53, 0xe9, 0xfe, 0x85, 0x3f, 0xc0, 0x1f, 0xe4, 0x71, 0x47, 0x8f, 0xb2, 0xfd, 0x11, 0x59,
	0xd2, 0xd2, 0x09, 0x43, 0x2f, 0x85, 0xf7, 0xf2, 0xde, 0x4b, 0xbf, 0xef, 0x05, 0x5c, 0x33, 0x1e,
	0x88, 0x9c, 0x87, 0x2e, 0xe3, 0x44, 0xac, 0x18, 0x8f, 0x96, 0xaa, 0xc0, 0xa9, 0x14, 0x4a, 0xc0,
	0xbe, 0x14, 0xb9, 0xa2, 0x52, 0x03, 0x22, 0x12, 0x6c, 0x20, 0x89, 0x7d, 0xc6, 0x71, 0xe9, 0xea,
	0x39, 0x47, 0xec, 0xcb, 0x4c, 0xf9, 0x2a, 0xcf, 0x4c, 0x4a, 0xef, 0x66, 0x95, 0x27, 0x8a, 0x69,
	0x97, 0xab, 0xbf, 0x4b, 0xb5, 0x4e, 0xa9, 0x39, 0xec, 0x7f, 0x34, 0x01, 0x98, 0x96, 0xce, 0x45,
	0x01, 0x67, 0xa0, 0xab, 0x25, 0x8b, 0x75, 0x4a, 0x91, 0xe5, 0x58, 0x83, 0xcb, 0xe1, 0x1d, 0xfe,
	0xe3, 0x2f, 0xea, 0x68, 0x3c, 0xae, 0x7c, 0x5e, 0x1d, 0x01, 0x11, 0xe8, 0x68, 0x30, 0x0d, 0xd1,
	0x89, 0x63, 0x0d, 0xba, 0x5e, 0x05, 0xa1, 0x0d, 0x00, 0x7d, 0xa3, 0x5c, 0xcd, 0x04, 0x27, 0x14,
	0x35, 0x1d, 0x6b, 0xd0, 0xf2, 0x0e, 0x18, 0xe8, 0x80, 0xf3, 0x20, 0x11, 0xe4, 0x75, 0x42, 0x59,
	0x14, 0x2b, 0xd4, 0xd2, 0x82, 0x43, 0x0a, 0xf6, 0xc1, 0x45, 0x26, 0x72, 0x49, 0xe8, 0xa2, 0x98,
	0xf8, 0x59, 0x8c, 0x4e, 0xf5, 0x05, 0xbf, 0xb8, 0x5a, 0x33, 0xa7, 0x3c, 0xa4, 0x12, 0xb5, 0x0f,
	0x35, 0x86, 0x83, 0x43, 0x70, 0x65, 0x46, 0x1a, 0x49, 0x16, 0x46, 0x74, 0x2c, 0xb8, 0x92, 0x3e,
	0x51, 0xa8, 0xa3, 0xb5, 0x47, 0xcf, 0xf6, 0x73, 0xa5, 0xfe, 0x3a, 0x11, 0x7e, 0x88, 0xce, 0xcc,
	0x5c, 0x25, 0x84, 0x4f, 0xa0, 0x6d, 0xb6, 0x8f, 0xba, 0x7a, 0x7d, 0x0f, 0xf8, 0xff, 0x12, 0x71,
	0xdd, 0xc0, 0x5c, 0x7b, 0xbd, 0x32, 0x63, 0xf4, 0xfc, 0xb9, 0xb5, 0xad, 0xcd, 0xd6, 0xb6, 0xbe,
	0xb7, 0xb6, 0xf5, 0xbe, 0xb3, 0x1b, 0x9b, 0x9d, 0xdd, 0xf8, 0xda, 0xd9, 0x8d, 0x97, 0xc7, 0x88,
	0xa9, 0x38, 0x0f, 0x30, 0x11, 0x2b, 0xd7, 0x44, 0xde, 0x56, 0x57, 0x54, 0xd8, 0x54, 0x5e, 0xb8,
	0xd5, 0x0b, 0xd9, 0xd7, 0x9e, 0x05, 0x6d, 0x2d, 0xbb, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xdb,
	0x9a, 0x7b, 0xa8, 0x78, 0x02, 0x00, 0x00,
}

func (m *IncomingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintIncomingTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintIncomingTx(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RouterBridgeContract) > 0 {
		i -= len(m.RouterBridgeContract)
		copy(dAtA[i:], m.RouterBridgeContract)
		i = encodeVarintIncomingTx(dAtA, i, uint64(len(m.RouterBridgeContract)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SourceSender) > 0 {
		i -= len(m.SourceSender)
		copy(dAtA[i:], m.SourceSender)
		i = encodeVarintIncomingTx(dAtA, i, uint64(len(m.SourceSender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintIncomingTx(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintIncomingTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.EventNonce != 0 {
		i = encodeVarintIncomingTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintIncomingTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintIncomingTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncomingTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncomingTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IncomingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovIncomingTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovIncomingTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovIncomingTx(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIncomingTx(uint64(m.BlockHeight))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovIncomingTx(uint64(l))
	}
	l = len(m.SourceSender)
	if l > 0 {
		n += 1 + l + sovIncomingTx(uint64(l))
	}
	l = len(m.RouterBridgeContract)
	if l > 0 {
		n += 1 + l + sovIncomingTx(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovIncomingTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovIncomingTx(uint64(m.Status))
	}
	return n
}

func sovIncomingTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncomingTx(x uint64) (n int) {
	return sovIncomingTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IncomingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncomingTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncomingTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncomingTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncomingTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncomingTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncomingTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncomingTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterBridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncomingTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncomingTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterBridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncomingTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncomingTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IncomingTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncomingTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncomingTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncomingTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncomingTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncomingTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncomingTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncomingTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncomingTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncomingTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncomingTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncomingTx = fmt.Errorf("proto: unexpected end of group")
)
