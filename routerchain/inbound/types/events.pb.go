// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inbound/events.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventIncomingTxCreated struct {
	AttestationId        []byte                                 `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType            types.ChainType                        `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId              string                                 `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce           uint64                                 `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64                                 `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	SourceTxHash         string                                 `protobuf:"bytes,6,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	SourceTimestamp      uint64                                 `protobuf:"varint,7,opt,name=sourceTimestamp,proto3" json:"sourceTimestamp,omitempty"`
	SourceSender         string                                 `protobuf:"bytes,8,opt,name=sourceSender,proto3" json:"sourceSender,omitempty"`
	RouterBridgeContract string                                 `protobuf:"bytes,9,opt,name=routerBridgeContract,proto3" json:"routerBridgeContract,omitempty"`
	Payload              []byte                                 `protobuf:"bytes,10,opt,name=payload,proto3" json:"payload,omitempty"`
	GasLimit             uint64                                 `protobuf:"varint,11,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	FeePayer             []byte                                 `protobuf:"bytes,12,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	RouteAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,13,opt,name=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"routeAmount"`
	RouteRecipient       []byte                                 `protobuf:"bytes,14,opt,name=routeRecipient,proto3" json:"routeRecipient,omitempty"`
	Status               IncomingTxStatus                       `protobuf:"varint,15,opt,name=status,proto3,enum=routerprotocol.routerchain.inbound.IncomingTxStatus" json:"status,omitempty"`
}

func (m *EventIncomingTxCreated) Reset()         { *m = EventIncomingTxCreated{} }
func (m *EventIncomingTxCreated) String() string { return proto.CompactTextString(m) }
func (*EventIncomingTxCreated) ProtoMessage()    {}
func (*EventIncomingTxCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_c68545bf45595e04, []int{0}
}
func (m *EventIncomingTxCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIncomingTxCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIncomingTxCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIncomingTxCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIncomingTxCreated.Merge(m, src)
}
func (m *EventIncomingTxCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventIncomingTxCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIncomingTxCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventIncomingTxCreated proto.InternalMessageInfo

func (m *EventIncomingTxCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventIncomingTxCreated) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventIncomingTxCreated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventIncomingTxCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventIncomingTxCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventIncomingTxCreated) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *EventIncomingTxCreated) GetSourceTimestamp() uint64 {
	if m != nil {
		return m.SourceTimestamp
	}
	return 0
}

func (m *EventIncomingTxCreated) GetSourceSender() string {
	if m != nil {
		return m.SourceSender
	}
	return ""
}

func (m *EventIncomingTxCreated) GetRouterBridgeContract() string {
	if m != nil {
		return m.RouterBridgeContract
	}
	return ""
}

func (m *EventIncomingTxCreated) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *EventIncomingTxCreated) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *EventIncomingTxCreated) GetFeePayer() []byte {
	if m != nil {
		return m.FeePayer
	}
	return nil
}

func (m *EventIncomingTxCreated) GetRouteRecipient() []byte {
	if m != nil {
		return m.RouteRecipient
	}
	return nil
}

func (m *EventIncomingTxCreated) GetStatus() IncomingTxStatus {
	if m != nil {
		return m.Status
	}
	return INCOMING_TX_CREATED
}

type EventIncomingTxReadyToExecute struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	TxFeeInRoute    types1.Coin     `protobuf:"bytes,5,opt,name=txFeeInRoute,proto3" json:"txFeeInRoute"`
}

func (m *EventIncomingTxReadyToExecute) Reset()         { *m = EventIncomingTxReadyToExecute{} }
func (m *EventIncomingTxReadyToExecute) String() string { return proto.CompactTextString(m) }
func (*EventIncomingTxReadyToExecute) ProtoMessage()    {}
func (*EventIncomingTxReadyToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_c68545bf45595e04, []int{1}
}
func (m *EventIncomingTxReadyToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIncomingTxReadyToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIncomingTxReadyToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIncomingTxReadyToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIncomingTxReadyToExecute.Merge(m, src)
}
func (m *EventIncomingTxReadyToExecute) XXX_Size() int {
	return m.Size()
}
func (m *EventIncomingTxReadyToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIncomingTxReadyToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_EventIncomingTxReadyToExecute proto.InternalMessageInfo

func (m *EventIncomingTxReadyToExecute) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventIncomingTxReadyToExecute) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventIncomingTxReadyToExecute) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventIncomingTxReadyToExecute) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventIncomingTxReadyToExecute) GetTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.TxFeeInRoute
	}
	return types1.Coin{}
}

type EventIncomingTxExecuted struct {
	AttestationId      []byte          `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType          types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId            string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce         uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	DelegationResponse []byte          `protobuf:"bytes,5,opt,name=delegationResponse,proto3" json:"delegationResponse,omitempty"`
	RefundFeeInRoute   types1.Coin     `protobuf:"bytes,6,opt,name=refundFeeInRoute,proto3" json:"refundFeeInRoute"`
}

func (m *EventIncomingTxExecuted) Reset()         { *m = EventIncomingTxExecuted{} }
func (m *EventIncomingTxExecuted) String() string { return proto.CompactTextString(m) }
func (*EventIncomingTxExecuted) ProtoMessage()    {}
func (*EventIncomingTxExecuted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c68545bf45595e04, []int{2}
}
func (m *EventIncomingTxExecuted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIncomingTxExecuted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIncomingTxExecuted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIncomingTxExecuted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIncomingTxExecuted.Merge(m, src)
}
func (m *EventIncomingTxExecuted) XXX_Size() int {
	return m.Size()
}
func (m *EventIncomingTxExecuted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIncomingTxExecuted.DiscardUnknown(m)
}

var xxx_messageInfo_EventIncomingTxExecuted proto.InternalMessageInfo

func (m *EventIncomingTxExecuted) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventIncomingTxExecuted) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventIncomingTxExecuted) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventIncomingTxExecuted) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventIncomingTxExecuted) GetDelegationResponse() []byte {
	if m != nil {
		return m.DelegationResponse
	}
	return nil
}

func (m *EventIncomingTxExecuted) GetRefundFeeInRoute() types1.Coin {
	if m != nil {
		return m.RefundFeeInRoute
	}
	return types1.Coin{}
}

type EventIncomingTxExecutionFailed struct {
	AttestationId           []byte          `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType               types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId                 string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce              uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	DelegationErrorResponse string          `protobuf:"bytes,5,opt,name=delegationErrorResponse,proto3" json:"delegationErrorResponse,omitempty"`
	RefundFeeInRoute        types1.Coin     `protobuf:"bytes,6,opt,name=refundFeeInRoute,proto3" json:"refundFeeInRoute"`
}

func (m *EventIncomingTxExecutionFailed) Reset()         { *m = EventIncomingTxExecutionFailed{} }
func (m *EventIncomingTxExecutionFailed) String() string { return proto.CompactTextString(m) }
func (*EventIncomingTxExecutionFailed) ProtoMessage()    {}
func (*EventIncomingTxExecutionFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_c68545bf45595e04, []int{3}
}
func (m *EventIncomingTxExecutionFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventIncomingTxExecutionFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventIncomingTxExecutionFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventIncomingTxExecutionFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventIncomingTxExecutionFailed.Merge(m, src)
}
func (m *EventIncomingTxExecutionFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventIncomingTxExecutionFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventIncomingTxExecutionFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventIncomingTxExecutionFailed proto.InternalMessageInfo

func (m *EventIncomingTxExecutionFailed) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventIncomingTxExecutionFailed) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventIncomingTxExecutionFailed) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventIncomingTxExecutionFailed) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventIncomingTxExecutionFailed) GetDelegationErrorResponse() string {
	if m != nil {
		return m.DelegationErrorResponse
	}
	return ""
}

func (m *EventIncomingTxExecutionFailed) GetRefundFeeInRoute() types1.Coin {
	if m != nil {
		return m.RefundFeeInRoute
	}
	return types1.Coin{}
}

func init() {
	proto.RegisterType((*EventIncomingTxCreated)(nil), "routerprotocol.routerchain.inbound.EventIncomingTxCreated")
	proto.RegisterType((*EventIncomingTxReadyToExecute)(nil), "routerprotocol.routerchain.inbound.EventIncomingTxReadyToExecute")
	proto.RegisterType((*EventIncomingTxExecuted)(nil), "routerprotocol.routerchain.inbound.EventIncomingTxExecuted")
	proto.RegisterType((*EventIncomingTxExecutionFailed)(nil), "routerprotocol.routerchain.inbound.EventIncomingTxExecutionFailed")
}

func init() { proto.RegisterFile("inbound/events.proto", fileDescriptor_c68545bf45595e04) }

var fileDescriptor_c68545bf45595e04 = []byte{
	// 720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x4d, 0x4f, 0xe3, 0x46,
	0x18, 0x8e, 0x43, 0x08, 0x64, 0x12, 0x42, 0x35, 0x42, 0x65, 0x4a, 0x5b, 0x13, 0x45, 0x2d, 0xca,
	0x85, 0x71, 0xa1, 0x95, 0xda, 0x6b, 0x13, 0x81, 0x88, 0x16, 0x21, 0xd6, 0xe4, 0xc4, 0x25, 0x9a,
	0xd8, 0x2f, 0xce, 0x88, 0x78, 0x26, 0xb2, 0xc7, 0x28, 0xf9, 0x17, 0xfb, 0x23, 0xf6, 0xb6, 0x3f,
	0x64, 0x39, 0x72, 0x44, 0x7b, 0x40, 0x2b, 0xf8, 0x23, 0x2b, 0x8f, 0x6d, 0xe2, 0x04, 0xf6, 0x43,
	0xab, 0xbd, 0x70, 0x49, 0xfc, 0x3c, 0xef, 0xbc, 0x1f, 0xf3, 0xcc, 0x33, 0x36, 0xda, 0xe0, 0x62,
	0x20, 0x23, 0xe1, 0x5a, 0x70, 0x05, 0x42, 0x85, 0x74, 0x1c, 0x48, 0x25, 0x71, 0x33, 0x90, 0x91,
	0x82, 0x40, 0x03, 0x47, 0x8e, 0x68, 0x02, 0x9d, 0x21, 0xe3, 0x82, 0xa6, 0x09, 0x5b, 0x8d, 0x2c,
	0x93, 0x0b, 0x47, 0xfa, 0x5c, 0x78, 0x7d, 0x35, 0xe9, 0x87, 0x8a, 0xa9, 0x28, 0xad, 0xb2, 0xf5,
	0xab, 0x1f, 0x8d, 0x14, 0xd7, 0x59, 0x96, 0xfe, 0xed, 0xab, 0xe9, 0x18, 0xd2, 0xa0, 0xe9, 0xc8,
	0xd0, 0x97, 0xa1, 0x35, 0x60, 0x21, 0x58, 0x57, 0x7b, 0x03, 0x50, 0x6c, 0xcf, 0x72, 0x24, 0x17,
	0x69, 0x7c, 0xc3, 0x93, 0x9e, 0xd4, 0x8f, 0x56, 0xfc, 0x94, 0xb0, 0xcd, 0x77, 0xcb, 0xe8, 0xe7,
	0x83, 0x78, 0xd2, 0x6e, 0xda, 0xb4, 0x37, 0xe9, 0x04, 0xc0, 0x14, 0xb8, 0xf8, 0x4f, 0x54, 0x67,
	0x4a, 0x41, 0x3c, 0x01, 0x97, 0xa2, 0xcf, 0x5d, 0x62, 0x34, 0x8c, 0x56, 0xcd, 0x5e, 0xcb, 0xb1,
	0x5d, 0x17, 0x9f, 0xa0, 0x8a, 0x9e, 0xa5, 0x37, 0x1d, 0x03, 0x29, 0x36, 0x8c, 0x56, 0x7d, 0xff,
	0x2f, 0xfa, 0x85, 0xed, 0xce, 0xf6, 0x40, 0x3b, 0x59, 0x9e, 0x3d, 0x2b, 0x81, 0x09, 0x5a, 0xd1,
	0xa0, 0xeb, 0x92, 0xa5, 0x86, 0xd1, 0xaa, 0xd8, 0x19, 0xc4, 0x26, 0x42, 0x5a, 0xd4, 0x13, 0x29,
	0x1c, 0x20, 0xa5, 0x86, 0xd1, 0x2a, 0xd9, 0x39, 0x06, 0x37, 0x50, 0x75, 0x30, 0x92, 0xce, 0xe5,
	0x11, 0x70, 0x6f, 0xa8, 0xc8, 0xb2, 0x5e, 0x90, 0xa7, 0x70, 0x13, 0xd5, 0x42, 0x19, 0x05, 0x0e,
	0xf4, 0x26, 0x47, 0x2c, 0x1c, 0x92, 0xb2, 0x6e, 0x30, 0xc7, 0xe1, 0x16, 0x5a, 0x4f, 0x31, 0xf7,
	0xe3, 0x6d, 0xfa, 0x63, 0xb2, 0xa2, 0x2b, 0x2d, 0xd2, 0xb3, 0x6a, 0x67, 0x20, 0x5c, 0x08, 0xc8,
	0x6a, 0xbe, 0x5a, 0xc2, 0xe1, 0x7d, 0xb4, 0x91, 0x6c, 0xbe, 0x1d, 0x70, 0xd7, 0x83, 0x8e, 0x14,
	0x2a, 0x60, 0x8e, 0x22, 0x15, 0xbd, 0xf6, 0xd9, 0x58, 0xac, 0xc0, 0x98, 0x4d, 0x47, 0x92, 0xb9,
	0x04, 0x69, 0xc5, 0x33, 0x88, 0xb7, 0xd0, 0xaa, 0xc7, 0xc2, 0x63, 0xee, 0x73, 0x45, 0xaa, 0x7a,
	0xa8, 0x47, 0x1c, 0xc7, 0x2e, 0x00, 0x4e, 0xd9, 0x14, 0x02, 0x52, 0xd3, 0x69, 0x8f, 0x18, 0x9f,
	0xa2, 0xaa, 0xee, 0xf4, 0xbf, 0x2f, 0x23, 0xa1, 0xc8, 0x5a, 0xdc, 0xbc, 0x4d, 0xaf, 0xef, 0xb6,
	0x0b, 0x1f, 0xee, 0xb6, 0x77, 0x3c, 0xae, 0x86, 0xd1, 0x80, 0x3a, 0xd2, 0xb7, 0x52, 0x0f, 0x25,
	0x7f, 0xbb, 0xa1, 0x7b, 0x69, 0xc5, 0x0e, 0x0b, 0x69, 0x57, 0x28, 0x3b, 0x5f, 0x02, 0xef, 0xa0,
	0xba, 0x86, 0x36, 0x38, 0x7c, 0xcc, 0x41, 0x28, 0x52, 0xd7, 0x3d, 0x17, 0x58, 0x7c, 0x8c, 0xca,
	0x89, 0x85, 0xc9, 0xba, 0xb6, 0xc6, 0x3f, 0xf4, 0xeb, 0x37, 0x81, 0xce, 0xbc, 0x78, 0xa6, 0x73,
	0xed, 0xb4, 0x46, 0xf3, 0x6d, 0x11, 0xfd, 0xbe, 0xe0, 0x56, 0x1b, 0x98, 0x3b, 0xed, 0xc9, 0x83,
	0x09, 0x38, 0x91, 0x02, 0x7c, 0x9e, 0x9d, 0xde, 0xa3, 0xb7, 0xb4, 0x6b, 0xbf, 0xc7, 0x93, 0x8b,
	0x85, 0xf0, 0x1f, 0x68, 0x2d, 0x47, 0x75, 0x5d, 0xed, 0xf6, 0x8a, 0x3d, 0x4f, 0x2e, 0xb8, 0x74,
	0xe9, 0x89, 0x4b, 0x7f, 0x43, 0x15, 0x67, 0xc4, 0xb8, 0xaf, 0x0d, 0x58, 0xd2, 0xa2, 0xcd, 0x08,
	0xdc, 0x41, 0x35, 0x35, 0x39, 0x04, 0xe8, 0x0a, 0x3b, 0x9e, 0x4f, 0x9b, 0xb8, 0xba, 0xff, 0x0b,
	0x4d, 0x4e, 0x84, 0xc6, 0x97, 0x9b, 0xa6, 0x97, 0x9b, 0x76, 0x24, 0x17, 0xed, 0x52, 0x7c, 0x8a,
	0xf6, 0x5c, 0x52, 0xf3, 0x7d, 0x11, 0x6d, 0x2e, 0xc8, 0x94, 0xea, 0xf3, 0x02, 0x6f, 0x35, 0x45,
	0xd8, 0x85, 0x11, 0x78, 0x7a, 0x32, 0x1b, 0xc2, 0xb1, 0x14, 0x61, 0xa2, 0x4b, 0xcd, 0x7e, 0x26,
	0x82, 0x5f, 0xa1, 0x9f, 0x02, 0xb8, 0x88, 0x84, 0x9b, 0x53, 0xb1, 0xfc, 0x6d, 0x2a, 0x3e, 0x49,
	0x6c, 0xde, 0x16, 0x91, 0xf9, 0xac, 0x92, 0x5c, 0x8a, 0x43, 0xc6, 0x47, 0x2f, 0x51, 0xd0, 0xff,
	0xd0, 0xe6, 0x4c, 0xb6, 0x83, 0x20, 0x90, 0xc1, 0x9c, 0xaa, 0x15, 0xfb, 0x73, 0xe1, 0x1f, 0x2a,
	0x6d, 0xfb, 0xf5, 0xf5, 0xbd, 0x69, 0xdc, 0xdc, 0x9b, 0xc6, 0xc7, 0x7b, 0xd3, 0x78, 0xf3, 0x60,
	0x16, 0x6e, 0x1e, 0xcc, 0xc2, 0xed, 0x83, 0x59, 0x38, 0xff, 0x37, 0xf7, 0x42, 0x4a, 0x24, 0xd9,
	0xcd, 0x24, 0xca, 0x70, 0xf2, 0x0d, 0x9c, 0x58, 0xd9, 0x27, 0x53, 0xbf, 0xa5, 0x06, 0x65, 0xbd,
	0xec, 0xef, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x21, 0x52, 0x1b, 0x84, 0x07, 0x00, 0x00,
}

func (m *EventIncomingTxCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIncomingTxCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIncomingTxCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x78
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x72
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x62
	}
	if m.GasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RouterBridgeContract) > 0 {
		i -= len(m.RouterBridgeContract)
		copy(dAtA[i:], m.RouterBridgeContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RouterBridgeContract)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SourceSender) > 0 {
		i -= len(m.SourceSender)
		copy(dAtA[i:], m.SourceSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceSender)))
		i--
		dAtA[i] = 0x42
	}
	if m.SourceTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventIncomingTxReadyToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIncomingTxReadyToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIncomingTxReadyToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventIncomingTxExecuted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIncomingTxExecuted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIncomingTxExecuted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.DelegationResponse) > 0 {
		i -= len(m.DelegationResponse)
		copy(dAtA[i:], m.DelegationResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DelegationResponse)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventIncomingTxExecutionFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventIncomingTxExecutionFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventIncomingTxExecutionFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.DelegationErrorResponse) > 0 {
		i -= len(m.DelegationErrorResponse)
		copy(dAtA[i:], m.DelegationErrorResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DelegationErrorResponse)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventIncomingTxCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SourceTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.SourceTimestamp))
	}
	l = len(m.SourceSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RouterBridgeContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovEvents(uint64(m.GasLimit))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	return n
}

func (m *EventIncomingTxReadyToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TxFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventIncomingTxExecuted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.DelegationResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.RefundFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventIncomingTxExecutionFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.DelegationErrorResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.RefundFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventIncomingTxCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIncomingTxCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIncomingTxCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTimestamp", wireType)
			}
			m.SourceTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterBridgeContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterBridgeContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = append(m.FeePayer[:0], dAtA[iNdEx:postIndex]...)
			if m.FeePayer == nil {
				m.FeePayer = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = append(m.RouteRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteRecipient == nil {
				m.RouteRecipient = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IncomingTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventIncomingTxReadyToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIncomingTxReadyToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIncomingTxReadyToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventIncomingTxExecuted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIncomingTxExecuted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIncomingTxExecuted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationResponse = append(m.DelegationResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationResponse == nil {
				m.DelegationResponse = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventIncomingTxExecutionFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventIncomingTxExecutionFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventIncomingTxExecutionFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationErrorResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationErrorResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
