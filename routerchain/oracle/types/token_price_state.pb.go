// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/token_price_state.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenPriceState struct {
	Price           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	CumulativePrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=cumulativePrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cumulativePrice"`
	Timestamp       int64                                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TokenPriceState) Reset()         { *m = TokenPriceState{} }
func (m *TokenPriceState) String() string { return proto.CompactTextString(m) }
func (*TokenPriceState) ProtoMessage()    {}
func (*TokenPriceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_738f6cc37e66c815, []int{0}
}
func (m *TokenPriceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPriceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPriceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPriceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPriceState.Merge(m, src)
}
func (m *TokenPriceState) XXX_Size() int {
	return m.Size()
}
func (m *TokenPriceState) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPriceState.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPriceState proto.InternalMessageInfo

func (m *TokenPriceState) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*TokenPriceState)(nil), "routerprotocol.routerchain.oracle.TokenPriceState")
}

func init() { proto.RegisterFile("oracle/token_price_state.proto", fileDescriptor_738f6cc37e66c815) }

var fileDescriptor_738f6cc37e66c815 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0xcf, 0x4a, 0xc3, 0x30,
	0x18, 0x6f, 0x1c, 0x0a, 0xeb, 0x65, 0x50, 0x3c, 0x8c, 0x21, 0xd9, 0xf4, 0x20, 0xbb, 0x2c, 0x61,
	0x08, 0x3e, 0xc0, 0xd8, 0x03, 0x8c, 0xe9, 0x41, 0xbc, 0x8c, 0x34, 0x7e, 0x6c, 0x61, 0x6d, 0xbf,
	0xd2, 0x7c, 0x1d, 0xfa, 0x16, 0x3e, 0xd6, 0x6e, 0xee, 0x28, 0x1e, 0x86, 0xb4, 0x2f, 0x22, 0x4d,
	0x2c, 0x8a, 0x47, 0x4f, 0xc9, 0x2f, 0xf9, 0x7e, 0x7f, 0xf8, 0x7d, 0x21, 0xc7, 0x42, 0xe9, 0x04,
	0x24, 0xe1, 0x16, 0xb2, 0x55, 0x5e, 0x18, 0x0d, 0x2b, 0x4b, 0x8a, 0x40, 0xe4, 0x05, 0x12, 0x46,
	0x97, 0x05, 0x96, 0x04, 0x85, 0x03, 0x1a, 0x13, 0xe1, 0xa1, 0xde, 0x28, 0x93, 0x09, 0x4f, 0x1d,
	0x9c, 0xaf, 0x71, 0x8d, 0x6e, 0x40, 0x36, 0x37, 0x4f, 0x1c, 0x70, 0x8d, 0x36, 0x45, 0x2b, 0x63,
	0x65, 0x41, 0xee, 0xa6, 0x31, 0x90, 0x9a, 0x4a, 0x8d, 0x26, 0xf3, 0xff, 0x57, 0x6f, 0x2c, 0xec,
	0xdd, 0x37, 0xa6, 0x8b, 0xc6, 0xf3, 0xae, 0xb1, 0x8c, 0xe6, 0xe1, 0xa9, 0x4b, 0xd0, 0x67, 0x23,
	0x36, 0xee, 0xce, 0xc4, 0xfe, 0x38, 0x0c, 0x3e, 0x8e, 0xc3, 0xeb, 0xb5, 0xa1, 0x4d, 0x19, 0x0b,
	0x8d, 0xa9, 0xfc, 0x56, 0xf5, 0xc7, 0xc4, 0x3e, 0x6d, 0x25, 0xbd, 0xe4, 0x60, 0xc5, 0x1c, 0xf4,
	0xd2, 0x93, 0xa3, 0x87, 0xb0, 0xa7, 0xcb, 0xb4, 0x4c, 0x14, 0x99, 0x1d, 0x38, 0xf5, 0xfe, 0xc9,
	0xbf, 0xf4, 0xfe, 0xca, 0x44, 0x17, 0x61, 0x97, 0x4c, 0x0a, 0x96, 0x54, 0x9a, 0xf7, 0x3b, 0x23,
	0x36, 0xee, 0x2c, 0x7f, 0x1e, 0x66, 0x8b, 0x7d, 0xc5, 0xd9, 0xa1, 0xe2, 0xec, 0xb3, 0xe2, 0xec,
	0xb5, 0xe6, 0xc1, 0xa1, 0xe6, 0xc1, 0x7b, 0xcd, 0x83, 0xc7, 0xdb, 0x5f, 0x86, 0xbe, 0xc0, 0x49,
	0x5b, 0x68, 0x8b, 0x5d, 0xa3, 0xf2, 0x59, 0xb6, 0xeb, 0x68, 0x42, 0xc4, 0x67, 0x6e, 0xea, 0xe6,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x0a, 0x12, 0x3e, 0xa5, 0x01, 0x00, 0x00,
}

func (m *TokenPriceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPriceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPriceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTokenPriceState(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.CumulativePrice.Size()
		i -= size
		if _, err := m.CumulativePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokenPriceState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokenPriceState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTokenPriceState(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenPriceState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenPriceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovTokenPriceState(uint64(l))
	l = m.CumulativePrice.Size()
	n += 1 + l + sovTokenPriceState(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovTokenPriceState(uint64(m.Timestamp))
	}
	return n
}

func sovTokenPriceState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenPriceState(x uint64) (n int) {
	return sovTokenPriceState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenPriceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenPriceState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPriceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPriceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPriceState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenPriceState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenPriceState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPriceState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenPriceState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenPriceState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPriceState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenPriceState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenPriceState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenPriceState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenPriceState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenPriceState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenPriceState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenPriceState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenPriceState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenPriceState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenPriceState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenPriceState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenPriceState = fmt.Errorf("proto: unexpected end of group")
)
