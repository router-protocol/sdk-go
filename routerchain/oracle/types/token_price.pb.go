// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/token_price.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenPrice struct {
	Symbol     string                                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TokenPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=tokenPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tokenPrice"`
	Decimals   uint64                                 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Timestamp  uint64                                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TokenPrice) Reset()         { *m = TokenPrice{} }
func (m *TokenPrice) String() string { return proto.CompactTextString(m) }
func (*TokenPrice) ProtoMessage()    {}
func (*TokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_77cf10cdbd0dd626, []int{0}
}
func (m *TokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPrice.Merge(m, src)
}
func (m *TokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *TokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPrice proto.InternalMessageInfo

func (m *TokenPrice) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenPrice) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *TokenPrice) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*TokenPrice)(nil), "routerprotocol.routerchain.oracle.TokenPrice")
}

func init() { proto.RegisterFile("oracle/token_price.proto", fileDescriptor_77cf10cdbd0dd626) }

var fileDescriptor_77cf10cdbd0dd626 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x1b, 0x1d, 0xc3, 0xe5, 0x58, 0x44, 0x4a, 0x91, 0x6c, 0x7a, 0x90, 0x5d, 0x96, 0x30,
	0x04, 0x1f, 0x60, 0x78, 0x96, 0x51, 0x3c, 0x79, 0x91, 0x34, 0x0b, 0x5d, 0x58, 0xd3, 0x7f, 0x69,
	0x32, 0x71, 0x6f, 0xe1, 0x93, 0xf8, 0x1c, 0x3b, 0xee, 0x28, 0x1e, 0x86, 0xb4, 0x2f, 0x22, 0x4d,
	0xd6, 0x6d, 0xa7, 0xe4, 0x97, 0xef, 0xfb, 0xe7, 0xfb, 0xf3, 0xe1, 0x08, 0x2a, 0x2e, 0x72, 0xc9,
	0x2c, 0xac, 0x64, 0xf1, 0x5e, 0x56, 0x4a, 0x48, 0x5a, 0x56, 0x60, 0x21, 0xbc, 0xab, 0x60, 0x6d,
	0x65, 0xe5, 0x40, 0x40, 0x4e, 0x3d, 0x8a, 0x25, 0x57, 0x05, 0xf5, 0x43, 0xf1, 0x75, 0x06, 0x19,
	0x38, 0x03, 0x6b, 0x6f, 0x7e, 0x30, 0x26, 0x02, 0x8c, 0x06, 0xc3, 0x52, 0x6e, 0x24, 0xfb, 0x98,
	0xa6, 0xd2, 0xf2, 0x29, 0x13, 0xa0, 0x0a, 0xaf, 0xdf, 0x7f, 0x23, 0x8c, 0x5f, 0xdb, 0xb8, 0x79,
	0x9b, 0x16, 0xde, 0xe0, 0xbe, 0xd9, 0xe8, 0x14, 0xf2, 0x08, 0x8d, 0xd0, 0x78, 0x90, 0x1c, 0x28,
	0x7c, 0xc1, 0xd8, 0x1e, 0x5d, 0xd1, 0x45, 0xab, 0xcd, 0xe8, 0x76, 0x3f, 0x0c, 0x7e, 0xf7, 0xc3,
	0x87, 0x4c, 0xd9, 0xe5, 0x3a, 0xa5, 0x02, 0x34, 0x3b, 0xa4, 0xf9, 0x63, 0x62, 0x16, 0x2b, 0x66,
	0x37, 0xa5, 0x34, 0xf4, 0x59, 0x8a, 0xe4, 0xec, 0x87, 0x30, 0xc6, 0x57, 0x0b, 0x29, 0x94, 0xe6,
	0xb9, 0x89, 0x2e, 0x47, 0x68, 0xdc, 0x4b, 0x8e, 0x1c, 0xde, 0xe2, 0x81, 0x55, 0x5a, 0x1a, 0xcb,
	0x75, 0x19, 0xf5, 0x9c, 0x78, 0x7a, 0x98, 0xcd, 0xb7, 0x35, 0x41, 0xbb, 0x9a, 0xa0, 0xbf, 0x9a,
	0xa0, 0xaf, 0x86, 0x04, 0xbb, 0x86, 0x04, 0x3f, 0x0d, 0x09, 0xde, 0x9e, 0xce, 0xf6, 0xf0, 0xfd,
	0x4c, 0xba, 0xbe, 0x3a, 0x76, 0x85, 0xb1, 0x4f, 0xd6, 0xf5, 0xdc, 0xee, 0x96, 0xf6, 0x9d, 0xeb,
	0xf1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xf8, 0xf2, 0x37, 0x7e, 0x01, 0x00, 0x00,
}

func (m *TokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTokenPrice(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.Decimals != 0 {
		i = encodeVarintTokenPrice(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TokenPrice.Size()
		i -= size
		if _, err := m.TokenPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokenPrice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTokenPrice(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenPrice(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenPrice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTokenPrice(uint64(l))
	}
	l = m.TokenPrice.Size()
	n += 1 + l + sovTokenPrice(uint64(l))
	if m.Decimals != 0 {
		n += 1 + sovTokenPrice(uint64(m.Decimals))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTokenPrice(uint64(m.Timestamp))
	}
	return n
}

func sovTokenPrice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenPrice(x uint64) (n int) {
	return sovTokenPrice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTokenPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenPrice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenPrice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenPrice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenPrice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenPrice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenPrice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenPrice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenPrice = fmt.Errorf("proto: unexpected end of group")
)
