// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgBandTokenPricesData struct {
	Creator        string                                   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OracleScriptID uint64                                   `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty" yaml:"oracle_script_id"`
	SourceChannel  string                                   `protobuf:"bytes,3,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
	Calldata       *BandTokenPricesCallData                 `protobuf:"bytes,4,opt,name=calldata,proto3" json:"calldata,omitempty"`
	AskCount       uint64                                   `protobuf:"varint,5,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	MinCount       uint64                                   `protobuf:"varint,6,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	FeeLimit       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit"`
	PrepareGas     uint64                                   `protobuf:"varint,8,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty"`
	ExecuteGas     uint64                                   `protobuf:"varint,9,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty"`
	ClientID       string                                   `protobuf:"bytes,10,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *MsgBandTokenPricesData) Reset()         { *m = MsgBandTokenPricesData{} }
func (m *MsgBandTokenPricesData) String() string { return proto.CompactTextString(m) }
func (*MsgBandTokenPricesData) ProtoMessage()    {}
func (*MsgBandTokenPricesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{0}
}
func (m *MsgBandTokenPricesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBandTokenPricesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBandTokenPricesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBandTokenPricesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBandTokenPricesData.Merge(m, src)
}
func (m *MsgBandTokenPricesData) XXX_Size() int {
	return m.Size()
}
func (m *MsgBandTokenPricesData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBandTokenPricesData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBandTokenPricesData proto.InternalMessageInfo

func (m *MsgBandTokenPricesData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBandTokenPricesData) GetOracleScriptID() uint64 {
	if m != nil {
		return m.OracleScriptID
	}
	return 0
}

func (m *MsgBandTokenPricesData) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *MsgBandTokenPricesData) GetCalldata() *BandTokenPricesCallData {
	if m != nil {
		return m.Calldata
	}
	return nil
}

func (m *MsgBandTokenPricesData) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *MsgBandTokenPricesData) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *MsgBandTokenPricesData) GetFeeLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *MsgBandTokenPricesData) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *MsgBandTokenPricesData) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

func (m *MsgBandTokenPricesData) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type MsgBandTokenPricesDataResponse struct {
}

func (m *MsgBandTokenPricesDataResponse) Reset()         { *m = MsgBandTokenPricesDataResponse{} }
func (m *MsgBandTokenPricesDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBandTokenPricesDataResponse) ProtoMessage()    {}
func (*MsgBandTokenPricesDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{1}
}
func (m *MsgBandTokenPricesDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBandTokenPricesDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBandTokenPricesDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBandTokenPricesDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBandTokenPricesDataResponse.Merge(m, src)
}
func (m *MsgBandTokenPricesDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBandTokenPricesDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBandTokenPricesDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBandTokenPricesDataResponse proto.InternalMessageInfo

type MsgCreateBandOracleRequest struct {
	Creator        string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId      uint64   `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	OracleScriptId uint64   `protobuf:"varint,3,opt,name=oracleScriptId,proto3" json:"oracleScriptId,omitempty"`
	Symbols        []string `protobuf:"bytes,4,rep,name=symbols,proto3" json:"symbols,omitempty"`
	AskCount       uint64   `protobuf:"varint,5,opt,name=askCount,proto3" json:"askCount,omitempty"`
	MinCount       uint64   `protobuf:"varint,6,opt,name=minCount,proto3" json:"minCount,omitempty"`
	PrepareGas     uint64   `protobuf:"varint,7,opt,name=prepareGas,proto3" json:"prepareGas,omitempty"`
	ExecuteGas     uint64   `protobuf:"varint,8,opt,name=executeGas,proto3" json:"executeGas,omitempty"`
}

func (m *MsgCreateBandOracleRequest) Reset()         { *m = MsgCreateBandOracleRequest{} }
func (m *MsgCreateBandOracleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBandOracleRequest) ProtoMessage()    {}
func (*MsgCreateBandOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{2}
}
func (m *MsgCreateBandOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBandOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBandOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBandOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBandOracleRequest.Merge(m, src)
}
func (m *MsgCreateBandOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBandOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBandOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBandOracleRequest proto.InternalMessageInfo

func (m *MsgCreateBandOracleRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateBandOracleRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *MsgCreateBandOracleRequest) GetOracleScriptId() uint64 {
	if m != nil {
		return m.OracleScriptId
	}
	return 0
}

func (m *MsgCreateBandOracleRequest) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *MsgCreateBandOracleRequest) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *MsgCreateBandOracleRequest) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *MsgCreateBandOracleRequest) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *MsgCreateBandOracleRequest) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

type MsgCreateBandOracleRequestResponse struct {
}

func (m *MsgCreateBandOracleRequestResponse) Reset()         { *m = MsgCreateBandOracleRequestResponse{} }
func (m *MsgCreateBandOracleRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBandOracleRequestResponse) ProtoMessage()    {}
func (*MsgCreateBandOracleRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{3}
}
func (m *MsgCreateBandOracleRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBandOracleRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBandOracleRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBandOracleRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBandOracleRequestResponse.Merge(m, src)
}
func (m *MsgCreateBandOracleRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBandOracleRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBandOracleRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBandOracleRequestResponse proto.InternalMessageInfo

type MsgUpdateBandOracleRequest struct {
	Creator        string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId      uint64   `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	OracleScriptId uint64   `protobuf:"varint,3,opt,name=oracleScriptId,proto3" json:"oracleScriptId,omitempty"`
	Symbols        []string `protobuf:"bytes,4,rep,name=symbols,proto3" json:"symbols,omitempty"`
	AskCount       uint64   `protobuf:"varint,5,opt,name=askCount,proto3" json:"askCount,omitempty"`
	MinCount       uint64   `protobuf:"varint,6,opt,name=minCount,proto3" json:"minCount,omitempty"`
	PrepareGas     uint64   `protobuf:"varint,7,opt,name=prepareGas,proto3" json:"prepareGas,omitempty"`
	ExecuteGas     uint64   `protobuf:"varint,8,opt,name=executeGas,proto3" json:"executeGas,omitempty"`
}

func (m *MsgUpdateBandOracleRequest) Reset()         { *m = MsgUpdateBandOracleRequest{} }
func (m *MsgUpdateBandOracleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBandOracleRequest) ProtoMessage()    {}
func (*MsgUpdateBandOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{4}
}
func (m *MsgUpdateBandOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBandOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBandOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBandOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBandOracleRequest.Merge(m, src)
}
func (m *MsgUpdateBandOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBandOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBandOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBandOracleRequest proto.InternalMessageInfo

func (m *MsgUpdateBandOracleRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateBandOracleRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *MsgUpdateBandOracleRequest) GetOracleScriptId() uint64 {
	if m != nil {
		return m.OracleScriptId
	}
	return 0
}

func (m *MsgUpdateBandOracleRequest) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *MsgUpdateBandOracleRequest) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *MsgUpdateBandOracleRequest) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *MsgUpdateBandOracleRequest) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *MsgUpdateBandOracleRequest) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

type MsgUpdateBandOracleRequestResponse struct {
}

func (m *MsgUpdateBandOracleRequestResponse) Reset()         { *m = MsgUpdateBandOracleRequestResponse{} }
func (m *MsgUpdateBandOracleRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBandOracleRequestResponse) ProtoMessage()    {}
func (*MsgUpdateBandOracleRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{5}
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBandOracleRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBandOracleRequestResponse.Merge(m, src)
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBandOracleRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBandOracleRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBandOracleRequestResponse proto.InternalMessageInfo

type MsgDeleteBandOracleRequest struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId uint64 `protobuf:"varint,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (m *MsgDeleteBandOracleRequest) Reset()         { *m = MsgDeleteBandOracleRequest{} }
func (m *MsgDeleteBandOracleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBandOracleRequest) ProtoMessage()    {}
func (*MsgDeleteBandOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{6}
}
func (m *MsgDeleteBandOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBandOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBandOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBandOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBandOracleRequest.Merge(m, src)
}
func (m *MsgDeleteBandOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBandOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBandOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBandOracleRequest proto.InternalMessageInfo

func (m *MsgDeleteBandOracleRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteBandOracleRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type MsgDeleteBandOracleRequestResponse struct {
}

func (m *MsgDeleteBandOracleRequestResponse) Reset()         { *m = MsgDeleteBandOracleRequestResponse{} }
func (m *MsgDeleteBandOracleRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteBandOracleRequestResponse) ProtoMessage()    {}
func (*MsgDeleteBandOracleRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{7}
}
func (m *MsgDeleteBandOracleRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteBandOracleRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteBandOracleRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteBandOracleRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteBandOracleRequestResponse.Merge(m, src)
}
func (m *MsgDeleteBandOracleRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteBandOracleRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteBandOracleRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteBandOracleRequestResponse proto.InternalMessageInfo

type MsgGasPrices struct {
	GasOracleProvider string          `protobuf:"bytes,1,opt,name=gasOracleProvider,proto3" json:"gasOracleProvider,omitempty"`
	GasPrices         []GasPriceState `protobuf:"bytes,2,rep,name=gasPrices,proto3" json:"gasPrices"`
}

func (m *MsgGasPrices) Reset()         { *m = MsgGasPrices{} }
func (m *MsgGasPrices) String() string { return proto.CompactTextString(m) }
func (*MsgGasPrices) ProtoMessage()    {}
func (*MsgGasPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{8}
}
func (m *MsgGasPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasPrices.Merge(m, src)
}
func (m *MsgGasPrices) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasPrices.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasPrices proto.InternalMessageInfo

func (m *MsgGasPrices) GetGasOracleProvider() string {
	if m != nil {
		return m.GasOracleProvider
	}
	return ""
}

func (m *MsgGasPrices) GetGasPrices() []GasPriceState {
	if m != nil {
		return m.GasPrices
	}
	return nil
}

type MsgGasPricesResponse struct {
}

func (m *MsgGasPricesResponse) Reset()         { *m = MsgGasPricesResponse{} }
func (m *MsgGasPricesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGasPricesResponse) ProtoMessage()    {}
func (*MsgGasPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{9}
}
func (m *MsgGasPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasPricesResponse.Merge(m, src)
}
func (m *MsgGasPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasPricesResponse proto.InternalMessageInfo

type MsgTokenPrices struct {
	TokenOracleProvider string       `protobuf:"bytes,1,opt,name=tokenOracleProvider,proto3" json:"tokenOracleProvider,omitempty"`
	TokenPrices         []TokenPrice `protobuf:"bytes,2,rep,name=tokenPrices,proto3" json:"tokenPrices"`
}

func (m *MsgTokenPrices) Reset()         { *m = MsgTokenPrices{} }
func (m *MsgTokenPrices) String() string { return proto.CompactTextString(m) }
func (*MsgTokenPrices) ProtoMessage()    {}
func (*MsgTokenPrices) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{10}
}
func (m *MsgTokenPrices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenPrices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenPrices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenPrices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenPrices.Merge(m, src)
}
func (m *MsgTokenPrices) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenPrices) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenPrices.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenPrices proto.InternalMessageInfo

func (m *MsgTokenPrices) GetTokenOracleProvider() string {
	if m != nil {
		return m.TokenOracleProvider
	}
	return ""
}

func (m *MsgTokenPrices) GetTokenPrices() []TokenPrice {
	if m != nil {
		return m.TokenPrices
	}
	return nil
}

type MsgTokenPricesResponse struct {
}

func (m *MsgTokenPricesResponse) Reset()         { *m = MsgTokenPricesResponse{} }
func (m *MsgTokenPricesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenPricesResponse) ProtoMessage()    {}
func (*MsgTokenPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb5390096518ffda, []int{11}
}
func (m *MsgTokenPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenPricesResponse.Merge(m, src)
}
func (m *MsgTokenPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenPricesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgBandTokenPricesData)(nil), "routerprotocol.routerchain.oracle.MsgBandTokenPricesData")
	proto.RegisterType((*MsgBandTokenPricesDataResponse)(nil), "routerprotocol.routerchain.oracle.MsgBandTokenPricesDataResponse")
	proto.RegisterType((*MsgCreateBandOracleRequest)(nil), "routerprotocol.routerchain.oracle.MsgCreateBandOracleRequest")
	proto.RegisterType((*MsgCreateBandOracleRequestResponse)(nil), "routerprotocol.routerchain.oracle.MsgCreateBandOracleRequestResponse")
	proto.RegisterType((*MsgUpdateBandOracleRequest)(nil), "routerprotocol.routerchain.oracle.MsgUpdateBandOracleRequest")
	proto.RegisterType((*MsgUpdateBandOracleRequestResponse)(nil), "routerprotocol.routerchain.oracle.MsgUpdateBandOracleRequestResponse")
	proto.RegisterType((*MsgDeleteBandOracleRequest)(nil), "routerprotocol.routerchain.oracle.MsgDeleteBandOracleRequest")
	proto.RegisterType((*MsgDeleteBandOracleRequestResponse)(nil), "routerprotocol.routerchain.oracle.MsgDeleteBandOracleRequestResponse")
	proto.RegisterType((*MsgGasPrices)(nil), "routerprotocol.routerchain.oracle.MsgGasPrices")
	proto.RegisterType((*MsgGasPricesResponse)(nil), "routerprotocol.routerchain.oracle.MsgGasPricesResponse")
	proto.RegisterType((*MsgTokenPrices)(nil), "routerprotocol.routerchain.oracle.MsgTokenPrices")
	proto.RegisterType((*MsgTokenPricesResponse)(nil), "routerprotocol.routerchain.oracle.MsgTokenPricesResponse")
}

func init() { proto.RegisterFile("oracle/tx.proto", fileDescriptor_cb5390096518ffda) }

var fileDescriptor_cb5390096518ffda = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0xdb, 0xd0, 0x26, 0x2f, 0x4b, 0x81, 0xd9, 0xd5, 0xae, 0x31, 0x2b, 0x27, 0x58, 0x80,
	0x82, 0x44, 0xed, 0xb6, 0x48, 0xa0, 0x5d, 0x89, 0x03, 0x49, 0xd1, 0xaa, 0x12, 0x11, 0x95, 0xb7,
	0x0b, 0x12, 0x17, 0x6b, 0x62, 0xcf, 0xba, 0x56, 0x1d, 0x4f, 0xf0, 0x4c, 0x56, 0xad, 0xf8, 0x1f,
	0x10, 0x82, 0x13, 0xe2, 0xc0, 0x9d, 0xbf, 0x64, 0x8f, 0x7b, 0xe4, 0x54, 0x50, 0xfa, 0x1f, 0x20,
	0x71, 0x47, 0xf3, 0xc3, 0x89, 0x69, 0x62, 0xea, 0x02, 0x47, 0x4e, 0xc9, 0xcc, 0xf7, 0xbe, 0xef,
	0x7d, 0x7e, 0xef, 0xcd, 0xd8, 0xf0, 0x0a, 0xcd, 0x71, 0x98, 0x12, 0x8f, 0x9f, 0xb9, 0x93, 0x9c,
	0x72, 0x8a, 0xde, 0xcc, 0xe9, 0x94, 0x93, 0x5c, 0x2e, 0x42, 0x9a, 0xba, 0x6a, 0x19, 0x9e, 0xe0,
	0x24, 0x73, 0x55, 0xac, 0x75, 0x27, 0xa6, 0x31, 0x95, 0x01, 0x9e, 0xf8, 0xa7, 0x88, 0x96, 0x1d,
	0x52, 0x36, 0xa6, 0xcc, 0x1b, 0x61, 0x46, 0xbc, 0x67, 0x7b, 0x23, 0xc2, 0xf1, 0x9e, 0x17, 0xd2,
	0x24, 0x2b, 0x70, 0x9d, 0x69, 0x84, 0xb3, 0x28, 0xe0, 0xf4, 0x94, 0x64, 0xc1, 0x24, 0x4f, 0x42,
	0xc2, 0x34, 0x7e, 0x5f, 0xe3, 0x31, 0x66, 0x0a, 0x08, 0x18, 0xc7, 0x9c, 0x68, 0xd4, 0x2c, 0x7c,
	0x2e, 0x88, 0x1a, 0xe9, 0x96, 0x75, 0xd5, 0xff, 0x20, 0x27, 0x5f, 0x4d, 0x09, 0xe3, 0x2a, 0xc2,
	0xf9, 0xb1, 0x01, 0x77, 0x87, 0x2c, 0xee, 0xe3, 0x2c, 0x3a, 0x16, 0xf4, 0x23, 0x99, 0xf6, 0x00,
	0x73, 0x8c, 0x4c, 0xd8, 0x0a, 0x73, 0x82, 0x39, 0xcd, 0x4d, 0xa3, 0x6b, 0xf4, 0x5a, 0x7e, 0xb1,
	0x44, 0x5f, 0xc0, 0xab, 0x5a, 0x8c, 0x85, 0x79, 0x32, 0xe1, 0x41, 0x12, 0x99, 0xeb, 0x5d, 0xa3,
	0xd7, 0xe8, 0xef, 0xcc, 0x2e, 0x3a, 0xdb, 0x9f, 0x49, 0xec, 0xb1, 0x84, 0x0e, 0x0f, 0x7e, 0xbf,
	0xe8, 0xdc, 0x3b, 0xc7, 0xe3, 0xf4, 0xa1, 0x73, 0x95, 0xe3, 0xf8, 0xdb, 0xb4, 0x1c, 0x1a, 0xa1,
	0xb7, 0x61, 0x9b, 0xd1, 0x69, 0x1e, 0x92, 0x20, 0x3c, 0xc1, 0x59, 0x46, 0x52, 0x73, 0x43, 0x66,
	0x7e, 0x59, 0xed, 0x0e, 0xd4, 0x26, 0xfa, 0x1c, 0x9a, 0x21, 0x4e, 0xd3, 0x08, 0x73, 0x6c, 0x36,
	0xba, 0x46, 0xaf, 0xbd, 0xff, 0xd0, 0xbd, 0xb6, 0x35, 0xee, 0x95, 0x67, 0x1c, 0xe0, 0x34, 0x15,
	0xcf, 0xe9, 0xcf, 0xb5, 0xd0, 0x1b, 0xd0, 0xc2, 0xec, 0x34, 0x08, 0xe9, 0x34, 0xe3, 0xe6, 0x4b,
	0xe2, 0x81, 0xfc, 0x26, 0x66, 0xa7, 0x03, 0xb1, 0x16, 0xe0, 0x38, 0xc9, 0x34, 0xb8, 0xa9, 0xc0,
	0x71, 0x92, 0x29, 0xf0, 0x04, 0x5a, 0x4f, 0x09, 0x09, 0xd2, 0x64, 0x9c, 0x70, 0x73, 0xab, 0xbb,
	0xd1, 0x6b, 0xef, 0xbf, 0xee, 0xaa, 0xa6, 0xbb, 0xa2, 0xe9, 0xae, 0x6e, 0xba, 0x3b, 0xa0, 0x49,
	0xd6, 0xdf, 0x7d, 0x7e, 0xd1, 0x59, 0xfb, 0xf9, 0xd7, 0x4e, 0x2f, 0x4e, 0xf8, 0xc9, 0x74, 0xe4,
	0x86, 0x74, 0xec, 0xe9, 0x09, 0x51, 0x3f, 0x3b, 0x2c, 0x3a, 0xf5, 0xf8, 0xf9, 0x84, 0x30, 0x49,
	0x60, 0x7e, 0xf3, 0x29, 0x21, 0x9f, 0x0a, 0x71, 0xd4, 0x81, 0xf6, 0x24, 0x27, 0x13, 0x9c, 0x93,
	0x20, 0xc6, 0xcc, 0x6c, 0x4a, 0x23, 0xa0, 0xb7, 0x1e, 0x61, 0x26, 0x02, 0xc8, 0x19, 0x09, 0xa7,
	0x5c, 0x05, 0xb4, 0x54, 0x80, 0xde, 0x12, 0x01, 0xef, 0x42, 0x2b, 0x4c, 0x13, 0x92, 0xc9, 0xb6,
	0x81, 0xa8, 0x6f, 0xff, 0xd6, 0xec, 0xa2, 0xd3, 0x1c, 0xc8, 0xcd, 0xc3, 0x03, 0xbf, 0xa9, 0xe0,
	0xc3, 0xc8, 0xe9, 0x82, 0xbd, 0x7a, 0x38, 0x7c, 0xc2, 0x26, 0x34, 0x63, 0xc4, 0xf9, 0x66, 0x1d,
	0xac, 0x21, 0x8b, 0x07, 0x62, 0x32, 0x88, 0x08, 0x54, 0xcd, 0xf7, 0xd5, 0x90, 0xfd, 0xcd, 0x0c,
	0xdd, 0x87, 0x96, 0x9e, 0xc4, 0x43, 0x3d, 0x3c, 0xfe, 0x62, 0x03, 0xbd, 0x03, 0x57, 0x46, 0x43,
	0x0e, 0x42, 0x63, 0x69, 0x60, 0x4c, 0xd8, 0x62, 0xe7, 0xe3, 0x11, 0x4d, 0x99, 0xd9, 0xe8, 0x6e,
	0x08, 0x7d, 0xbd, 0x44, 0x16, 0xcc, 0x5b, 0xb7, 0xd4, 0x4a, 0x0b, 0xe6, 0x9d, 0x5b, 0xea, 0xa4,
	0x0d, 0xa5, 0x62, 0x9a, 0x5b, 0x4b, 0xe5, 0xb5, 0xa1, 0x54, 0xcb, 0xa2, 0xfc, 0x8b, 0x1d, 0xe7,
	0x2d, 0x70, 0xaa, 0xeb, 0x71, 0xb5, 0x6c, 0x4f, 0x26, 0xd1, 0xff, 0x65, 0x2b, 0x95, 0xad, 0xa2,
	0x1e, 0xf3, 0xb2, 0x1d, 0xcb, 0xaa, 0x1d, 0x90, 0x94, 0xfc, 0x87, 0x55, 0xd3, 0xb9, 0x2b, 0x54,
	0xe7, 0xb9, 0xbf, 0x33, 0xe0, 0xd6, 0x90, 0xc5, 0x8f, 0x30, 0x53, 0xc7, 0x00, 0xbd, 0x07, 0xaf,
	0xc5, 0x98, 0xa9, 0xe0, 0xa3, 0x9c, 0x3e, 0x4b, 0x22, 0x52, 0x24, 0x5e, 0x06, 0xd0, 0x31, 0xb4,
	0xe2, 0x82, 0x6a, 0xae, 0xcb, 0x1b, 0x62, 0xb7, 0xc6, 0xa5, 0x55, 0xa4, 0x7b, 0x2c, 0xee, 0xfb,
	0x7e, 0x43, 0x5c, 0x1c, 0xfe, 0x42, 0xc8, 0xb9, 0x0b, 0x77, 0xca, 0x9e, 0xe6, 0x66, 0x7f, 0x30,
	0x60, 0x7b, 0xc8, 0xe2, 0xd2, 0xa9, 0x45, 0xbb, 0x70, 0x5b, 0xbe, 0x20, 0x56, 0x1a, 0x5e, 0x05,
	0xa1, 0x27, 0xd0, 0xe6, 0x0b, 0x01, 0x6d, 0x7a, 0xa7, 0x86, 0xe9, 0x45, 0x5a, 0xed, 0xb8, 0xac,
	0xe3, 0x98, 0xf2, 0x8d, 0x53, 0xb2, 0x56, 0xb8, 0xde, 0xff, 0x63, 0x13, 0x36, 0x86, 0x2c, 0x46,
	0xdf, 0x1b, 0x70, 0x7b, 0xd5, 0x1b, 0xe9, 0x41, 0x8d, 0xdc, 0xab, 0xef, 0x2b, 0xeb, 0xe3, 0x7f,
	0x4c, 0x2d, 0xdc, 0xa1, 0x9f, 0x0c, 0xb8, 0x57, 0x75, 0xcf, 0x7d, 0x54, 0x4f, 0xbe, 0x82, 0x6e,
	0x7d, 0xf2, 0xaf, 0xe8, 0x7f, 0x71, 0x58, 0x75, 0xa5, 0xd4, 0x74, 0x58, 0x41, 0xaf, 0xeb, 0xf0,
	0x9a, 0x03, 0x2c, 0x1d, 0x56, 0x1d, 0xdf, 0x9a, 0x0e, 0x2b, 0xe8, 0x75, 0x1d, 0x5e, 0x73, 0xcc,
	0xd1, 0x14, 0x5a, 0x8b, 0x23, 0xee, 0xd5, 0xd3, 0x9c, 0x13, 0xac, 0x0f, 0x6f, 0x48, 0x98, 0xa7,
	0xfd, 0x1a, 0xda, 0xe5, 0xc3, 0xba, 0x57, 0x4f, 0xa7, 0x44, 0xb1, 0x1e, 0xdc, 0x98, 0x52, 0x24,
	0xef, 0x1f, 0x3d, 0x9f, 0xd9, 0xc6, 0x8b, 0x99, 0x6d, 0xfc, 0x36, 0xb3, 0x8d, 0x6f, 0x2f, 0xed,
	0xb5, 0x17, 0x97, 0xf6, 0xda, 0x2f, 0x97, 0xf6, 0xda, 0x97, 0x1f, 0x94, 0xbe, 0x50, 0x94, 0xde,
	0x4e, 0xa1, 0x5f, 0xac, 0x65, 0x02, 0xef, 0xcc, 0x2b, 0x3e, 0x42, 0xc5, 0x57, 0xcb, 0x68, 0x53,
	0x46, 0xbd, 0xff, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0xa8, 0x4f, 0x56, 0x43, 0x0b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	BandTokenPricesData(ctx context.Context, in *MsgBandTokenPricesData, opts ...grpc.CallOption) (*MsgBandTokenPricesDataResponse, error)
	CreateBandOracleRequest(ctx context.Context, in *MsgCreateBandOracleRequest, opts ...grpc.CallOption) (*MsgCreateBandOracleRequestResponse, error)
	UpdateBandOracleRequest(ctx context.Context, in *MsgUpdateBandOracleRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestResponse, error)
	DeleteBandOracleRequest(ctx context.Context, in *MsgDeleteBandOracleRequest, opts ...grpc.CallOption) (*MsgDeleteBandOracleRequestResponse, error)
	GasPrices(ctx context.Context, in *MsgGasPrices, opts ...grpc.CallOption) (*MsgGasPricesResponse, error)
	TokenPrices(ctx context.Context, in *MsgTokenPrices, opts ...grpc.CallOption) (*MsgTokenPricesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BandTokenPricesData(ctx context.Context, in *MsgBandTokenPricesData, opts ...grpc.CallOption) (*MsgBandTokenPricesDataResponse, error) {
	out := new(MsgBandTokenPricesDataResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.oracle.Msg/BandTokenPricesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBandOracleRequest(ctx context.Context, in *MsgCreateBandOracleRequest, opts ...grpc.CallOption) (*MsgCreateBandOracleRequestResponse, error) {
	out := new(MsgCreateBandOracleRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.oracle.Msg/CreateBandOracleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBandOracleRequest(ctx context.Context, in *MsgUpdateBandOracleRequest, opts ...grpc.CallOption) (*MsgUpdateBandOracleRequestResponse, error) {
	out := new(MsgUpdateBandOracleRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.oracle.Msg/UpdateBandOracleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteBandOracleRequest(ctx context.Context, in *MsgDeleteBandOracleRequest, opts ...grpc.CallOption) (*MsgDeleteBandOracleRequestResponse, error) {
	out := new(MsgDeleteBandOracleRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.oracle.Msg/DeleteBandOracleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GasPrices(ctx context.Context, in *MsgGasPrices, opts ...grpc.CallOption) (*MsgGasPricesResponse, error) {
	out := new(MsgGasPricesResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.oracle.Msg/GasPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TokenPrices(ctx context.Context, in *MsgTokenPrices, opts ...grpc.CallOption) (*MsgTokenPricesResponse, error) {
	out := new(MsgTokenPricesResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.oracle.Msg/TokenPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	BandTokenPricesData(context.Context, *MsgBandTokenPricesData) (*MsgBandTokenPricesDataResponse, error)
	CreateBandOracleRequest(context.Context, *MsgCreateBandOracleRequest) (*MsgCreateBandOracleRequestResponse, error)
	UpdateBandOracleRequest(context.Context, *MsgUpdateBandOracleRequest) (*MsgUpdateBandOracleRequestResponse, error)
	DeleteBandOracleRequest(context.Context, *MsgDeleteBandOracleRequest) (*MsgDeleteBandOracleRequestResponse, error)
	GasPrices(context.Context, *MsgGasPrices) (*MsgGasPricesResponse, error)
	TokenPrices(context.Context, *MsgTokenPrices) (*MsgTokenPricesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BandTokenPricesData(ctx context.Context, req *MsgBandTokenPricesData) (*MsgBandTokenPricesDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandTokenPricesData not implemented")
}
func (*UnimplementedMsgServer) CreateBandOracleRequest(ctx context.Context, req *MsgCreateBandOracleRequest) (*MsgCreateBandOracleRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBandOracleRequest not implemented")
}
func (*UnimplementedMsgServer) UpdateBandOracleRequest(ctx context.Context, req *MsgUpdateBandOracleRequest) (*MsgUpdateBandOracleRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBandOracleRequest not implemented")
}
func (*UnimplementedMsgServer) DeleteBandOracleRequest(ctx context.Context, req *MsgDeleteBandOracleRequest) (*MsgDeleteBandOracleRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBandOracleRequest not implemented")
}
func (*UnimplementedMsgServer) GasPrices(ctx context.Context, req *MsgGasPrices) (*MsgGasPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrices not implemented")
}
func (*UnimplementedMsgServer) TokenPrices(ctx context.Context, req *MsgTokenPrices) (*MsgTokenPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPrices not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BandTokenPricesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBandTokenPricesData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BandTokenPricesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.oracle.Msg/BandTokenPricesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BandTokenPricesData(ctx, req.(*MsgBandTokenPricesData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBandOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBandOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBandOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.oracle.Msg/CreateBandOracleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBandOracleRequest(ctx, req.(*MsgCreateBandOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBandOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBandOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBandOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.oracle.Msg/UpdateBandOracleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBandOracleRequest(ctx, req.(*MsgUpdateBandOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteBandOracleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteBandOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteBandOracleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.oracle.Msg/DeleteBandOracleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteBandOracleRequest(ctx, req.(*MsgDeleteBandOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GasPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGasPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GasPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.oracle.Msg/GasPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GasPrices(ctx, req.(*MsgGasPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TokenPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TokenPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.oracle.Msg/TokenPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TokenPrices(ctx, req.(*MsgTokenPrices))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.oracle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BandTokenPricesData",
			Handler:    _Msg_BandTokenPricesData_Handler,
		},
		{
			MethodName: "CreateBandOracleRequest",
			Handler:    _Msg_CreateBandOracleRequest_Handler,
		},
		{
			MethodName: "UpdateBandOracleRequest",
			Handler:    _Msg_UpdateBandOracleRequest_Handler,
		},
		{
			MethodName: "DeleteBandOracleRequest",
			Handler:    _Msg_DeleteBandOracleRequest_Handler,
		},
		{
			MethodName: "GasPrices",
			Handler:    _Msg_GasPrices_Handler,
		},
		{
			MethodName: "TokenPrices",
			Handler:    _Msg_TokenPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/tx.proto",
}

func (m *MsgBandTokenPricesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBandTokenPricesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBandTokenPricesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0x52
	}
	if m.ExecuteGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x48
	}
	if m.PrepareGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x40
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x30
	}
	if m.AskCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Calldata != nil {
		{
			size, err := m.Calldata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OracleScriptID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OracleScriptID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBandTokenPricesDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBandTokenPricesDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBandTokenPricesDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateBandOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBandOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBandOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecuteGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x40
	}
	if m.PrepareGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x38
	}
	if m.MinCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x30
	}
	if m.AskCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OracleScriptId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OracleScriptId))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBandOracleRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBandOracleRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBandOracleRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBandOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBandOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBandOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecuteGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x40
	}
	if m.PrepareGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x38
	}
	if m.MinCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x30
	}
	if m.AskCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OracleScriptId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OracleScriptId))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBandOracleRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBandOracleRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBandOracleRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBandOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBandOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBandOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteBandOracleRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteBandOracleRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteBandOracleRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGasPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasPrices) > 0 {
		for iNdEx := len(m.GasPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GasOracleProvider) > 0 {
		i -= len(m.GasOracleProvider)
		copy(dAtA[i:], m.GasOracleProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GasOracleProvider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTokenPrices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenPrices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenPrices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenPrices) > 0 {
		for iNdEx := len(m.TokenPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TokenOracleProvider) > 0 {
		i -= len(m.TokenOracleProvider)
		copy(dAtA[i:], m.TokenOracleProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenOracleProvider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBandTokenPricesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OracleScriptID != 0 {
		n += 1 + sovTx(uint64(m.OracleScriptID))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Calldata != nil {
		l = m.Calldata.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AskCount != 0 {
		n += 1 + sovTx(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovTx(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovTx(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovTx(uint64(m.ExecuteGas))
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBandTokenPricesDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateBandOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	if m.OracleScriptId != 0 {
		n += 1 + sovTx(uint64(m.OracleScriptId))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.AskCount != 0 {
		n += 1 + sovTx(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovTx(uint64(m.MinCount))
	}
	if m.PrepareGas != 0 {
		n += 1 + sovTx(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovTx(uint64(m.ExecuteGas))
	}
	return n
}

func (m *MsgCreateBandOracleRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBandOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	if m.OracleScriptId != 0 {
		n += 1 + sovTx(uint64(m.OracleScriptId))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.AskCount != 0 {
		n += 1 + sovTx(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovTx(uint64(m.MinCount))
	}
	if m.PrepareGas != 0 {
		n += 1 + sovTx(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovTx(uint64(m.ExecuteGas))
	}
	return n
}

func (m *MsgUpdateBandOracleRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteBandOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	return n
}

func (m *MsgDeleteBandOracleRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGasPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GasOracleProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.GasPrices) > 0 {
		for _, e := range m.GasPrices {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGasPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTokenPrices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenOracleProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TokenPrices) > 0 {
		for _, e := range m.TokenPrices {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTokenPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBandTokenPricesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBandTokenPricesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBandTokenPricesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptID", wireType)
			}
			m.OracleScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Calldata == nil {
				m.Calldata = &BandTokenPricesCallData{}
			}
			if err := m.Calldata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBandTokenPricesDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBandTokenPricesDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBandTokenPricesDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBandOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBandOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBandOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptId", wireType)
			}
			m.OracleScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBandOracleRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBandOracleRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBandOracleRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBandOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptId", wireType)
			}
			m.OracleScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBandOracleRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBandOracleRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBandOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteBandOracleRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteBandOracleRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasOracleProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasOracleProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrices = append(m.GasPrices, GasPriceState{})
			if err := m.GasPrices[len(m.GasPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenPrices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenPrices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenPrices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOracleProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOracleProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPrices = append(m.TokenPrices, TokenPrice{})
			if err := m.TokenPrices[len(m.TokenPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
