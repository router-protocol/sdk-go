// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/band_oracle_request.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BandOracleRequest struct {
	RequestId      uint64                                   `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	OracleScriptId uint64                                   `protobuf:"varint,2,opt,name=oracleScriptId,proto3" json:"oracleScriptId,omitempty"`
	Symbols        []string                                 `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
	AskCount       uint64                                   `protobuf:"varint,4,opt,name=askCount,proto3" json:"askCount,omitempty"`
	MinCount       uint64                                   `protobuf:"varint,5,opt,name=minCount,proto3" json:"minCount,omitempty"`
	FeeLimit       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit"`
	PrepareGas     uint64                                   `protobuf:"varint,7,opt,name=prepareGas,proto3" json:"prepareGas,omitempty"`
	ExecuteGas     uint64                                   `protobuf:"varint,8,opt,name=executeGas,proto3" json:"executeGas,omitempty"`
	Creator        string                                   `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *BandOracleRequest) Reset()         { *m = BandOracleRequest{} }
func (m *BandOracleRequest) String() string { return proto.CompactTextString(m) }
func (*BandOracleRequest) ProtoMessage()    {}
func (*BandOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0078315afdca8eb7, []int{0}
}
func (m *BandOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BandOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandOracleRequest.Merge(m, src)
}
func (m *BandOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *BandOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BandOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BandOracleRequest proto.InternalMessageInfo

func (m *BandOracleRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *BandOracleRequest) GetOracleScriptId() uint64 {
	if m != nil {
		return m.OracleScriptId
	}
	return 0
}

func (m *BandOracleRequest) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *BandOracleRequest) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *BandOracleRequest) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *BandOracleRequest) GetFeeLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *BandOracleRequest) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *BandOracleRequest) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

func (m *BandOracleRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*BandOracleRequest)(nil), "routerprotocol.routerchain.oracle.BandOracleRequest")
}

func init() { proto.RegisterFile("oracle/band_oracle_request.proto", fileDescriptor_0078315afdca8eb7) }

var fileDescriptor_0078315afdca8eb7 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x41, 0x8e, 0xd3, 0x30,
	0x14, 0x4d, 0xa6, 0xc3, 0x4c, 0x63, 0x24, 0x24, 0x22, 0x16, 0xa6, 0x12, 0x9e, 0xc0, 0x02, 0x65,
	0x33, 0x36, 0x03, 0x12, 0x07, 0xe8, 0x2c, 0xd0, 0x48, 0x48, 0xa0, 0xb0, 0x63, 0x13, 0x39, 0xce,
	0x6f, 0x6b, 0x35, 0x89, 0x83, 0xed, 0xa0, 0xf6, 0x16, 0x9c, 0x83, 0x93, 0x74, 0xd9, 0x25, 0x2b,
	0x40, 0xed, 0x05, 0x38, 0x02, 0x8a, 0x9d, 0x40, 0x35, 0xab, 0xf8, 0xbd, 0xf7, 0x9f, 0xff, 0x7f,
	0xf9, 0x46, 0x89, 0xd2, 0x5c, 0x54, 0xc0, 0x0a, 0xde, 0x94, 0xb9, 0x3f, 0xe7, 0x1a, 0xbe, 0x74,
	0x60, 0x2c, 0x6d, 0xb5, 0xb2, 0x2a, 0x7e, 0xae, 0x55, 0x67, 0x41, 0x3b, 0x20, 0x54, 0x45, 0x3d,
	0x14, 0x2b, 0x2e, 0x1b, 0xea, 0x0d, 0xb3, 0x27, 0x4b, 0xb5, 0x54, 0xae, 0x80, 0xf5, 0x27, 0x6f,
	0x9c, 0x11, 0xa1, 0x4c, 0xad, 0x0c, 0x2b, 0xb8, 0x01, 0xf6, 0xf5, 0xa6, 0x00, 0xcb, 0x6f, 0x98,
	0x50, 0xb2, 0xf1, 0xfa, 0x8b, 0x3f, 0x67, 0xe8, 0xf1, 0x9c, 0x37, 0xe5, 0x07, 0x77, 0x49, 0xe6,
	0x9b, 0xc6, 0xcf, 0x10, 0x1a, 0xfa, 0xe7, 0xb2, 0xc4, 0x61, 0x12, 0xa6, 0xe7, 0x59, 0x34, 0x30,
	0x77, 0x65, 0xfc, 0x12, 0x3d, 0xf2, 0x4d, 0x3f, 0x09, 0x2d, 0x5b, 0x7b, 0x57, 0xe2, 0x33, 0x57,
	0x72, 0x8f, 0x8d, 0x31, 0xba, 0x34, 0xdb, 0xba, 0x50, 0x95, 0xc1, 0x93, 0x64, 0x92, 0x46, 0xd9,
	0x08, 0xe3, 0x19, 0x9a, 0x72, 0xb3, 0xbe, 0x55, 0x5d, 0x63, 0xf1, 0xb9, 0xf3, 0xfe, 0xc3, 0xbd,
	0x56, 0xcb, 0xc6, 0x6b, 0x0f, 0xbc, 0x36, 0xe2, 0x78, 0x85, 0xa2, 0x05, 0x40, 0x5e, 0xc9, 0x5a,
	0x5a, 0x7c, 0x91, 0x4c, 0xd2, 0x87, 0xaf, 0x9f, 0x52, 0x1f, 0x91, 0xf6, 0x11, 0xe9, 0x10, 0x91,
	0xde, 0x2a, 0xd9, 0xcc, 0x5f, 0xed, 0x7e, 0x5e, 0x05, 0xdf, 0x7f, 0x5d, 0xa5, 0x4b, 0x69, 0x57,
	0x5d, 0x41, 0x85, 0xaa, 0xd9, 0xf0, 0x3f, 0xfc, 0xe7, 0xda, 0x94, 0x6b, 0x66, 0xb7, 0x2d, 0x18,
	0x67, 0x30, 0xd9, 0x74, 0x01, 0xf0, 0xbe, 0xbf, 0x3c, 0x26, 0x08, 0xb5, 0x1a, 0x5a, 0xae, 0xe1,
	0x1d, 0x37, 0xf8, 0xd2, 0xcd, 0x71, 0xc2, 0xf4, 0x3a, 0x6c, 0x40, 0x74, 0xd6, 0xe9, 0x53, 0xaf,
	0xff, 0x67, 0xfa, 0xec, 0x42, 0x03, 0xb7, 0x4a, 0xe3, 0x28, 0x09, 0xfb, 0xec, 0x03, 0x9c, 0x7f,
	0xdc, 0x1d, 0x48, 0xb8, 0x3f, 0x90, 0xf0, 0xf7, 0x81, 0x84, 0xdf, 0x8e, 0x24, 0xd8, 0x1f, 0x49,
	0xf0, 0xe3, 0x48, 0x82, 0xcf, 0x6f, 0x4f, 0xe6, 0xf4, 0x1b, 0xbe, 0x1e, 0x37, 0x3e, 0x62, 0xb7,
	0x72, 0xb6, 0x61, 0xc3, 0x8b, 0x71, 0xb3, 0x17, 0x17, 0xae, 0xea, 0xcd, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x4e, 0xb8, 0x34, 0x4b, 0x48, 0x02, 0x00, 0x00,
}

func (m *BandOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BandOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintBandOracleRequest(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ExecuteGas != 0 {
		i = encodeVarintBandOracleRequest(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x40
	}
	if m.PrepareGas != 0 {
		i = encodeVarintBandOracleRequest(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x38
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBandOracleRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintBandOracleRequest(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x28
	}
	if m.AskCount != 0 {
		i = encodeVarintBandOracleRequest(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintBandOracleRequest(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OracleScriptId != 0 {
		i = encodeVarintBandOracleRequest(dAtA, i, uint64(m.OracleScriptId))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintBandOracleRequest(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBandOracleRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovBandOracleRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BandOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovBandOracleRequest(uint64(m.RequestId))
	}
	if m.OracleScriptId != 0 {
		n += 1 + sovBandOracleRequest(uint64(m.OracleScriptId))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovBandOracleRequest(uint64(l))
		}
	}
	if m.AskCount != 0 {
		n += 1 + sovBandOracleRequest(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovBandOracleRequest(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovBandOracleRequest(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovBandOracleRequest(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovBandOracleRequest(uint64(m.ExecuteGas))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovBandOracleRequest(uint64(l))
	}
	return n
}

func sovBandOracleRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBandOracleRequest(x uint64) (n int) {
	return sovBandOracleRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BandOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandOracleRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptId", wireType)
			}
			m.OracleScriptId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandOracleRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBandOracleRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandOracleRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBandOracleRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandOracleRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBandOracleRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandOracleRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBandOracleRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBandOracleRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBandOracleRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandOracleRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBandOracleRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBandOracleRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBandOracleRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBandOracleRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBandOracleRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBandOracleRequest = fmt.Errorf("proto: unexpected end of group")
)
