// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: attestation/valset_updated_claim.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValsetUpdatedClaim struct {
	ChainType    types.ChainType          `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId      string                   `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce   uint64                   `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ValsetNonce  uint64                   `protobuf:"varint,4,opt,name=valsetNonce,proto3" json:"valsetNonce,omitempty"`
	BlockHeight  uint64                   `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	SourceTxHash string                   `protobuf:"bytes,6,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	Status       ValsetUpdatedClaimStatus `protobuf:"varint,7,opt,name=status,proto3,enum=routerprotocol.routerchain.attestation.ValsetUpdatedClaimStatus" json:"status,omitempty"`
}

func (m *ValsetUpdatedClaim) Reset()         { *m = ValsetUpdatedClaim{} }
func (m *ValsetUpdatedClaim) String() string { return proto.CompactTextString(m) }
func (*ValsetUpdatedClaim) ProtoMessage()    {}
func (*ValsetUpdatedClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_41356d08e97f1694, []int{0}
}
func (m *ValsetUpdatedClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValsetUpdatedClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValsetUpdatedClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValsetUpdatedClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValsetUpdatedClaim.Merge(m, src)
}
func (m *ValsetUpdatedClaim) XXX_Size() int {
	return m.Size()
}
func (m *ValsetUpdatedClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_ValsetUpdatedClaim.DiscardUnknown(m)
}

var xxx_messageInfo_ValsetUpdatedClaim proto.InternalMessageInfo

func (m *ValsetUpdatedClaim) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *ValsetUpdatedClaim) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValsetUpdatedClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *ValsetUpdatedClaim) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *ValsetUpdatedClaim) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ValsetUpdatedClaim) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *ValsetUpdatedClaim) GetStatus() ValsetUpdatedClaimStatus {
	if m != nil {
		return m.Status
	}
	return VALSET_UPDATED_CLAIM_CREATED
}

func init() {
	proto.RegisterType((*ValsetUpdatedClaim)(nil), "routerprotocol.routerchain.attestation.ValsetUpdatedClaim")
}

func init() {
	proto.RegisterFile("attestation/valset_updated_claim.proto", fileDescriptor_41356d08e97f1694)
}

var fileDescriptor_41356d08e97f1694 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4f, 0xc2, 0x30,
	0x1c, 0xc5, 0x29, 0x22, 0x84, 0x6a, 0x3c, 0xf4, 0xd4, 0x60, 0xd2, 0x2c, 0x1c, 0x08, 0x17, 0x3a,
	0xa3, 0x47, 0x2f, 0x46, 0x2e, 0x78, 0xe1, 0x30, 0xc1, 0x18, 0x2f, 0x4b, 0x29, 0x0d, 0x5b, 0x1c,
	0xeb, 0xb2, 0xfd, 0x47, 0xe0, 0x5b, 0xf8, 0xb1, 0x3c, 0x72, 0xf4, 0x48, 0xe0, 0x8b, 0x98, 0xb5,
	0x2e, 0xcc, 0x98, 0xa8, 0x97, 0x25, 0xef, 0xed, 0xd7, 0xd7, 0x7f, 0xff, 0x0f, 0xf7, 0x04, 0x80,
	0xca, 0x40, 0x40, 0xa8, 0x63, 0x77, 0x25, 0xa2, 0x4c, 0x81, 0x9f, 0x27, 0x73, 0x01, 0x6a, 0xee,
	0xcb, 0x48, 0x84, 0x4b, 0x9e, 0xa4, 0x1a, 0x34, 0xe9, 0xa5, 0x3a, 0x07, 0x95, 0x1a, 0x21, 0x75,
	0xc4, 0xad, 0x94, 0x81, 0x08, 0x63, 0x5e, 0x89, 0xe8, 0x5c, 0x2e, 0xf3, 0x08, 0x42, 0xe3, 0xbb,
	0xe6, 0xeb, 0xc3, 0x26, 0x51, 0x36, 0xa4, 0x33, 0xf8, 0xeb, 0x32, 0xbf, 0xf8, 0x99, 0x67, 0x16,
	0xef, 0xee, 0xea, 0x98, 0x3c, 0x19, 0x6a, 0x6a, 0xa1, 0x61, 0xc1, 0x90, 0x31, 0x6e, 0x9b, 0xe4,
	0xc9, 0x26, 0x51, 0x14, 0x39, 0xa8, 0x7f, 0x71, 0x7d, 0xc5, 0x7f, 0x19, 0xef, 0x38, 0x11, 0x1f,
	0x96, 0xe7, 0xbc, 0x63, 0x04, 0xa1, 0xb8, 0x65, 0xc4, 0xc3, 0x9c, 0xd6, 0x1d, 0xd4, 0x6f, 0x7b,
	0xa5, 0x24, 0x0c, 0x63, 0xb5, 0x52, 0x31, 0x8c, 0x75, 0x2c, 0x15, 0x3d, 0x71, 0x50, 0xbf, 0xe1,
	0x55, 0x1c, 0xe2, 0xe0, 0x33, 0xfb, 0x0a, 0x0b, 0x34, 0x0c, 0x50, 0xb5, 0x0a, 0x62, 0x16, 0x69,
	0xf9, 0x3a, 0x52, 0xe1, 0x22, 0x00, 0x7a, 0x6a, 0x89, 0x8a, 0x45, 0xba, 0xf8, 0x3c, 0xd3, 0x79,
	0x2a, 0xd5, 0x64, 0x3d, 0x12, 0x59, 0x40, 0x9b, 0x66, 0x84, 0x6f, 0x1e, 0x79, 0xc6, 0x4d, 0xbb,
	0x18, 0xda, 0x32, 0xcf, 0xbd, 0xe3, 0xff, 0x6b, 0x83, 0xff, 0xdc, 0xde, 0xa3, 0xc9, 0xf1, 0xbe,
	0xf2, 0xee, 0xa7, 0xef, 0x7b, 0x86, 0xb6, 0x7b, 0x86, 0x76, 0x7b, 0x86, 0xde, 0x0e, 0xac, 0xb6,
	0x3d, 0xb0, 0xda, 0xc7, 0x81, 0xd5, 0x5e, 0x6e, 0x17, 0x21, 0x04, 0xf9, 0x8c, 0x4b, 0xbd, 0x74,
	0x6d, 0xfc, 0xa0, 0xbc, 0xae, 0xd4, 0xb6, 0xe5, 0xb5, 0x5b, 0x6d, 0xb5, 0x68, 0x3b, 0x9b, 0x35,
	0x0d, 0x7a, 0xf3, 0x19, 0x00, 0x00, 0xff, 0xff, 0x20, 0x1d, 0xd9, 0xbe, 0x5e, 0x02, 0x00, 0x00,
}

func (m *ValsetUpdatedClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValsetUpdatedClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValsetUpdatedClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.EventNonce != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValsetUpdatedClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovValsetUpdatedClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValsetUpdatedClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.EventNonce))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.ValsetNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.BlockHeight))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.Status))
	}
	return n
}

func sovValsetUpdatedClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValsetUpdatedClaim(x uint64) (n int) {
	return sovValsetUpdatedClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValsetUpdatedClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValsetUpdatedClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValsetUpdatedClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValsetUpdatedClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValsetUpdatedClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValsetUpdatedClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValsetUpdatedClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValsetUpdatedClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValsetUpdatedClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValsetUpdatedClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValsetUpdatedClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValsetUpdatedClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValsetUpdatedClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValsetUpdatedClaim = fmt.Errorf("proto: unexpected end of group")
)
