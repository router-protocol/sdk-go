// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/attestation/valset_updated_claim.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValsetUpdatedClaim struct {
	ChainId      string                   `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Contract     string                   `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	EventNonce   uint64                   `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ValsetNonce  uint64                   `protobuf:"varint,4,opt,name=valsetNonce,proto3" json:"valsetNonce,omitempty"`
	BlockHeight  uint64                   `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	SourceTxHash string                   `protobuf:"bytes,6,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	Status       ValsetUpdatedClaimStatus `protobuf:"varint,7,opt,name=status,proto3,enum=routerprotocol.routerchain.attestation.ValsetUpdatedClaimStatus" json:"status,omitempty"`
}

func (m *ValsetUpdatedClaim) Reset()         { *m = ValsetUpdatedClaim{} }
func (m *ValsetUpdatedClaim) String() string { return proto.CompactTextString(m) }
func (*ValsetUpdatedClaim) ProtoMessage()    {}
func (*ValsetUpdatedClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_7becbfb3ddbb408a, []int{0}
}
func (m *ValsetUpdatedClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValsetUpdatedClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValsetUpdatedClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValsetUpdatedClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValsetUpdatedClaim.Merge(m, src)
}
func (m *ValsetUpdatedClaim) XXX_Size() int {
	return m.Size()
}
func (m *ValsetUpdatedClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_ValsetUpdatedClaim.DiscardUnknown(m)
}

var xxx_messageInfo_ValsetUpdatedClaim proto.InternalMessageInfo

func (m *ValsetUpdatedClaim) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValsetUpdatedClaim) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ValsetUpdatedClaim) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *ValsetUpdatedClaim) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *ValsetUpdatedClaim) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ValsetUpdatedClaim) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *ValsetUpdatedClaim) GetStatus() ValsetUpdatedClaimStatus {
	if m != nil {
		return m.Status
	}
	return VALSET_UPDATED_CLAIM_CREATED
}

type ValsetUpdatedClaimHash struct {
	ChainId      string            `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Contract     string            `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	EventNonce   uint64            `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ValsetNonce  uint64            `protobuf:"varint,4,opt,name=valsetNonce,proto3" json:"valsetNonce,omitempty"`
	BlockHeight  uint64            `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Members      []BridgeValidator `protobuf:"bytes,6,rep,name=members,proto3" json:"members"`
	SourceTxHash string            `protobuf:"bytes,7,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
}

func (m *ValsetUpdatedClaimHash) Reset()         { *m = ValsetUpdatedClaimHash{} }
func (m *ValsetUpdatedClaimHash) String() string { return proto.CompactTextString(m) }
func (*ValsetUpdatedClaimHash) ProtoMessage()    {}
func (*ValsetUpdatedClaimHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_7becbfb3ddbb408a, []int{1}
}
func (m *ValsetUpdatedClaimHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValsetUpdatedClaimHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValsetUpdatedClaimHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValsetUpdatedClaimHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValsetUpdatedClaimHash.Merge(m, src)
}
func (m *ValsetUpdatedClaimHash) XXX_Size() int {
	return m.Size()
}
func (m *ValsetUpdatedClaimHash) XXX_DiscardUnknown() {
	xxx_messageInfo_ValsetUpdatedClaimHash.DiscardUnknown(m)
}

var xxx_messageInfo_ValsetUpdatedClaimHash proto.InternalMessageInfo

func (m *ValsetUpdatedClaimHash) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValsetUpdatedClaimHash) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ValsetUpdatedClaimHash) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *ValsetUpdatedClaimHash) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *ValsetUpdatedClaimHash) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ValsetUpdatedClaimHash) GetMembers() []BridgeValidator {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ValsetUpdatedClaimHash) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func init() {
	proto.RegisterType((*ValsetUpdatedClaim)(nil), "routerprotocol.routerchain.attestation.ValsetUpdatedClaim")
	proto.RegisterType((*ValsetUpdatedClaimHash)(nil), "routerprotocol.routerchain.attestation.ValsetUpdatedClaimHash")
}

func init() {
	proto.RegisterFile("routerchain/attestation/valset_updated_claim.proto", fileDescriptor_7becbfb3ddbb408a)
}

var fileDescriptor_7becbfb3ddbb408a = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x4d, 0xfa, 0x4a, 0x02, 0x7e, 0x88, 0xc1, 0x42, 0xc8, 0xea, 0x10, 0xa2, 0x0e, 0x90, 0x85,
	0x44, 0x2a, 0x03, 0x42, 0x2c, 0xa8, 0x2c, 0x8f, 0x85, 0x21, 0xf0, 0x1e, 0x88, 0x25, 0x72, 0x1c,
	0x2b, 0xb1, 0x48, 0xe2, 0xca, 0xb9, 0xa9, 0xca, 0x5f, 0xf0, 0x21, 0x48, 0xfc, 0x46, 0xc7, 0x8e,
	0x4c, 0x08, 0xb5, 0x3f, 0x82, 0x62, 0x37, 0x28, 0x55, 0x84, 0x54, 0xb6, 0xb7, 0x44, 0xf7, 0x5e,
	0x9f, 0x73, 0x7c, 0x72, 0xef, 0x35, 0x5a, 0x28, 0xd9, 0x02, 0x57, 0xac, 0xa0, 0xa2, 0x8e, 0x28,
	0x00, 0x6f, 0x80, 0x82, 0x90, 0x75, 0xb4, 0xa6, 0x65, 0xc3, 0x21, 0x69, 0x57, 0x19, 0x05, 0x9e,
	0x25, 0xac, 0xa4, 0xa2, 0x0a, 0x57, 0x4a, 0x82, 0xc4, 0x4f, 0x0c, 0x47, 0x27, 0x4c, 0x96, 0xe1,
	0x40, 0x22, 0x1c, 0x48, 0xcc, 0x9e, 0x0e, 0xb5, 0xab, 0xb6, 0x04, 0x61, 0x42, 0xfd, 0x4d, 0xe0,
	0xeb, 0x8a, 0x1b, 0xc1, 0x59, 0xf8, 0x2f, 0x13, 0xa9, 0x12, 0x59, 0xce, 0x93, 0x35, 0x2d, 0x45,
	0x46, 0x41, 0xaa, 0x23, 0xfe, 0xe5, 0xff, 0x98, 0x4e, 0xba, 0xc3, 0xb6, 0x39, 0x52, 0x1f, 0xe6,
	0x32, 0x97, 0x3a, 0x8c, 0xba, 0xc8, 0x54, 0xe7, 0xdf, 0x27, 0x08, 0xdf, 0x68, 0xee, 0xb5, 0xa1,
	0xbe, 0xe9, 0x98, 0x98, 0x20, 0x57, 0xdf, 0xf1, 0x36, 0x23, 0xb6, 0x6f, 0x07, 0xf7, 0xe2, 0x3e,
	0xc5, 0x33, 0x74, 0x97, 0xc9, 0x1a, 0x14, 0x65, 0x40, 0x26, 0xfa, 0xe8, 0x6f, 0x8e, 0x3d, 0x84,
	0xf8, 0x9a, 0xd7, 0xf0, 0x4e, 0xd6, 0x8c, 0x93, 0x0b, 0xdf, 0x0e, 0xa6, 0xf1, 0xa0, 0x82, 0x7d,
	0x74, 0x69, 0x7c, 0x1a, 0xc0, 0x54, 0x03, 0x86, 0xa5, 0x0e, 0x91, 0x96, 0x92, 0x7d, 0xb9, 0xe2,
	0x22, 0x2f, 0x80, 0xdc, 0x31, 0x88, 0x41, 0x09, 0xcf, 0xd1, 0xfd, 0x46, 0xb6, 0x8a, 0xf1, 0x0f,
	0x9b, 0x2b, 0xda, 0x14, 0xc4, 0xd1, 0x1e, 0x4e, 0x6a, 0xf8, 0x13, 0x72, 0xcc, 0xaf, 0x13, 0xd7,
	0xb7, 0x83, 0x07, 0x8b, 0xd7, 0xe1, 0x79, 0x73, 0x0b, 0xc7, 0x9d, 0x78, 0xaf, 0x75, 0xe2, 0xa3,
	0xde, 0xfc, 0xc7, 0x04, 0x3d, 0x1a, 0x83, 0xf4, 0xa5, 0xb7, 0xb7, 0x65, 0x1f, 0x91, 0x5b, 0xf1,
	0x2a, 0xe5, 0xaa, 0x21, 0x8e, 0x7f, 0x11, 0x5c, 0x2e, 0x5e, 0x9c, 0xdb, 0x8f, 0xa5, 0xde, 0xc2,
	0x9b, 0x7e, 0x09, 0x97, 0xd3, 0xed, 0xaf, 0xc7, 0x56, 0xdc, 0xab, 0x8d, 0x66, 0xe1, 0x8e, 0x67,
	0xb1, 0xbc, 0xde, 0xee, 0x3d, 0x7b, 0xb7, 0xf7, 0xec, 0xdf, 0x7b, 0xcf, 0xfe, 0x76, 0xf0, 0xac,
	0xdd, 0xc1, 0xb3, 0x7e, 0x1e, 0x3c, 0xeb, 0xf3, 0xab, 0x5c, 0x40, 0xd1, 0xa6, 0x21, 0x93, 0x55,
	0x64, 0x0c, 0x3c, 0xeb, 0x0d, 0xf5, 0xb9, 0xd9, 0xf3, 0xcd, 0xc9, 0xa6, 0x77, 0xaf, 0xa7, 0x49,
	0x1d, 0x0d, 0x7d, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x38, 0xce, 0x34, 0xab, 0xc6, 0x03, 0x00,
	0x00,
}

func (m *ValsetUpdatedClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValsetUpdatedClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValsetUpdatedClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.EventNonce != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValsetUpdatedClaimHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValsetUpdatedClaimHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValsetUpdatedClaimHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.EventNonce != 0 {
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintValsetUpdatedClaim(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValsetUpdatedClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovValsetUpdatedClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValsetUpdatedClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.EventNonce))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.ValsetNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.BlockHeight))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.Status))
	}
	return n
}

func (m *ValsetUpdatedClaimHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.EventNonce))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.ValsetNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovValsetUpdatedClaim(uint64(m.BlockHeight))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovValsetUpdatedClaim(uint64(l))
		}
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovValsetUpdatedClaim(uint64(l))
	}
	return n
}

func sovValsetUpdatedClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValsetUpdatedClaim(x uint64) (n int) {
	return sovValsetUpdatedClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValsetUpdatedClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValsetUpdatedClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValsetUpdatedClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValsetUpdatedClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValsetUpdatedClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValsetUpdatedClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValsetUpdatedClaimHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValsetUpdatedClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValsetUpdatedClaimHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValsetUpdatedClaimHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, BridgeValidator{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValsetUpdatedClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValsetUpdatedClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValsetUpdatedClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValsetUpdatedClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValsetUpdatedClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValsetUpdatedClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValsetUpdatedClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValsetUpdatedClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValsetUpdatedClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValsetUpdatedClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValsetUpdatedClaim = fmt.Errorf("proto: unexpected end of group")
)
