// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: attestation/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetValsetRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetValsetRequest) Reset()         { *m = QueryGetValsetRequest{} }
func (m *QueryGetValsetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetRequest) ProtoMessage()    {}
func (*QueryGetValsetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{2}
}
func (m *QueryGetValsetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetRequest.Merge(m, src)
}
func (m *QueryGetValsetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetRequest proto.InternalMessageInfo

func (m *QueryGetValsetRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetValsetResponse struct {
	Valset Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset"`
}

func (m *QueryGetValsetResponse) Reset()         { *m = QueryGetValsetResponse{} }
func (m *QueryGetValsetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetResponse) ProtoMessage()    {}
func (*QueryGetValsetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{3}
}
func (m *QueryGetValsetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetResponse.Merge(m, src)
}
func (m *QueryGetValsetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetResponse proto.InternalMessageInfo

func (m *QueryGetValsetResponse) GetValset() Valset {
	if m != nil {
		return m.Valset
	}
	return Valset{}
}

type QueryAllValsetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValsetRequest) Reset()         { *m = QueryAllValsetRequest{} }
func (m *QueryAllValsetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValsetRequest) ProtoMessage()    {}
func (*QueryAllValsetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{4}
}
func (m *QueryAllValsetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValsetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValsetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValsetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValsetRequest.Merge(m, src)
}
func (m *QueryAllValsetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValsetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValsetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValsetRequest proto.InternalMessageInfo

func (m *QueryAllValsetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValsetResponse struct {
	Valset     []Valset            `protobuf:"bytes,1,rep,name=valset,proto3" json:"valset"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValsetResponse) Reset()         { *m = QueryAllValsetResponse{} }
func (m *QueryAllValsetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValsetResponse) ProtoMessage()    {}
func (*QueryAllValsetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{5}
}
func (m *QueryAllValsetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValsetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValsetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValsetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValsetResponse.Merge(m, src)
}
func (m *QueryAllValsetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValsetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValsetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValsetResponse proto.InternalMessageInfo

func (m *QueryAllValsetResponse) GetValset() []Valset {
	if m != nil {
		return m.Valset
	}
	return nil
}

func (m *QueryAllValsetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAttestationRequest struct {
	ChainType  uint64 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId    string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EventNonce uint64 `protobuf:"varint,3,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryGetAttestationRequest) Reset()         { *m = QueryGetAttestationRequest{} }
func (m *QueryGetAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttestationRequest) ProtoMessage()    {}
func (*QueryGetAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{6}
}
func (m *QueryGetAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttestationRequest.Merge(m, src)
}
func (m *QueryGetAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttestationRequest proto.InternalMessageInfo

func (m *QueryGetAttestationRequest) GetChainType() uint64 {
	if m != nil {
		return m.ChainType
	}
	return 0
}

func (m *QueryGetAttestationRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetAttestationRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryGetAttestationResponse struct {
	Attestation Attestation `protobuf:"bytes,1,opt,name=attestation,proto3" json:"attestation"`
}

func (m *QueryGetAttestationResponse) Reset()         { *m = QueryGetAttestationResponse{} }
func (m *QueryGetAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttestationResponse) ProtoMessage()    {}
func (*QueryGetAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{7}
}
func (m *QueryGetAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttestationResponse.Merge(m, src)
}
func (m *QueryGetAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttestationResponse proto.InternalMessageInfo

func (m *QueryGetAttestationResponse) GetAttestation() Attestation {
	if m != nil {
		return m.Attestation
	}
	return Attestation{}
}

type QueryAllAttestationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestationRequest) Reset()         { *m = QueryAllAttestationRequest{} }
func (m *QueryAllAttestationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestationRequest) ProtoMessage()    {}
func (*QueryAllAttestationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{8}
}
func (m *QueryAllAttestationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestationRequest.Merge(m, src)
}
func (m *QueryAllAttestationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestationRequest proto.InternalMessageInfo

func (m *QueryAllAttestationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAttestationResponse struct {
	Attestation []Attestation       `protobuf:"bytes,1,rep,name=attestation,proto3" json:"attestation"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestationResponse) Reset()         { *m = QueryAllAttestationResponse{} }
func (m *QueryAllAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestationResponse) ProtoMessage()    {}
func (*QueryAllAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{9}
}
func (m *QueryAllAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestationResponse.Merge(m, src)
}
func (m *QueryAllAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestationResponse proto.InternalMessageInfo

func (m *QueryAllAttestationResponse) GetAttestation() []Attestation {
	if m != nil {
		return m.Attestation
	}
	return nil
}

func (m *QueryAllAttestationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValsetConfirmationRequest struct {
	ValsetNonce  uint64 `protobuf:"varint,1,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	Orchestrator string `protobuf:"bytes,2,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *QueryGetValsetConfirmationRequest) Reset()         { *m = QueryGetValsetConfirmationRequest{} }
func (m *QueryGetValsetConfirmationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetConfirmationRequest) ProtoMessage()    {}
func (*QueryGetValsetConfirmationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{10}
}
func (m *QueryGetValsetConfirmationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetConfirmationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetConfirmationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetConfirmationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetConfirmationRequest.Merge(m, src)
}
func (m *QueryGetValsetConfirmationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetConfirmationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetConfirmationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetConfirmationRequest proto.InternalMessageInfo

func (m *QueryGetValsetConfirmationRequest) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *QueryGetValsetConfirmationRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type QueryGetValsetConfirmationResponse struct {
	ValsetConfirmation ValsetConfirmation `protobuf:"bytes,1,opt,name=valsetConfirmation,proto3" json:"valsetConfirmation"`
}

func (m *QueryGetValsetConfirmationResponse) Reset()         { *m = QueryGetValsetConfirmationResponse{} }
func (m *QueryGetValsetConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetConfirmationResponse) ProtoMessage()    {}
func (*QueryGetValsetConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{11}
}
func (m *QueryGetValsetConfirmationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetConfirmationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetConfirmationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetConfirmationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetConfirmationResponse.Merge(m, src)
}
func (m *QueryGetValsetConfirmationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetConfirmationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetConfirmationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetConfirmationResponse proto.InternalMessageInfo

func (m *QueryGetValsetConfirmationResponse) GetValsetConfirmation() ValsetConfirmation {
	if m != nil {
		return m.ValsetConfirmation
	}
	return ValsetConfirmation{}
}

type QueryAllValsetConfirmationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValsetConfirmationRequest) Reset()         { *m = QueryAllValsetConfirmationRequest{} }
func (m *QueryAllValsetConfirmationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValsetConfirmationRequest) ProtoMessage()    {}
func (*QueryAllValsetConfirmationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{12}
}
func (m *QueryAllValsetConfirmationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValsetConfirmationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValsetConfirmationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValsetConfirmationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValsetConfirmationRequest.Merge(m, src)
}
func (m *QueryAllValsetConfirmationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValsetConfirmationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValsetConfirmationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValsetConfirmationRequest proto.InternalMessageInfo

func (m *QueryAllValsetConfirmationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValsetConfirmationResponse struct {
	ValsetConfirmation []ValsetConfirmation `protobuf:"bytes,1,rep,name=valsetConfirmation,proto3" json:"valsetConfirmation"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValsetConfirmationResponse) Reset()         { *m = QueryAllValsetConfirmationResponse{} }
func (m *QueryAllValsetConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValsetConfirmationResponse) ProtoMessage()    {}
func (*QueryAllValsetConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{13}
}
func (m *QueryAllValsetConfirmationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValsetConfirmationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValsetConfirmationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValsetConfirmationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValsetConfirmationResponse.Merge(m, src)
}
func (m *QueryAllValsetConfirmationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValsetConfirmationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValsetConfirmationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValsetConfirmationResponse proto.InternalMessageInfo

func (m *QueryAllValsetConfirmationResponse) GetValsetConfirmation() []ValsetConfirmation {
	if m != nil {
		return m.ValsetConfirmation
	}
	return nil
}

func (m *QueryAllValsetConfirmationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValsetUpdatedClaimRequest struct {
	ChainType  uint64 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId    string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EventNonce uint64 `protobuf:"varint,3,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryGetValsetUpdatedClaimRequest) Reset()         { *m = QueryGetValsetUpdatedClaimRequest{} }
func (m *QueryGetValsetUpdatedClaimRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetUpdatedClaimRequest) ProtoMessage()    {}
func (*QueryGetValsetUpdatedClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{14}
}
func (m *QueryGetValsetUpdatedClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetUpdatedClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetUpdatedClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetUpdatedClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetUpdatedClaimRequest.Merge(m, src)
}
func (m *QueryGetValsetUpdatedClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetUpdatedClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetUpdatedClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetUpdatedClaimRequest proto.InternalMessageInfo

func (m *QueryGetValsetUpdatedClaimRequest) GetChainType() uint64 {
	if m != nil {
		return m.ChainType
	}
	return 0
}

func (m *QueryGetValsetUpdatedClaimRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetValsetUpdatedClaimRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryGetValsetUpdatedClaimResponse struct {
	ValsetUpdatedClaim ValsetUpdatedClaim `protobuf:"bytes,1,opt,name=valsetUpdatedClaim,proto3" json:"valsetUpdatedClaim"`
}

func (m *QueryGetValsetUpdatedClaimResponse) Reset()         { *m = QueryGetValsetUpdatedClaimResponse{} }
func (m *QueryGetValsetUpdatedClaimResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetUpdatedClaimResponse) ProtoMessage()    {}
func (*QueryGetValsetUpdatedClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{15}
}
func (m *QueryGetValsetUpdatedClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetUpdatedClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetUpdatedClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetUpdatedClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetUpdatedClaimResponse.Merge(m, src)
}
func (m *QueryGetValsetUpdatedClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetUpdatedClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetUpdatedClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetUpdatedClaimResponse proto.InternalMessageInfo

func (m *QueryGetValsetUpdatedClaimResponse) GetValsetUpdatedClaim() ValsetUpdatedClaim {
	if m != nil {
		return m.ValsetUpdatedClaim
	}
	return ValsetUpdatedClaim{}
}

type QueryAllValsetUpdatedClaimRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValsetUpdatedClaimRequest) Reset()         { *m = QueryAllValsetUpdatedClaimRequest{} }
func (m *QueryAllValsetUpdatedClaimRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValsetUpdatedClaimRequest) ProtoMessage()    {}
func (*QueryAllValsetUpdatedClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{16}
}
func (m *QueryAllValsetUpdatedClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValsetUpdatedClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValsetUpdatedClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValsetUpdatedClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValsetUpdatedClaimRequest.Merge(m, src)
}
func (m *QueryAllValsetUpdatedClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValsetUpdatedClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValsetUpdatedClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValsetUpdatedClaimRequest proto.InternalMessageInfo

func (m *QueryAllValsetUpdatedClaimRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValsetUpdatedClaimResponse struct {
	ValsetUpdatedClaim []ValsetUpdatedClaim `protobuf:"bytes,1,rep,name=valsetUpdatedClaim,proto3" json:"valsetUpdatedClaim"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValsetUpdatedClaimResponse) Reset()         { *m = QueryAllValsetUpdatedClaimResponse{} }
func (m *QueryAllValsetUpdatedClaimResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValsetUpdatedClaimResponse) ProtoMessage()    {}
func (*QueryAllValsetUpdatedClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{17}
}
func (m *QueryAllValsetUpdatedClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValsetUpdatedClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValsetUpdatedClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValsetUpdatedClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValsetUpdatedClaimResponse.Merge(m, src)
}
func (m *QueryAllValsetUpdatedClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValsetUpdatedClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValsetUpdatedClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValsetUpdatedClaimResponse proto.InternalMessageInfo

func (m *QueryAllValsetUpdatedClaimResponse) GetValsetUpdatedClaim() []ValsetUpdatedClaim {
	if m != nil {
		return m.ValsetUpdatedClaim
	}
	return nil
}

func (m *QueryAllValsetUpdatedClaimResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLatestValsetNonceRequest struct {
}

func (m *QueryLatestValsetNonceRequest) Reset()         { *m = QueryLatestValsetNonceRequest{} }
func (m *QueryLatestValsetNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestValsetNonceRequest) ProtoMessage()    {}
func (*QueryLatestValsetNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{18}
}
func (m *QueryLatestValsetNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestValsetNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestValsetNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestValsetNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestValsetNonceRequest.Merge(m, src)
}
func (m *QueryLatestValsetNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestValsetNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestValsetNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestValsetNonceRequest proto.InternalMessageInfo

type QueryLatestValsetNonceResponse struct {
	ValsetNonce uint64 `protobuf:"varint,1,opt,name=valsetNonce,proto3" json:"valsetNonce,omitempty"`
}

func (m *QueryLatestValsetNonceResponse) Reset()         { *m = QueryLatestValsetNonceResponse{} }
func (m *QueryLatestValsetNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestValsetNonceResponse) ProtoMessage()    {}
func (*QueryLatestValsetNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{19}
}
func (m *QueryLatestValsetNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestValsetNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestValsetNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestValsetNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestValsetNonceResponse.Merge(m, src)
}
func (m *QueryLatestValsetNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestValsetNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestValsetNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestValsetNonceResponse proto.InternalMessageInfo

func (m *QueryLatestValsetNonceResponse) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

type QueryLatestValsetRequest struct {
}

func (m *QueryLatestValsetRequest) Reset()         { *m = QueryLatestValsetRequest{} }
func (m *QueryLatestValsetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestValsetRequest) ProtoMessage()    {}
func (*QueryLatestValsetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{20}
}
func (m *QueryLatestValsetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestValsetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestValsetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestValsetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestValsetRequest.Merge(m, src)
}
func (m *QueryLatestValsetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestValsetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestValsetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestValsetRequest proto.InternalMessageInfo

type QueryLatestValsetResponse struct {
	Valset Valset `protobuf:"bytes,1,opt,name=valset,proto3" json:"valset"`
}

func (m *QueryLatestValsetResponse) Reset()         { *m = QueryLatestValsetResponse{} }
func (m *QueryLatestValsetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestValsetResponse) ProtoMessage()    {}
func (*QueryLatestValsetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{21}
}
func (m *QueryLatestValsetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestValsetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestValsetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestValsetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestValsetResponse.Merge(m, src)
}
func (m *QueryLatestValsetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestValsetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestValsetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestValsetResponse proto.InternalMessageInfo

func (m *QueryLatestValsetResponse) GetValset() Valset {
	if m != nil {
		return m.Valset
	}
	return Valset{}
}

type QueryLastEventNonceRequest struct {
	ChainType        uint64 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId          string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryLastEventNonceRequest) Reset()         { *m = QueryLastEventNonceRequest{} }
func (m *QueryLastEventNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventNonceRequest) ProtoMessage()    {}
func (*QueryLastEventNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{22}
}
func (m *QueryLastEventNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventNonceRequest.Merge(m, src)
}
func (m *QueryLastEventNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventNonceRequest proto.InternalMessageInfo

func (m *QueryLastEventNonceRequest) GetChainType() uint64 {
	if m != nil {
		return m.ChainType
	}
	return 0
}

func (m *QueryLastEventNonceRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryLastEventNonceRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryLastEventNonceResponse struct {
	EventNonce  uint64 `protobuf:"varint,1,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	EventHeight uint64 `protobuf:"varint,2,opt,name=eventHeight,proto3" json:"eventHeight,omitempty"`
}

func (m *QueryLastEventNonceResponse) Reset()         { *m = QueryLastEventNonceResponse{} }
func (m *QueryLastEventNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventNonceResponse) ProtoMessage()    {}
func (*QueryLastEventNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{23}
}
func (m *QueryLastEventNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventNonceResponse.Merge(m, src)
}
func (m *QueryLastEventNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventNonceResponse proto.InternalMessageInfo

func (m *QueryLastEventNonceResponse) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *QueryLastEventNonceResponse) GetEventHeight() uint64 {
	if m != nil {
		return m.EventHeight
	}
	return 0
}

type QueryListOrchestratorsRequest struct {
}

func (m *QueryListOrchestratorsRequest) Reset()         { *m = QueryListOrchestratorsRequest{} }
func (m *QueryListOrchestratorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListOrchestratorsRequest) ProtoMessage()    {}
func (*QueryListOrchestratorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{24}
}
func (m *QueryListOrchestratorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListOrchestratorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListOrchestratorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListOrchestratorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListOrchestratorsRequest.Merge(m, src)
}
func (m *QueryListOrchestratorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListOrchestratorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListOrchestratorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListOrchestratorsRequest proto.InternalMessageInfo

type QueryListOrchestratorsResponse struct {
	OrchestratorSet []MsgSetOrchestratorAddress `protobuf:"bytes,1,rep,name=orchestrator_set,json=orchestratorSet,proto3" json:"orchestrator_set"`
}

func (m *QueryListOrchestratorsResponse) Reset()         { *m = QueryListOrchestratorsResponse{} }
func (m *QueryListOrchestratorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListOrchestratorsResponse) ProtoMessage()    {}
func (*QueryListOrchestratorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_db8c67b37c567218, []int{25}
}
func (m *QueryListOrchestratorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListOrchestratorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListOrchestratorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListOrchestratorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListOrchestratorsResponse.Merge(m, src)
}
func (m *QueryListOrchestratorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListOrchestratorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListOrchestratorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListOrchestratorsResponse proto.InternalMessageInfo

func (m *QueryListOrchestratorsResponse) GetOrchestratorSet() []MsgSetOrchestratorAddress {
	if m != nil {
		return m.OrchestratorSet
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.attestation.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.attestation.QueryParamsResponse")
	proto.RegisterType((*QueryGetValsetRequest)(nil), "routerprotocol.routerchain.attestation.QueryGetValsetRequest")
	proto.RegisterType((*QueryGetValsetResponse)(nil), "routerprotocol.routerchain.attestation.QueryGetValsetResponse")
	proto.RegisterType((*QueryAllValsetRequest)(nil), "routerprotocol.routerchain.attestation.QueryAllValsetRequest")
	proto.RegisterType((*QueryAllValsetResponse)(nil), "routerprotocol.routerchain.attestation.QueryAllValsetResponse")
	proto.RegisterType((*QueryGetAttestationRequest)(nil), "routerprotocol.routerchain.attestation.QueryGetAttestationRequest")
	proto.RegisterType((*QueryGetAttestationResponse)(nil), "routerprotocol.routerchain.attestation.QueryGetAttestationResponse")
	proto.RegisterType((*QueryAllAttestationRequest)(nil), "routerprotocol.routerchain.attestation.QueryAllAttestationRequest")
	proto.RegisterType((*QueryAllAttestationResponse)(nil), "routerprotocol.routerchain.attestation.QueryAllAttestationResponse")
	proto.RegisterType((*QueryGetValsetConfirmationRequest)(nil), "routerprotocol.routerchain.attestation.QueryGetValsetConfirmationRequest")
	proto.RegisterType((*QueryGetValsetConfirmationResponse)(nil), "routerprotocol.routerchain.attestation.QueryGetValsetConfirmationResponse")
	proto.RegisterType((*QueryAllValsetConfirmationRequest)(nil), "routerprotocol.routerchain.attestation.QueryAllValsetConfirmationRequest")
	proto.RegisterType((*QueryAllValsetConfirmationResponse)(nil), "routerprotocol.routerchain.attestation.QueryAllValsetConfirmationResponse")
	proto.RegisterType((*QueryGetValsetUpdatedClaimRequest)(nil), "routerprotocol.routerchain.attestation.QueryGetValsetUpdatedClaimRequest")
	proto.RegisterType((*QueryGetValsetUpdatedClaimResponse)(nil), "routerprotocol.routerchain.attestation.QueryGetValsetUpdatedClaimResponse")
	proto.RegisterType((*QueryAllValsetUpdatedClaimRequest)(nil), "routerprotocol.routerchain.attestation.QueryAllValsetUpdatedClaimRequest")
	proto.RegisterType((*QueryAllValsetUpdatedClaimResponse)(nil), "routerprotocol.routerchain.attestation.QueryAllValsetUpdatedClaimResponse")
	proto.RegisterType((*QueryLatestValsetNonceRequest)(nil), "routerprotocol.routerchain.attestation.QueryLatestValsetNonceRequest")
	proto.RegisterType((*QueryLatestValsetNonceResponse)(nil), "routerprotocol.routerchain.attestation.QueryLatestValsetNonceResponse")
	proto.RegisterType((*QueryLatestValsetRequest)(nil), "routerprotocol.routerchain.attestation.QueryLatestValsetRequest")
	proto.RegisterType((*QueryLatestValsetResponse)(nil), "routerprotocol.routerchain.attestation.QueryLatestValsetResponse")
	proto.RegisterType((*QueryLastEventNonceRequest)(nil), "routerprotocol.routerchain.attestation.QueryLastEventNonceRequest")
	proto.RegisterType((*QueryLastEventNonceResponse)(nil), "routerprotocol.routerchain.attestation.QueryLastEventNonceResponse")
	proto.RegisterType((*QueryListOrchestratorsRequest)(nil), "routerprotocol.routerchain.attestation.QueryListOrchestratorsRequest")
	proto.RegisterType((*QueryListOrchestratorsResponse)(nil), "routerprotocol.routerchain.attestation.QueryListOrchestratorsResponse")
}

func init() { proto.RegisterFile("attestation/query.proto", fileDescriptor_db8c67b37c567218) }

var fileDescriptor_db8c67b37c567218 = []byte{
	// 1300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0x8e, 0x93, 0x36, 0x90, 0x97, 0xa8, 0xb4, 0x43, 0x4a, 0xd3, 0x85, 0x6c, 0xda, 0x91, 0x08,
	0x08, 0x54, 0x9b, 0xa6, 0x42, 0x2d, 0x2d, 0x49, 0xb3, 0x09, 0x49, 0x09, 0x0a, 0x25, 0x6c, 0x69,
	0x0e, 0x54, 0xc8, 0x72, 0x76, 0x27, 0x1b, 0x83, 0x63, 0x6f, 0x3d, 0x93, 0xd0, 0xb0, 0x5a, 0x0e,
	0x70, 0xe2, 0x56, 0x09, 0x84, 0xc4, 0x5f, 0xc1, 0x1f, 0xc0, 0x11, 0x0e, 0xe5, 0x56, 0x09, 0x0e,
	0x3d, 0x01, 0x4a, 0x38, 0xc0, 0x85, 0x1b, 0x1c, 0x11, 0xf2, 0xcc, 0x78, 0x77, 0xbc, 0xf6, 0xa6,
	0x6b, 0x7b, 0xc3, 0x6d, 0x3d, 0x3f, 0xde, 0x7b, 0xdf, 0xf7, 0xbe, 0x37, 0xf3, 0x66, 0xe1, 0x8c,
	0xc5, 0x18, 0xa1, 0xcc, 0x62, 0xb6, 0xe7, 0x1a, 0x77, 0x77, 0x88, 0xbf, 0xa7, 0xd7, 0x7d, 0x8f,
	0x79, 0x68, 0xda, 0xf7, 0x76, 0x18, 0xf1, 0xf9, 0x47, 0xc5, 0x73, 0x74, 0xf1, 0x59, 0xd9, 0xb2,
	0x6c, 0x57, 0x57, 0xf6, 0x14, 0xc6, 0x6b, 0x5e, 0xcd, 0xe3, 0xab, 0x8c, 0xe0, 0x97, 0xd8, 0x5d,
	0x78, 0xae, 0xe6, 0x79, 0x35, 0x87, 0x18, 0x56, 0xdd, 0x36, 0x2c, 0xd7, 0xf5, 0xc4, 0x62, 0x2a,
	0x67, 0x5f, 0xaa, 0x78, 0x74, 0xdb, 0xa3, 0xc6, 0x86, 0x45, 0x89, 0x70, 0x6a, 0xec, 0x5e, 0xdc,
	0x20, 0xcc, 0xba, 0x68, 0xd4, 0xad, 0x9a, 0xed, 0xf2, 0xc5, 0x72, 0xed, 0x84, 0x1a, 0x60, 0xdd,
	0xf2, 0xad, 0x6d, 0x9a, 0x34, 0xb3, 0x6b, 0x39, 0x94, 0x30, 0x39, 0x33, 0xa9, 0xce, 0x28, 0xbf,
	0xe5, 0xf4, 0xf3, 0xf1, 0x8d, 0x66, 0xc5, 0x73, 0x37, 0x6d, 0x7f, 0x5b, 0x5d, 0x36, 0xae, 0x2e,
	0x63, 0xf7, 0xe4, 0xe8, 0x74, 0xc2, 0xe6, 0x9d, 0x7a, 0xd5, 0x62, 0xa4, 0x6a, 0x56, 0x1c, 0xcb,
	0xde, 0x96, 0xeb, 0xb0, 0xba, 0x6e, 0xc3, 0xb7, 0xab, 0x35, 0x62, 0xee, 0x5a, 0x8e, 0x5d, 0xb5,
	0x98, 0xe7, 0x8b, 0x35, 0x78, 0x1c, 0xd0, 0xbb, 0x01, 0xfa, 0x35, 0x0e, 0xab, 0x4c, 0xee, 0xee,
	0x10, 0xca, 0x70, 0x05, 0x9e, 0x8e, 0x8c, 0xd2, 0xba, 0xe7, 0x52, 0x82, 0x56, 0x61, 0x58, 0xc0,
	0x9f, 0xd0, 0xce, 0x69, 0x2f, 0x8e, 0xce, 0xe8, 0x7a, 0x6f, 0x19, 0xd2, 0x85, 0x9d, 0x85, 0x63,
	0x0f, 0x7e, 0x99, 0x1a, 0x28, 0x4b, 0x1b, 0xf8, 0x02, 0x9c, 0xe6, 0x4e, 0x6e, 0x10, 0xb6, 0xce,
	0x41, 0x48, 0xef, 0x68, 0x1c, 0x8e, 0xbb, 0x9e, 0x5b, 0x21, 0xdc, 0xcb, 0xb1, 0xb2, 0xf8, 0xc0,
	0x9b, 0xf0, 0x4c, 0xe7, 0xf2, 0x76, 0x58, 0x82, 0x85, 0xb4, 0x61, 0x09, 0x3b, 0x61, 0x58, 0xc2,
	0x06, 0x36, 0x65, 0x58, 0x25, 0xc7, 0x89, 0x86, 0xb5, 0x0c, 0xd0, 0x96, 0x86, 0x74, 0x35, 0xad,
	0x0b, 0x1d, 0xe9, 0x81, 0x8e, 0x74, 0x21, 0x5e, 0xa9, 0x23, 0x7d, 0xcd, 0xaa, 0x11, 0xb9, 0xb7,
	0xac, 0xec, 0xc4, 0xdf, 0x6a, 0x12, 0x89, 0xe2, 0x21, 0x01, 0xc9, 0x50, 0x5e, 0x24, 0xe8, 0x46,
	0x24, 0xe0, 0x41, 0x1e, 0xf0, 0x0b, 0x8f, 0x0d, 0x58, 0x84, 0x12, 0x89, 0xf8, 0x63, 0x28, 0x84,
	0xd4, 0x97, 0xda, 0x4e, 0x43, 0x5e, 0x26, 0x01, 0x78, 0x40, 0x26, 0xdb, 0xab, 0x87, 0x39, 0x1b,
	0xe1, 0x23, 0xef, 0xed, 0xd5, 0x09, 0x3a, 0x0b, 0x4f, 0x8a, 0x69, 0xbb, 0xca, 0x63, 0x18, 0x29,
	0x3f, 0xc1, 0xbf, 0x57, 0xaa, 0x68, 0x0a, 0x46, 0xc9, 0x2e, 0x71, 0x99, 0x29, 0xd2, 0x3d, 0xc4,
	0xb7, 0x02, 0x1f, 0xba, 0xc9, 0x73, 0xfe, 0x09, 0x3c, 0x9b, 0xe8, 0x58, 0xd2, 0x75, 0x07, 0x46,
	0x15, 0x12, 0x64, 0x4a, 0x2e, 0xf5, 0xca, 0x99, 0x62, 0x51, 0x12, 0xa7, 0x5a, 0xc3, 0x55, 0x09,
	0xba, 0xe4, 0x38, 0x09, 0xa0, 0xfb, 0x25, 0x86, 0xef, 0x35, 0x09, 0xb1, 0xd3, 0x4d, 0x37, 0x88,
	0x43, 0xfd, 0x83, 0xd8, 0x3f, 0x81, 0x7c, 0x08, 0xe7, 0xa3, 0xb5, 0xb9, 0xa8, 0x9c, 0x65, 0x21,
	0x65, 0xe7, 0x61, 0x4c, 0x1e, 0x56, 0x6a, 0x75, 0x8f, 0x8a, 0x31, 0x9e, 0x6f, 0x84, 0x61, 0xcc,
	0xf3, 0x2b, 0x5b, 0x84, 0x32, 0x3f, 0x38, 0xa3, 0xa4, 0x5e, 0x22, 0x63, 0xf8, 0x6b, 0x0d, 0xf0,
	0x61, 0xce, 0x24, 0x71, 0x75, 0x40, 0xbb, 0xb1, 0x59, 0x99, 0xa8, 0xab, 0xe9, 0xca, 0x4a, 0xb5,
	0x20, 0x69, 0x4c, 0xb0, 0x8d, 0x3f, 0x92, 0x24, 0xb4, 0xca, 0x3a, 0x89, 0x84, 0x7e, 0xe9, 0xe6,
	0xd7, 0x90, 0x85, 0x2e, 0xde, 0x1e, 0xc3, 0xc2, 0xd0, 0x51, 0xb1, 0xd0, 0x3f, 0x4d, 0x7d, 0xda,
	0xa9, 0xa9, 0xdb, 0xe2, 0x8a, 0x5b, 0x0c, 0x6e, 0xb8, 0xff, 0xe1, 0xec, 0x89, 0xeb, 0x2c, 0x1a,
	0x40, 0x27, 0xc3, 0xea, 0x6c, 0x36, 0x9d, 0xa9, 0x16, 0xa2, 0x0c, 0xab, 0x33, 0x71, 0x9d, 0x25,
	0x11, 0x73, 0x74, 0x3a, 0x4b, 0xc5, 0xc2, 0xd0, 0x51, 0xb1, 0xd0, 0x3f, 0x9d, 0x4d, 0xc1, 0x24,
	0x07, 0xb8, 0x6a, 0x05, 0x91, 0xac, 0xb7, 0x4f, 0xa3, 0xb0, 0x19, 0x5a, 0x80, 0x62, 0xb7, 0x05,
	0x12, 0xfd, 0x39, 0x50, 0x4f, 0xb1, 0x84, 0x83, 0x0d, 0x17, 0x60, 0x22, 0x66, 0x23, 0xb4, 0x6f,
	0xc3, 0xd9, 0x84, 0xb9, 0x23, 0xe9, 0x6d, 0x3e, 0xd7, 0xe4, 0xa5, 0xb6, 0x6a, 0x51, 0xb6, 0xd4,
	0xd2, 0x7a, 0xfe, 0x6a, 0x7a, 0x19, 0x4e, 0xb5, 0x3a, 0x4b, 0xd3, 0xaa, 0x56, 0x7d, 0x42, 0x29,
	0xaf, 0xa9, 0x91, 0xf2, 0xc9, 0xd6, 0x44, 0x49, 0x8c, 0x63, 0x53, 0x5e, 0x79, 0x9d, 0x41, 0x48,
	0xc8, 0x45, 0x50, 0xca, 0x50, 0x46, 0xa1, 0x8c, 0x04, 0x6c, 0xf3, 0xaf, 0x37, 0x89, 0x5d, 0xdb,
	0x62, 0x3c, 0x92, 0x63, 0x65, 0x75, 0xa8, 0x9d, 0x52, 0x9b, 0xb2, 0x77, 0x94, 0xbb, 0xa3, 0xd5,
	0xdf, 0x7e, 0xa5, 0x85, 0x39, 0x8d, 0xaf, 0x90, 0x51, 0xf8, 0x70, 0x52, 0xbd, 0x76, 0xcc, 0x76,
	0x53, 0x56, 0xea, 0x35, 0x05, 0x6f, 0xd3, 0xda, 0x2d, 0x12, 0x31, 0x2f, 0x19, 0x90, 0x59, 0x79,
	0x4a, 0x75, 0x70, 0x8b, 0xb0, 0x99, 0x7f, 0xcf, 0xc0, 0x71, 0x1e, 0x16, 0xfa, 0x4e, 0x83, 0x61,
	0xd1, 0x34, 0xa3, 0x9e, 0xcb, 0x27, 0xde, 0xc7, 0x17, 0xae, 0x65, 0xda, 0x2b, 0x18, 0xc0, 0x57,
	0x3e, 0xfb, 0xe9, 0xf7, 0x2f, 0x07, 0x67, 0xd0, 0x2b, 0x86, 0xd8, 0x75, 0x21, 0xb4, 0x12, 0x7e,
	0x73, 0x33, 0x46, 0xfc, 0x71, 0x84, 0x7e, 0xd4, 0x60, 0x58, 0xe8, 0x0f, 0xcd, 0xa6, 0x8a, 0xa0,
	0xf3, 0x29, 0x50, 0x98, 0xcb, 0xba, 0x5d, 0x62, 0x98, 0xe7, 0x18, 0xae, 0xa2, 0x2b, 0xbd, 0x63,
	0x10, 0xa5, 0x62, 0x34, 0xf8, 0xbd, 0xd0, 0x44, 0x3f, 0x68, 0x30, 0x22, 0x8c, 0x96, 0x1c, 0x27,
	0x25, 0x9c, 0xce, 0x27, 0x44, 0x4a, 0x38, 0xb1, 0xf7, 0x41, 0x96, 0x94, 0xc8, 0xb7, 0xc0, 0x5f,
	0x1a, 0x8c, 0x2a, 0xdd, 0x20, 0x5a, 0x48, 0x4b, 0x6c, 0xbc, 0x07, 0x2e, 0x2c, 0xe6, 0xb2, 0x21,
	0x21, 0xad, 0x73, 0x48, 0x6b, 0xe8, 0x66, 0xef, 0x90, 0xd4, 0xdf, 0x8d, 0xf0, 0x44, 0x6a, 0x1a,
	0x0d, 0xe5, 0x3e, 0x6f, 0xa2, 0x47, 0x1a, 0x9c, 0x50, 0xfc, 0x05, 0xc9, 0x5b, 0x48, 0xcb, 0x7e,
	0x6e, 0xcc, 0xc9, 0x4d, 0x3d, 0x9e, 0xe5, 0x98, 0x2f, 0xa3, 0x57, 0x33, 0x61, 0x46, 0xf7, 0x07,
	0x01, 0xc5, 0x7b, 0x32, 0xb4, 0x92, 0xad, 0x56, 0x12, 0xba, 0xd4, 0xc2, 0x5b, 0xfd, 0x30, 0x25,
	0xc1, 0x56, 0x38, 0xd8, 0x0f, 0xd0, 0x9d, 0xb4, 0x9a, 0x8d, 0xfc, 0x21, 0x62, 0x34, 0xd4, 0xb7,
	0x43, 0xd3, 0x68, 0xa8, 0x67, 0x67, 0x13, 0xfd, 0xad, 0xc1, 0xe9, 0x78, 0x0c, 0x41, 0xd2, 0x57,
	0xb2, 0x95, 0x5c, 0x7e, 0x56, 0x0e, 0x6d, 0xcc, 0xf1, 0x12, 0x67, 0xe5, 0x3a, 0x9a, 0xcd, 0xc5,
	0x0a, 0xfa, 0xa6, 0x25, 0x85, 0x48, 0x73, 0x94, 0x51, 0x0a, 0x09, 0x8d, 0x64, 0x56, 0x29, 0x24,
	0x75, 0x89, 0xd8, 0xe1, 0xa0, 0x37, 0x51, 0x35, 0x35, 0xe8, 0xc8, 0xdf, 0x5b, 0x61, 0xd1, 0x07,
	0x5d, 0x4a, 0xb3, 0xfb, 0x09, 0xf0, 0x4f, 0x4b, 0x13, 0x6a, 0x30, 0x39, 0x34, 0x91, 0x9f, 0x9e,
	0x43, 0x9b, 0x68, 0xbc, 0xcc, 0xe9, 0x99, 0x47, 0x73, 0xf9, 0xe8, 0x41, 0x7f, 0x6a, 0x70, 0x2a,
	0xd6, 0xac, 0xa2, 0xa5, 0x54, 0x91, 0x76, 0xeb, 0x86, 0x0b, 0xcb, 0x79, 0xcd, 0x64, 0x2f, 0x00,
	0x87, 0x1b, 0x33, 0xd5, 0x83, 0x00, 0xfd, 0xac, 0xc1, 0x98, 0xea, 0x04, 0xcd, 0x67, 0x8e, 0x2f,
	0x44, 0x58, 0xca, 0x61, 0x41, 0x82, 0xbb, 0xce, 0xc1, 0xbd, 0x86, 0x2e, 0x67, 0x04, 0x87, 0xbe,
	0x18, 0x84, 0x13, 0xd1, 0xf6, 0x38, 0xe5, 0xed, 0x95, 0xd8, 0xe0, 0xa7, 0xbc, 0xbd, 0x92, 0xfb,
	0x73, 0xec, 0x72, 0x70, 0x5b, 0x68, 0x33, 0x0d, 0x38, 0xca, 0x4c, 0xa5, 0x38, 0xbb, 0x57, 0x70,
	0xec, 0x15, 0xd1, 0x44, 0x7f, 0x04, 0x72, 0xee, 0xec, 0xd3, 0xd3, 0xca, 0xb9, 0xcb, 0x4b, 0x20,
	0xad, 0x9c, 0xbb, 0x3d, 0x17, 0xf0, 0x1b, 0x9c, 0x94, 0x39, 0xf4, 0x7a, 0x0a, 0x52, 0x6c, 0xca,
	0x4c, 0xf5, 0x1a, 0xa3, 0x0b, 0xb7, 0x1f, 0xec, 0x17, 0xb5, 0x87, 0xfb, 0x45, 0xed, 0xb7, 0xfd,
	0xa2, 0x76, 0xff, 0xa0, 0x38, 0xf0, 0xf0, 0xa0, 0x38, 0xf0, 0xe8, 0xa0, 0x38, 0xf0, 0xfe, 0xb5,
	0x9a, 0xcd, 0xb6, 0x76, 0x36, 0xf4, 0x8a, 0xb7, 0x7d, 0xb8, 0x87, 0x7b, 0x11, 0x1f, 0x01, 0xc1,
	0x74, 0x63, 0x98, 0x2f, 0xbd, 0xf4, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x95, 0xdf, 0x28,
	0x6a, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Valset by nonce.
	Valset(ctx context.Context, in *QueryGetValsetRequest, opts ...grpc.CallOption) (*QueryGetValsetResponse, error)
	// Queries a list of Valset items.
	ValsetAll(ctx context.Context, in *QueryAllValsetRequest, opts ...grpc.CallOption) (*QueryAllValsetResponse, error)
	// Queries a Attestation by index.
	Attestation(ctx context.Context, in *QueryGetAttestationRequest, opts ...grpc.CallOption) (*QueryGetAttestationResponse, error)
	// Queries a list of Attestation items.
	AttestationAll(ctx context.Context, in *QueryAllAttestationRequest, opts ...grpc.CallOption) (*QueryAllAttestationResponse, error)
	// Queries a ValsetConfirmation by valset nonce.
	ValsetConfirmation(ctx context.Context, in *QueryGetValsetConfirmationRequest, opts ...grpc.CallOption) (*QueryGetValsetConfirmationResponse, error)
	// Queries a list of ValsetConfirmation items.
	ValsetConfirmationAll(ctx context.Context, in *QueryAllValsetConfirmationRequest, opts ...grpc.CallOption) (*QueryAllValsetConfirmationResponse, error)
	// Queries a ValsetUpdatedClaim by index.
	ValsetUpdatedClaim(ctx context.Context, in *QueryGetValsetUpdatedClaimRequest, opts ...grpc.CallOption) (*QueryGetValsetUpdatedClaimResponse, error)
	// Queries a list of ValsetUpdatedClaim items.
	ValsetUpdatedClaimAll(ctx context.Context, in *QueryAllValsetUpdatedClaimRequest, opts ...grpc.CallOption) (*QueryAllValsetUpdatedClaimResponse, error)
	// Queries a list of LatestValsetNonce items.
	LatestValsetNonce(ctx context.Context, in *QueryLatestValsetNonceRequest, opts ...grpc.CallOption) (*QueryLatestValsetNonceResponse, error)
	// Queries a list of LatestValset items.
	LatestValset(ctx context.Context, in *QueryLatestValsetRequest, opts ...grpc.CallOption) (*QueryLatestValsetResponse, error)
	// Queries a list of LastEventNonce items.
	LastEventNonce(ctx context.Context, in *QueryLastEventNonceRequest, opts ...grpc.CallOption) (*QueryLastEventNonceResponse, error)
	// Queries a list of ListOrchestrators items.
	ListOrchestrators(ctx context.Context, in *QueryListOrchestratorsRequest, opts ...grpc.CallOption) (*QueryListOrchestratorsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Valset(ctx context.Context, in *QueryGetValsetRequest, opts ...grpc.CallOption) (*QueryGetValsetResponse, error) {
	out := new(QueryGetValsetResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/Valset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetAll(ctx context.Context, in *QueryAllValsetRequest, opts ...grpc.CallOption) (*QueryAllValsetResponse, error) {
	out := new(QueryAllValsetResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/ValsetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attestation(ctx context.Context, in *QueryGetAttestationRequest, opts ...grpc.CallOption) (*QueryGetAttestationResponse, error) {
	out := new(QueryGetAttestationResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/Attestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttestationAll(ctx context.Context, in *QueryAllAttestationRequest, opts ...grpc.CallOption) (*QueryAllAttestationResponse, error) {
	out := new(QueryAllAttestationResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/AttestationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirmation(ctx context.Context, in *QueryGetValsetConfirmationRequest, opts ...grpc.CallOption) (*QueryGetValsetConfirmationResponse, error) {
	out := new(QueryGetValsetConfirmationResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/ValsetConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetConfirmationAll(ctx context.Context, in *QueryAllValsetConfirmationRequest, opts ...grpc.CallOption) (*QueryAllValsetConfirmationResponse, error) {
	out := new(QueryAllValsetConfirmationResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/ValsetConfirmationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetUpdatedClaim(ctx context.Context, in *QueryGetValsetUpdatedClaimRequest, opts ...grpc.CallOption) (*QueryGetValsetUpdatedClaimResponse, error) {
	out := new(QueryGetValsetUpdatedClaimResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/ValsetUpdatedClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValsetUpdatedClaimAll(ctx context.Context, in *QueryAllValsetUpdatedClaimRequest, opts ...grpc.CallOption) (*QueryAllValsetUpdatedClaimResponse, error) {
	out := new(QueryAllValsetUpdatedClaimResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/ValsetUpdatedClaimAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestValsetNonce(ctx context.Context, in *QueryLatestValsetNonceRequest, opts ...grpc.CallOption) (*QueryLatestValsetNonceResponse, error) {
	out := new(QueryLatestValsetNonceResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/LatestValsetNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestValset(ctx context.Context, in *QueryLatestValsetRequest, opts ...grpc.CallOption) (*QueryLatestValsetResponse, error) {
	out := new(QueryLatestValsetResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/LatestValset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventNonce(ctx context.Context, in *QueryLastEventNonceRequest, opts ...grpc.CallOption) (*QueryLastEventNonceResponse, error) {
	out := new(QueryLastEventNonceResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/LastEventNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListOrchestrators(ctx context.Context, in *QueryListOrchestratorsRequest, opts ...grpc.CallOption) (*QueryListOrchestratorsResponse, error) {
	out := new(QueryListOrchestratorsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.attestation.Query/ListOrchestrators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Valset by nonce.
	Valset(context.Context, *QueryGetValsetRequest) (*QueryGetValsetResponse, error)
	// Queries a list of Valset items.
	ValsetAll(context.Context, *QueryAllValsetRequest) (*QueryAllValsetResponse, error)
	// Queries a Attestation by index.
	Attestation(context.Context, *QueryGetAttestationRequest) (*QueryGetAttestationResponse, error)
	// Queries a list of Attestation items.
	AttestationAll(context.Context, *QueryAllAttestationRequest) (*QueryAllAttestationResponse, error)
	// Queries a ValsetConfirmation by valset nonce.
	ValsetConfirmation(context.Context, *QueryGetValsetConfirmationRequest) (*QueryGetValsetConfirmationResponse, error)
	// Queries a list of ValsetConfirmation items.
	ValsetConfirmationAll(context.Context, *QueryAllValsetConfirmationRequest) (*QueryAllValsetConfirmationResponse, error)
	// Queries a ValsetUpdatedClaim by index.
	ValsetUpdatedClaim(context.Context, *QueryGetValsetUpdatedClaimRequest) (*QueryGetValsetUpdatedClaimResponse, error)
	// Queries a list of ValsetUpdatedClaim items.
	ValsetUpdatedClaimAll(context.Context, *QueryAllValsetUpdatedClaimRequest) (*QueryAllValsetUpdatedClaimResponse, error)
	// Queries a list of LatestValsetNonce items.
	LatestValsetNonce(context.Context, *QueryLatestValsetNonceRequest) (*QueryLatestValsetNonceResponse, error)
	// Queries a list of LatestValset items.
	LatestValset(context.Context, *QueryLatestValsetRequest) (*QueryLatestValsetResponse, error)
	// Queries a list of LastEventNonce items.
	LastEventNonce(context.Context, *QueryLastEventNonceRequest) (*QueryLastEventNonceResponse, error)
	// Queries a list of ListOrchestrators items.
	ListOrchestrators(context.Context, *QueryListOrchestratorsRequest) (*QueryListOrchestratorsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Valset(ctx context.Context, req *QueryGetValsetRequest) (*QueryGetValsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Valset not implemented")
}
func (*UnimplementedQueryServer) ValsetAll(ctx context.Context, req *QueryAllValsetRequest) (*QueryAllValsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetAll not implemented")
}
func (*UnimplementedQueryServer) Attestation(ctx context.Context, req *QueryGetAttestationRequest) (*QueryGetAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attestation not implemented")
}
func (*UnimplementedQueryServer) AttestationAll(ctx context.Context, req *QueryAllAttestationRequest) (*QueryAllAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttestationAll not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirmation(ctx context.Context, req *QueryGetValsetConfirmationRequest) (*QueryGetValsetConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirmation not implemented")
}
func (*UnimplementedQueryServer) ValsetConfirmationAll(ctx context.Context, req *QueryAllValsetConfirmationRequest) (*QueryAllValsetConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetConfirmationAll not implemented")
}
func (*UnimplementedQueryServer) ValsetUpdatedClaim(ctx context.Context, req *QueryGetValsetUpdatedClaimRequest) (*QueryGetValsetUpdatedClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetUpdatedClaim not implemented")
}
func (*UnimplementedQueryServer) ValsetUpdatedClaimAll(ctx context.Context, req *QueryAllValsetUpdatedClaimRequest) (*QueryAllValsetUpdatedClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValsetUpdatedClaimAll not implemented")
}
func (*UnimplementedQueryServer) LatestValsetNonce(ctx context.Context, req *QueryLatestValsetNonceRequest) (*QueryLatestValsetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestValsetNonce not implemented")
}
func (*UnimplementedQueryServer) LatestValset(ctx context.Context, req *QueryLatestValsetRequest) (*QueryLatestValsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestValset not implemented")
}
func (*UnimplementedQueryServer) LastEventNonce(ctx context.Context, req *QueryLastEventNonceRequest) (*QueryLastEventNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventNonce not implemented")
}
func (*UnimplementedQueryServer) ListOrchestrators(ctx context.Context, req *QueryListOrchestratorsRequest) (*QueryListOrchestratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrchestrators not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Valset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Valset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/Valset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Valset(ctx, req.(*QueryGetValsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/ValsetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetAll(ctx, req.(*QueryAllValsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/Attestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attestation(ctx, req.(*QueryGetAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttestationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAttestationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttestationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/AttestationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttestationAll(ctx, req.(*QueryAllAttestationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValsetConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/ValsetConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirmation(ctx, req.(*QueryGetValsetConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetConfirmationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValsetConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetConfirmationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/ValsetConfirmationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetConfirmationAll(ctx, req.(*QueryAllValsetConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetUpdatedClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValsetUpdatedClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetUpdatedClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/ValsetUpdatedClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetUpdatedClaim(ctx, req.(*QueryGetValsetUpdatedClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValsetUpdatedClaimAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValsetUpdatedClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValsetUpdatedClaimAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/ValsetUpdatedClaimAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValsetUpdatedClaimAll(ctx, req.(*QueryAllValsetUpdatedClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestValsetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestValsetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestValsetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/LatestValsetNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestValsetNonce(ctx, req.(*QueryLatestValsetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestValset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestValsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestValset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/LatestValset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestValset(ctx, req.(*QueryLatestValsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/LastEventNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventNonce(ctx, req.(*QueryLastEventNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListOrchestrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListOrchestratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListOrchestrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.attestation.Query/ListOrchestrators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListOrchestrators(ctx, req.(*QueryListOrchestratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.attestation.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Valset",
			Handler:    _Query_Valset_Handler,
		},
		{
			MethodName: "ValsetAll",
			Handler:    _Query_ValsetAll_Handler,
		},
		{
			MethodName: "Attestation",
			Handler:    _Query_Attestation_Handler,
		},
		{
			MethodName: "AttestationAll",
			Handler:    _Query_AttestationAll_Handler,
		},
		{
			MethodName: "ValsetConfirmation",
			Handler:    _Query_ValsetConfirmation_Handler,
		},
		{
			MethodName: "ValsetConfirmationAll",
			Handler:    _Query_ValsetConfirmationAll_Handler,
		},
		{
			MethodName: "ValsetUpdatedClaim",
			Handler:    _Query_ValsetUpdatedClaim_Handler,
		},
		{
			MethodName: "ValsetUpdatedClaimAll",
			Handler:    _Query_ValsetUpdatedClaimAll_Handler,
		},
		{
			MethodName: "LatestValsetNonce",
			Handler:    _Query_LatestValsetNonce_Handler,
		},
		{
			MethodName: "LatestValset",
			Handler:    _Query_LatestValset_Handler,
		},
		{
			MethodName: "LastEventNonce",
			Handler:    _Query_LastEventNonce_Handler,
		},
		{
			MethodName: "ListOrchestrators",
			Handler:    _Query_ListOrchestrators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attestation/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValsetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValsetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValsetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValsetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValsetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValsetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Valset) > 0 {
		for iNdEx := len(m.Valset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Attestation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Attestation) > 0 {
		for iNdEx := len(m.Attestation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetConfirmationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetConfirmationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetConfirmationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetConfirmationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetConfirmationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetConfirmationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValsetConfirmation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValsetConfirmationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValsetConfirmationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValsetConfirmationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValsetConfirmationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValsetConfirmationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValsetConfirmationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValsetConfirmation) > 0 {
		for iNdEx := len(m.ValsetConfirmation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetConfirmation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetUpdatedClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetUpdatedClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetUpdatedClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetUpdatedClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetUpdatedClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetUpdatedClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValsetUpdatedClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValsetUpdatedClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValsetUpdatedClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValsetUpdatedClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValsetUpdatedClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValsetUpdatedClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValsetUpdatedClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValsetUpdatedClaim) > 0 {
		for iNdEx := len(m.ValsetUpdatedClaim) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetUpdatedClaim[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestValsetNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestValsetNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestValsetNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestValsetNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestValsetNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestValsetNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValsetNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestValsetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestValsetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestValsetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestValsetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestValsetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestValsetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Valset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLastEventNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListOrchestratorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListOrchestratorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListOrchestratorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListOrchestratorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListOrchestratorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListOrchestratorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorSet) > 0 {
		for iNdEx := len(m.OrchestratorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrchestratorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetValsetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetValsetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Valset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValsetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValsetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Valset) > 0 {
		for _, e := range m.Valset {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovQuery(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryGetAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Attestation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAttestationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestation) > 0 {
		for _, e := range m.Attestation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValsetConfirmationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetNonce != 0 {
		n += 1 + sovQuery(uint64(m.ValsetNonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValsetConfirmationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValsetConfirmation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValsetConfirmationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValsetConfirmationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValsetConfirmation) > 0 {
		for _, e := range m.ValsetConfirmation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValsetUpdatedClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovQuery(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryGetValsetUpdatedClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValsetUpdatedClaim.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValsetUpdatedClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValsetUpdatedClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValsetUpdatedClaim) > 0 {
		for _, e := range m.ValsetUpdatedClaim {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestValsetNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestValsetNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetNonce != 0 {
		n += 1 + sovQuery(uint64(m.ValsetNonce))
	}
	return n
}

func (m *QueryLatestValsetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestValsetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Valset.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLastEventNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovQuery(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastEventNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	if m.EventHeight != 0 {
		n += 1 + sovQuery(uint64(m.EventHeight))
	}
	return n
}

func (m *QueryListOrchestratorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListOrchestratorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrchestratorSet) > 0 {
		for _, e := range m.OrchestratorSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValsetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValsetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValsetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValsetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValsetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValsetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valset = append(m.Valset, Valset{})
			if err := m.Valset[len(m.Valset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attestation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestation = append(m.Attestation, Attestation{})
			if err := m.Attestation[len(m.Attestation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetConfirmationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetConfirmationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetConfirmationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetConfirmationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetConfirmationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetConfirmationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetConfirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValsetConfirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValsetConfirmationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValsetConfirmationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValsetConfirmationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValsetConfirmationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValsetConfirmationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValsetConfirmationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetConfirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetConfirmation = append(m.ValsetConfirmation, ValsetConfirmation{})
			if err := m.ValsetConfirmation[len(m.ValsetConfirmation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetUpdatedClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetUpdatedClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetUpdatedClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetUpdatedClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetUpdatedClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetUpdatedClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetUpdatedClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValsetUpdatedClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValsetUpdatedClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValsetUpdatedClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValsetUpdatedClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValsetUpdatedClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValsetUpdatedClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValsetUpdatedClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetUpdatedClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetUpdatedClaim = append(m.ValsetUpdatedClaim, ValsetUpdatedClaim{})
			if err := m.ValsetUpdatedClaim[len(m.ValsetUpdatedClaim)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestValsetNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestValsetNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestValsetNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestValsetNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestValsetNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestValsetNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestValsetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestValsetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestValsetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestValsetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestValsetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestValsetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Valset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHeight", wireType)
			}
			m.EventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListOrchestratorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListOrchestratorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListOrchestratorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListOrchestratorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListOrchestratorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListOrchestratorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorSet = append(m.OrchestratorSet, MsgSetOrchestratorAddress{})
			if err := m.OrchestratorSet[len(m.OrchestratorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
