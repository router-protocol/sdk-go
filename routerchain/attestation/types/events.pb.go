// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/attestation/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventAttestationVote struct {
	AttestationType ClaimType       `protobuf:"varint,1,opt,name=attestationType,proto3,enum=routerprotocol.routerchain.attestation.ClaimType" json:"attestationType,omitempty"`
	AttestationId   []byte          `protobuf:"bytes,2,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType       types.ChainType `protobuf:"varint,3,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId         string          `protobuf:"bytes,4,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,5,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	Voter           string          `protobuf:"bytes,6,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *EventAttestationVote) Reset()         { *m = EventAttestationVote{} }
func (m *EventAttestationVote) String() string { return proto.CompactTextString(m) }
func (*EventAttestationVote) ProtoMessage()    {}
func (*EventAttestationVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ab59990c4cd59d, []int{0}
}
func (m *EventAttestationVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttestationVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttestationVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttestationVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttestationVote.Merge(m, src)
}
func (m *EventAttestationVote) XXX_Size() int {
	return m.Size()
}
func (m *EventAttestationVote) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttestationVote.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttestationVote proto.InternalMessageInfo

func (m *EventAttestationVote) GetAttestationType() ClaimType {
	if m != nil {
		return m.AttestationType
	}
	return CLAIM_TYPE_UNSPECIFIED
}

func (m *EventAttestationVote) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventAttestationVote) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventAttestationVote) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventAttestationVote) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventAttestationVote) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

type EventAttestationObserved struct {
	AttestationType ClaimType       `protobuf:"varint,1,opt,name=attestationType,proto3,enum=routerprotocol.routerchain.attestation.ClaimType" json:"attestationType,omitempty"`
	AttestationId   []byte          `protobuf:"bytes,2,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType       types.ChainType `protobuf:"varint,3,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId         string          `protobuf:"bytes,4,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,5,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
}

func (m *EventAttestationObserved) Reset()         { *m = EventAttestationObserved{} }
func (m *EventAttestationObserved) String() string { return proto.CompactTextString(m) }
func (*EventAttestationObserved) ProtoMessage()    {}
func (*EventAttestationObserved) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ab59990c4cd59d, []int{1}
}
func (m *EventAttestationObserved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttestationObserved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttestationObserved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttestationObserved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttestationObserved.Merge(m, src)
}
func (m *EventAttestationObserved) XXX_Size() int {
	return m.Size()
}
func (m *EventAttestationObserved) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttestationObserved.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttestationObserved proto.InternalMessageInfo

func (m *EventAttestationObserved) GetAttestationType() ClaimType {
	if m != nil {
		return m.AttestationType
	}
	return CLAIM_TYPE_UNSPECIFIED
}

func (m *EventAttestationObserved) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventAttestationObserved) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventAttestationObserved) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventAttestationObserved) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type EventSetOrchestratorAddresses struct {
	ValidatorAddress    string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	OperatorEthAddress  string `protobuf:"bytes,3,opt,name=operator_eth_address,json=operatorEthAddress,proto3" json:"operator_eth_address,omitempty"`
}

func (m *EventSetOrchestratorAddresses) Reset()         { *m = EventSetOrchestratorAddresses{} }
func (m *EventSetOrchestratorAddresses) String() string { return proto.CompactTextString(m) }
func (*EventSetOrchestratorAddresses) ProtoMessage()    {}
func (*EventSetOrchestratorAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ab59990c4cd59d, []int{2}
}
func (m *EventSetOrchestratorAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetOrchestratorAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetOrchestratorAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetOrchestratorAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetOrchestratorAddresses.Merge(m, src)
}
func (m *EventSetOrchestratorAddresses) XXX_Size() int {
	return m.Size()
}
func (m *EventSetOrchestratorAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetOrchestratorAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetOrchestratorAddresses proto.InternalMessageInfo

func (m *EventSetOrchestratorAddresses) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *EventSetOrchestratorAddresses) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *EventSetOrchestratorAddresses) GetOperatorEthAddress() string {
	if m != nil {
		return m.OperatorEthAddress
	}
	return ""
}

type EventValsetCreate struct {
	ValsetNonce   uint64            `protobuf:"varint,1,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	ValsetHeight  uint64            `protobuf:"varint,2,opt,name=valset_height,json=valsetHeight,proto3" json:"valset_height,omitempty"`
	ValsetMembers []BridgeValidator `protobuf:"bytes,3,rep,name=valset_members,json=valsetMembers,proto3" json:"valset_members"`
}

func (m *EventValsetCreate) Reset()         { *m = EventValsetCreate{} }
func (m *EventValsetCreate) String() string { return proto.CompactTextString(m) }
func (*EventValsetCreate) ProtoMessage()    {}
func (*EventValsetCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ab59990c4cd59d, []int{3}
}
func (m *EventValsetCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValsetCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValsetCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValsetCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValsetCreate.Merge(m, src)
}
func (m *EventValsetCreate) XXX_Size() int {
	return m.Size()
}
func (m *EventValsetCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValsetCreate.DiscardUnknown(m)
}

var xxx_messageInfo_EventValsetCreate proto.InternalMessageInfo

func (m *EventValsetCreate) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *EventValsetCreate) GetValsetHeight() uint64 {
	if m != nil {
		return m.ValsetHeight
	}
	return 0
}

func (m *EventValsetCreate) GetValsetMembers() []BridgeValidator {
	if m != nil {
		return m.ValsetMembers
	}
	return nil
}

type EventValsetConfirm struct {
	ValsetNonce         uint64 `protobuf:"varint,1,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	EthSigner           string `protobuf:"bytes,3,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature           string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *EventValsetConfirm) Reset()         { *m = EventValsetConfirm{} }
func (m *EventValsetConfirm) String() string { return proto.CompactTextString(m) }
func (*EventValsetConfirm) ProtoMessage()    {}
func (*EventValsetConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ab59990c4cd59d, []int{4}
}
func (m *EventValsetConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValsetConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValsetConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValsetConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValsetConfirm.Merge(m, src)
}
func (m *EventValsetConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventValsetConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValsetConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventValsetConfirm proto.InternalMessageInfo

func (m *EventValsetConfirm) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *EventValsetConfirm) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *EventValsetConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventValsetConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type EventValsetUpdatedClaimCreated struct {
	AttestationId []byte            `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType     types.ChainType   `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId       string            `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce    uint64            `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ValsetNonce   uint64            `protobuf:"varint,5,opt,name=valset_nonce,json=valsetNonce,proto3" json:"valset_nonce,omitempty"`
	EventHeight   uint64            `protobuf:"varint,6,opt,name=event_height,json=eventHeight,proto3" json:"event_height,omitempty"`
	SrcTxHash     string            `protobuf:"bytes,7,opt,name=src_tx_hash,json=srcTxHash,proto3" json:"src_tx_hash,omitempty"`
	ValsetMembers []BridgeValidator `protobuf:"bytes,8,rep,name=valset_members,json=valsetMembers,proto3" json:"valset_members"`
}

func (m *EventValsetUpdatedClaimCreated) Reset()         { *m = EventValsetUpdatedClaimCreated{} }
func (m *EventValsetUpdatedClaimCreated) String() string { return proto.CompactTextString(m) }
func (*EventValsetUpdatedClaimCreated) ProtoMessage()    {}
func (*EventValsetUpdatedClaimCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ab59990c4cd59d, []int{5}
}
func (m *EventValsetUpdatedClaimCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValsetUpdatedClaimCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValsetUpdatedClaimCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValsetUpdatedClaimCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValsetUpdatedClaimCreated.Merge(m, src)
}
func (m *EventValsetUpdatedClaimCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventValsetUpdatedClaimCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValsetUpdatedClaimCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventValsetUpdatedClaimCreated proto.InternalMessageInfo

func (m *EventValsetUpdatedClaimCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventValsetUpdatedClaimCreated) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventValsetUpdatedClaimCreated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventValsetUpdatedClaimCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventValsetUpdatedClaimCreated) GetValsetNonce() uint64 {
	if m != nil {
		return m.ValsetNonce
	}
	return 0
}

func (m *EventValsetUpdatedClaimCreated) GetEventHeight() uint64 {
	if m != nil {
		return m.EventHeight
	}
	return 0
}

func (m *EventValsetUpdatedClaimCreated) GetSrcTxHash() string {
	if m != nil {
		return m.SrcTxHash
	}
	return ""
}

func (m *EventValsetUpdatedClaimCreated) GetValsetMembers() []BridgeValidator {
	if m != nil {
		return m.ValsetMembers
	}
	return nil
}

func init() {
	proto.RegisterType((*EventAttestationVote)(nil), "routerprotocol.routerchain.attestation.EventAttestationVote")
	proto.RegisterType((*EventAttestationObserved)(nil), "routerprotocol.routerchain.attestation.EventAttestationObserved")
	proto.RegisterType((*EventSetOrchestratorAddresses)(nil), "routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses")
	proto.RegisterType((*EventValsetCreate)(nil), "routerprotocol.routerchain.attestation.EventValsetCreate")
	proto.RegisterType((*EventValsetConfirm)(nil), "routerprotocol.routerchain.attestation.EventValsetConfirm")
	proto.RegisterType((*EventValsetUpdatedClaimCreated)(nil), "routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated")
}

func init() {
	proto.RegisterFile("routerchain/attestation/events.proto", fileDescriptor_a0ab59990c4cd59d)
}

var fileDescriptor_a0ab59990c4cd59d = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x4b, 0x4f, 0xdb, 0x4a,
	0x14, 0xce, 0x24, 0x01, 0x6e, 0x86, 0xc7, 0xbd, 0xcc, 0xcd, 0xc2, 0x45, 0xad, 0x1b, 0xd2, 0x57,
	0xa4, 0xaa, 0x0e, 0xd0, 0x45, 0x17, 0x5d, 0x01, 0x42, 0x82, 0x45, 0x41, 0x32, 0x8f, 0x45, 0xbb,
	0xb0, 0x26, 0xf6, 0xc1, 0xb6, 0x94, 0x78, 0xa2, 0x99, 0x49, 0x04, 0xff, 0xa2, 0x7f, 0xa0, 0xdb,
	0xaa, 0xdb, 0x6e, 0xbb, 0xeb, 0x8e, 0x25, 0xcb, 0xae, 0xaa, 0x0a, 0xfe, 0x48, 0xe5, 0x33, 0x76,
	0xe2, 0xf2, 0x2a, 0xaa, 0x58, 0x76, 0x13, 0xf9, 0x9c, 0xf9, 0xbe, 0xf3, 0xf8, 0xf2, 0xd9, 0x43,
	0x1f, 0x4b, 0x31, 0xd0, 0x20, 0xfd, 0x88, 0xc7, 0x49, 0x9b, 0x6b, 0x0d, 0x4a, 0x73, 0x1d, 0x8b,
	0xa4, 0x0d, 0x43, 0x48, 0xb4, 0x72, 0xfa, 0x52, 0x68, 0xc1, 0x9e, 0x1a, 0x14, 0x06, 0xbe, 0xe8,
	0x3a, 0x05, 0x92, 0x53, 0x20, 0x2d, 0xd4, 0x43, 0x11, 0x0a, 0x44, 0xb5, 0xd3, 0x27, 0xc3, 0x5e,
	0xb8, 0x17, 0x0a, 0x11, 0x76, 0xa1, 0x8d, 0x51, 0x67, 0x70, 0xd8, 0xe6, 0xc9, 0x71, 0x76, 0xd4,
	0xba, 0xae, 0xbd, 0xdf, 0xe5, 0x71, 0xcf, 0xd3, 0xc7, 0x7d, 0xc8, 0x90, 0xcf, 0x8a, 0xc8, 0xde,
	0xa0, 0xab, 0x63, 0xf3, 0x88, 0xbf, 0x45, 0xa0, 0x73, 0x5d, 0xc9, 0x8e, 0x8c, 0x83, 0x10, 0xbc,
	0x21, 0xef, 0xc6, 0x01, 0xd7, 0x42, 0x1a, 0x7c, 0xf3, 0x4b, 0x99, 0xd6, 0x37, 0xd2, 0x65, 0x57,
	0xc7, 0xd8, 0x03, 0xa1, 0x81, 0xbd, 0xa3, 0xff, 0x16, 0xe8, 0x7b, 0xc7, 0x7d, 0xb0, 0x48, 0x83,
	0xb4, 0xe6, 0x56, 0x96, 0x9d, 0xdb, 0xc9, 0xe1, 0xac, 0xa7, 0x4b, 0xa4, 0x44, 0xf7, 0x62, 0x25,
	0xf6, 0x84, 0xce, 0x15, 0x52, 0x5e, 0x1c, 0x58, 0xe5, 0x06, 0x69, 0xcd, 0xb8, 0xb3, 0x85, 0xec,
	0x56, 0xc0, 0xb6, 0x69, 0x0d, 0xcb, 0x62, 0xf7, 0x0a, 0x76, 0x5f, 0xba, 0xa9, 0xfb, 0x58, 0x18,
	0x67, 0x3d, 0xe7, 0xb9, 0xe3, 0x12, 0xcc, 0xa2, 0x53, 0x18, 0x6c, 0x05, 0x56, 0xb5, 0x41, 0x5a,
	0x35, 0x37, 0x0f, 0x99, 0x4d, 0x29, 0xfe, 0xe5, 0xdb, 0x22, 0xf1, 0xc1, 0x9a, 0x68, 0x90, 0x56,
	0xd5, 0x2d, 0x64, 0x58, 0x9d, 0x4e, 0x0c, 0x85, 0x06, 0x69, 0x4d, 0x22, 0xcf, 0x04, 0xcd, 0x4f,
	0x65, 0x6a, 0x5d, 0x14, 0x6f, 0xa7, 0xa3, 0x40, 0x0e, 0x21, 0xf8, 0x2b, 0x60, 0x51, 0xc0, 0xe6,
	0x67, 0x42, 0x1f, 0xa0, 0x54, 0xbb, 0xa0, 0x77, 0xa4, 0x1f, 0x81, 0xd2, 0x32, 0xb5, 0xe1, 0x6a,
	0x10, 0x48, 0x50, 0x0a, 0x14, 0x7b, 0x4e, 0xe7, 0x47, 0xe6, 0xf4, 0xb8, 0x49, 0xa3, 0x62, 0x35,
	0xf7, 0xbf, 0xd1, 0x41, 0x06, 0x67, 0xcb, 0xb4, 0x2e, 0x0a, 0x55, 0x46, 0xf8, 0x32, 0xe2, 0xff,
	0x17, 0x97, 0x3b, 0xb0, 0x25, 0x5a, 0x17, 0x7d, 0x30, 0x70, 0xd0, 0xd1, 0x88, 0x52, 0x41, 0x0a,
	0xcb, 0xcf, 0x36, 0x74, 0x94, 0x31, 0x9a, 0x5f, 0x09, 0x9d, 0xc7, 0x99, 0x0f, 0x78, 0x57, 0x81,
	0x5e, 0x97, 0xc0, 0x35, 0xb0, 0x45, 0x3a, 0x33, 0xc4, 0xd8, 0x4b, 0x70, 0x57, 0x82, 0xbb, 0x4e,
	0x9b, 0x9c, 0x71, 0xcb, 0x23, 0x3a, 0x9b, 0x41, 0x22, 0x88, 0xc3, 0x48, 0xe3, 0x58, 0x55, 0x37,
	0xe3, 0x6d, 0x62, 0x8e, 0x05, 0x74, 0x2e, 0x03, 0xf5, 0xa0, 0xd7, 0x01, 0x99, 0x4e, 0x52, 0x69,
	0x4d, 0xaf, 0xbc, 0xba, 0xad, 0x3d, 0xd6, 0xf0, 0x8d, 0x3e, 0xc8, 0xa5, 0x59, 0xab, 0x9e, 0x7c,
	0x7f, 0x58, 0x72, 0xb3, 0xce, 0x6f, 0x4c, 0xcd, 0xe6, 0x47, 0x42, 0x59, 0x71, 0x07, 0x91, 0x1c,
	0xc6, 0xb2, 0x77, 0x9b, 0x25, 0xfe, 0x40, 0xe2, 0xfb, 0xb4, 0x06, 0x3a, 0xda, 0x8d, 0xc3, 0x04,
	0x64, 0xa6, 0xeb, 0x38, 0x91, 0x9e, 0xaa, 0x38, 0x4c, 0xb8, 0x1e, 0x48, 0xc8, 0xec, 0x33, 0x4e,
	0x34, 0x3f, 0x54, 0xa8, 0x5d, 0x18, 0x74, 0xbf, 0x1f, 0x70, 0x0d, 0x01, 0xbe, 0x02, 0x46, 0xf8,
	0xe0, 0x0a, 0xd3, 0x93, 0xdf, 0x9a, 0xbe, 0x7c, 0xa7, 0xa6, 0xaf, 0xdc, 0x64, 0xfa, 0xea, 0xa5,
	0xaf, 0xc6, 0x45, 0x95, 0x27, 0x2e, 0xab, 0xbc, 0x48, 0x67, 0x90, 0x90, 0x3b, 0x65, 0xd2, 0x40,
	0x30, 0x97, 0x19, 0xc5, 0xa6, 0xd3, 0x4a, 0xfa, 0x9e, 0x3e, 0xf2, 0x22, 0xae, 0x22, 0x6b, 0x2a,
	0x53, 0x4e, 0xfa, 0x7b, 0x47, 0x9b, 0x5c, 0x45, 0x57, 0x18, 0xe9, 0x9f, 0xbb, 0x37, 0xd2, 0xda,
	0xfe, 0xc9, 0x99, 0x4d, 0x4e, 0xcf, 0x6c, 0xf2, 0xe3, 0xcc, 0x26, 0xef, 0xcf, 0xed, 0xd2, 0xe9,
	0xb9, 0x5d, 0xfa, 0x76, 0x6e, 0x97, 0xde, 0xbe, 0x0e, 0x63, 0x1d, 0x0d, 0x3a, 0x8e, 0x2f, 0x7a,
	0x6d, 0xd3, 0xe2, 0x45, 0xde, 0x32, 0x8f, 0xcd, 0x75, 0x74, 0xf4, 0xcb, 0x85, 0x94, 0x5e, 0x5a,
	0xaa, 0x33, 0x89, 0xd0, 0x97, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x5b, 0xfa, 0x25, 0x8a,
	0x07, 0x00, 0x00,
}

func (m *EventAttestationVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttestationVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttestationVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x32
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.AttestationType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AttestationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventAttestationObserved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttestationObserved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttestationObserved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.AttestationType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AttestationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSetOrchestratorAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetOrchestratorAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetOrchestratorAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorEthAddress) > 0 {
		i -= len(m.OperatorEthAddress)
		copy(dAtA[i:], m.OperatorEthAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OperatorEthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventValsetCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValsetCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValsetCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValsetMembers) > 0 {
		for iNdEx := len(m.ValsetMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ValsetHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventValsetConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValsetConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValsetConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventValsetUpdatedClaimCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValsetUpdatedClaimCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValsetUpdatedClaimCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValsetMembers) > 0 {
		for iNdEx := len(m.ValsetMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValsetMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SrcTxHash) > 0 {
		i -= len(m.SrcTxHash)
		copy(dAtA[i:], m.SrcTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcTxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EventHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.ValsetNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ValsetNonce))
		i--
		dAtA[i] = 0x28
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventAttestationVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttestationType != 0 {
		n += 1 + sovEvents(uint64(m.AttestationType))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAttestationObserved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AttestationType != 0 {
		n += 1 + sovEvents(uint64(m.AttestationType))
	}
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	return n
}

func (m *EventSetOrchestratorAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OperatorEthAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventValsetCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetNonce != 0 {
		n += 1 + sovEvents(uint64(m.ValsetNonce))
	}
	if m.ValsetHeight != 0 {
		n += 1 + sovEvents(uint64(m.ValsetHeight))
	}
	if len(m.ValsetMembers) > 0 {
		for _, e := range m.ValsetMembers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventValsetConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValsetNonce != 0 {
		n += 1 + sovEvents(uint64(m.ValsetNonce))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventValsetUpdatedClaimCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.ValsetNonce != 0 {
		n += 1 + sovEvents(uint64(m.ValsetNonce))
	}
	if m.EventHeight != 0 {
		n += 1 + sovEvents(uint64(m.EventHeight))
	}
	l = len(m.SrcTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.ValsetMembers) > 0 {
		for _, e := range m.ValsetMembers {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventAttestationVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttestationVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttestationVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationType", wireType)
			}
			m.AttestationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttestationType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttestationObserved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttestationObserved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttestationObserved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationType", wireType)
			}
			m.AttestationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttestationType |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetOrchestratorAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetOrchestratorAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetOrchestratorAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValsetCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValsetCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValsetCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetHeight", wireType)
			}
			m.ValsetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetMembers = append(m.ValsetMembers, BridgeValidator{})
			if err := m.ValsetMembers[len(m.ValsetMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValsetConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValsetConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValsetConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValsetUpdatedClaimCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValsetUpdatedClaimCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValsetUpdatedClaimCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetNonce", wireType)
			}
			m.ValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHeight", wireType)
			}
			m.EventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetMembers = append(m.ValsetMembers, BridgeValidator{})
			if err := m.ValsetMembers[len(m.ValsetMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
