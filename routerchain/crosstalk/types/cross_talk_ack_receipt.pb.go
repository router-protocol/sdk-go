// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/cross_talk_ack_receipt.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrossTalkAckReceipt struct {
	EventNonce           uint64                    `protobuf:"varint,1,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64                    `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress string                    `protobuf:"bytes,3,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	ChainType            types.ChainType           `protobuf:"varint,4,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId              string                    `protobuf:"bytes,5,opt,name=chainId,proto3" json:"chainId,omitempty"`
	TxHash               string                    `protobuf:"bytes,6,opt,name=txHash,proto3" json:"txHash,omitempty"`
	FeeConsumedInRoute   types1.Coin               `protobuf:"bytes,7,opt,name=feeConsumedInRoute,proto3" json:"feeConsumedInRoute"`
	EventIdentifier      uint64                    `protobuf:"varint,8,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
	Status               CrossTalkAckReceiptStatus `protobuf:"varint,9,opt,name=status,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkAckReceiptStatus" json:"status,omitempty"`
}

func (m *CrossTalkAckReceipt) Reset()         { *m = CrossTalkAckReceipt{} }
func (m *CrossTalkAckReceipt) String() string { return proto.CompactTextString(m) }
func (*CrossTalkAckReceipt) ProtoMessage()    {}
func (*CrossTalkAckReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_40e4727ac4ff2dbd, []int{0}
}
func (m *CrossTalkAckReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossTalkAckReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossTalkAckReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossTalkAckReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossTalkAckReceipt.Merge(m, src)
}
func (m *CrossTalkAckReceipt) XXX_Size() int {
	return m.Size()
}
func (m *CrossTalkAckReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossTalkAckReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_CrossTalkAckReceipt proto.InternalMessageInfo

func (m *CrossTalkAckReceipt) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *CrossTalkAckReceipt) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrossTalkAckReceipt) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrossTalkAckReceipt) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *CrossTalkAckReceipt) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CrossTalkAckReceipt) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *CrossTalkAckReceipt) GetFeeConsumedInRoute() types1.Coin {
	if m != nil {
		return m.FeeConsumedInRoute
	}
	return types1.Coin{}
}

func (m *CrossTalkAckReceipt) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

func (m *CrossTalkAckReceipt) GetStatus() CrossTalkAckReceiptStatus {
	if m != nil {
		return m.Status
	}
	return CROSSTALK_ACK_RECEIPT_CREATED
}

type CrossTalkAckReceiptClaimHash struct {
	EventNonce           uint64          `protobuf:"varint,1,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64          `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress string          `protobuf:"bytes,3,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	ChainType            types.ChainType `protobuf:"varint,4,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId              string          `protobuf:"bytes,5,opt,name=chainId,proto3" json:"chainId,omitempty"`
	TxHash               string          `protobuf:"bytes,6,opt,name=txHash,proto3" json:"txHash,omitempty"`
	EventIdentifier      uint64          `protobuf:"varint,7,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
}

func (m *CrossTalkAckReceiptClaimHash) Reset()         { *m = CrossTalkAckReceiptClaimHash{} }
func (m *CrossTalkAckReceiptClaimHash) String() string { return proto.CompactTextString(m) }
func (*CrossTalkAckReceiptClaimHash) ProtoMessage()    {}
func (*CrossTalkAckReceiptClaimHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_40e4727ac4ff2dbd, []int{1}
}
func (m *CrossTalkAckReceiptClaimHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossTalkAckReceiptClaimHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossTalkAckReceiptClaimHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossTalkAckReceiptClaimHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossTalkAckReceiptClaimHash.Merge(m, src)
}
func (m *CrossTalkAckReceiptClaimHash) XXX_Size() int {
	return m.Size()
}
func (m *CrossTalkAckReceiptClaimHash) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossTalkAckReceiptClaimHash.DiscardUnknown(m)
}

var xxx_messageInfo_CrossTalkAckReceiptClaimHash proto.InternalMessageInfo

func (m *CrossTalkAckReceiptClaimHash) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *CrossTalkAckReceiptClaimHash) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrossTalkAckReceiptClaimHash) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrossTalkAckReceiptClaimHash) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *CrossTalkAckReceiptClaimHash) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CrossTalkAckReceiptClaimHash) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *CrossTalkAckReceiptClaimHash) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

func init() {
	proto.RegisterType((*CrossTalkAckReceipt)(nil), "routerprotocol.routerchain.crosstalk.CrossTalkAckReceipt")
	proto.RegisterType((*CrossTalkAckReceiptClaimHash)(nil), "routerprotocol.routerchain.crosstalk.CrossTalkAckReceiptClaimHash")
}

func init() {
	proto.RegisterFile("crosstalk/cross_talk_ack_receipt.proto", fileDescriptor_40e4727ac4ff2dbd)
}

var fileDescriptor_40e4727ac4ff2dbd = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xdb, 0x90, 0x90, 0xad, 0x04, 0xd2, 0x52, 0xa1, 0xa5, 0x20, 0x63, 0x55, 0x08, 0xf9,
	0x00, 0x6b, 0x1a, 0x4e, 0x9c, 0x50, 0xeb, 0x4b, 0x73, 0x29, 0x92, 0x5b, 0x09, 0x89, 0x8b, 0xb5,
	0x5e, 0x4f, 0x93, 0x95, 0x7f, 0x36, 0xda, 0x5d, 0x57, 0xcd, 0x5b, 0xf0, 0x48, 0x1c, 0x7b, 0xec,
	0x91, 0x13, 0x82, 0xe4, 0x45, 0x90, 0xd7, 0x0e, 0x89, 0x22, 0x0b, 0x71, 0xe7, 0x62, 0xcd, 0x37,
	0x33, 0xfb, 0xcd, 0xcc, 0x37, 0x1e, 0xf4, 0x9a, 0x2b, 0xa9, 0xb5, 0x61, 0x79, 0x16, 0x58, 0x2b,
	0xae, 0xcd, 0x98, 0xf1, 0x2c, 0x56, 0xc0, 0x41, 0xcc, 0x0d, 0x9d, 0x2b, 0x69, 0x24, 0x7e, 0xa5,
	0x64, 0x65, 0x40, 0x59, 0xc0, 0x65, 0x4e, 0x1b, 0xc8, 0x67, 0x4c, 0x94, 0xf4, 0x0f, 0xc5, 0xd1,
	0x9b, 0x1d, 0xb6, 0x5d, 0xb2, 0x58, 0x1b, 0x66, 0x2a, 0xdd, 0x70, 0x1e, 0x3d, 0x2f, 0xaa, 0xdc,
	0x08, 0xcb, 0x11, 0xd8, 0x6f, 0x6c, 0x16, 0x73, 0x68, 0x83, 0x2e, 0x97, 0xba, 0x90, 0x3a, 0x48,
	0x98, 0x86, 0xe0, 0xe6, 0x24, 0x01, 0xc3, 0x4e, 0x02, 0x2e, 0x45, 0xd9, 0xc6, 0x0f, 0xa7, 0x72,
	0x2a, 0xad, 0x19, 0xd4, 0x56, 0xe3, 0x3d, 0xfe, 0xb5, 0x8f, 0x9e, 0x84, 0x75, 0xe5, 0x2b, 0x96,
	0x67, 0xa7, 0x3c, 0x8b, 0x9a, 0xba, 0xd8, 0x45, 0x08, 0x6e, 0xa0, 0x34, 0x17, 0xb2, 0xe4, 0x40,
	0x1c, 0xcf, 0xf1, 0xfb, 0xd1, 0x96, 0x07, 0x7b, 0xe8, 0x20, 0xc9, 0x25, 0xcf, 0xce, 0x41, 0x4c,
	0x67, 0x86, 0xec, 0xd9, 0x84, 0x6d, 0x17, 0x1e, 0xa3, 0x43, 0x05, 0x39, 0x5b, 0x80, 0x8a, 0xec,
	0xe8, 0xa7, 0x69, 0xaa, 0x40, 0x6b, 0xb2, 0xef, 0x39, 0xfe, 0x28, 0xea, 0x8c, 0xe1, 0x0b, 0x34,
	0xb2, 0x73, 0x5d, 0x2d, 0xe6, 0x40, 0xfa, 0x9e, 0xe3, 0x3f, 0x1a, 0xbf, 0xa3, 0x7f, 0x11, 0x72,
	0xa3, 0x07, 0x0d, 0xd7, 0xef, 0xa2, 0x0d, 0x05, 0x26, 0x68, 0x68, 0xc1, 0x24, 0x25, 0x0f, 0x6c,
	0xd9, 0x35, 0xc4, 0x4f, 0xd1, 0xc0, 0xdc, 0x9e, 0x33, 0x3d, 0x23, 0x03, 0x1b, 0x68, 0x11, 0xfe,
	0x84, 0xf0, 0x35, 0x40, 0x28, 0x4b, 0x5d, 0x15, 0x90, 0x4e, 0x4a, 0xdb, 0x1f, 0x19, 0x7a, 0x8e,
	0x7f, 0x30, 0x7e, 0x46, 0x1b, 0x89, 0x69, 0x2d, 0x31, 0x6d, 0x25, 0xa6, 0xa1, 0x14, 0xe5, 0x59,
	0xff, 0xee, 0xc7, 0xcb, 0x5e, 0xd4, 0xf1, 0x14, 0xfb, 0xe8, 0xb1, 0x95, 0x6d, 0x92, 0x42, 0x69,
	0xc4, 0xb5, 0x00, 0x45, 0x1e, 0x5a, 0xb1, 0x76, 0xdd, 0xf8, 0x33, 0x1a, 0x34, 0xdb, 0x26, 0x23,
	0x3b, 0xf9, 0x47, 0xfa, 0x2f, 0xbf, 0x10, 0xed, 0xd8, 0xde, 0xa5, 0xa5, 0x89, 0x5a, 0xba, 0xe3,
	0x6f, 0x7b, 0xe8, 0x45, 0x47, 0x56, 0x98, 0x33, 0x51, 0xd8, 0xa1, 0xff, 0xd7, 0x65, 0x77, 0xec,
	0x66, 0xd8, 0xb9, 0x9b, 0xb3, 0xcb, 0xbb, 0xa5, 0xeb, 0xdc, 0x2f, 0x5d, 0xe7, 0xe7, 0xd2, 0x75,
	0xbe, 0xae, 0xdc, 0xde, 0xfd, 0xca, 0xed, 0x7d, 0x5f, 0xb9, 0xbd, 0x2f, 0x1f, 0xa6, 0xc2, 0xcc,
	0xaa, 0x84, 0x72, 0x59, 0x04, 0x4d, 0xb7, 0x6f, 0xd7, 0xdd, 0xaf, 0x71, 0x73, 0xb0, 0xb7, 0x9b,
	0x0b, 0x0f, 0xea, 0xb3, 0xd5, 0xc9, 0xc0, 0x26, 0xbe, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x8b,
	0x79, 0x00, 0x54, 0x53, 0x04, 0x00, 0x00,
}

func (m *CrossTalkAckReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossTalkAckReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossTalkAckReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.EventIdentifier != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.FeeConsumedInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChainType != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossTalkAckReceiptClaimHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossTalkAckReceiptClaimHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossTalkAckReceiptClaimHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventIdentifier != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChainType != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintCrossTalkAckReceipt(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossTalkAckReceipt(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossTalkAckReceipt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossTalkAckReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckReceipt(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckReceipt(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckReceipt(uint64(l))
	}
	l = m.FeeConsumedInRoute.Size()
	n += 1 + l + sovCrossTalkAckReceipt(uint64(l))
	if m.EventIdentifier != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.EventIdentifier))
	}
	if m.Status != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.Status))
	}
	return n
}

func (m *CrossTalkAckReceiptClaimHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckReceipt(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckReceipt(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckReceipt(uint64(l))
	}
	if m.EventIdentifier != 0 {
		n += 1 + sovCrossTalkAckReceipt(uint64(m.EventIdentifier))
	}
	return n
}

func sovCrossTalkAckReceipt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossTalkAckReceipt(x uint64) (n int) {
	return sovCrossTalkAckReceipt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossTalkAckReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossTalkAckReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossTalkAckReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossTalkAckReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumedInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeConsumedInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrossTalkAckReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossTalkAckReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossTalkAckReceiptClaimHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossTalkAckReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossTalkAckReceiptClaimHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossTalkAckReceiptClaimHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossTalkAckReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossTalkAckReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossTalkAckReceipt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossTalkAckReceipt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossTalkAckReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossTalkAckReceipt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossTalkAckReceipt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossTalkAckReceipt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossTalkAckReceipt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossTalkAckReceipt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossTalkAckReceipt = fmt.Errorf("proto: unexpected end of group")
)
