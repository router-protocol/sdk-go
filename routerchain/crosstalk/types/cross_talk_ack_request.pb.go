// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/cross_talk_ack_request.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrossTalkAckRequest struct {
	EventNonce           uint64          `protobuf:"varint,1,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64          `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress string          `protobuf:"bytes,3,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	SourceChainType      types.ChainType `protobuf:"varint,4,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId        string          `protobuf:"bytes,5,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	ChainType            types.ChainType `protobuf:"varint,6,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId              string          `protobuf:"bytes,7,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DestinationTxHash    string          `protobuf:"bytes,8,opt,name=destinationTxHash,proto3" json:"destinationTxHash,omitempty"`
	EventIdentifier      uint64          `protobuf:"varint,9,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
	RequestSender        string          `protobuf:"bytes,10,opt,name=requestSender,proto3" json:"requestSender,omitempty"`
	CrosstalkNonce       uint64          `protobuf:"varint,11,opt,name=crosstalkNonce,proto3" json:"crosstalkNonce,omitempty"`
	ContractAckResponses []byte          `protobuf:"bytes,12,opt,name=contractAckResponses,proto3" json:"contractAckResponses,omitempty"`
	ExeCode              uint64          `protobuf:"varint,13,opt,name=exeCode,proto3" json:"exeCode,omitempty"`
	Status               bool            `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CrossTalkAckRequest) Reset()         { *m = CrossTalkAckRequest{} }
func (m *CrossTalkAckRequest) String() string { return proto.CompactTextString(m) }
func (*CrossTalkAckRequest) ProtoMessage()    {}
func (*CrossTalkAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df49ea829ab32e13, []int{0}
}
func (m *CrossTalkAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossTalkAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossTalkAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossTalkAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossTalkAckRequest.Merge(m, src)
}
func (m *CrossTalkAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *CrossTalkAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossTalkAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrossTalkAckRequest proto.InternalMessageInfo

func (m *CrossTalkAckRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *CrossTalkAckRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrossTalkAckRequest) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrossTalkAckRequest) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *CrossTalkAckRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *CrossTalkAckRequest) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *CrossTalkAckRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CrossTalkAckRequest) GetDestinationTxHash() string {
	if m != nil {
		return m.DestinationTxHash
	}
	return ""
}

func (m *CrossTalkAckRequest) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

func (m *CrossTalkAckRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *CrossTalkAckRequest) GetCrosstalkNonce() uint64 {
	if m != nil {
		return m.CrosstalkNonce
	}
	return 0
}

func (m *CrossTalkAckRequest) GetContractAckResponses() []byte {
	if m != nil {
		return m.ContractAckResponses
	}
	return nil
}

func (m *CrossTalkAckRequest) GetExeCode() uint64 {
	if m != nil {
		return m.ExeCode
	}
	return 0
}

func (m *CrossTalkAckRequest) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*CrossTalkAckRequest)(nil), "routerprotocol.routerchain.crosstalk.CrossTalkAckRequest")
}

func init() {
	proto.RegisterFile("crosstalk/cross_talk_ack_request.proto", fileDescriptor_df49ea829ab32e13)
}

var fileDescriptor_df49ea829ab32e13 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x41, 0x9b, 0x36, 0xd7, 0x36, 0x15, 0x07, 0x42, 0x27, 0x90, 0x2c, 0x0b, 0x55, 0x95,
	0x07, 0x70, 0x50, 0x99, 0x18, 0x4b, 0x96, 0x76, 0xe9, 0xe0, 0x66, 0xea, 0x12, 0x5d, 0xce, 0x8f,
	0xe6, 0x64, 0xf7, 0xce, 0xdc, 0x3d, 0xa3, 0x64, 0xe6, 0x1f, 0xe0, 0xcf, 0x62, 0xec, 0xc8, 0x88,
	0x92, 0x7f, 0x04, 0xf9, 0x1c, 0x3b, 0x69, 0xa8, 0x18, 0xba, 0x44, 0xf7, 0x7d, 0xef, 0xe5, 0x7b,
	0xbf, 0x3e, 0xd3, 0x53, 0x69, 0x8d, 0x73, 0x28, 0xf2, 0x6c, 0xe0, 0x5f, 0xe3, 0xea, 0x39, 0x16,
	0x32, 0x1b, 0x5b, 0xf8, 0x56, 0x82, 0xc3, 0xb8, 0xb0, 0x06, 0x0d, 0x3b, 0xb1, 0xa6, 0x44, 0xb0,
	0x1e, 0x48, 0x93, 0xc7, 0x35, 0x94, 0x53, 0xa1, 0x74, 0xdc, 0x4a, 0xbc, 0x79, 0x7b, 0x57, 0xe6,
	0xa8, 0x3c, 0x3b, 0xf0, 0xbf, 0x63, 0x9c, 0x17, 0x50, 0x4b, 0xbc, 0xfb, 0xb1, 0x4b, 0x5f, 0x0e,
	0xab, 0xd4, 0x91, 0xc8, 0xb3, 0x73, 0x99, 0x25, 0x75, 0x01, 0x16, 0x50, 0x0a, 0xdf, 0x41, 0xe3,
	0x95, 0xd1, 0x12, 0x38, 0x09, 0x49, 0xb4, 0x93, 0x6c, 0x30, 0x2c, 0xa4, 0x07, 0x93, 0xdc, 0xc8,
	0xec, 0x02, 0xd4, 0xed, 0x14, 0xf9, 0x33, 0x9f, 0xb0, 0x49, 0xb1, 0x33, 0xfa, 0xca, 0x42, 0x2e,
	0xe6, 0x60, 0x13, 0xdf, 0xd6, 0x79, 0x9a, 0x5a, 0x70, 0x8e, 0x3f, 0x0f, 0x49, 0xd4, 0x4b, 0x1e,
	0x8d, 0xb1, 0x1b, 0x7a, 0xec, 0x4c, 0x69, 0x25, 0x0c, 0xab, 0x3e, 0x47, 0xf3, 0x02, 0xf8, 0x4e,
	0x48, 0xa2, 0xfe, 0xd9, 0xc7, 0xf8, 0x3f, 0xa3, 0xae, 0xe7, 0x8b, 0xdb, 0xff, 0x25, 0xdb, 0x42,
	0xec, 0x84, 0x1e, 0x6d, 0x50, 0x97, 0x29, 0xdf, 0xf5, 0x8d, 0x3c, 0x24, 0xd9, 0x15, 0xed, 0xc9,
	0xb6, 0x76, 0xf7, 0x89, 0xb5, 0xd7, 0x12, 0x8c, 0xd3, 0x3d, 0xb9, 0xaa, 0xb7, 0xe7, 0xeb, 0x35,
	0x90, 0xbd, 0xa7, 0x2f, 0x52, 0x70, 0xa8, 0xb4, 0x40, 0x65, 0xf4, 0x68, 0x76, 0x21, 0xdc, 0x94,
	0xef, 0xfb, 0x9c, 0x7f, 0x03, 0x2c, 0xa2, 0xc7, 0x7e, 0xfb, 0x97, 0x29, 0x68, 0x54, 0x5f, 0x15,
	0x58, 0xde, 0xf3, 0x3b, 0xdf, 0xa6, 0xab, 0x39, 0x57, 0x2e, 0xb9, 0x06, 0x9d, 0x82, 0xe5, 0xb4,
	0x9e, 0xf3, 0x01, 0xc9, 0x4e, 0x69, 0xbf, 0x75, 0x48, 0x7d, 0xe3, 0x03, 0x2f, 0xb7, 0xc5, 0x56,
	0x57, 0x94, 0x46, 0xa3, 0x15, 0x12, 0xbd, 0x3b, 0x5c, 0x61, 0xb4, 0x03, 0xc7, 0x0f, 0x43, 0x12,
	0x1d, 0x26, 0x8f, 0xc6, 0xaa, 0x99, 0x61, 0x06, 0x43, 0x93, 0x02, 0x3f, 0xf2, 0xa2, 0x0d, 0x64,
	0xaf, 0x69, 0xd7, 0xa1, 0xc0, 0xd2, 0xf1, 0x7e, 0x48, 0xa2, 0xfd, 0x64, 0x85, 0xbe, 0x5c, 0xff,
	0x5a, 0x04, 0xe4, 0x7e, 0x11, 0x90, 0x3f, 0x8b, 0x80, 0xfc, 0x5c, 0x06, 0x9d, 0xfb, 0x65, 0xd0,
	0xf9, 0xbd, 0x0c, 0x3a, 0x37, 0x9f, 0x6f, 0x15, 0x4e, 0xcb, 0x49, 0x2c, 0xcd, 0xdd, 0xa0, 0xde,
	0xfb, 0x87, 0xe6, 0x0e, 0x0d, 0xae, 0x9d, 0x3d, 0x1b, 0xac, 0x3f, 0x9a, 0xca, 0xdf, 0x6e, 0xd2,
	0xf5, 0x89, 0x9f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x34, 0x48, 0x75, 0x3a, 0x4e, 0x03, 0x00,
	0x00,
}

func (m *CrossTalkAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossTalkAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossTalkAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.ExeCode != 0 {
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(m.ExeCode))
		i--
		dAtA[i] = 0x68
	}
	if len(m.ContractAckResponses) > 0 {
		i -= len(m.ContractAckResponses)
		copy(dAtA[i:], m.ContractAckResponses)
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(len(m.ContractAckResponses)))
		i--
		dAtA[i] = 0x62
	}
	if m.CrosstalkNonce != 0 {
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(m.CrosstalkNonce))
		i--
		dAtA[i] = 0x58
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x52
	}
	if m.EventIdentifier != 0 {
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DestinationTxHash) > 0 {
		i -= len(m.DestinationTxHash)
		copy(dAtA[i:], m.DestinationTxHash)
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(len(m.DestinationTxHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ChainType != 0 {
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SourceChainType != 0 {
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintCrossTalkAckRequest(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossTalkAckRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossTalkAckRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossTalkAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovCrossTalkAckRequest(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrossTalkAckRequest(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckRequest(uint64(l))
	}
	if m.SourceChainType != 0 {
		n += 1 + sovCrossTalkAckRequest(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckRequest(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovCrossTalkAckRequest(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckRequest(uint64(l))
	}
	l = len(m.DestinationTxHash)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckRequest(uint64(l))
	}
	if m.EventIdentifier != 0 {
		n += 1 + sovCrossTalkAckRequest(uint64(m.EventIdentifier))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckRequest(uint64(l))
	}
	if m.CrosstalkNonce != 0 {
		n += 1 + sovCrossTalkAckRequest(uint64(m.CrosstalkNonce))
	}
	l = len(m.ContractAckResponses)
	if l > 0 {
		n += 1 + l + sovCrossTalkAckRequest(uint64(l))
	}
	if m.ExeCode != 0 {
		n += 1 + sovCrossTalkAckRequest(uint64(m.ExeCode))
	}
	if m.Status {
		n += 2
	}
	return n
}

func sovCrossTalkAckRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossTalkAckRequest(x uint64) (n int) {
	return sovCrossTalkAckRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossTalkAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossTalkAckRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossTalkAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossTalkAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkNonce", wireType)
			}
			m.CrosstalkNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrosstalkNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAckResponses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAckResponses = append(m.ContractAckResponses[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAckResponses == nil {
				m.ContractAckResponses = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExeCode", wireType)
			}
			m.ExeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExeCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrossTalkAckRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossTalkAckRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossTalkAckRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossTalkAckRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossTalkAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossTalkAckRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossTalkAckRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossTalkAckRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossTalkAckRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossTalkAckRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossTalkAckRequest = fmt.Errorf("proto: unexpected end of group")
)
