// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/cross_talk_request.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrossTalkRequest struct {
	EventNonce           uint64                  `protobuf:"varint,1,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64                  `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	SourceChainType      types.ChainType         `protobuf:"varint,3,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId        string                  `protobuf:"bytes,4,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	SourceTxHash         string                  `protobuf:"bytes,5,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	DestinationChainType types.ChainType         `protobuf:"varint,6,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId   string                  `protobuf:"bytes,7,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	RequestSender        string                  `protobuf:"bytes,8,opt,name=requestSender,proto3" json:"requestSender,omitempty"`
	RequestNonce         uint64                  `protobuf:"varint,9,opt,name=requestNonce,proto3" json:"requestNonce,omitempty"`
	IsAtomic             bool                    `protobuf:"varint,10,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	GasLimit             uint64                  `protobuf:"varint,11,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasPrice             uint64                  `protobuf:"varint,12,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	ExpiryTimestamp      uint64                  `protobuf:"varint,13,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	EthSigner            string                  `protobuf:"bytes,14,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string                  `protobuf:"bytes,15,opt,name=signature,proto3" json:"signature,omitempty"`
	ContractCalls        []CrosstalkContractCall `protobuf:"bytes,16,rep,name=contractCalls,proto3" json:"contractCalls"`
	Status               CrossTalkRequestStatus  `protobuf:"varint,17,opt,name=status,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkRequestStatus" json:"status,omitempty"`
}

func (m *CrossTalkRequest) Reset()         { *m = CrossTalkRequest{} }
func (m *CrossTalkRequest) String() string { return proto.CompactTextString(m) }
func (*CrossTalkRequest) ProtoMessage()    {}
func (*CrossTalkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4607ef61e96645f, []int{0}
}
func (m *CrossTalkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossTalkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossTalkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossTalkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossTalkRequest.Merge(m, src)
}
func (m *CrossTalkRequest) XXX_Size() int {
	return m.Size()
}
func (m *CrossTalkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossTalkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrossTalkRequest proto.InternalMessageInfo

func (m *CrossTalkRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *CrossTalkRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrossTalkRequest) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *CrossTalkRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *CrossTalkRequest) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *CrossTalkRequest) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *CrossTalkRequest) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *CrossTalkRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *CrossTalkRequest) GetRequestNonce() uint64 {
	if m != nil {
		return m.RequestNonce
	}
	return 0
}

func (m *CrossTalkRequest) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *CrossTalkRequest) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *CrossTalkRequest) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *CrossTalkRequest) GetExpiryTimestamp() uint64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *CrossTalkRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *CrossTalkRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *CrossTalkRequest) GetContractCalls() []CrosstalkContractCall {
	if m != nil {
		return m.ContractCalls
	}
	return nil
}

func (m *CrossTalkRequest) GetStatus() CrossTalkRequestStatus {
	if m != nil {
		return m.Status
	}
	return CROSSTALK_REQUEST_CREATED
}

func init() {
	proto.RegisterType((*CrossTalkRequest)(nil), "routerprotocol.routerchain.crosstalk.CrossTalkRequest")
}

func init() {
	proto.RegisterFile("crosstalk/cross_talk_request.proto", fileDescriptor_b4607ef61e96645f)
}

var fileDescriptor_b4607ef61e96645f = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x63, 0x1a, 0x42, 0xb2, 0x69, 0x9a, 0xb2, 0xea, 0x61, 0x15, 0x90, 0xb1, 0xa2, 0x4a,
	0xf8, 0x82, 0x83, 0xca, 0x09, 0xc1, 0x85, 0xe6, 0xd2, 0x4a, 0x08, 0x21, 0x27, 0xa7, 0x5e, 0xa2,
	0xcd, 0x66, 0xe5, 0xac, 0x62, 0x7b, 0xc3, 0xee, 0x18, 0x25, 0x6f, 0xc1, 0x63, 0xf5, 0x58, 0x89,
	0x0b, 0x27, 0x84, 0x92, 0x17, 0x41, 0xde, 0x75, 0x9c, 0x0f, 0x45, 0x08, 0xb8, 0x58, 0x33, 0xbf,
	0x99, 0xfd, 0xcf, 0x8c, 0x47, 0x83, 0xba, 0x4c, 0x49, 0xad, 0x81, 0xc6, 0xb3, 0x9e, 0xb1, 0x46,
	0xb9, 0x39, 0x52, 0xfc, 0x4b, 0xc6, 0x35, 0x04, 0x73, 0x25, 0x41, 0xe2, 0x4b, 0x25, 0x33, 0xe0,
	0xca, 0x38, 0x4c, 0xc6, 0x81, 0x75, 0xd9, 0x94, 0x8a, 0x34, 0x28, 0x9f, 0x77, 0x5e, 0x1e, 0x28,
	0x19, 0x21, 0x26, 0x53, 0x50, 0x94, 0xc1, 0x88, 0xd1, 0x38, 0xb6, 0x72, 0x1d, 0xff, 0x58, 0x62,
	0x51, 0x71, 0xa4, 0x81, 0x42, 0xa6, 0x8b, 0xcc, 0x67, 0x49, 0x16, 0x83, 0x30, 0x85, 0x7a, 0xe6,
	0x3b, 0x82, 0xe5, 0x9c, 0x17, 0xc1, 0x8b, 0x48, 0x46, 0xd2, 0x98, 0xbd, 0xdc, 0xb2, 0xb4, 0xfb,
	0xbd, 0x86, 0xce, 0xfb, 0xb9, 0xea, 0x90, 0xc6, 0xb3, 0xd0, 0x8a, 0x62, 0x17, 0x21, 0xfe, 0x95,
	0xa7, 0xf0, 0x49, 0xa6, 0x8c, 0x13, 0xc7, 0x73, 0xfc, 0x6a, 0xb8, 0x43, 0xb0, 0x87, 0x9a, 0xe3,
	0x58, 0xb2, 0xd9, 0x0d, 0x17, 0xd1, 0x14, 0xc8, 0x23, 0x93, 0xb0, 0x8b, 0xf0, 0x1d, 0x6a, 0x6b,
	0x99, 0x29, 0xc6, 0xfb, 0x79, 0x1b, 0xc3, 0xe5, 0x9c, 0x93, 0x13, 0xcf, 0xf1, 0xcf, 0xae, 0x5e,
	0x07, 0x7f, 0xf8, 0x39, 0xdb, 0xf6, 0x83, 0xf2, 0x5d, 0x78, 0x28, 0x84, 0x2f, 0x51, 0x6b, 0x07,
	0xdd, 0x4e, 0x48, 0xd5, 0x73, 0xfc, 0x46, 0xb8, 0x0f, 0x71, 0x17, 0x9d, 0x5a, 0x30, 0x5c, 0xdc,
	0x50, 0x3d, 0x25, 0x8f, 0x4d, 0xd2, 0x1e, 0xc3, 0x13, 0x74, 0x31, 0xe1, 0x1a, 0x44, 0x4a, 0x41,
	0xc8, 0x74, 0xdb, 0x6a, 0xed, 0x3f, 0x5b, 0x3d, 0xaa, 0x86, 0x03, 0x84, 0x0f, 0xf9, 0xed, 0x84,
	0x3c, 0x31, 0xfd, 0x1c, 0x89, 0xe4, 0xf3, 0x15, 0xdb, 0x1d, 0xf0, 0x74, 0xc2, 0x15, 0xa9, 0xdb,
	0xf9, 0xf6, 0x60, 0x3e, 0x5f, 0x01, 0xec, 0x96, 0x1a, 0x66, 0x09, 0x7b, 0x0c, 0x77, 0x50, 0x5d,
	0xe8, 0x0f, 0x20, 0x13, 0xc1, 0x08, 0xf2, 0x1c, 0xbf, 0x1e, 0x96, 0x7e, 0x1e, 0x8b, 0xa8, 0xfe,
	0x28, 0x12, 0x01, 0xa4, 0x69, 0xde, 0x96, 0x7e, 0x11, 0xfb, 0xac, 0x04, 0xe3, 0xe4, 0xb4, 0x8c,
	0x19, 0x1f, 0xfb, 0xa8, 0xcd, 0x17, 0x73, 0xa1, 0x96, 0x43, 0x91, 0x70, 0x0d, 0x34, 0x99, 0x93,
	0x96, 0x49, 0x39, 0xc4, 0xf8, 0x39, 0x6a, 0x70, 0x98, 0x0e, 0x44, 0x94, 0x72, 0x45, 0xce, 0xcc,
	0x0c, 0x5b, 0x90, 0x47, 0xb5, 0x88, 0x52, 0x0a, 0x99, 0xe2, 0xa4, 0x6d, 0xa3, 0x25, 0xc0, 0x11,
	0x6a, 0x6d, 0x4e, 0xa1, 0x4f, 0xe3, 0x58, 0x93, 0x73, 0xef, 0xc4, 0x6f, 0x5e, 0xbd, 0x0b, 0xfe,
	0xe6, 0xb4, 0x82, 0xfe, 0xc6, 0xea, 0xef, 0x68, 0x5c, 0x57, 0xef, 0x7f, 0xbe, 0xa8, 0x84, 0xfb,
	0xba, 0x78, 0x88, 0x6a, 0xf6, 0x84, 0xc8, 0x53, 0xb3, 0xf4, 0xf7, 0xff, 0x50, 0x61, 0xe7, 0x64,
	0x06, 0x46, 0x23, 0x2c, 0xb4, 0xae, 0x07, 0xf7, 0x2b, 0xd7, 0x79, 0x58, 0xb9, 0xce, 0xaf, 0x95,
	0xeb, 0x7c, 0x5b, 0xbb, 0x95, 0x87, 0xb5, 0x5b, 0xf9, 0xb1, 0x76, 0x2b, 0x77, 0x6f, 0x23, 0x01,
	0xd3, 0x6c, 0x1c, 0x30, 0x99, 0xf4, 0xac, 0xf4, 0xab, 0x4d, 0xa9, 0x8d, 0x6f, 0xef, 0x77, 0xb1,
	0x3d, 0xf6, 0x5e, 0x7e, 0xc5, 0x7a, 0x5c, 0x33, 0x89, 0x6f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x80, 0x8b, 0x50, 0x99, 0x83, 0x04, 0x00, 0x00,
}

func (m *CrossTalkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossTalkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossTalkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.ContractCalls) > 0 {
		for iNdEx := len(m.ContractCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrossTalkRequest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x72
	}
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x68
	}
	if m.GasPrice != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x60
	}
	if m.GasLimit != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x58
	}
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.RequestNonce != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.RequestNonce))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x22
	}
	if m.SourceChainType != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintCrossTalkRequest(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossTalkRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossTalkRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossTalkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.BlockHeight))
	}
	if m.SourceChainType != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovCrossTalkRequest(uint64(l))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovCrossTalkRequest(uint64(l))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovCrossTalkRequest(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovCrossTalkRequest(uint64(l))
	}
	if m.RequestNonce != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.RequestNonce))
	}
	if m.IsAtomic {
		n += 2
	}
	if m.GasLimit != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.GasPrice))
	}
	if m.ExpiryTimestamp != 0 {
		n += 1 + sovCrossTalkRequest(uint64(m.ExpiryTimestamp))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovCrossTalkRequest(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCrossTalkRequest(uint64(l))
	}
	if len(m.ContractCalls) > 0 {
		for _, e := range m.ContractCalls {
			l = e.Size()
			n += 2 + l + sovCrossTalkRequest(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 2 + sovCrossTalkRequest(uint64(m.Status))
	}
	return n
}

func sovCrossTalkRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossTalkRequest(x uint64) (n int) {
	return sovCrossTalkRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossTalkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossTalkRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossTalkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossTalkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNonce", wireType)
			}
			m.RequestNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCalls = append(m.ContractCalls, CrosstalkContractCall{})
			if err := m.ContractCalls[len(m.ContractCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrossTalkRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossTalkRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossTalkRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossTalkRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossTalkRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossTalkRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossTalkRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossTalkRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossTalkRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossTalkRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossTalkRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossTalkRequest = fmt.Errorf("proto: unexpected end of group")
)
