// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/crosstalk_ack_request_confirm.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosstalkAckRequestConfirm struct {
	ChainType    types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId      string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce   uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash    []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner    string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature    string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *CrosstalkAckRequestConfirm) Reset()         { *m = CrosstalkAckRequestConfirm{} }
func (m *CrosstalkAckRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*CrosstalkAckRequestConfirm) ProtoMessage()    {}
func (*CrosstalkAckRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee1dd30a5c4c9c8a, []int{0}
}
func (m *CrosstalkAckRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosstalkAckRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosstalkAckRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosstalkAckRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosstalkAckRequestConfirm.Merge(m, src)
}
func (m *CrosstalkAckRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *CrosstalkAckRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosstalkAckRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_CrosstalkAckRequestConfirm proto.InternalMessageInfo

func (m *CrosstalkAckRequestConfirm) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *CrosstalkAckRequestConfirm) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CrosstalkAckRequestConfirm) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *CrosstalkAckRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *CrosstalkAckRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *CrosstalkAckRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *CrosstalkAckRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func init() {
	proto.RegisterType((*CrosstalkAckRequestConfirm)(nil), "routerprotocol.routerchain.crosstalk.CrosstalkAckRequestConfirm")
}

func init() {
	proto.RegisterFile("crosstalk/crosstalk_ack_request_confirm.proto", fileDescriptor_ee1dd30a5c4c9c8a)
}

var fileDescriptor_ee1dd30a5c4c9c8a = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xeb, 0x52, 0x5a, 0xd5, 0xaa, 0x18, 0x32, 0x59, 0x05, 0x59, 0x51, 0xc5, 0x90, 0xa5,
	0x09, 0x82, 0x89, 0x11, 0xba, 0xc0, 0xd2, 0x21, 0x65, 0x62, 0x89, 0x5c, 0x63, 0x1a, 0xab, 0x89,
	0x5d, 0xec, 0x1b, 0x44, 0xdf, 0x82, 0x87, 0xe0, 0x61, 0x18, 0x3b, 0x32, 0xa2, 0xf6, 0x45, 0x50,
	0x6d, 0xa5, 0x81, 0x85, 0xc5, 0xf2, 0xf9, 0xee, 0xcf, 0x91, 0xce, 0xc5, 0x63, 0x6e, 0xb4, 0xb5,
	0xc0, 0x8a, 0x65, 0x72, 0xf8, 0x65, 0x8c, 0x2f, 0x33, 0x23, 0x5e, 0x2a, 0x61, 0x21, 0xe3, 0x5a,
	0x3d, 0x4b, 0x53, 0xc6, 0x2b, 0xa3, 0x41, 0x07, 0xe7, 0x46, 0x57, 0x20, 0x8c, 0x13, 0x5c, 0x17,
	0xb1, 0x97, 0x3c, 0x67, 0x52, 0xc5, 0x87, 0xf9, 0xe1, 0x69, 0x59, 0x15, 0x20, 0x1d, 0x4d, 0xdc,
	0x9b, 0xc1, 0x7a, 0x25, 0xfc, 0x8a, 0xd1, 0x47, 0x1b, 0x0f, 0x27, 0x75, 0xeb, 0x0d, 0x5f, 0xa6,
	0xde, 0x68, 0xe2, 0x7d, 0x82, 0x29, 0xee, 0xbb, 0x91, 0x87, 0xf5, 0x4a, 0x10, 0x14, 0xa2, 0xe8,
	0xe4, 0xf2, 0x22, 0xfe, 0xc7, 0xb5, 0xb1, 0x8a, 0x27, 0xf5, 0x5c, 0xda, 0xac, 0x08, 0x08, 0xee,
	0x39, 0x71, 0xff, 0x44, 0xda, 0x21, 0x8a, 0xfa, 0x69, 0x2d, 0x03, 0x8a, 0xb1, 0x78, 0x15, 0x0a,
	0xa6, 0x5a, 0x71, 0x41, 0x8e, 0x42, 0x14, 0x75, 0xd2, 0x5f, 0x24, 0x38, 0xc3, 0x7d, 0x5e, 0x30,
	0x59, 0xde, 0x31, 0x9b, 0x93, 0x4e, 0x88, 0xa2, 0x41, 0xda, 0x80, 0x7d, 0x55, 0x40, 0x3e, 0x93,
	0x0b, 0x25, 0x0c, 0x39, 0x76, 0x9b, 0x1b, 0xb0, 0xaf, 0x5a, 0xb9, 0x50, 0x0c, 0x2a, 0x23, 0x48,
	0xd7, 0x57, 0x0f, 0x20, 0x18, 0xe1, 0x81, 0x36, 0x3c, 0x17, 0x16, 0x0c, 0x03, 0x6d, 0x48, 0xcf,
	0x35, 0xfc, 0x61, 0xb7, 0xb3, 0xcf, 0x2d, 0x45, 0x9b, 0x2d, 0x45, 0xdf, 0x5b, 0x8a, 0xde, 0x77,
	0xb4, 0xb5, 0xd9, 0xd1, 0xd6, 0xd7, 0x8e, 0xb6, 0x1e, 0xaf, 0x17, 0x12, 0xf2, 0x6a, 0x1e, 0x73,
	0x5d, 0x26, 0x3e, 0x89, 0x71, 0x9d, 0x4c, 0xad, 0x7d, 0xf4, 0x6f, 0xcd, 0x49, 0x93, 0xfd, 0x01,
	0xec, 0xbc, 0xeb, 0x1a, 0xaf, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x35, 0x4b, 0x12, 0x8a, 0xf6,
	0x01, 0x00, 0x00,
}

func (m *CrosstalkAckRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosstalkAckRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosstalkAckRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintCrosstalkAckRequestConfirm(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCrosstalkAckRequestConfirm(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintCrosstalkAckRequestConfirm(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintCrosstalkAckRequestConfirm(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintCrosstalkAckRequestConfirm(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCrosstalkAckRequestConfirm(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintCrosstalkAckRequestConfirm(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosstalkAckRequestConfirm(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosstalkAckRequestConfirm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosstalkAckRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovCrosstalkAckRequestConfirm(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCrosstalkAckRequestConfirm(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovCrosstalkAckRequestConfirm(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovCrosstalkAckRequestConfirm(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovCrosstalkAckRequestConfirm(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCrosstalkAckRequestConfirm(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovCrosstalkAckRequestConfirm(uint64(l))
	}
	return n
}

func sovCrosstalkAckRequestConfirm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosstalkAckRequestConfirm(x uint64) (n int) {
	return sovCrosstalkAckRequestConfirm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosstalkAckRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosstalkAckRequestConfirm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosstalkAckRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosstalkAckRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosstalkAckRequestConfirm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosstalkAckRequestConfirm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosstalkAckRequestConfirm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosstalkAckRequestConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosstalkAckRequestConfirm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosstalkAckRequestConfirm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosstalkAckRequestConfirm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosstalkAckRequestConfirm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosstalkAckRequestConfirm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosstalkAckRequestConfirm = fmt.Errorf("proto: unexpected end of group")
)
