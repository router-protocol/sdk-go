// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCrossTalkRequest struct {
	ChainType  uint64 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId    string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EventNonce uint64 `protobuf:"varint,3,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryGetCrossTalkRequest) Reset()         { *m = QueryGetCrossTalkRequest{} }
func (m *QueryGetCrossTalkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrossTalkRequest) ProtoMessage()    {}
func (*QueryGetCrossTalkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{2}
}
func (m *QueryGetCrossTalkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrossTalkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrossTalkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrossTalkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrossTalkRequest.Merge(m, src)
}
func (m *QueryGetCrossTalkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrossTalkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrossTalkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrossTalkRequest proto.InternalMessageInfo

func (m *QueryGetCrossTalkRequest) GetChainType() uint64 {
	if m != nil {
		return m.ChainType
	}
	return 0
}

func (m *QueryGetCrossTalkRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetCrossTalkRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryGetCrossTalkRequestResponse struct {
	CrossTalkRequest CrossTalkRequest `protobuf:"bytes,1,opt,name=crossTalkRequest,proto3" json:"crossTalkRequest"`
}

func (m *QueryGetCrossTalkRequestResponse) Reset()         { *m = QueryGetCrossTalkRequestResponse{} }
func (m *QueryGetCrossTalkRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrossTalkRequestResponse) ProtoMessage()    {}
func (*QueryGetCrossTalkRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{3}
}
func (m *QueryGetCrossTalkRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrossTalkRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrossTalkRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrossTalkRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrossTalkRequestResponse.Merge(m, src)
}
func (m *QueryGetCrossTalkRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrossTalkRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrossTalkRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrossTalkRequestResponse proto.InternalMessageInfo

func (m *QueryGetCrossTalkRequestResponse) GetCrossTalkRequest() CrossTalkRequest {
	if m != nil {
		return m.CrossTalkRequest
	}
	return CrossTalkRequest{}
}

type QueryAllCrossTalkRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrossTalkRequest) Reset()         { *m = QueryAllCrossTalkRequest{} }
func (m *QueryAllCrossTalkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrossTalkRequest) ProtoMessage()    {}
func (*QueryAllCrossTalkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{4}
}
func (m *QueryAllCrossTalkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrossTalkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrossTalkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrossTalkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrossTalkRequest.Merge(m, src)
}
func (m *QueryAllCrossTalkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrossTalkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrossTalkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrossTalkRequest proto.InternalMessageInfo

func (m *QueryAllCrossTalkRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrossTalkRequestResponse struct {
	CrossTalkRequest []CrossTalkRequest  `protobuf:"bytes,1,rep,name=crossTalkRequest,proto3" json:"crossTalkRequest"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrossTalkRequestResponse) Reset()         { *m = QueryAllCrossTalkRequestResponse{} }
func (m *QueryAllCrossTalkRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrossTalkRequestResponse) ProtoMessage()    {}
func (*QueryAllCrossTalkRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{5}
}
func (m *QueryAllCrossTalkRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrossTalkRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrossTalkRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrossTalkRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrossTalkRequestResponse.Merge(m, src)
}
func (m *QueryAllCrossTalkRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrossTalkRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrossTalkRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrossTalkRequestResponse proto.InternalMessageInfo

func (m *QueryAllCrossTalkRequestResponse) GetCrossTalkRequest() []CrossTalkRequest {
	if m != nil {
		return m.CrossTalkRequest
	}
	return nil
}

func (m *QueryAllCrossTalkRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosstalkRequestConfirmRequest struct {
	SourceChainType uint64 `protobuf:"varint,1,opt,name=sourceChainType,proto3" json:"sourceChainType,omitempty"`
	SourceChainId   string `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64 `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Orchestrator    string `protobuf:"bytes,5,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *QueryGetCrosstalkRequestConfirmRequest) Reset() {
	*m = QueryGetCrosstalkRequestConfirmRequest{}
}
func (m *QueryGetCrosstalkRequestConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosstalkRequestConfirmRequest) ProtoMessage()    {}
func (*QueryGetCrosstalkRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{6}
}
func (m *QueryGetCrosstalkRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosstalkRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosstalkRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosstalkRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosstalkRequestConfirmRequest.Merge(m, src)
}
func (m *QueryGetCrosstalkRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosstalkRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosstalkRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosstalkRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryGetCrosstalkRequestConfirmRequest) GetSourceChainType() uint64 {
	if m != nil {
		return m.SourceChainType
	}
	return 0
}

func (m *QueryGetCrosstalkRequestConfirmRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetCrosstalkRequestConfirmRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *QueryGetCrosstalkRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryGetCrosstalkRequestConfirmRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type QueryGetCrosstalkRequestConfirmResponse struct {
	CrosstalkRequestConfirm CrosstalkRequestConfirm `protobuf:"bytes,1,opt,name=crosstalkRequestConfirm,proto3" json:"crosstalkRequestConfirm"`
}

func (m *QueryGetCrosstalkRequestConfirmResponse) Reset() {
	*m = QueryGetCrosstalkRequestConfirmResponse{}
}
func (m *QueryGetCrosstalkRequestConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosstalkRequestConfirmResponse) ProtoMessage()    {}
func (*QueryGetCrosstalkRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{7}
}
func (m *QueryGetCrosstalkRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosstalkRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosstalkRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosstalkRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosstalkRequestConfirmResponse.Merge(m, src)
}
func (m *QueryGetCrosstalkRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosstalkRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosstalkRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosstalkRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryGetCrosstalkRequestConfirmResponse) GetCrosstalkRequestConfirm() CrosstalkRequestConfirm {
	if m != nil {
		return m.CrosstalkRequestConfirm
	}
	return CrosstalkRequestConfirm{}
}

type QueryAllCrosstalkRequestConfirmRequest struct {
	SourceChainType uint64             `protobuf:"varint,1,opt,name=sourceChainType,proto3" json:"sourceChainType,omitempty"`
	SourceChainId   string             `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64             `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte             `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosstalkRequestConfirmRequest) Reset() {
	*m = QueryAllCrosstalkRequestConfirmRequest{}
}
func (m *QueryAllCrosstalkRequestConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosstalkRequestConfirmRequest) ProtoMessage()    {}
func (*QueryAllCrosstalkRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{8}
}
func (m *QueryAllCrosstalkRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosstalkRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosstalkRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosstalkRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosstalkRequestConfirmRequest.Merge(m, src)
}
func (m *QueryAllCrosstalkRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosstalkRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosstalkRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosstalkRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryAllCrosstalkRequestConfirmRequest) GetSourceChainType() uint64 {
	if m != nil {
		return m.SourceChainType
	}
	return 0
}

func (m *QueryAllCrosstalkRequestConfirmRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryAllCrosstalkRequestConfirmRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *QueryAllCrosstalkRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryAllCrosstalkRequestConfirmRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosstalkRequestConfirmResponse struct {
	CrosstalkRequestConfirm []CrosstalkRequestConfirm `protobuf:"bytes,1,rep,name=crosstalkRequestConfirm,proto3" json:"crosstalkRequestConfirm"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosstalkRequestConfirmResponse) Reset() {
	*m = QueryAllCrosstalkRequestConfirmResponse{}
}
func (m *QueryAllCrosstalkRequestConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosstalkRequestConfirmResponse) ProtoMessage()    {}
func (*QueryAllCrosstalkRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b175be8bb91b61a6, []int{9}
}
func (m *QueryAllCrosstalkRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosstalkRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosstalkRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosstalkRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosstalkRequestConfirmResponse.Merge(m, src)
}
func (m *QueryAllCrosstalkRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosstalkRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosstalkRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosstalkRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryAllCrosstalkRequestConfirmResponse) GetCrosstalkRequestConfirm() []CrosstalkRequestConfirm {
	if m != nil {
		return m.CrosstalkRequestConfirm
	}
	return nil
}

func (m *QueryAllCrosstalkRequestConfirmResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.crosstalk.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.crosstalk.QueryParamsResponse")
	proto.RegisterType((*QueryGetCrossTalkRequest)(nil), "routerprotocol.routerchain.crosstalk.QueryGetCrossTalkRequest")
	proto.RegisterType((*QueryGetCrossTalkRequestResponse)(nil), "routerprotocol.routerchain.crosstalk.QueryGetCrossTalkRequestResponse")
	proto.RegisterType((*QueryAllCrossTalkRequest)(nil), "routerprotocol.routerchain.crosstalk.QueryAllCrossTalkRequest")
	proto.RegisterType((*QueryAllCrossTalkRequestResponse)(nil), "routerprotocol.routerchain.crosstalk.QueryAllCrossTalkRequestResponse")
	proto.RegisterType((*QueryGetCrosstalkRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosstalk.QueryGetCrosstalkRequestConfirmRequest")
	proto.RegisterType((*QueryGetCrosstalkRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosstalk.QueryGetCrosstalkRequestConfirmResponse")
	proto.RegisterType((*QueryAllCrosstalkRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosstalk.QueryAllCrosstalkRequestConfirmRequest")
	proto.RegisterType((*QueryAllCrosstalkRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosstalk.QueryAllCrosstalkRequestConfirmResponse")
}

func init() { proto.RegisterFile("crosstalk/query.proto", fileDescriptor_b175be8bb91b61a6) }

var fileDescriptor_b175be8bb91b61a6 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x5f, 0x6b, 0x13, 0x59,
	0x14, 0xcf, 0x4d, 0xff, 0xec, 0xf6, 0xb4, 0xcb, 0x96, 0xdb, 0xee, 0x36, 0x1b, 0xba, 0x69, 0x18,
	0x4a, 0x9b, 0x5d, 0x76, 0x67, 0x6c, 0x85, 0x62, 0x45, 0x85, 0xb6, 0xd0, 0x5a, 0xa9, 0x52, 0x63,
	0x9f, 0x7c, 0x89, 0x37, 0xd3, 0x6b, 0x32, 0x74, 0x32, 0x37, 0x9d, 0x99, 0x14, 0x4b, 0x8c, 0x0f,
	0xd2, 0x37, 0x45, 0x04, 0xf1, 0x3b, 0xf8, 0x05, 0x7c, 0x15, 0x1f, 0xfb, 0x24, 0x05, 0x11, 0xc4,
	0x07, 0xd1, 0xd6, 0x2f, 0xe0, 0x17, 0x10, 0x99, 0x7b, 0xef, 0x24, 0x99, 0xfc, 0x69, 0xfe, 0x18,
	0x11, 0xdf, 0xe6, 0x9e, 0x7b, 0xfe, 0xfd, 0xce, 0xf9, 0xdd, 0x73, 0x06, 0xfe, 0xd0, 0x6d, 0xe6,
	0x38, 0x2e, 0x31, 0x77, 0xb4, 0xdd, 0x02, 0xb5, 0xf7, 0xd5, 0xbc, 0xcd, 0x5c, 0x86, 0xa7, 0x6d,
	0x56, 0x70, 0xa9, 0xcd, 0x0f, 0x3a, 0x33, 0x55, 0x71, 0xd4, 0xb3, 0xc4, 0xb0, 0xd4, 0xb2, 0x45,
	0x74, 0x3c, 0xc3, 0x32, 0x8c, 0xeb, 0x68, 0xde, 0x97, 0xb0, 0x8d, 0x4e, 0x66, 0x18, 0xcb, 0x98,
	0x54, 0x23, 0x79, 0x43, 0x23, 0x96, 0xc5, 0x5c, 0xe2, 0x1a, 0xcc, 0x72, 0xe4, 0xed, 0xbf, 0x3a,
	0x73, 0x72, 0xcc, 0xd1, 0xd2, 0xc4, 0xa1, 0x22, 0xa4, 0xb6, 0x37, 0x97, 0xa6, 0x2e, 0x99, 0xd3,
	0xf2, 0x24, 0x63, 0x58, 0x5c, 0x59, 0xea, 0xfe, 0x59, 0x49, 0x2e, 0x4f, 0x6c, 0x92, 0xf3, 0x7d,
	0x28, 0x15, 0x39, 0xff, 0x4a, 0x79, 0x9f, 0x29, 0x9b, 0xee, 0x16, 0xa8, 0xe3, 0x4a, 0x9d, 0x7f,
	0x6a, 0x74, 0xaa, 0x55, 0x52, 0x3a, 0xb3, 0x6e, 0x1b, 0x76, 0x4e, 0xa8, 0x2a, 0xe3, 0x80, 0xaf,
	0x7b, 0x89, 0x6c, 0xf2, 0x18, 0x49, 0xa1, 0xa3, 0x10, 0x18, 0x0b, 0x48, 0x9d, 0x3c, 0xb3, 0x1c,
	0x8a, 0xaf, 0xc0, 0xa0, 0xc8, 0x25, 0x82, 0xe2, 0x28, 0x31, 0x3c, 0xff, 0x9f, 0xda, 0x4e, 0xa9,
	0x54, 0xe1, 0x65, 0xb9, 0xff, 0xf0, 0xfd, 0x54, 0x28, 0x29, 0x3d, 0x28, 0x05, 0x88, 0xf0, 0x10,
	0x6b, 0xd4, 0x5d, 0xf1, 0x34, 0xb7, 0x88, 0xb9, 0x23, 0xc3, 0xe3, 0xbf, 0x01, 0xb8, 0x8f, 0x94,
	0xbb, 0x9f, 0xa7, 0x3c, 0x56, 0x7f, 0x72, 0x88, 0x4b, 0xb6, 0xf6, 0xf3, 0x14, 0xff, 0x05, 0xbf,
	0x8a, 0x6b, 0x63, 0x3b, 0x12, 0x8e, 0xa3, 0xc4, 0x50, 0xf2, 0x17, 0x7e, 0x5e, 0xdf, 0xc6, 0x53,
	0x30, 0x4c, 0xf7, 0xa8, 0xe5, 0xa6, 0x2c, 0x66, 0xe9, 0x34, 0xd2, 0xc7, 0x4d, 0x81, 0x8b, 0xae,
	0x79, 0x12, 0xe5, 0x21, 0x82, 0x78, 0xb3, 0xb8, 0x65, 0x9c, 0x59, 0x18, 0xd5, 0x6b, 0xee, 0x24,
	0xe2, 0x85, 0xf6, 0x10, 0xd7, 0x7a, 0x96, 0xd8, 0xeb, 0xbc, 0x2a, 0x69, 0x59, 0x85, 0x25, 0xd3,
	0xac, 0xab, 0xc2, 0x2a, 0x40, 0x85, 0x15, 0x32, 0xfe, 0x8c, 0x2a, 0x28, 0xa4, 0x7a, 0x14, 0x52,
	0x05, 0x6b, 0x25, 0x85, 0xd4, 0x4d, 0x92, 0xa1, 0x3e, 0x92, 0x2a, 0x4b, 0xe5, 0x8d, 0x0f, 0xb9,
	0x41, 0x90, 0x16, 0x90, 0xfb, 0x7a, 0x0f, 0x19, 0xaf, 0x05, 0x60, 0x85, 0x39, 0xac, 0xd9, 0x96,
	0xb0, 0x44, 0x9a, 0x01, 0x5c, 0xef, 0x10, 0xcc, 0x04, 0x5a, 0xe9, 0x56, 0xa2, 0xac, 0x08, 0x92,
	0xfb, 0x31, 0x13, 0xf0, 0xbb, 0xc3, 0x0a, 0xb6, 0x4e, 0x57, 0x7c, 0x12, 0x49, 0x56, 0xd5, 0x8a,
	0xf1, 0x34, 0xfc, 0x56, 0x25, 0x5a, 0xf7, 0x09, 0x16, 0x14, 0xe2, 0x18, 0x54, 0x71, 0xaa, 0x9e,
	0x65, 0x78, 0x12, 0x86, 0x74, 0x93, 0x18, 0xb9, 0xcb, 0xc4, 0xc9, 0x46, 0xfa, 0xe3, 0x28, 0x31,
	0x92, 0xac, 0x08, 0xb0, 0x02, 0x23, 0xcc, 0xd6, 0xb3, 0xd4, 0x71, 0x6d, 0xe2, 0x32, 0x3b, 0x32,
	0xc0, 0x43, 0x04, 0x64, 0xca, 0x33, 0x04, 0xb3, 0x2d, 0xc1, 0xc9, 0xde, 0x95, 0x60, 0x42, 0x6f,
	0xac, 0x22, 0x59, 0x73, 0xb1, 0x83, 0x16, 0xd6, 0x3b, 0x91, 0x9d, 0x6c, 0x16, 0x43, 0xf9, 0xe2,
	0xf7, 0xc1, 0xe7, 0xd7, 0xcf, 0xd2, 0x87, 0xe0, 0x03, 0x1b, 0xe8, 0xfa, 0x81, 0x7d, 0xf6, 0x7b,
	0x75, 0x5a, 0x01, 0xda, 0xe9, 0x55, 0xdf, 0xf7, 0xee, 0x55, 0xcf, 0x1e, 0xdf, 0xfc, 0x0b, 0x80,
	0x01, 0x8e, 0x19, 0x3f, 0x47, 0x30, 0x28, 0x26, 0x3c, 0x3e, 0xd7, 0x5e, 0xee, 0xf5, 0x0b, 0x27,
	0xba, 0xd8, 0x85, 0xa5, 0xc8, 0x4a, 0x59, 0xb8, 0xff, 0xfa, 0xd3, 0x93, 0xf0, 0x19, 0xac, 0x6a,
	0xc2, 0xe6, 0x7f, 0xdf, 0x87, 0x7f, 0xe6, 0x4e, 0xb4, 0xda, 0x75, 0x8a, 0x0f, 0xc2, 0x30, 0x5a,
	0x37, 0x73, 0x2f, 0x75, 0x90, 0x47, 0x83, 0x0d, 0x12, 0x5d, 0xfd, 0x36, 0xfb, 0x32, 0xa8, 0x2c,
	0x07, 0x95, 0xc6, 0xb7, 0xda, 0x05, 0x55, 0xff, 0x2f, 0xa0, 0x15, 0x2b, 0x3b, 0xb4, 0xe4, 0x1f,
	0x8c, 0xed, 0x92, 0x56, 0xac, 0xda, 0x90, 0x25, 0xfc, 0x11, 0xc1, 0x58, 0x6d, 0x1a, 0x4b, 0xa6,
	0xd9, 0x51, 0x25, 0x1a, 0x2c, 0x96, 0x8e, 0x2a, 0x71, 0xca, 0x62, 0x52, 0x96, 0x79, 0x25, 0x2e,
	0xe0, 0xf3, 0xdd, 0x57, 0x02, 0xbf, 0x0a, 0xc3, 0x44, 0x93, 0x07, 0x83, 0x37, 0xba, 0xe8, 0x58,
	0xd3, 0x01, 0x17, 0xbd, 0xda, 0x23, 0x6f, 0x12, 0xfc, 0x53, 0xc4, 0xd1, 0x3f, 0x42, 0xf8, 0x01,
	0xea, 0x08, 0x7f, 0xa3, 0x3f, 0x3e, 0xad, 0x58, 0x33, 0x64, 0x4b, 0x01, 0xc9, 0x7a, 0x99, 0x1a,
	0x7c, 0x76, 0x7a, 0x94, 0xf1, 0x27, 0x65, 0x49, 0x2b, 0x56, 0x2f, 0xa7, 0x12, 0x7e, 0x19, 0x86,
	0x68, 0x93, 0xdc, 0x3d, 0xee, 0x6c, 0x74, 0xd1, 0xfb, 0xde, 0xd4, 0xb4, 0xf5, 0x04, 0x56, 0x0e,
	0x44, 0x4d, 0xef, 0xe1, 0xbb, 0x3f, 0xb2, 0xa2, 0xcb, 0x37, 0x0e, 0x8f, 0x63, 0xe8, 0xe8, 0x38,
	0x86, 0x3e, 0x1c, 0xc7, 0xd0, 0xe3, 0x93, 0x58, 0xe8, 0xe8, 0x24, 0x16, 0x7a, 0x7b, 0x12, 0x0b,
	0xdd, 0x5c, 0xcc, 0x18, 0x6e, 0xb6, 0x90, 0x56, 0x75, 0x96, 0x3b, 0x3d, 0xc3, 0x3b, 0x55, 0x39,
	0x7a, 0xaf, 0xdc, 0x49, 0x0f, 0x72, 0xc5, 0xb3, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x38,
	0x64, 0xa3, 0xda, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a CrossTalkRequest by index.
	CrossTalkRequest(ctx context.Context, in *QueryGetCrossTalkRequest, opts ...grpc.CallOption) (*QueryGetCrossTalkRequestResponse, error)
	// Queries a list of CrossTalkRequest items.
	CrossTalkRequestAll(ctx context.Context, in *QueryAllCrossTalkRequest, opts ...grpc.CallOption) (*QueryAllCrossTalkRequestResponse, error)
	// Queries a CrosstalkRequestConfirm by index.
	CrosstalkRequestConfirm(ctx context.Context, in *QueryGetCrosstalkRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosstalkRequestConfirmResponse, error)
	// Queries a list of CrosstalkRequestConfirm items.
	CrosstalkRequestConfirmAll(ctx context.Context, in *QueryAllCrosstalkRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosstalkRequestConfirmResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossTalkRequest(ctx context.Context, in *QueryGetCrossTalkRequest, opts ...grpc.CallOption) (*QueryGetCrossTalkRequestResponse, error) {
	out := new(QueryGetCrossTalkRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Query/CrossTalkRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossTalkRequestAll(ctx context.Context, in *QueryAllCrossTalkRequest, opts ...grpc.CallOption) (*QueryAllCrossTalkRequestResponse, error) {
	out := new(QueryAllCrossTalkRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Query/CrossTalkRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosstalkRequestConfirm(ctx context.Context, in *QueryGetCrosstalkRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosstalkRequestConfirmResponse, error) {
	out := new(QueryGetCrosstalkRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Query/CrosstalkRequestConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosstalkRequestConfirmAll(ctx context.Context, in *QueryAllCrosstalkRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosstalkRequestConfirmResponse, error) {
	out := new(QueryAllCrosstalkRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Query/CrosstalkRequestConfirmAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a CrossTalkRequest by index.
	CrossTalkRequest(context.Context, *QueryGetCrossTalkRequest) (*QueryGetCrossTalkRequestResponse, error)
	// Queries a list of CrossTalkRequest items.
	CrossTalkRequestAll(context.Context, *QueryAllCrossTalkRequest) (*QueryAllCrossTalkRequestResponse, error)
	// Queries a CrosstalkRequestConfirm by index.
	CrosstalkRequestConfirm(context.Context, *QueryGetCrosstalkRequestConfirmRequest) (*QueryGetCrosstalkRequestConfirmResponse, error)
	// Queries a list of CrosstalkRequestConfirm items.
	CrosstalkRequestConfirmAll(context.Context, *QueryAllCrosstalkRequestConfirmRequest) (*QueryAllCrosstalkRequestConfirmResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CrossTalkRequest(ctx context.Context, req *QueryGetCrossTalkRequest) (*QueryGetCrossTalkRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossTalkRequest not implemented")
}
func (*UnimplementedQueryServer) CrossTalkRequestAll(ctx context.Context, req *QueryAllCrossTalkRequest) (*QueryAllCrossTalkRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossTalkRequestAll not implemented")
}
func (*UnimplementedQueryServer) CrosstalkRequestConfirm(ctx context.Context, req *QueryGetCrosstalkRequestConfirmRequest) (*QueryGetCrosstalkRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosstalkRequestConfirm not implemented")
}
func (*UnimplementedQueryServer) CrosstalkRequestConfirmAll(ctx context.Context, req *QueryAllCrosstalkRequestConfirmRequest) (*QueryAllCrosstalkRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosstalkRequestConfirmAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossTalkRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrossTalkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossTalkRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Query/CrossTalkRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossTalkRequest(ctx, req.(*QueryGetCrossTalkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossTalkRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrossTalkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossTalkRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Query/CrossTalkRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossTalkRequestAll(ctx, req.(*QueryAllCrossTalkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosstalkRequestConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosstalkRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosstalkRequestConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Query/CrosstalkRequestConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosstalkRequestConfirm(ctx, req.(*QueryGetCrosstalkRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosstalkRequestConfirmAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosstalkRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosstalkRequestConfirmAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Query/CrosstalkRequestConfirmAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosstalkRequestConfirmAll(ctx, req.(*QueryAllCrosstalkRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.crosstalk.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CrossTalkRequest",
			Handler:    _Query_CrossTalkRequest_Handler,
		},
		{
			MethodName: "CrossTalkRequestAll",
			Handler:    _Query_CrossTalkRequestAll_Handler,
		},
		{
			MethodName: "CrosstalkRequestConfirm",
			Handler:    _Query_CrosstalkRequestConfirm_Handler,
		},
		{
			MethodName: "CrosstalkRequestConfirmAll",
			Handler:    _Query_CrosstalkRequestConfirmAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crosstalk/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCrossTalkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrossTalkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrossTalkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrossTalkRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrossTalkRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrossTalkRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrossTalkRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCrossTalkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrossTalkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrossTalkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrossTalkRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrossTalkRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrossTalkRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrossTalkRequest) > 0 {
		for iNdEx := len(m.CrossTalkRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrossTalkRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosstalkRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosstalkRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosstalkRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosstalkRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosstalkRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosstalkRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrosstalkRequestConfirm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosstalkRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosstalkRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosstalkRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosstalkRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosstalkRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosstalkRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosstalkRequestConfirm) > 0 {
		for iNdEx := len(m.CrosstalkRequestConfirm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosstalkRequestConfirm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCrossTalkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovQuery(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryGetCrossTalkRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrossTalkRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCrossTalkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrossTalkRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrossTalkRequest) > 0 {
		for _, e := range m.CrossTalkRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosstalkRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovQuery(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosstalkRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrosstalkRequestConfirm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCrosstalkRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovQuery(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosstalkRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosstalkRequestConfirm) > 0 {
		for _, e := range m.CrosstalkRequestConfirm {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrossTalkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrossTalkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrossTalkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrossTalkRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrossTalkRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrossTalkRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossTalkRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrossTalkRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrossTalkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrossTalkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrossTalkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrossTalkRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrossTalkRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrossTalkRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossTalkRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrossTalkRequest = append(m.CrossTalkRequest, CrossTalkRequest{})
			if err := m.CrossTalkRequest[len(m.CrossTalkRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosstalkRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosstalkRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosstalkRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosstalkRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosstalkRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosstalkRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosstalkRequestConfirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosstalkRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosstalkRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosstalkRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosstalkRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosstalkRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosstalkRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosstalkRequestConfirm = append(m.CrosstalkRequestConfirm, CrosstalkRequestConfirm{})
			if err := m.CrosstalkRequestConfirm[len(m.CrosstalkRequestConfirm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
