// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCrossTalkRequest struct {
	Orchestrator          string                  `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	EventNonce            uint64                  `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight           uint64                  `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ChainType             types.ChainType         `protobuf:"varint,4,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId               string                  `protobuf:"bytes,5,opt,name=chainId,proto3" json:"chainId,omitempty"`
	SourceTxHash          string                  `protobuf:"bytes,6,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	SourceTimestamp       uint64                  `protobuf:"varint,7,opt,name=sourceTimestamp,proto3" json:"sourceTimestamp,omitempty"`
	DestinationChainType  types.ChainType         `protobuf:"varint,8,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId    string                  `protobuf:"bytes,9,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	DestinationGasLimit   uint64                  `protobuf:"varint,10,opt,name=destinationGasLimit,proto3" json:"destinationGasLimit,omitempty"`
	DestinationGasPrice   uint64                  `protobuf:"varint,11,opt,name=destinationGasPrice,proto3" json:"destinationGasPrice,omitempty"`
	RequestSender         []byte                  `protobuf:"bytes,12,opt,name=requestSender,proto3" json:"requestSender,omitempty"`
	RequestTxOrigin       string                  `protobuf:"bytes,13,opt,name=requestTxOrigin,proto3" json:"requestTxOrigin,omitempty"`
	IsReadCall            bool                    `protobuf:"varint,14,opt,name=isReadCall,proto3" json:"isReadCall,omitempty"`
	RequestNonce          uint64                  `protobuf:"varint,15,opt,name=requestNonce,proto3" json:"requestNonce,omitempty"`
	IsAtomic              bool                    `protobuf:"varint,16,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	ExpiryTimestamp       uint64                  `protobuf:"varint,17,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	DestContractAddresses [][]byte                `protobuf:"bytes,18,rep,name=destContractAddresses,proto3" json:"destContractAddresses,omitempty"`
	DestContractPayloads  [][]byte                `protobuf:"bytes,19,rep,name=destContractPayloads,proto3" json:"destContractPayloads,omitempty"`
	AckType               CrossTalkRequestAckType `protobuf:"varint,20,opt,name=ackType,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkRequestAckType" json:"ackType,omitempty"`
	AckGasLimit           uint64                  `protobuf:"varint,21,opt,name=ackGasLimit,proto3" json:"ackGasLimit,omitempty"`
	AckGasPrice           uint64                  `protobuf:"varint,22,opt,name=ackGasPrice,proto3" json:"ackGasPrice,omitempty"`
	EthSigner             string                  `protobuf:"bytes,23,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature             string                  `protobuf:"bytes,24,opt,name=signature,proto3" json:"signature,omitempty"`
	FeePayer              []byte                  `protobuf:"bytes,25,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	AsmAddress            []byte                  `protobuf:"bytes,26,opt,name=asmAddress,proto3" json:"asmAddress,omitempty"`
}

func (m *MsgCrossTalkRequest) Reset()         { *m = MsgCrossTalkRequest{} }
func (m *MsgCrossTalkRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCrossTalkRequest) ProtoMessage()    {}
func (*MsgCrossTalkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{0}
}
func (m *MsgCrossTalkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossTalkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossTalkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossTalkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossTalkRequest.Merge(m, src)
}
func (m *MsgCrossTalkRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossTalkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossTalkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossTalkRequest proto.InternalMessageInfo

func (m *MsgCrossTalkRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCrossTalkRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgCrossTalkRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgCrossTalkRequest) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *MsgCrossTalkRequest) GetSourceTimestamp() uint64 {
	if m != nil {
		return m.SourceTimestamp
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgCrossTalkRequest) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *MsgCrossTalkRequest) GetDestinationGasLimit() uint64 {
	if m != nil {
		return m.DestinationGasLimit
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetDestinationGasPrice() uint64 {
	if m != nil {
		return m.DestinationGasPrice
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetRequestSender() []byte {
	if m != nil {
		return m.RequestSender
	}
	return nil
}

func (m *MsgCrossTalkRequest) GetRequestTxOrigin() string {
	if m != nil {
		return m.RequestTxOrigin
	}
	return ""
}

func (m *MsgCrossTalkRequest) GetIsReadCall() bool {
	if m != nil {
		return m.IsReadCall
	}
	return false
}

func (m *MsgCrossTalkRequest) GetRequestNonce() uint64 {
	if m != nil {
		return m.RequestNonce
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *MsgCrossTalkRequest) GetExpiryTimestamp() uint64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetDestContractAddresses() [][]byte {
	if m != nil {
		return m.DestContractAddresses
	}
	return nil
}

func (m *MsgCrossTalkRequest) GetDestContractPayloads() [][]byte {
	if m != nil {
		return m.DestContractPayloads
	}
	return nil
}

func (m *MsgCrossTalkRequest) GetAckType() CrossTalkRequestAckType {
	if m != nil {
		return m.AckType
	}
	return CROSSTALK_REQUEST_NO_ACK
}

func (m *MsgCrossTalkRequest) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

func (m *MsgCrossTalkRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgCrossTalkRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *MsgCrossTalkRequest) GetFeePayer() []byte {
	if m != nil {
		return m.FeePayer
	}
	return nil
}

func (m *MsgCrossTalkRequest) GetAsmAddress() []byte {
	if m != nil {
		return m.AsmAddress
	}
	return nil
}

type MsgCrossTalkRequestResponse struct {
}

func (m *MsgCrossTalkRequestResponse) Reset()         { *m = MsgCrossTalkRequestResponse{} }
func (m *MsgCrossTalkRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrossTalkRequestResponse) ProtoMessage()    {}
func (*MsgCrossTalkRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{1}
}
func (m *MsgCrossTalkRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossTalkRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossTalkRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossTalkRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossTalkRequestResponse.Merge(m, src)
}
func (m *MsgCrossTalkRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossTalkRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossTalkRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossTalkRequestResponse proto.InternalMessageInfo

type MsgCrossTalkAckRequest struct {
	Orchestrator           string          `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	EventNonce             uint64          `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight            uint64          `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress   string          `protobuf:"bytes,4,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	SourceChainType        types.ChainType `protobuf:"varint,5,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId          string          `protobuf:"bytes,6,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	ChainType              types.ChainType `protobuf:"varint,7,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId                string          `protobuf:"bytes,8,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DestinationTxHash      string          `protobuf:"bytes,9,opt,name=destinationTxHash,proto3" json:"destinationTxHash,omitempty"`
	FeeConsumed            uint64          `protobuf:"varint,10,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	EventIdentifier        uint64          `protobuf:"varint,11,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
	CrosstalkRequestSender []byte          `protobuf:"bytes,12,opt,name=crosstalkRequestSender,proto3" json:"crosstalkRequestSender,omitempty"`
	CrosstalkNonce         uint64          `protobuf:"varint,13,opt,name=crosstalkNonce,proto3" json:"crosstalkNonce,omitempty"`
	ContractAckResponses   []byte          `protobuf:"bytes,14,opt,name=contractAckResponses,proto3" json:"contractAckResponses,omitempty"`
	ExeCode                uint64          `protobuf:"varint,15,opt,name=exeCode,proto3" json:"exeCode,omitempty"`
	Status                 bool            `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	ExecFlags              []bool          `protobuf:"varint,17,rep,packed,name=execFlags,proto3" json:"execFlags,omitempty"`
	ExecData               [][]byte        `protobuf:"bytes,18,rep,name=execData,proto3" json:"execData,omitempty"`
	EthSigner              string          `protobuf:"bytes,19,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature              string          `protobuf:"bytes,20,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgCrossTalkAckRequest) Reset()         { *m = MsgCrossTalkAckRequest{} }
func (m *MsgCrossTalkAckRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCrossTalkAckRequest) ProtoMessage()    {}
func (*MsgCrossTalkAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{2}
}
func (m *MsgCrossTalkAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossTalkAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossTalkAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossTalkAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossTalkAckRequest.Merge(m, src)
}
func (m *MsgCrossTalkAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossTalkAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossTalkAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossTalkAckRequest proto.InternalMessageInfo

func (m *MsgCrossTalkAckRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCrossTalkAckRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgCrossTalkAckRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgCrossTalkAckRequest) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *MsgCrossTalkAckRequest) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgCrossTalkAckRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *MsgCrossTalkAckRequest) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgCrossTalkAckRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgCrossTalkAckRequest) GetDestinationTxHash() string {
	if m != nil {
		return m.DestinationTxHash
	}
	return ""
}

func (m *MsgCrossTalkAckRequest) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *MsgCrossTalkAckRequest) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

func (m *MsgCrossTalkAckRequest) GetCrosstalkRequestSender() []byte {
	if m != nil {
		return m.CrosstalkRequestSender
	}
	return nil
}

func (m *MsgCrossTalkAckRequest) GetCrosstalkNonce() uint64 {
	if m != nil {
		return m.CrosstalkNonce
	}
	return 0
}

func (m *MsgCrossTalkAckRequest) GetContractAckResponses() []byte {
	if m != nil {
		return m.ContractAckResponses
	}
	return nil
}

func (m *MsgCrossTalkAckRequest) GetExeCode() uint64 {
	if m != nil {
		return m.ExeCode
	}
	return 0
}

func (m *MsgCrossTalkAckRequest) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *MsgCrossTalkAckRequest) GetExecFlags() []bool {
	if m != nil {
		return m.ExecFlags
	}
	return nil
}

func (m *MsgCrossTalkAckRequest) GetExecData() [][]byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *MsgCrossTalkAckRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgCrossTalkAckRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgCrossTalkAckRequestResponse struct {
}

func (m *MsgCrossTalkAckRequestResponse) Reset()         { *m = MsgCrossTalkAckRequestResponse{} }
func (m *MsgCrossTalkAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrossTalkAckRequestResponse) ProtoMessage()    {}
func (*MsgCrossTalkAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{3}
}
func (m *MsgCrossTalkAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossTalkAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossTalkAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossTalkAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossTalkAckRequestResponse.Merge(m, src)
}
func (m *MsgCrossTalkAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossTalkAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossTalkAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossTalkAckRequestResponse proto.InternalMessageInfo

type MsgCrossTalkAckReceipt struct {
	Orchestrator         string          `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	EventNonce           uint64          `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64          `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress string          `protobuf:"bytes,4,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	ChainType            types.ChainType `protobuf:"varint,5,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId              string          `protobuf:"bytes,6,opt,name=chainId,proto3" json:"chainId,omitempty"`
	TxHash               string          `protobuf:"bytes,7,opt,name=txHash,proto3" json:"txHash,omitempty"`
	FeeConsumed          uint64          `protobuf:"varint,8,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	EventIdentifier      uint64          `protobuf:"varint,9,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
}

func (m *MsgCrossTalkAckReceipt) Reset()         { *m = MsgCrossTalkAckReceipt{} }
func (m *MsgCrossTalkAckReceipt) String() string { return proto.CompactTextString(m) }
func (*MsgCrossTalkAckReceipt) ProtoMessage()    {}
func (*MsgCrossTalkAckReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{4}
}
func (m *MsgCrossTalkAckReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossTalkAckReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossTalkAckReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossTalkAckReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossTalkAckReceipt.Merge(m, src)
}
func (m *MsgCrossTalkAckReceipt) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossTalkAckReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossTalkAckReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossTalkAckReceipt proto.InternalMessageInfo

func (m *MsgCrossTalkAckReceipt) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCrossTalkAckReceipt) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgCrossTalkAckReceipt) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgCrossTalkAckReceipt) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *MsgCrossTalkAckReceipt) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgCrossTalkAckReceipt) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgCrossTalkAckReceipt) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgCrossTalkAckReceipt) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *MsgCrossTalkAckReceipt) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

type MsgCrossTalkAckReceiptResponse struct {
}

func (m *MsgCrossTalkAckReceiptResponse) Reset()         { *m = MsgCrossTalkAckReceiptResponse{} }
func (m *MsgCrossTalkAckReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrossTalkAckReceiptResponse) ProtoMessage()    {}
func (*MsgCrossTalkAckReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{5}
}
func (m *MsgCrossTalkAckReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrossTalkAckReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrossTalkAckReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrossTalkAckReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrossTalkAckReceiptResponse.Merge(m, src)
}
func (m *MsgCrossTalkAckReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrossTalkAckReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrossTalkAckReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrossTalkAckReceiptResponse proto.InternalMessageInfo

type MsgSetCrosstalkFeePayer struct {
	FeePayer   string          `protobuf:"bytes,1,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	ChainType  types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId    string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
}

func (m *MsgSetCrosstalkFeePayer) Reset()         { *m = MsgSetCrosstalkFeePayer{} }
func (m *MsgSetCrosstalkFeePayer) String() string { return proto.CompactTextString(m) }
func (*MsgSetCrosstalkFeePayer) ProtoMessage()    {}
func (*MsgSetCrosstalkFeePayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{6}
}
func (m *MsgSetCrosstalkFeePayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetCrosstalkFeePayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetCrosstalkFeePayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetCrosstalkFeePayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetCrosstalkFeePayer.Merge(m, src)
}
func (m *MsgSetCrosstalkFeePayer) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetCrosstalkFeePayer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetCrosstalkFeePayer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetCrosstalkFeePayer proto.InternalMessageInfo

func (m *MsgSetCrosstalkFeePayer) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *MsgSetCrosstalkFeePayer) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgSetCrosstalkFeePayer) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgSetCrosstalkFeePayer) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type MsgSetCrosstalkFeePayerResponse struct {
}

func (m *MsgSetCrosstalkFeePayerResponse) Reset()         { *m = MsgSetCrosstalkFeePayerResponse{} }
func (m *MsgSetCrosstalkFeePayerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetCrosstalkFeePayerResponse) ProtoMessage()    {}
func (*MsgSetCrosstalkFeePayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{7}
}
func (m *MsgSetCrosstalkFeePayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetCrosstalkFeePayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetCrosstalkFeePayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetCrosstalkFeePayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetCrosstalkFeePayerResponse.Merge(m, src)
}
func (m *MsgSetCrosstalkFeePayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetCrosstalkFeePayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetCrosstalkFeePayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetCrosstalkFeePayerResponse proto.InternalMessageInfo

type MsgIncrementCrosstalkDestGas struct {
	FeePayer     string          `protobuf:"bytes,1,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	ChainType    types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId      string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce   uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	DestGasLimit uint64          `protobuf:"varint,5,opt,name=destGasLimit,proto3" json:"destGasLimit,omitempty"`
	DestGasPrice uint64          `protobuf:"varint,6,opt,name=destGasPrice,proto3" json:"destGasPrice,omitempty"`
}

func (m *MsgIncrementCrosstalkDestGas) Reset()         { *m = MsgIncrementCrosstalkDestGas{} }
func (m *MsgIncrementCrosstalkDestGas) String() string { return proto.CompactTextString(m) }
func (*MsgIncrementCrosstalkDestGas) ProtoMessage()    {}
func (*MsgIncrementCrosstalkDestGas) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{8}
}
func (m *MsgIncrementCrosstalkDestGas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncrementCrosstalkDestGas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncrementCrosstalkDestGas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncrementCrosstalkDestGas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncrementCrosstalkDestGas.Merge(m, src)
}
func (m *MsgIncrementCrosstalkDestGas) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncrementCrosstalkDestGas) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncrementCrosstalkDestGas.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncrementCrosstalkDestGas proto.InternalMessageInfo

func (m *MsgIncrementCrosstalkDestGas) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *MsgIncrementCrosstalkDestGas) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgIncrementCrosstalkDestGas) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgIncrementCrosstalkDestGas) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgIncrementCrosstalkDestGas) GetDestGasLimit() uint64 {
	if m != nil {
		return m.DestGasLimit
	}
	return 0
}

func (m *MsgIncrementCrosstalkDestGas) GetDestGasPrice() uint64 {
	if m != nil {
		return m.DestGasPrice
	}
	return 0
}

type MsgIncrementCrosstalkDestGasResponse struct {
}

func (m *MsgIncrementCrosstalkDestGasResponse) Reset()         { *m = MsgIncrementCrosstalkDestGasResponse{} }
func (m *MsgIncrementCrosstalkDestGasResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIncrementCrosstalkDestGasResponse) ProtoMessage()    {}
func (*MsgIncrementCrosstalkDestGasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{9}
}
func (m *MsgIncrementCrosstalkDestGasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncrementCrosstalkDestGasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncrementCrosstalkDestGasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncrementCrosstalkDestGasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncrementCrosstalkDestGasResponse.Merge(m, src)
}
func (m *MsgIncrementCrosstalkDestGasResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncrementCrosstalkDestGasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncrementCrosstalkDestGasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncrementCrosstalkDestGasResponse proto.InternalMessageInfo

type MsgIncrementCrosstalkAckGas struct {
	FeePayer    string          `protobuf:"bytes,1,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	ChainType   types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId     string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce  uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	AckGasLimit uint64          `protobuf:"varint,5,opt,name=ackGasLimit,proto3" json:"ackGasLimit,omitempty"`
	AckGasPrice uint64          `protobuf:"varint,6,opt,name=ackGasPrice,proto3" json:"ackGasPrice,omitempty"`
}

func (m *MsgIncrementCrosstalkAckGas) Reset()         { *m = MsgIncrementCrosstalkAckGas{} }
func (m *MsgIncrementCrosstalkAckGas) String() string { return proto.CompactTextString(m) }
func (*MsgIncrementCrosstalkAckGas) ProtoMessage()    {}
func (*MsgIncrementCrosstalkAckGas) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{10}
}
func (m *MsgIncrementCrosstalkAckGas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncrementCrosstalkAckGas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncrementCrosstalkAckGas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncrementCrosstalkAckGas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncrementCrosstalkAckGas.Merge(m, src)
}
func (m *MsgIncrementCrosstalkAckGas) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncrementCrosstalkAckGas) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncrementCrosstalkAckGas.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncrementCrosstalkAckGas proto.InternalMessageInfo

func (m *MsgIncrementCrosstalkAckGas) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *MsgIncrementCrosstalkAckGas) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *MsgIncrementCrosstalkAckGas) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgIncrementCrosstalkAckGas) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgIncrementCrosstalkAckGas) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *MsgIncrementCrosstalkAckGas) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

type MsgIncrementCrosstalkAckGasResponse struct {
}

func (m *MsgIncrementCrosstalkAckGasResponse) Reset()         { *m = MsgIncrementCrosstalkAckGasResponse{} }
func (m *MsgIncrementCrosstalkAckGasResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIncrementCrosstalkAckGasResponse) ProtoMessage()    {}
func (*MsgIncrementCrosstalkAckGasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05d1b0bf5470766, []int{11}
}
func (m *MsgIncrementCrosstalkAckGasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncrementCrosstalkAckGasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncrementCrosstalkAckGasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncrementCrosstalkAckGasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncrementCrosstalkAckGasResponse.Merge(m, src)
}
func (m *MsgIncrementCrosstalkAckGasResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncrementCrosstalkAckGasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncrementCrosstalkAckGasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncrementCrosstalkAckGasResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCrossTalkRequest)(nil), "routerprotocol.routerchain.crosstalk.MsgCrossTalkRequest")
	proto.RegisterType((*MsgCrossTalkRequestResponse)(nil), "routerprotocol.routerchain.crosstalk.MsgCrossTalkRequestResponse")
	proto.RegisterType((*MsgCrossTalkAckRequest)(nil), "routerprotocol.routerchain.crosstalk.MsgCrossTalkAckRequest")
	proto.RegisterType((*MsgCrossTalkAckRequestResponse)(nil), "routerprotocol.routerchain.crosstalk.MsgCrossTalkAckRequestResponse")
	proto.RegisterType((*MsgCrossTalkAckReceipt)(nil), "routerprotocol.routerchain.crosstalk.MsgCrossTalkAckReceipt")
	proto.RegisterType((*MsgCrossTalkAckReceiptResponse)(nil), "routerprotocol.routerchain.crosstalk.MsgCrossTalkAckReceiptResponse")
	proto.RegisterType((*MsgSetCrosstalkFeePayer)(nil), "routerprotocol.routerchain.crosstalk.MsgSetCrosstalkFeePayer")
	proto.RegisterType((*MsgSetCrosstalkFeePayerResponse)(nil), "routerprotocol.routerchain.crosstalk.MsgSetCrosstalkFeePayerResponse")
	proto.RegisterType((*MsgIncrementCrosstalkDestGas)(nil), "routerprotocol.routerchain.crosstalk.MsgIncrementCrosstalkDestGas")
	proto.RegisterType((*MsgIncrementCrosstalkDestGasResponse)(nil), "routerprotocol.routerchain.crosstalk.MsgIncrementCrosstalkDestGasResponse")
	proto.RegisterType((*MsgIncrementCrosstalkAckGas)(nil), "routerprotocol.routerchain.crosstalk.MsgIncrementCrosstalkAckGas")
	proto.RegisterType((*MsgIncrementCrosstalkAckGasResponse)(nil), "routerprotocol.routerchain.crosstalk.MsgIncrementCrosstalkAckGasResponse")
}

func init() { proto.RegisterFile("crosstalk/tx.proto", fileDescriptor_e05d1b0bf5470766) }

var fileDescriptor_e05d1b0bf5470766 = []byte{
	// 1181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0xc6, 0x89, 0x3f, 0xa6, 0x69, 0xda, 0x4c, 0xd2, 0x74, 0xea, 0x16, 0x63, 0x4c, 0x88,
	0x2c, 0x04, 0x4e, 0x15, 0x10, 0x52, 0x25, 0x7a, 0x70, 0x1d, 0xda, 0x1a, 0x91, 0x12, 0x6d, 0x22,
	0x21, 0xf5, 0x52, 0x4d, 0x76, 0x5f, 0xec, 0x51, 0xec, 0x5d, 0x33, 0x33, 0x46, 0xf6, 0x8d, 0x13,
	0x5c, 0x38, 0xf4, 0x8a, 0xc4, 0x1f, 0x80, 0xc4, 0x1f, 0xc1, 0xb5, 0xc7, 0x1e, 0x38, 0x70, 0x44,
	0xc9, 0x3f, 0x82, 0x66, 0x66, 0xbf, 0xb3, 0x09, 0x26, 0x89, 0x10, 0xbd, 0x54, 0x79, 0xbf, 0xf7,
	0x31, 0x6f, 0xde, 0xc7, 0x6f, 0xa7, 0x46, 0xd8, 0xe1, 0xbe, 0x10, 0x92, 0x0e, 0x8e, 0x36, 0xe5,
	0xa4, 0x35, 0xe2, 0xbe, 0xf4, 0xf1, 0x3a, 0xf7, 0xc7, 0x12, 0xb8, 0x16, 0x1c, 0x7f, 0xd0, 0x32,
	0xa2, 0xd3, 0xa7, 0xcc, 0x6b, 0x45, 0xe6, 0xd5, 0x46, 0xec, 0xa9, 0xff, 0x7a, 0xa9, 0xfe, 0x7c,
	0xc9, 0xe1, 0xdb, 0x31, 0x08, 0x69, 0x22, 0x55, 0x37, 0x72, 0x6d, 0xa8, 0x93, 0xb5, 0xfb, 0x30,
	0x63, 0x97, 0x0c, 0xa5, 0xcd, 0xe5, 0x74, 0x04, 0x33, 0xc4, 0x74, 0x80, 0x8d, 0xc2, 0x98, 0xf7,
	0x86, 0xe3, 0x81, 0x64, 0x3a, 0xeb, 0x4d, 0xfd, 0x6f, 0x22, 0x48, 0xe3, 0x87, 0x0a, 0x5a, 0xd9,
	0x11, 0xbd, 0x8e, 0x0a, 0xb0, 0x4f, 0x07, 0x47, 0xb6, 0x39, 0x0b, 0x37, 0xd0, 0xa2, 0xcf, 0x9d,
	0x3e, 0x08, 0xc9, 0xa9, 0xf4, 0x39, 0xb1, 0xea, 0x56, 0xb3, 0x62, 0xa7, 0x30, 0x5c, 0x43, 0x08,
	0xbe, 0x03, 0x4f, 0x3e, 0xf7, 0x3d, 0x07, 0xc8, 0x5c, 0xdd, 0x6a, 0xce, 0xdb, 0x09, 0x04, 0xd7,
	0xd1, 0xf5, 0x83, 0x81, 0xef, 0x1c, 0x3d, 0x03, 0xd6, 0xeb, 0x4b, 0x52, 0xd0, 0x06, 0x49, 0x08,
	0x3f, 0x47, 0x15, 0x9d, 0xd1, 0xfe, 0x74, 0x04, 0x64, 0xbe, 0x6e, 0x35, 0x97, 0xb6, 0x1e, 0xb4,
	0xce, 0x29, 0x7a, 0x7c, 0x93, 0x56, 0x27, 0xf4, 0xb3, 0xe3, 0x10, 0x98, 0xa0, 0x92, 0x16, 0xba,
	0x2e, 0x59, 0xd0, 0x09, 0x87, 0xa2, 0xba, 0x8f, 0xf0, 0xc7, 0xdc, 0x81, 0xfd, 0xc9, 0x33, 0x2a,
	0xfa, 0xa4, 0x68, 0xee, 0x93, 0xc4, 0x70, 0x13, 0xdd, 0x0c, 0x64, 0x36, 0x04, 0x21, 0xe9, 0x70,
	0x44, 0x4a, 0x3a, 0xe7, 0x2c, 0x8c, 0x5d, 0xb4, 0xea, 0x82, 0x90, 0xcc, 0xa3, 0x92, 0xf9, 0x5e,
	0x94, 0x0a, 0x29, 0x5f, 0xf0, 0x0a, 0xb9, 0xd1, 0x70, 0x0b, 0xe1, 0x2c, 0xde, 0x75, 0x49, 0x45,
	0x67, 0x9e, 0xa3, 0xc1, 0x0f, 0xd0, 0x4a, 0x02, 0x7d, 0x4a, 0xc5, 0x57, 0x6c, 0xc8, 0x24, 0x41,
	0xfa, 0x0e, 0x79, 0xaa, 0xd3, 0x1e, 0xbb, 0x9c, 0x39, 0x40, 0xae, 0xe7, 0x79, 0x68, 0x15, 0x5e,
	0x47, 0x37, 0x82, 0x71, 0xdc, 0x03, 0xcf, 0x05, 0x4e, 0x16, 0xeb, 0x56, 0x73, 0xd1, 0x4e, 0x83,
	0xaa, 0x92, 0x01, 0xb0, 0x3f, 0xf9, 0x9a, 0xb3, 0x1e, 0xf3, 0xc8, 0x0d, 0x9d, 0x76, 0x16, 0x56,
	0x33, 0xc4, 0x84, 0x0d, 0xd4, 0xed, 0xd0, 0xc1, 0x80, 0x2c, 0xd5, 0xad, 0x66, 0xd9, 0x4e, 0x20,
	0xaa, 0x6f, 0x81, 0x8b, 0x99, 0xb2, 0x9b, 0x3a, 0xb5, 0x14, 0x86, 0xab, 0xa8, 0xcc, 0x44, 0x5b,
	0xfa, 0x43, 0xe6, 0x90, 0x5b, 0x3a, 0x42, 0x24, 0xab, 0x4c, 0x60, 0x32, 0x62, 0x7c, 0x1a, 0xf7,
	0x74, 0xd9, 0xf4, 0x34, 0x03, 0xe3, 0x4f, 0xd1, 0x6d, 0x75, 0xe1, 0x8e, 0xef, 0x49, 0x4e, 0x1d,
	0xd9, 0x76, 0x5d, 0x0e, 0x42, 0x80, 0x20, 0xb8, 0x5e, 0x68, 0x2e, 0xda, 0xf9, 0x4a, 0xbc, 0x65,
	0x26, 0x21, 0x54, 0xec, 0xd2, 0xe9, 0xc0, 0xa7, 0xae, 0x20, 0x2b, 0xda, 0x29, 0x57, 0x87, 0xbf,
	0x41, 0x25, 0xea, 0x1c, 0xe9, 0x81, 0x59, 0xd5, 0x03, 0xf3, 0xa8, 0x35, 0x0b, 0xd1, 0xb4, 0xb2,
	0x4b, 0xda, 0x36, 0x41, 0xec, 0x30, 0x9a, 0x5a, 0x38, 0xea, 0x1c, 0x45, 0x8d, 0xbf, 0x6d, 0x16,
	0x2e, 0x01, 0xc5, 0x16, 0xa6, 0xd1, 0x6b, 0x49, 0x0b, 0xd3, 0xe0, 0xfb, 0xa8, 0x02, 0xb2, 0xbf,
	0xc7, 0x7a, 0x1e, 0x70, 0x72, 0x47, 0x37, 0x2d, 0x06, 0x94, 0x56, 0xb0, 0x9e, 0x47, 0xe5, 0x98,
	0x03, 0x21, 0x46, 0x1b, 0x01, 0xaa, 0x11, 0x87, 0x00, 0xbb, 0x74, 0x0a, 0x9c, 0xdc, 0xd5, 0x73,
	0x11, 0xc9, 0xaa, 0xd1, 0x54, 0x0c, 0x83, 0xc2, 0x91, 0xaa, 0xd6, 0x26, 0x90, 0xc6, 0x3b, 0xe8,
	0x5e, 0x0e, 0x0f, 0xd9, 0x20, 0x46, 0xbe, 0x27, 0xa0, 0xf1, 0x47, 0x11, 0xad, 0x25, 0xf5, 0x6d,
	0xe7, 0x3f, 0xa6, 0xaa, 0x2d, 0xb4, 0xca, 0x61, 0xa0, 0xae, 0x62, 0xeb, 0xe6, 0x84, 0x37, 0x99,
	0xd7, 0xa7, 0xe5, 0xea, 0xf0, 0x8b, 0x90, 0x50, 0x62, 0x86, 0x58, 0xb8, 0x20, 0x43, 0x64, 0x03,
	0xa9, 0x45, 0x4c, 0x40, 0x5d, 0x37, 0x60, 0xb4, 0x34, 0x98, 0x26, 0xd8, 0xd2, 0x95, 0x12, 0x6c,
	0x39, 0x4d, 0xb0, 0x1f, 0xa1, 0xe5, 0x04, 0x5f, 0x04, 0x2c, 0x6b, 0xb8, 0xea, 0xb4, 0x42, 0xd5,
	0xfb, 0x10, 0xa0, 0xe3, 0x7b, 0x62, 0x3c, 0x04, 0x37, 0xa0, 0xa8, 0x24, 0xa4, 0x17, 0x57, 0xf5,
	0xa7, 0xeb, 0x82, 0x27, 0xd9, 0x21, 0x03, 0x1e, 0xd0, 0x52, 0x16, 0xc6, 0x9f, 0xa1, 0xb5, 0x68,
	0x47, 0xec, 0x1c, 0x6e, 0x3a, 0x43, 0x8b, 0x37, 0xd0, 0x52, 0xa4, 0x31, 0x73, 0x71, 0x43, 0x1f,
	0x90, 0x41, 0x55, 0xe7, 0x9d, 0x70, 0xef, 0xd5, 0xd4, 0x99, 0x89, 0x14, 0x9a, 0xac, 0x16, 0xed,
	0x5c, 0x9d, 0xaa, 0x13, 0x4c, 0xa0, 0xe3, 0xbb, 0x21, 0x63, 0x85, 0x22, 0x5e, 0x43, 0x45, 0x21,
	0xa9, 0x1c, 0x8b, 0x80, 0xaa, 0x02, 0x49, 0xef, 0xdd, 0x04, 0x9c, 0x27, 0x03, 0xda, 0x13, 0x64,
	0xb9, 0x5e, 0x68, 0x96, 0xed, 0x18, 0x50, 0x9b, 0xa5, 0x84, 0x6d, 0x2a, 0x69, 0xc0, 0x47, 0x91,
	0x9c, 0xde, 0xd8, 0x95, 0x73, 0x37, 0x76, 0x35, 0xb3, 0xb1, 0x8d, 0x3a, 0xaa, 0xe5, 0x6f, 0x55,
	0xb4, 0x78, 0xdf, 0x17, 0x72, 0x16, 0x4f, 0x3f, 0x2f, 0xfe, 0xc7, 0x8b, 0x97, 0x1a, 0xfb, 0x85,
	0x2b, 0x1d, 0xfb, 0x62, 0x7a, 0xec, 0xd7, 0x50, 0x51, 0x9a, 0x59, 0x2f, 0x69, 0x45, 0x20, 0x65,
	0x07, 0xbc, 0x3c, 0xd3, 0x80, 0x57, 0x72, 0x07, 0x3c, 0xb7, 0x49, 0xba, 0x03, 0x51, 0x93, 0x7e,
	0xb7, 0xd0, 0x9d, 0x1d, 0xd1, 0xdb, 0x03, 0xd9, 0x09, 0x67, 0xf7, 0x49, 0x48, 0xbc, 0x49, 0x52,
	0x36, 0x1d, 0x8a, 0x49, 0x39, 0x55, 0xa7, 0xb9, 0x2b, 0xad, 0x53, 0x21, 0x5d, 0xa7, 0xf4, 0x1c,
	0xcc, 0x67, 0xe7, 0xa0, 0xf1, 0x1e, 0x7a, 0xf7, 0x8c, 0x0b, 0x44, 0x97, 0xfc, 0x69, 0x0e, 0xdd,
	0xdf, 0x11, 0xbd, 0xae, 0xe7, 0x70, 0x18, 0x82, 0x17, 0x5b, 0x6e, 0x83, 0x90, 0x4f, 0xa9, 0x78,
	0x3b, 0x6e, 0xaa, 0xb6, 0xc6, 0x35, 0x09, 0x9b, 0xaf, 0xf4, 0x82, 0x79, 0xd1, 0x24, 0xb1, 0x84,
	0x8d, 0xf9, 0x4e, 0x17, 0x53, 0x36, 0x1a, 0x6b, 0x6c, 0xa0, 0xf5, 0xf3, 0xaa, 0x11, 0x95, 0xed,
	0xc7, 0x39, 0xfd, 0x65, 0x3d, 0x6d, 0xd8, 0xd6, 0x5f, 0xfd, 0xb7, 0xa4, 0x6a, 0x99, 0xa7, 0xcd,
	0xc2, 0x3f, 0x3e, 0x6d, 0x8a, 0xa7, 0x9e, 0x36, 0x8d, 0x0f, 0xd0, 0xfb, 0xe7, 0x14, 0x22, 0x2c,
	0xd8, 0xd6, 0xeb, 0x12, 0x2a, 0xec, 0x88, 0x1e, 0x7e, 0x65, 0xa1, 0x5b, 0xa7, 0xfe, 0x5f, 0xf4,
	0x70, 0xb6, 0xa7, 0x5a, 0xce, 0x53, 0xa6, 0xda, 0xbe, 0xb0, 0x6b, 0x98, 0x1a, 0xfe, 0xd9, 0x42,
	0x2b, 0x79, 0x4f, 0xa0, 0xcf, 0xff, 0x7d, 0xe8, 0xd8, 0xbb, 0xba, 0x7d, 0x19, 0xef, 0x73, 0x72,
	0x33, 0x5f, 0x89, 0x8b, 0xe6, 0xa6, 0xbd, 0x2f, 0x9c, 0x5b, 0x8a, 0x1f, 0xf1, 0x2f, 0x16, 0x5a,
	0xcd, 0x25, 0xc7, 0x47, 0x33, 0x87, 0xcf, 0x73, 0xaf, 0x7e, 0x71, 0x29, 0xf7, 0x28, 0xbd, 0xdf,
	0x2c, 0x74, 0xf7, 0x6c, 0x5a, 0x7b, 0x3c, 0xf3, 0x21, 0x67, 0xc6, 0xa8, 0x7e, 0x79, 0xf9, 0x18,
	0x51, 0xb6, 0xbf, 0x5a, 0x88, 0x9c, 0xc9, 0x26, 0xed, 0x4b, 0x1c, 0x64, 0x42, 0x54, 0xbb, 0x97,
	0x0e, 0x11, 0xa6, 0xfa, 0x78, 0xef, 0xf5, 0x71, 0xcd, 0x7a, 0x73, 0x5c, 0xb3, 0xfe, 0x3a, 0xae,
	0x59, 0xaf, 0x4e, 0x6a, 0xd7, 0xde, 0x9c, 0xd4, 0xae, 0xfd, 0x79, 0x52, 0xbb, 0xf6, 0xe2, 0x61,
	0x8f, 0xc9, 0xfe, 0xf8, 0xa0, 0xe5, 0xf8, 0xc3, 0x4d, 0x13, 0xff, 0xe3, 0xf0, 0xbc, 0x50, 0x36,
	0xbf, 0x98, 0x4c, 0x36, 0x13, 0x3f, 0x0c, 0x4d, 0x47, 0x20, 0x0e, 0x8a, 0xda, 0xf0, 0x93, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x25, 0x7e, 0xf7, 0x5e, 0x32, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CrossTalkRequest(ctx context.Context, in *MsgCrossTalkRequest, opts ...grpc.CallOption) (*MsgCrossTalkRequestResponse, error)
	CrossTalkAckRequest(ctx context.Context, in *MsgCrossTalkAckRequest, opts ...grpc.CallOption) (*MsgCrossTalkAckRequestResponse, error)
	CrossTalkAckReceipt(ctx context.Context, in *MsgCrossTalkAckReceipt, opts ...grpc.CallOption) (*MsgCrossTalkAckReceiptResponse, error)
	SetCrosstalkFeePayer(ctx context.Context, in *MsgSetCrosstalkFeePayer, opts ...grpc.CallOption) (*MsgSetCrosstalkFeePayerResponse, error)
	IncrementCrosstalkDestGas(ctx context.Context, in *MsgIncrementCrosstalkDestGas, opts ...grpc.CallOption) (*MsgIncrementCrosstalkDestGasResponse, error)
	IncrementCrosstalkAckGas(ctx context.Context, in *MsgIncrementCrosstalkAckGas, opts ...grpc.CallOption) (*MsgIncrementCrosstalkAckGasResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CrossTalkRequest(ctx context.Context, in *MsgCrossTalkRequest, opts ...grpc.CallOption) (*MsgCrossTalkRequestResponse, error) {
	out := new(MsgCrossTalkRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Msg/CrossTalkRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CrossTalkAckRequest(ctx context.Context, in *MsgCrossTalkAckRequest, opts ...grpc.CallOption) (*MsgCrossTalkAckRequestResponse, error) {
	out := new(MsgCrossTalkAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Msg/CrossTalkAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CrossTalkAckReceipt(ctx context.Context, in *MsgCrossTalkAckReceipt, opts ...grpc.CallOption) (*MsgCrossTalkAckReceiptResponse, error) {
	out := new(MsgCrossTalkAckReceiptResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Msg/CrossTalkAckReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetCrosstalkFeePayer(ctx context.Context, in *MsgSetCrosstalkFeePayer, opts ...grpc.CallOption) (*MsgSetCrosstalkFeePayerResponse, error) {
	out := new(MsgSetCrosstalkFeePayerResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Msg/SetCrosstalkFeePayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IncrementCrosstalkDestGas(ctx context.Context, in *MsgIncrementCrosstalkDestGas, opts ...grpc.CallOption) (*MsgIncrementCrosstalkDestGasResponse, error) {
	out := new(MsgIncrementCrosstalkDestGasResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Msg/IncrementCrosstalkDestGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IncrementCrosstalkAckGas(ctx context.Context, in *MsgIncrementCrosstalkAckGas, opts ...grpc.CallOption) (*MsgIncrementCrosstalkAckGasResponse, error) {
	out := new(MsgIncrementCrosstalkAckGasResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosstalk.Msg/IncrementCrosstalkAckGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CrossTalkRequest(context.Context, *MsgCrossTalkRequest) (*MsgCrossTalkRequestResponse, error)
	CrossTalkAckRequest(context.Context, *MsgCrossTalkAckRequest) (*MsgCrossTalkAckRequestResponse, error)
	CrossTalkAckReceipt(context.Context, *MsgCrossTalkAckReceipt) (*MsgCrossTalkAckReceiptResponse, error)
	SetCrosstalkFeePayer(context.Context, *MsgSetCrosstalkFeePayer) (*MsgSetCrosstalkFeePayerResponse, error)
	IncrementCrosstalkDestGas(context.Context, *MsgIncrementCrosstalkDestGas) (*MsgIncrementCrosstalkDestGasResponse, error)
	IncrementCrosstalkAckGas(context.Context, *MsgIncrementCrosstalkAckGas) (*MsgIncrementCrosstalkAckGasResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CrossTalkRequest(ctx context.Context, req *MsgCrossTalkRequest) (*MsgCrossTalkRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossTalkRequest not implemented")
}
func (*UnimplementedMsgServer) CrossTalkAckRequest(ctx context.Context, req *MsgCrossTalkAckRequest) (*MsgCrossTalkAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossTalkAckRequest not implemented")
}
func (*UnimplementedMsgServer) CrossTalkAckReceipt(ctx context.Context, req *MsgCrossTalkAckReceipt) (*MsgCrossTalkAckReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossTalkAckReceipt not implemented")
}
func (*UnimplementedMsgServer) SetCrosstalkFeePayer(ctx context.Context, req *MsgSetCrosstalkFeePayer) (*MsgSetCrosstalkFeePayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCrosstalkFeePayer not implemented")
}
func (*UnimplementedMsgServer) IncrementCrosstalkDestGas(ctx context.Context, req *MsgIncrementCrosstalkDestGas) (*MsgIncrementCrosstalkDestGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementCrosstalkDestGas not implemented")
}
func (*UnimplementedMsgServer) IncrementCrosstalkAckGas(ctx context.Context, req *MsgIncrementCrosstalkAckGas) (*MsgIncrementCrosstalkAckGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementCrosstalkAckGas not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CrossTalkRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrossTalkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrossTalkRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Msg/CrossTalkRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrossTalkRequest(ctx, req.(*MsgCrossTalkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CrossTalkAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrossTalkAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrossTalkAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Msg/CrossTalkAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrossTalkAckRequest(ctx, req.(*MsgCrossTalkAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CrossTalkAckReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrossTalkAckReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrossTalkAckReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Msg/CrossTalkAckReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrossTalkAckReceipt(ctx, req.(*MsgCrossTalkAckReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetCrosstalkFeePayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCrosstalkFeePayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCrosstalkFeePayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Msg/SetCrosstalkFeePayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCrosstalkFeePayer(ctx, req.(*MsgSetCrosstalkFeePayer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IncrementCrosstalkDestGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIncrementCrosstalkDestGas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IncrementCrosstalkDestGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Msg/IncrementCrosstalkDestGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IncrementCrosstalkDestGas(ctx, req.(*MsgIncrementCrosstalkDestGas))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IncrementCrosstalkAckGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIncrementCrosstalkAckGas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IncrementCrosstalkAckGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosstalk.Msg/IncrementCrosstalkAckGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IncrementCrosstalkAckGas(ctx, req.(*MsgIncrementCrosstalkAckGas))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.crosstalk.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrossTalkRequest",
			Handler:    _Msg_CrossTalkRequest_Handler,
		},
		{
			MethodName: "CrossTalkAckRequest",
			Handler:    _Msg_CrossTalkAckRequest_Handler,
		},
		{
			MethodName: "CrossTalkAckReceipt",
			Handler:    _Msg_CrossTalkAckReceipt_Handler,
		},
		{
			MethodName: "SetCrosstalkFeePayer",
			Handler:    _Msg_SetCrosstalkFeePayer_Handler,
		},
		{
			MethodName: "IncrementCrosstalkDestGas",
			Handler:    _Msg_IncrementCrosstalkDestGas_Handler,
		},
		{
			MethodName: "IncrementCrosstalkAckGas",
			Handler:    _Msg_IncrementCrosstalkAckGas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crosstalk/tx.proto",
}

func (m *MsgCrossTalkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossTalkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossTalkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsmAddress) > 0 {
		i -= len(m.AsmAddress)
		copy(dAtA[i:], m.AsmAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AsmAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.AckGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.AckType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.DestContractPayloads) > 0 {
		for iNdEx := len(m.DestContractPayloads) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestContractPayloads[iNdEx])
			copy(dAtA[i:], m.DestContractPayloads[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DestContractPayloads[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.DestContractAddresses) > 0 {
		for iNdEx := len(m.DestContractAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestContractAddresses[iNdEx])
			copy(dAtA[i:], m.DestContractAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DestContractAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RequestNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestNonce))
		i--
		dAtA[i] = 0x78
	}
	if m.IsReadCall {
		i--
		if m.IsReadCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.RequestTxOrigin) > 0 {
		i -= len(m.RequestTxOrigin)
		copy(dAtA[i:], m.RequestTxOrigin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestTxOrigin)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x62
	}
	if m.DestinationGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationGasPrice))
		i--
		dAtA[i] = 0x58
	}
	if m.DestinationGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationGasLimit))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x40
	}
	if m.SourceTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SourceTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrossTalkRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossTalkRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossTalkRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCrossTalkAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossTalkAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossTalkAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ExecData) > 0 {
		for iNdEx := len(m.ExecData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExecData[iNdEx])
			copy(dAtA[i:], m.ExecData[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ExecData[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.ExecFlags) > 0 {
		for iNdEx := len(m.ExecFlags) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.ExecFlags[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecFlags)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ExeCode != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExeCode))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ContractAckResponses) > 0 {
		i -= len(m.ContractAckResponses)
		copy(dAtA[i:], m.ContractAckResponses)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAckResponses)))
		i--
		dAtA[i] = 0x72
	}
	if m.CrosstalkNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CrosstalkNonce))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CrosstalkRequestSender) > 0 {
		i -= len(m.CrosstalkRequestSender)
		copy(dAtA[i:], m.CrosstalkRequestSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CrosstalkRequestSender)))
		i--
		dAtA[i] = 0x62
	}
	if m.EventIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x58
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DestinationTxHash) > 0 {
		i -= len(m.DestinationTxHash)
		copy(dAtA[i:], m.DestinationTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.ChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x32
	}
	if m.SourceChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrossTalkAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossTalkAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossTalkAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCrossTalkAckReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossTalkAckReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossTalkAckReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x48
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if m.ChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrossTalkAckReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrossTalkAckReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrossTalkAckReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetCrosstalkFeePayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetCrosstalkFeePayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetCrosstalkFeePayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetCrosstalkFeePayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetCrosstalkFeePayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetCrosstalkFeePayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIncrementCrosstalkDestGas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncrementCrosstalkDestGas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncrementCrosstalkDestGas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestGasPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.DestGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIncrementCrosstalkDestGasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncrementCrosstalkDestGasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncrementCrosstalkDestGasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIncrementCrosstalkAckGas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncrementCrosstalkAckGas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncrementCrosstalkAckGas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIncrementCrosstalkAckGasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncrementCrosstalkAckGasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncrementCrosstalkAckGasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCrossTalkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	if m.ChainType != 0 {
		n += 1 + sovTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SourceTimestamp != 0 {
		n += 1 + sovTx(uint64(m.SourceTimestamp))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovTx(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationGasLimit != 0 {
		n += 1 + sovTx(uint64(m.DestinationGasLimit))
	}
	if m.DestinationGasPrice != 0 {
		n += 1 + sovTx(uint64(m.DestinationGasPrice))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestTxOrigin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsReadCall {
		n += 2
	}
	if m.RequestNonce != 0 {
		n += 1 + sovTx(uint64(m.RequestNonce))
	}
	if m.IsAtomic {
		n += 3
	}
	if m.ExpiryTimestamp != 0 {
		n += 2 + sovTx(uint64(m.ExpiryTimestamp))
	}
	if len(m.DestContractAddresses) > 0 {
		for _, b := range m.DestContractAddresses {
			l = len(b)
			n += 2 + l + sovTx(uint64(l))
		}
	}
	if len(m.DestContractPayloads) > 0 {
		for _, b := range m.DestContractPayloads {
			l = len(b)
			n += 2 + l + sovTx(uint64(l))
		}
	}
	if m.AckType != 0 {
		n += 2 + sovTx(uint64(m.AckType))
	}
	if m.AckGasLimit != 0 {
		n += 2 + sovTx(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 2 + sovTx(uint64(m.AckGasPrice))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.AsmAddress)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCrossTalkRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCrossTalkAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SourceChainType != 0 {
		n += 1 + sovTx(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovTx(uint64(m.FeeConsumed))
	}
	if m.EventIdentifier != 0 {
		n += 1 + sovTx(uint64(m.EventIdentifier))
	}
	l = len(m.CrosstalkRequestSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CrosstalkNonce != 0 {
		n += 1 + sovTx(uint64(m.CrosstalkNonce))
	}
	l = len(m.ContractAckResponses)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExeCode != 0 {
		n += 1 + sovTx(uint64(m.ExeCode))
	}
	if m.Status {
		n += 3
	}
	if len(m.ExecFlags) > 0 {
		n += 2 + sovTx(uint64(len(m.ExecFlags))) + len(m.ExecFlags)*1
	}
	if len(m.ExecData) > 0 {
		for _, b := range m.ExecData {
			l = len(b)
			n += 2 + l + sovTx(uint64(l))
		}
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCrossTalkAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCrossTalkAckReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovTx(uint64(m.FeeConsumed))
	}
	if m.EventIdentifier != 0 {
		n += 1 + sovTx(uint64(m.EventIdentifier))
	}
	return n
}

func (m *MsgCrossTalkAckReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetCrosstalkFeePayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	return n
}

func (m *MsgSetCrosstalkFeePayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIncrementCrosstalkDestGas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	if m.DestGasLimit != 0 {
		n += 1 + sovTx(uint64(m.DestGasLimit))
	}
	if m.DestGasPrice != 0 {
		n += 1 + sovTx(uint64(m.DestGasPrice))
	}
	return n
}

func (m *MsgIncrementCrosstalkDestGasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIncrementCrosstalkAckGas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	if m.AckGasLimit != 0 {
		n += 1 + sovTx(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 1 + sovTx(uint64(m.AckGasPrice))
	}
	return n
}

func (m *MsgIncrementCrosstalkAckGasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCrossTalkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossTalkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossTalkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTimestamp", wireType)
			}
			m.SourceTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasLimit", wireType)
			}
			m.DestinationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasPrice", wireType)
			}
			m.DestinationGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = append(m.RequestSender[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestSender == nil {
				m.RequestSender = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestTxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReadCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReadCall = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNonce", wireType)
			}
			m.RequestNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestContractAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestContractAddresses = append(m.DestContractAddresses, make([]byte, postIndex-iNdEx))
			copy(m.DestContractAddresses[len(m.DestContractAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestContractPayloads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestContractPayloads = append(m.DestContractPayloads, make([]byte, postIndex-iNdEx))
			copy(m.DestContractPayloads[len(m.DestContractPayloads)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckType", wireType)
			}
			m.AckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckType |= CrossTalkRequestAckType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = append(m.FeePayer[:0], dAtA[iNdEx:postIndex]...)
			if m.FeePayer == nil {
				m.FeePayer = []byte{}
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsmAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsmAddress = append(m.AsmAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AsmAddress == nil {
				m.AsmAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrossTalkRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossTalkRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossTalkRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrossTalkAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossTalkAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossTalkAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkRequestSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosstalkRequestSender = append(m.CrosstalkRequestSender[:0], dAtA[iNdEx:postIndex]...)
			if m.CrosstalkRequestSender == nil {
				m.CrosstalkRequestSender = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkNonce", wireType)
			}
			m.CrosstalkNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrosstalkNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAckResponses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAckResponses = append(m.ContractAckResponses[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAckResponses == nil {
				m.ContractAckResponses = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExeCode", wireType)
			}
			m.ExeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExeCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 17:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExecFlags = append(m.ExecFlags, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ExecFlags) == 0 {
					m.ExecFlags = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExecFlags = append(m.ExecFlags, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFlags", wireType)
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData, make([]byte, postIndex-iNdEx))
			copy(m.ExecData[len(m.ExecData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrossTalkAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossTalkAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossTalkAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrossTalkAckReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossTalkAckReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossTalkAckReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrossTalkAckReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrossTalkAckReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrossTalkAckReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetCrosstalkFeePayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetCrosstalkFeePayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetCrosstalkFeePayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetCrosstalkFeePayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetCrosstalkFeePayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetCrosstalkFeePayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncrementCrosstalkDestGas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkDestGas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkDestGas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestGasLimit", wireType)
			}
			m.DestGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestGasPrice", wireType)
			}
			m.DestGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncrementCrosstalkDestGasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkDestGasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkDestGasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncrementCrosstalkAckGas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkAckGas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkAckGas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncrementCrosstalkAckGasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkAckGasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncrementCrosstalkAckGasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
