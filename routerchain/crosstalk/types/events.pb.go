// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCrossTalkRequestCreated struct {
	AttestationId         []byte                 `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	EventNonce            uint64                 `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight           uint64                 `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	SourceChainType       types.ChainType        `protobuf:"varint,4,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId         string                 `protobuf:"bytes,5,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	SourceTxHash          string                 `protobuf:"bytes,6,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	DestinationChainType  types.ChainType        `protobuf:"varint,7,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId    string                 `protobuf:"bytes,8,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	DestinationGasLimit   uint64                 `protobuf:"varint,9,opt,name=destinationGasLimit,proto3" json:"destinationGasLimit,omitempty"`
	DestinationGasPrice   uint64                 `protobuf:"varint,10,opt,name=destinationGasPrice,proto3" json:"destinationGasPrice,omitempty"`
	RequestSender         string                 `protobuf:"bytes,11,opt,name=requestSender,proto3" json:"requestSender,omitempty"`
	RequestNonce          uint64                 `protobuf:"varint,12,opt,name=requestNonce,proto3" json:"requestNonce,omitempty"`
	IsAtomic              bool                   `protobuf:"varint,13,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	ExpiryTimestamp       uint64                 `protobuf:"varint,14,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	DestContractAddresses [][]byte               `protobuf:"bytes,15,rep,name=destContractAddresses,proto3" json:"destContractAddresses,omitempty"`
	DestContractPayloads  [][]byte               `protobuf:"bytes,16,rep,name=destContractPayloads,proto3" json:"destContractPayloads,omitempty"`
	AckType               uint64                 `protobuf:"varint,17,opt,name=ackType,proto3" json:"ackType,omitempty"`
	AckGasLimit           uint64                 `protobuf:"varint,18,opt,name=ackGasLimit,proto3" json:"ackGasLimit,omitempty"`
	AckGasPrice           uint64                 `protobuf:"varint,19,opt,name=ackGasPrice,proto3" json:"ackGasPrice,omitempty"`
	Status                CrossTalkRequestStatus `protobuf:"varint,20,opt,name=status,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkRequestStatus" json:"status,omitempty"`
}

func (m *EventCrossTalkRequestCreated) Reset()         { *m = EventCrossTalkRequestCreated{} }
func (m *EventCrossTalkRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrossTalkRequestCreated) ProtoMessage()    {}
func (*EventCrossTalkRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{0}
}
func (m *EventCrossTalkRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTalkRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTalkRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTalkRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTalkRequestCreated.Merge(m, src)
}
func (m *EventCrossTalkRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTalkRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTalkRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTalkRequestCreated proto.InternalMessageInfo

func (m *EventCrossTalkRequestCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkRequestCreated) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkRequestCreated) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetDestinationGasLimit() uint64 {
	if m != nil {
		return m.DestinationGasLimit
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetDestinationGasPrice() uint64 {
	if m != nil {
		return m.DestinationGasPrice
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetRequestNonce() uint64 {
	if m != nil {
		return m.RequestNonce
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *EventCrossTalkRequestCreated) GetExpiryTimestamp() uint64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetDestContractAddresses() [][]byte {
	if m != nil {
		return m.DestContractAddresses
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetDestContractPayloads() [][]byte {
	if m != nil {
		return m.DestContractPayloads
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetAckType() uint64 {
	if m != nil {
		return m.AckType
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetStatus() CrossTalkRequestStatus {
	if m != nil {
		return m.Status
	}
	return CROSSTALK_REQUEST_CREATED
}

type EventCrosstalkRequestConfirm struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner       string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature       string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator    string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *EventCrosstalkRequestConfirm) Reset()         { *m = EventCrosstalkRequestConfirm{} }
func (m *EventCrosstalkRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkRequestConfirm) ProtoMessage()    {}
func (*EventCrosstalkRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{1}
}
func (m *EventCrosstalkRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkRequestConfirm.Merge(m, src)
}
func (m *EventCrosstalkRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkRequestConfirm proto.InternalMessageInfo

func (m *EventCrosstalkRequestConfirm) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkRequestConfirm) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkRequestConfirm) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventCrosstalkRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *EventCrosstalkRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type EventCrossTalkAckRequestCreated struct {
	AttestationId          []byte          `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	EventNonce             uint64          `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight            uint64          `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress   string          `protobuf:"bytes,4,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	SourceChainType        types.ChainType `protobuf:"varint,5,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId          string          `protobuf:"bytes,6,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	ChainType              types.ChainType `protobuf:"varint,7,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId                string          `protobuf:"bytes,8,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DestinationTxHash      string          `protobuf:"bytes,9,opt,name=destinationTxHash,proto3" json:"destinationTxHash,omitempty"`
	EventIdentifier        uint64          `protobuf:"varint,10,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
	CrosstalkRequestSender []byte          `protobuf:"bytes,11,opt,name=crosstalkRequestSender,proto3" json:"crosstalkRequestSender,omitempty"`
	CrosstalkNonce         uint64          `protobuf:"varint,12,opt,name=crosstalkNonce,proto3" json:"crosstalkNonce,omitempty"`
	ContractAckResponses   []byte          `protobuf:"bytes,13,opt,name=contractAckResponses,proto3" json:"contractAckResponses,omitempty"`
	ExeCode                uint64          `protobuf:"varint,14,opt,name=exeCode,proto3" json:"exeCode,omitempty"`
	Status                 bool            `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	ExecFlags              []bool          `protobuf:"varint,16,rep,packed,name=execFlags,proto3" json:"execFlags,omitempty"`
	ExecData               [][]byte        `protobuf:"bytes,17,rep,name=execData,proto3" json:"execData,omitempty"`
}

func (m *EventCrossTalkAckRequestCreated) Reset()         { *m = EventCrossTalkAckRequestCreated{} }
func (m *EventCrossTalkAckRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrossTalkAckRequestCreated) ProtoMessage()    {}
func (*EventCrossTalkAckRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{2}
}
func (m *EventCrossTalkAckRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTalkAckRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTalkAckRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTalkAckRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTalkAckRequestCreated.Merge(m, src)
}
func (m *EventCrossTalkAckRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTalkAckRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTalkAckRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTalkAckRequestCreated proto.InternalMessageInfo

func (m *EventCrossTalkAckRequestCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkAckRequestCreated) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkAckRequestCreated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetDestinationTxHash() string {
	if m != nil {
		return m.DestinationTxHash
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetCrosstalkRequestSender() []byte {
	if m != nil {
		return m.CrosstalkRequestSender
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetCrosstalkNonce() uint64 {
	if m != nil {
		return m.CrosstalkNonce
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetContractAckResponses() []byte {
	if m != nil {
		return m.ContractAckResponses
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetExeCode() uint64 {
	if m != nil {
		return m.ExeCode
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *EventCrossTalkAckRequestCreated) GetExecFlags() []bool {
	if m != nil {
		return m.ExecFlags
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetExecData() [][]byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

type EventCrosstalkAckRequestConfirm struct {
	ChainType    types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId      string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce   uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash    []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner    string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature    string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *EventCrosstalkAckRequestConfirm) Reset()         { *m = EventCrosstalkAckRequestConfirm{} }
func (m *EventCrosstalkAckRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkAckRequestConfirm) ProtoMessage()    {}
func (*EventCrosstalkAckRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{3}
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkAckRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkAckRequestConfirm.Merge(m, src)
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkAckRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkAckRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkAckRequestConfirm proto.InternalMessageInfo

func (m *EventCrosstalkAckRequestConfirm) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkAckRequestConfirm) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCrosstalkAckRequestConfirm) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkAckRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkAckRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventCrosstalkAckRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *EventCrosstalkAckRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCrossTalkRequestCreated)(nil), "routerprotocol.routerchain.crosstalk.EventCrossTalkRequestCreated")
	proto.RegisterType((*EventCrosstalkRequestConfirm)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkRequestConfirm")
	proto.RegisterType((*EventCrossTalkAckRequestCreated)(nil), "routerprotocol.routerchain.crosstalk.EventCrossTalkAckRequestCreated")
	proto.RegisterType((*EventCrosstalkAckRequestConfirm)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkAckRequestConfirm")
}

func init() { proto.RegisterFile("crosstalk/events.proto", fileDescriptor_e2b341c66fc021a3) }

var fileDescriptor_e2b341c66fc021a3 = []byte{
	// 852 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x1e, 0x67, 0x66, 0x33, 0x49, 0x6f, 0x7e, 0x98, 0xde, 0xb0, 0x6a, 0x0d, 0xab, 0x10, 0x45,
	0x0b, 0xf2, 0x01, 0x9c, 0xd5, 0x80, 0x90, 0x90, 0xb8, 0x0c, 0xe1, 0x67, 0x23, 0xa1, 0xd5, 0xca,
	0xc9, 0x69, 0x2f, 0x51, 0x4f, 0xbb, 0x36, 0x69, 0xc5, 0x76, 0x87, 0xee, 0x0e, 0x4a, 0xae, 0x3c,
	0x01, 0xaf, 0xc1, 0x4b, 0x70, 0xe6, 0xb8, 0x17, 0x24, 0x8e, 0x68, 0xe6, 0x45, 0x50, 0xb7, 0x1d,
	0xff, 0x24, 0x06, 0x21, 0x60, 0x04, 0x97, 0x91, 0xeb, 0xfb, 0xba, 0x6b, 0xca, 0x55, 0xf5, 0x7d,
	0x31, 0x7a, 0xcc, 0xa4, 0x50, 0x4a, 0xd3, 0x70, 0x35, 0x82, 0xef, 0x20, 0xd6, 0xca, 0x5b, 0x4b,
	0xa1, 0x05, 0x7e, 0x2a, 0xc5, 0x46, 0x83, 0xb4, 0x01, 0x13, 0xa1, 0x97, 0x84, 0x6c, 0x49, 0x79,
	0xec, 0x65, 0x57, 0x2e, 0xdd, 0xfc, 0x76, 0xf6, 0x34, 0x97, 0xf0, 0xed, 0x06, 0x94, 0x9e, 0x2b,
	0x4d, 0xf5, 0x26, 0xcd, 0x77, 0xf9, 0x4e, 0xb4, 0x09, 0x35, 0xb7, 0xf7, 0x47, 0xf6, 0xef, 0x5c,
	0xef, 0xd6, 0x90, 0x92, 0xbd, 0x85, 0x58, 0x08, 0xfb, 0x38, 0x32, 0x4f, 0x09, 0x3a, 0xfc, 0xe5,
	0x1c, 0x3d, 0xf9, 0xd2, 0xd4, 0x34, 0x36, 0xa9, 0x67, 0x34, 0x5c, 0xf9, 0x49, 0xe6, 0xb1, 0x04,
	0xaa, 0x21, 0xc0, 0xef, 0xa1, 0x0e, 0xd5, 0x1a, 0xcc, 0xff, 0xe1, 0x22, 0x9e, 0xf3, 0x80, 0x38,
	0x03, 0xc7, 0x6d, 0xf9, 0xed, 0x02, 0x3a, 0x09, 0x70, 0x1f, 0x21, 0xfb, 0x6a, 0x2f, 0x44, 0xcc,
	0x80, 0xd4, 0x06, 0x8e, 0x7b, 0xe6, 0x17, 0x10, 0x3c, 0x40, 0x0f, 0x6f, 0x42, 0xc1, 0x56, 0xcf,
	0x81, 0x2f, 0x96, 0x9a, 0x9c, 0xda, 0x03, 0x45, 0x08, 0xbf, 0x42, 0x5d, 0x25, 0x36, 0x92, 0xc1,
	0xd8, 0x54, 0x3e, 0xdb, 0xad, 0x81, 0x9c, 0x0d, 0x1c, 0xb7, 0x73, 0xf5, 0xcc, 0xfb, 0x93, 0x36,
	0xe5, 0x6f, 0xec, 0x65, 0xf7, 0xfc, 0xc3, 0x44, 0xf8, 0x29, 0x6a, 0x17, 0xa0, 0x49, 0x40, 0x1e,
	0x0c, 0x1c, 0xb7, 0xe9, 0x97, 0x41, 0x3c, 0x44, 0xad, 0x04, 0x98, 0x6d, 0x9f, 0x53, 0xb5, 0x24,
	0x75, 0x7b, 0xa8, 0x84, 0xe1, 0x00, 0xf5, 0x02, 0x50, 0x9a, 0xc7, 0xf6, 0xc5, 0xf3, 0x52, 0xcf,
	0xff, 0x66, 0xa9, 0x95, 0xd9, 0xb0, 0x87, 0xf0, 0x21, 0x3e, 0x09, 0x48, 0xc3, 0xd6, 0x53, 0xc1,
	0xe0, 0x67, 0xe8, 0x51, 0x01, 0xfd, 0x9a, 0xaa, 0x6f, 0x78, 0xc4, 0x35, 0x69, 0xda, 0x2e, 0x57,
	0x51, 0xc7, 0x37, 0x5e, 0x4a, 0xce, 0x80, 0xa0, 0xaa, 0x1b, 0x96, 0x32, 0x3d, 0x4c, 0x97, 0x6e,
	0x0a, 0x71, 0x00, 0x92, 0x3c, 0x4c, 0x7a, 0x58, 0x02, 0x4d, 0x0f, 0x53, 0x20, 0xd9, 0x84, 0x96,
	0x4d, 0x58, 0xc2, 0xf0, 0x25, 0x6a, 0x70, 0x75, 0xad, 0x45, 0xc4, 0x19, 0x69, 0x0f, 0x1c, 0xb7,
	0xe1, 0x67, 0x31, 0x76, 0x51, 0x17, 0xb6, 0x6b, 0x2e, 0x77, 0x33, 0x1e, 0x99, 0xf5, 0x8a, 0xd6,
	0xa4, 0x63, 0x53, 0x1c, 0xc2, 0xf8, 0x63, 0xf4, 0xb6, 0x29, 0x73, 0x2c, 0x62, 0x2d, 0x29, 0xd3,
	0xd7, 0x41, 0x20, 0x41, 0x29, 0x50, 0xa4, 0x3b, 0x38, 0x75, 0x5b, 0x7e, 0x35, 0x89, 0xaf, 0x92,
	0xf9, 0xed, 0x89, 0x97, 0x74, 0x17, 0x0a, 0x1a, 0x28, 0xf2, 0x96, 0xbd, 0x54, 0xc9, 0x61, 0x82,
	0xce, 0x29, 0x5b, 0xd9, 0x31, 0x5f, 0xd8, 0x5a, 0xf6, 0xa1, 0xd9, 0x6a, 0xca, 0x56, 0x59, 0xbf,
	0x71, 0xb2, 0xd5, 0x05, 0x28, 0x3f, 0x91, 0xf4, 0xf7, 0x51, 0xf1, 0x44, 0xd2, 0xd7, 0x19, 0xaa,
	0x27, 0x22, 0x26, 0x3d, 0xbb, 0x43, 0x9f, 0x79, 0x7f, 0xc5, 0x15, 0xbc, 0x43, 0xbd, 0x4e, 0x6d,
	0x0e, 0x3f, 0xcd, 0x35, 0xfc, 0xa9, 0x56, 0xd4, 0xb5, 0x2e, 0xe8, 0x5a, 0xc4, 0xaf, 0xb9, 0x8c,
	0xaa, 0xe4, 0xe6, 0xdc, 0x9b, 0xdc, 0x6a, 0x55, 0x72, 0x2b, 0x5b, 0xc6, 0xe9, 0x91, 0x65, 0x3c,
	0x41, 0x4d, 0x16, 0x52, 0x1e, 0x59, 0x2d, 0x9e, 0x59, 0xd3, 0xc9, 0x01, 0xc3, 0x82, 0x5e, 0x4e,
	0xf9, 0x22, 0x06, 0x99, 0xca, 0x39, 0x07, 0x0c, 0xab, 0xf8, 0x22, 0xa6, 0x7a, 0x23, 0x21, 0xd5,
	0x71, 0x0e, 0x98, 0x25, 0x15, 0x92, 0x2d, 0x41, 0x69, 0x49, 0xb5, 0x90, 0x56, 0xbc, 0x4d, 0xbf,
	0x84, 0x0d, 0xbf, 0xaf, 0xa3, 0x77, 0xcb, 0xc6, 0x78, 0xcd, 0xfe, 0x33, 0x6f, 0xbc, 0x42, 0x3d,
	0x09, 0x21, 0xdd, 0x81, 0xf4, 0xed, 0x30, 0xd2, 0x7d, 0xb6, 0x5d, 0x69, 0xfa, 0x95, 0x5c, 0xd5,
	0x80, 0x1f, 0xdc, 0xdb, 0x80, 0xeb, 0x55, 0x03, 0x7e, 0x81, 0x9a, 0xec, 0x1f, 0x1b, 0x64, 0x9e,
	0xc2, 0xe8, 0x90, 0x95, 0xac, 0x70, 0x1f, 0xe2, 0x0f, 0xd0, 0x45, 0xc1, 0xb2, 0x52, 0xfb, 0x6e,
	0xda, 0x33, 0xc7, 0x84, 0xf5, 0x18, 0xd3, 0xfd, 0x49, 0x00, 0xb1, 0xe6, 0xaf, 0x39, 0xc8, 0xd4,
	0xf7, 0x0e, 0x61, 0xfc, 0x49, 0xe1, 0xa7, 0xdb, 0x3f, 0x32, 0xbf, 0x96, 0xff, 0x07, 0x2c, 0x7e,
	0x1f, 0x75, 0x32, 0xa6, 0xe8, 0x83, 0x07, 0xa8, 0x99, 0x2b, 0xdb, 0x5b, 0x94, 0xd9, 0x2e, 0xb5,
	0x16, 0xb1, 0xb1, 0xb0, 0xb6, 0xcd, 0x5e, 0xc9, 0x99, 0x2e, 0xc0, 0x16, 0xc6, 0x22, 0x80, 0xd4,
	0x19, 0xf7, 0x21, 0x7e, 0x9c, 0x39, 0x49, 0xd7, 0xba, 0x6a, 0x1a, 0x59, 0xa9, 0x6c, 0x81, 0x7d,
	0x15, 0xd2, 0x45, 0x62, 0x74, 0x0d, 0x3f, 0x07, 0x8c, 0x1b, 0x9b, 0xe0, 0x0b, 0xaa, 0x29, 0xb9,
	0xb0, 0x2e, 0x98, 0xc5, 0xc3, 0x1f, 0x6b, 0x45, 0x11, 0xe8, 0xb2, 0x08, 0x52, 0x23, 0x29, 0x4d,
	0xd9, 0xf9, 0x57, 0xa7, 0x5c, 0x2b, 0x4f, 0xf9, 0x7f, 0x6d, 0x18, 0x9f, 0x4f, 0x7f, 0xbe, 0xed,
	0x3b, 0x6f, 0x6e, 0xfb, 0xce, 0x6f, 0xb7, 0x7d, 0xe7, 0x87, 0xbb, 0xfe, 0xc9, 0x9b, 0xbb, 0xfe,
	0xc9, 0xaf, 0x77, 0xfd, 0x93, 0x57, 0x9f, 0x2e, 0xb8, 0x5e, 0x6e, 0x6e, 0x3c, 0x26, 0xa2, 0x51,
	0xd2, 0x89, 0x0f, 0xf7, 0x9d, 0xd9, 0xc7, 0xc9, 0x37, 0xdb, 0x36, 0xff, 0xc0, 0x1b, 0x99, 0x2f,
	0x37, 0x75, 0x53, 0xb7, 0x07, 0x3f, 0xfa, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x05, 0xd0, 0x6e,
	0x42, 0x0a, 0x00, 0x00,
}

func (m *EventCrossTalkRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTalkRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTalkRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AckGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.AckType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.DestContractPayloads) > 0 {
		for iNdEx := len(m.DestContractPayloads) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestContractPayloads[iNdEx])
			copy(dAtA[i:], m.DestContractPayloads[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.DestContractPayloads[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.DestContractAddresses) > 0 {
		for iNdEx := len(m.DestContractAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestContractAddresses[iNdEx])
			copy(dAtA[i:], m.DestContractAddresses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.DestContractAddresses[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x70
	}
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.RequestNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestNonce))
		i--
		dAtA[i] = 0x60
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DestinationGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasPrice))
		i--
		dAtA[i] = 0x50
	}
	if m.DestinationGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasLimit))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrossTalkAckRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTalkAckRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTalkAckRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecData) > 0 {
		for iNdEx := len(m.ExecData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExecData[iNdEx])
			copy(dAtA[i:], m.ExecData[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecData[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ExecFlags) > 0 {
		for iNdEx := len(m.ExecFlags) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.ExecFlags[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecFlags)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.ExeCode != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExeCode))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ContractAckResponses) > 0 {
		i -= len(m.ContractAckResponses)
		copy(dAtA[i:], m.ContractAckResponses)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAckResponses)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CrosstalkNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CrosstalkNonce))
		i--
		dAtA[i] = 0x60
	}
	if len(m.CrosstalkRequestSender) > 0 {
		i -= len(m.CrosstalkRequestSender)
		copy(dAtA[i:], m.CrosstalkRequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CrosstalkRequestSender)))
		i--
		dAtA[i] = 0x5a
	}
	if m.EventIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DestinationTxHash) > 0 {
		i -= len(m.DestinationTxHash)
		copy(dAtA[i:], m.DestinationTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x32
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkAckRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkAckRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkAckRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCrossTalkRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DestinationGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasLimit))
	}
	if m.DestinationGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasPrice))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestNonce != 0 {
		n += 1 + sovEvents(uint64(m.RequestNonce))
	}
	if m.IsAtomic {
		n += 2
	}
	if m.ExpiryTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.ExpiryTimestamp))
	}
	if len(m.DestContractAddresses) > 0 {
		for _, b := range m.DestContractAddresses {
			l = len(b)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.DestContractPayloads) > 0 {
		for _, b := range m.DestContractPayloads {
			l = len(b)
			n += 2 + l + sovEvents(uint64(l))
		}
	}
	if m.AckType != 0 {
		n += 2 + sovEvents(uint64(m.AckType))
	}
	if m.AckGasLimit != 0 {
		n += 2 + sovEvents(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 2 + sovEvents(uint64(m.AckGasPrice))
	}
	if m.Status != 0 {
		n += 2 + sovEvents(uint64(m.Status))
	}
	return n
}

func (m *EventCrosstalkRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrossTalkAckRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestinationTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.EventIdentifier))
	}
	l = len(m.CrosstalkRequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CrosstalkNonce != 0 {
		n += 1 + sovEvents(uint64(m.CrosstalkNonce))
	}
	l = len(m.ContractAckResponses)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ExeCode != 0 {
		n += 1 + sovEvents(uint64(m.ExeCode))
	}
	if m.Status {
		n += 2
	}
	if len(m.ExecFlags) > 0 {
		n += 2 + sovEvents(uint64(len(m.ExecFlags))) + len(m.ExecFlags)*1
	}
	if len(m.ExecData) > 0 {
		for _, b := range m.ExecData {
			l = len(b)
			n += 2 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventCrosstalkAckRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCrossTalkRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTalkRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTalkRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasLimit", wireType)
			}
			m.DestinationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasPrice", wireType)
			}
			m.DestinationGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNonce", wireType)
			}
			m.RequestNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestContractAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestContractAddresses = append(m.DestContractAddresses, make([]byte, postIndex-iNdEx))
			copy(m.DestContractAddresses[len(m.DestContractAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestContractPayloads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestContractPayloads = append(m.DestContractPayloads, make([]byte, postIndex-iNdEx))
			copy(m.DestContractPayloads[len(m.DestContractPayloads)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckType", wireType)
			}
			m.AckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrossTalkRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrossTalkAckRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTalkAckRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTalkAckRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkRequestSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosstalkRequestSender = append(m.CrosstalkRequestSender[:0], dAtA[iNdEx:postIndex]...)
			if m.CrosstalkRequestSender == nil {
				m.CrosstalkRequestSender = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkNonce", wireType)
			}
			m.CrosstalkNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrosstalkNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAckResponses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAckResponses = append(m.ContractAckResponses[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAckResponses == nil {
				m.ContractAckResponses = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExeCode", wireType)
			}
			m.ExeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExeCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 16:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExecFlags = append(m.ExecFlags, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ExecFlags) == 0 {
					m.ExecFlags = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExecFlags = append(m.ExecFlags, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFlags", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData, make([]byte, postIndex-iNdEx))
			copy(m.ExecData[len(m.ExecData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkAckRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkAckRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkAckRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
