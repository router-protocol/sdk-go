// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/events.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCrossTalkRequestCreated struct {
	AttestationId         []byte                  `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	EventNonce            uint64                  `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight           uint64                  `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	SourceChainType       types.ChainType         `protobuf:"varint,4,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId         string                  `protobuf:"bytes,5,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	SourceTxHash          string                  `protobuf:"bytes,6,opt,name=sourceTxHash,proto3" json:"sourceTxHash,omitempty"`
	SourceTimestamp       uint64                  `protobuf:"varint,7,opt,name=sourceTimestamp,proto3" json:"sourceTimestamp,omitempty"`
	DestinationChainType  types.ChainType         `protobuf:"varint,8,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId    string                  `protobuf:"bytes,9,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	DestinationGasLimit   uint64                  `protobuf:"varint,10,opt,name=destinationGasLimit,proto3" json:"destinationGasLimit,omitempty"`
	DestinationGasPrice   uint64                  `protobuf:"varint,11,opt,name=destinationGasPrice,proto3" json:"destinationGasPrice,omitempty"`
	RequestSender         []byte                  `protobuf:"bytes,12,opt,name=requestSender,proto3" json:"requestSender,omitempty"`
	RequestTxOrigin       string                  `protobuf:"bytes,13,opt,name=requestTxOrigin,proto3" json:"requestTxOrigin,omitempty"`
	IsReadCall            bool                    `protobuf:"varint,14,opt,name=isReadCall,proto3" json:"isReadCall,omitempty"`
	RequestNonce          uint64                  `protobuf:"varint,15,opt,name=requestNonce,proto3" json:"requestNonce,omitempty"`
	IsAtomic              bool                    `protobuf:"varint,16,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	ExpiryTimestamp       uint64                  `protobuf:"varint,17,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	DestContractAddresses [][]byte                `protobuf:"bytes,18,rep,name=destContractAddresses,proto3" json:"destContractAddresses,omitempty"`
	DestContractPayloads  [][]byte                `protobuf:"bytes,19,rep,name=destContractPayloads,proto3" json:"destContractPayloads,omitempty"`
	AckType               CrossTalkRequestAckType `protobuf:"varint,20,opt,name=ackType,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkRequestAckType" json:"ackType,omitempty"`
	AckGasLimit           uint64                  `protobuf:"varint,21,opt,name=ackGasLimit,proto3" json:"ackGasLimit,omitempty"`
	AckGasPrice           uint64                  `protobuf:"varint,22,opt,name=ackGasPrice,proto3" json:"ackGasPrice,omitempty"`
	AsmAddress            []byte                  `protobuf:"bytes,23,opt,name=asmAddress,proto3" json:"asmAddress,omitempty"`
	Status                CrossTalkRequestStatus  `protobuf:"varint,24,opt,name=status,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkRequestStatus" json:"status,omitempty"`
}

func (m *EventCrossTalkRequestCreated) Reset()         { *m = EventCrossTalkRequestCreated{} }
func (m *EventCrossTalkRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrossTalkRequestCreated) ProtoMessage()    {}
func (*EventCrossTalkRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{0}
}
func (m *EventCrossTalkRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTalkRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTalkRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTalkRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTalkRequestCreated.Merge(m, src)
}
func (m *EventCrossTalkRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTalkRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTalkRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTalkRequestCreated proto.InternalMessageInfo

func (m *EventCrossTalkRequestCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkRequestCreated) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetSourceTimestamp() uint64 {
	if m != nil {
		return m.SourceTimestamp
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkRequestCreated) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetDestinationGasLimit() uint64 {
	if m != nil {
		return m.DestinationGasLimit
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetDestinationGasPrice() uint64 {
	if m != nil {
		return m.DestinationGasPrice
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetRequestSender() []byte {
	if m != nil {
		return m.RequestSender
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetRequestTxOrigin() string {
	if m != nil {
		return m.RequestTxOrigin
	}
	return ""
}

func (m *EventCrossTalkRequestCreated) GetIsReadCall() bool {
	if m != nil {
		return m.IsReadCall
	}
	return false
}

func (m *EventCrossTalkRequestCreated) GetRequestNonce() uint64 {
	if m != nil {
		return m.RequestNonce
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *EventCrossTalkRequestCreated) GetExpiryTimestamp() uint64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetDestContractAddresses() [][]byte {
	if m != nil {
		return m.DestContractAddresses
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetDestContractPayloads() [][]byte {
	if m != nil {
		return m.DestContractPayloads
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetAckType() CrossTalkRequestAckType {
	if m != nil {
		return m.AckType
	}
	return CROSSTALK_REQUEST_NO_ACK
}

func (m *EventCrossTalkRequestCreated) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

func (m *EventCrossTalkRequestCreated) GetAsmAddress() []byte {
	if m != nil {
		return m.AsmAddress
	}
	return nil
}

func (m *EventCrossTalkRequestCreated) GetStatus() CrossTalkRequestStatus {
	if m != nil {
		return m.Status
	}
	return CROSSTALK_REQUEST_CREATED
}

type EventCrosstalkReadyToExecute struct {
	SourceChainType         types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId           string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce              uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash               []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	FeePayer                string          `protobuf:"bytes,5,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	DestinationTxFeeInRoute types1.Coin     `protobuf:"bytes,6,opt,name=destinationTxFeeInRoute,proto3" json:"destinationTxFeeInRoute"`
}

func (m *EventCrosstalkReadyToExecute) Reset()         { *m = EventCrosstalkReadyToExecute{} }
func (m *EventCrosstalkReadyToExecute) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkReadyToExecute) ProtoMessage()    {}
func (*EventCrosstalkReadyToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{1}
}
func (m *EventCrosstalkReadyToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkReadyToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkReadyToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkReadyToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkReadyToExecute.Merge(m, src)
}
func (m *EventCrosstalkReadyToExecute) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkReadyToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkReadyToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkReadyToExecute proto.InternalMessageInfo

func (m *EventCrosstalkReadyToExecute) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkReadyToExecute) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkReadyToExecute) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkReadyToExecute) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkReadyToExecute) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosstalkReadyToExecute) GetDestinationTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.DestinationTxFeeInRoute
	}
	return types1.Coin{}
}

type EventCrosstalkFeePayerUpdated struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	FeePayer        string          `protobuf:"bytes,5,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
}

func (m *EventCrosstalkFeePayerUpdated) Reset()         { *m = EventCrosstalkFeePayerUpdated{} }
func (m *EventCrosstalkFeePayerUpdated) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkFeePayerUpdated) ProtoMessage()    {}
func (*EventCrosstalkFeePayerUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{2}
}
func (m *EventCrosstalkFeePayerUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkFeePayerUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkFeePayerUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkFeePayerUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkFeePayerUpdated.Merge(m, src)
}
func (m *EventCrosstalkFeePayerUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkFeePayerUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkFeePayerUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkFeePayerUpdated proto.InternalMessageInfo

func (m *EventCrosstalkFeePayerUpdated) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkFeePayerUpdated) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkFeePayerUpdated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkFeePayerUpdated) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkFeePayerUpdated) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

type EventCrosstalkDestGasIncremented struct {
	SourceChainType     types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId       string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce          uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash           []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	FeePayer            string          `protobuf:"bytes,5,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	DestinationGasLimit uint64          `protobuf:"varint,6,opt,name=destinationGasLimit,proto3" json:"destinationGasLimit,omitempty"`
	DestinationGasPrice uint64          `protobuf:"varint,7,opt,name=destinationGasPrice,proto3" json:"destinationGasPrice,omitempty"`
}

func (m *EventCrosstalkDestGasIncremented) Reset()         { *m = EventCrosstalkDestGasIncremented{} }
func (m *EventCrosstalkDestGasIncremented) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkDestGasIncremented) ProtoMessage()    {}
func (*EventCrosstalkDestGasIncremented) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{3}
}
func (m *EventCrosstalkDestGasIncremented) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkDestGasIncremented) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkDestGasIncremented.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkDestGasIncremented) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkDestGasIncremented.Merge(m, src)
}
func (m *EventCrosstalkDestGasIncremented) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkDestGasIncremented) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkDestGasIncremented.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkDestGasIncremented proto.InternalMessageInfo

func (m *EventCrosstalkDestGasIncremented) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkDestGasIncremented) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkDestGasIncremented) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkDestGasIncremented) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkDestGasIncremented) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosstalkDestGasIncremented) GetDestinationGasLimit() uint64 {
	if m != nil {
		return m.DestinationGasLimit
	}
	return 0
}

func (m *EventCrosstalkDestGasIncremented) GetDestinationGasPrice() uint64 {
	if m != nil {
		return m.DestinationGasPrice
	}
	return 0
}

type EventCrosstalkCompleted struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
}

func (m *EventCrosstalkCompleted) Reset()         { *m = EventCrosstalkCompleted{} }
func (m *EventCrosstalkCompleted) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkCompleted) ProtoMessage()    {}
func (*EventCrosstalkCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{4}
}
func (m *EventCrosstalkCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkCompleted.Merge(m, src)
}
func (m *EventCrosstalkCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkCompleted proto.InternalMessageInfo

func (m *EventCrosstalkCompleted) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkCompleted) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkCompleted) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkCompleted) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

type EventCrosstalkRequestConfirm struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner       string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature       string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator    string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *EventCrosstalkRequestConfirm) Reset()         { *m = EventCrosstalkRequestConfirm{} }
func (m *EventCrosstalkRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkRequestConfirm) ProtoMessage()    {}
func (*EventCrosstalkRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{5}
}
func (m *EventCrosstalkRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkRequestConfirm.Merge(m, src)
}
func (m *EventCrosstalkRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkRequestConfirm proto.InternalMessageInfo

func (m *EventCrosstalkRequestConfirm) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkRequestConfirm) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkRequestConfirm) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventCrosstalkRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *EventCrosstalkRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type EventCrossTalkAckRequestCreated struct {
	AttestationId          []byte                    `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	EventNonce             uint64                    `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight            uint64                    `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress   string                    `protobuf:"bytes,4,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	SourceChainType        types.ChainType           `protobuf:"varint,5,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId          string                    `protobuf:"bytes,6,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	ChainType              types.ChainType           `protobuf:"varint,7,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId                string                    `protobuf:"bytes,8,opt,name=chainId,proto3" json:"chainId,omitempty"`
	DestinationTxHash      string                    `protobuf:"bytes,9,opt,name=destinationTxHash,proto3" json:"destinationTxHash,omitempty"`
	EventIdentifier        uint64                    `protobuf:"varint,10,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
	CrosstalkRequestSender []byte                    `protobuf:"bytes,11,opt,name=crosstalkRequestSender,proto3" json:"crosstalkRequestSender,omitempty"`
	CrosstalkNonce         uint64                    `protobuf:"varint,12,opt,name=crosstalkNonce,proto3" json:"crosstalkNonce,omitempty"`
	ContractAckResponses   []byte                    `protobuf:"bytes,13,opt,name=contractAckResponses,proto3" json:"contractAckResponses,omitempty"`
	ExeCode                uint64                    `protobuf:"varint,14,opt,name=exeCode,proto3" json:"exeCode,omitempty"`
	ExecStatus             bool                      `protobuf:"varint,15,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	ExecFlags              []bool                    `protobuf:"varint,16,rep,packed,name=execFlags,proto3" json:"execFlags,omitempty"`
	ExecData               [][]byte                  `protobuf:"bytes,17,rep,name=execData,proto3" json:"execData,omitempty"`
	Status                 CrossTalkAckRequestStatus `protobuf:"varint,18,opt,name=status,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkAckRequestStatus" json:"status,omitempty"`
}

func (m *EventCrossTalkAckRequestCreated) Reset()         { *m = EventCrossTalkAckRequestCreated{} }
func (m *EventCrossTalkAckRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrossTalkAckRequestCreated) ProtoMessage()    {}
func (*EventCrossTalkAckRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{6}
}
func (m *EventCrossTalkAckRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTalkAckRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTalkAckRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTalkAckRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTalkAckRequestCreated.Merge(m, src)
}
func (m *EventCrossTalkAckRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTalkAckRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTalkAckRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTalkAckRequestCreated proto.InternalMessageInfo

func (m *EventCrossTalkAckRequestCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkAckRequestCreated) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkAckRequestCreated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetDestinationTxHash() string {
	if m != nil {
		return m.DestinationTxHash
	}
	return ""
}

func (m *EventCrossTalkAckRequestCreated) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetCrosstalkRequestSender() []byte {
	if m != nil {
		return m.CrosstalkRequestSender
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetCrosstalkNonce() uint64 {
	if m != nil {
		return m.CrosstalkNonce
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetContractAckResponses() []byte {
	if m != nil {
		return m.ContractAckResponses
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetExeCode() uint64 {
	if m != nil {
		return m.ExeCode
	}
	return 0
}

func (m *EventCrossTalkAckRequestCreated) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *EventCrossTalkAckRequestCreated) GetExecFlags() []bool {
	if m != nil {
		return m.ExecFlags
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetExecData() [][]byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *EventCrossTalkAckRequestCreated) GetStatus() CrossTalkAckRequestStatus {
	if m != nil {
		return m.Status
	}
	return CROSSTALK_ACK_REQUEST_CREATED
}

type EventCrosstalkRequestFeeSettlement struct {
	SourceChainType   types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId     string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce        uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	RelayerFeeInRoute types1.Coin     `protobuf:"bytes,4,opt,name=relayerFeeInRoute,proto3" json:"relayerFeeInRoute"`
	RefundFeeInRoute  types1.Coin     `protobuf:"bytes,5,opt,name=refundFeeInRoute,proto3" json:"refundFeeInRoute"`
}

func (m *EventCrosstalkRequestFeeSettlement) Reset()         { *m = EventCrosstalkRequestFeeSettlement{} }
func (m *EventCrosstalkRequestFeeSettlement) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkRequestFeeSettlement) ProtoMessage()    {}
func (*EventCrosstalkRequestFeeSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{7}
}
func (m *EventCrosstalkRequestFeeSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkRequestFeeSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkRequestFeeSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkRequestFeeSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkRequestFeeSettlement.Merge(m, src)
}
func (m *EventCrosstalkRequestFeeSettlement) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkRequestFeeSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkRequestFeeSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkRequestFeeSettlement proto.InternalMessageInfo

func (m *EventCrosstalkRequestFeeSettlement) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkRequestFeeSettlement) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkRequestFeeSettlement) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkRequestFeeSettlement) GetRelayerFeeInRoute() types1.Coin {
	if m != nil {
		return m.RelayerFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventCrosstalkRequestFeeSettlement) GetRefundFeeInRoute() types1.Coin {
	if m != nil {
		return m.RefundFeeInRoute
	}
	return types1.Coin{}
}

type EventCrosstalkAckGasIncremented struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	FeePayer        string          `protobuf:"bytes,5,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	AckGasLimit     uint64          `protobuf:"varint,6,opt,name=ackGasLimit,proto3" json:"ackGasLimit,omitempty"`
	AckGasPrice     uint64          `protobuf:"varint,7,opt,name=ackGasPrice,proto3" json:"ackGasPrice,omitempty"`
}

func (m *EventCrosstalkAckGasIncremented) Reset()         { *m = EventCrosstalkAckGasIncremented{} }
func (m *EventCrosstalkAckGasIncremented) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkAckGasIncremented) ProtoMessage()    {}
func (*EventCrosstalkAckGasIncremented) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{8}
}
func (m *EventCrosstalkAckGasIncremented) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkAckGasIncremented) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkAckGasIncremented.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkAckGasIncremented) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkAckGasIncremented.Merge(m, src)
}
func (m *EventCrosstalkAckGasIncremented) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkAckGasIncremented) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkAckGasIncremented.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkAckGasIncremented proto.InternalMessageInfo

func (m *EventCrosstalkAckGasIncremented) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkAckGasIncremented) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkAckGasIncremented) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkAckGasIncremented) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkAckGasIncremented) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosstalkAckGasIncremented) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *EventCrosstalkAckGasIncremented) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

type EventCrosstalkAckRequestConfirm struct {
	ChainType    types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId      string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce   uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash    []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner    string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature    string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *EventCrosstalkAckRequestConfirm) Reset()         { *m = EventCrosstalkAckRequestConfirm{} }
func (m *EventCrosstalkAckRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkAckRequestConfirm) ProtoMessage()    {}
func (*EventCrosstalkAckRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{9}
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkAckRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkAckRequestConfirm.Merge(m, src)
}
func (m *EventCrosstalkAckRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkAckRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkAckRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkAckRequestConfirm proto.InternalMessageInfo

func (m *EventCrosstalkAckRequestConfirm) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkAckRequestConfirm) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCrosstalkAckRequestConfirm) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkAckRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkAckRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventCrosstalkAckRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *EventCrosstalkAckRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type EventCrosstalkAckReadyToExecute struct {
	ChainType    types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId      string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce   uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash    []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	FeePayer     string          `protobuf:"bytes,5,opt,name=feePayer,proto3" json:"feePayer,omitempty"`
	TxFeeInRoute types1.Coin     `protobuf:"bytes,6,opt,name=txFeeInRoute,proto3" json:"txFeeInRoute"`
}

func (m *EventCrosstalkAckReadyToExecute) Reset()         { *m = EventCrosstalkAckReadyToExecute{} }
func (m *EventCrosstalkAckReadyToExecute) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkAckReadyToExecute) ProtoMessage()    {}
func (*EventCrosstalkAckReadyToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{10}
}
func (m *EventCrosstalkAckReadyToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkAckReadyToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkAckReadyToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkAckReadyToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkAckReadyToExecute.Merge(m, src)
}
func (m *EventCrosstalkAckReadyToExecute) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkAckReadyToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkAckReadyToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkAckReadyToExecute proto.InternalMessageInfo

func (m *EventCrosstalkAckReadyToExecute) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkAckReadyToExecute) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCrosstalkAckReadyToExecute) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkAckReadyToExecute) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosstalkAckReadyToExecute) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosstalkAckReadyToExecute) GetTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.TxFeeInRoute
	}
	return types1.Coin{}
}

type EventCrosstalkAckCompleted struct {
	ChainType  types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId    string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash  []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
}

func (m *EventCrosstalkAckCompleted) Reset()         { *m = EventCrosstalkAckCompleted{} }
func (m *EventCrosstalkAckCompleted) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkAckCompleted) ProtoMessage()    {}
func (*EventCrosstalkAckCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{11}
}
func (m *EventCrosstalkAckCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkAckCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkAckCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkAckCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkAckCompleted.Merge(m, src)
}
func (m *EventCrosstalkAckCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkAckCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkAckCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkAckCompleted proto.InternalMessageInfo

func (m *EventCrosstalkAckCompleted) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkAckCompleted) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCrosstalkAckCompleted) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkAckCompleted) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

type EventCrossTalkAckReceiptCreated struct {
	AttestationId        []byte                    `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	EventNonce           uint64                    `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64                    `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	RelayerRouterAddress string                    `protobuf:"bytes,4,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	ChainType            types.ChainType           `protobuf:"varint,5,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId              string                    `protobuf:"bytes,6,opt,name=chainId,proto3" json:"chainId,omitempty"`
	TxHash               string                    `protobuf:"bytes,7,opt,name=txHash,proto3" json:"txHash,omitempty"`
	EventIdentifier      uint64                    `protobuf:"varint,8,opt,name=eventIdentifier,proto3" json:"eventIdentifier,omitempty"`
	Status               CrossTalkAckReceiptStatus `protobuf:"varint,18,opt,name=status,proto3,enum=routerprotocol.routerchain.crosstalk.CrossTalkAckReceiptStatus" json:"status,omitempty"`
}

func (m *EventCrossTalkAckReceiptCreated) Reset()         { *m = EventCrossTalkAckReceiptCreated{} }
func (m *EventCrossTalkAckReceiptCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrossTalkAckReceiptCreated) ProtoMessage()    {}
func (*EventCrossTalkAckReceiptCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{12}
}
func (m *EventCrossTalkAckReceiptCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossTalkAckReceiptCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossTalkAckReceiptCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossTalkAckReceiptCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossTalkAckReceiptCreated.Merge(m, src)
}
func (m *EventCrossTalkAckReceiptCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossTalkAckReceiptCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossTalkAckReceiptCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossTalkAckReceiptCreated proto.InternalMessageInfo

func (m *EventCrossTalkAckReceiptCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrossTalkAckReceiptCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrossTalkAckReceiptCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventCrossTalkAckReceiptCreated) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *EventCrossTalkAckReceiptCreated) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrossTalkAckReceiptCreated) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCrossTalkAckReceiptCreated) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *EventCrossTalkAckReceiptCreated) GetEventIdentifier() uint64 {
	if m != nil {
		return m.EventIdentifier
	}
	return 0
}

func (m *EventCrossTalkAckReceiptCreated) GetStatus() CrossTalkAckReceiptStatus {
	if m != nil {
		return m.Status
	}
	return CROSSTALK_ACK_RECEIPT_CREATED
}

type EventCrosstalkReceiptFeeSettlement struct {
	SourceChainType   types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId     string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce        uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	RelayerFeeInRoute types1.Coin     `protobuf:"bytes,4,opt,name=relayerFeeInRoute,proto3" json:"relayerFeeInRoute"`
	RefundFeeInRoute  types1.Coin     `protobuf:"bytes,5,opt,name=refundFeeInRoute,proto3" json:"refundFeeInRoute"`
}

func (m *EventCrosstalkReceiptFeeSettlement) Reset()         { *m = EventCrosstalkReceiptFeeSettlement{} }
func (m *EventCrosstalkReceiptFeeSettlement) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkReceiptFeeSettlement) ProtoMessage()    {}
func (*EventCrosstalkReceiptFeeSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{13}
}
func (m *EventCrosstalkReceiptFeeSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkReceiptFeeSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkReceiptFeeSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkReceiptFeeSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkReceiptFeeSettlement.Merge(m, src)
}
func (m *EventCrosstalkReceiptFeeSettlement) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkReceiptFeeSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkReceiptFeeSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkReceiptFeeSettlement proto.InternalMessageInfo

func (m *EventCrosstalkReceiptFeeSettlement) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkReceiptFeeSettlement) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkReceiptFeeSettlement) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkReceiptFeeSettlement) GetRelayerFeeInRoute() types1.Coin {
	if m != nil {
		return m.RelayerFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventCrosstalkReceiptFeeSettlement) GetRefundFeeInRoute() types1.Coin {
	if m != nil {
		return m.RefundFeeInRoute
	}
	return types1.Coin{}
}

type EventCrosstalkReceiptCompleted struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
}

func (m *EventCrosstalkReceiptCompleted) Reset()         { *m = EventCrosstalkReceiptCompleted{} }
func (m *EventCrosstalkReceiptCompleted) String() string { return proto.CompactTextString(m) }
func (*EventCrosstalkReceiptCompleted) ProtoMessage()    {}
func (*EventCrosstalkReceiptCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b341c66fc021a3, []int{14}
}
func (m *EventCrosstalkReceiptCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosstalkReceiptCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosstalkReceiptCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosstalkReceiptCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosstalkReceiptCompleted.Merge(m, src)
}
func (m *EventCrosstalkReceiptCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosstalkReceiptCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosstalkReceiptCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosstalkReceiptCompleted proto.InternalMessageInfo

func (m *EventCrosstalkReceiptCompleted) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventCrosstalkReceiptCompleted) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosstalkReceiptCompleted) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventCrosstalkReceiptCompleted) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func init() {
	proto.RegisterType((*EventCrossTalkRequestCreated)(nil), "routerprotocol.routerchain.crosstalk.EventCrossTalkRequestCreated")
	proto.RegisterType((*EventCrosstalkReadyToExecute)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkReadyToExecute")
	proto.RegisterType((*EventCrosstalkFeePayerUpdated)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkFeePayerUpdated")
	proto.RegisterType((*EventCrosstalkDestGasIncremented)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkDestGasIncremented")
	proto.RegisterType((*EventCrosstalkCompleted)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkCompleted")
	proto.RegisterType((*EventCrosstalkRequestConfirm)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkRequestConfirm")
	proto.RegisterType((*EventCrossTalkAckRequestCreated)(nil), "routerprotocol.routerchain.crosstalk.EventCrossTalkAckRequestCreated")
	proto.RegisterType((*EventCrosstalkRequestFeeSettlement)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkRequestFeeSettlement")
	proto.RegisterType((*EventCrosstalkAckGasIncremented)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkAckGasIncremented")
	proto.RegisterType((*EventCrosstalkAckRequestConfirm)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkAckRequestConfirm")
	proto.RegisterType((*EventCrosstalkAckReadyToExecute)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkAckReadyToExecute")
	proto.RegisterType((*EventCrosstalkAckCompleted)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkAckCompleted")
	proto.RegisterType((*EventCrossTalkAckReceiptCreated)(nil), "routerprotocol.routerchain.crosstalk.EventCrossTalkAckReceiptCreated")
	proto.RegisterType((*EventCrosstalkReceiptFeeSettlement)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkReceiptFeeSettlement")
	proto.RegisterType((*EventCrosstalkReceiptCompleted)(nil), "routerprotocol.routerchain.crosstalk.EventCrosstalkReceiptCompleted")
}

func init() { proto.RegisterFile("crosstalk/events.proto", fileDescriptor_e2b341c66fc021a3) }

var fileDescriptor_e2b341c66fc021a3 = []byte{
	// 1304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x8e, 0x63, 0x4f, 0x7e, 0xda, 0x4c, 0xd3, 0x76, 0x09, 0xc5, 0xb5, 0x56, 0x05,
	0x59, 0xa8, 0xac, 0xdb, 0x80, 0x90, 0x90, 0x40, 0x28, 0x75, 0x9b, 0x36, 0x02, 0x4a, 0xb5, 0x31,
	0xaa, 0xe8, 0x4d, 0x35, 0x99, 0x3d, 0xb1, 0x47, 0x59, 0xef, 0x98, 0x99, 0x71, 0x65, 0xbf, 0x05,
	0x8f, 0x01, 0x3c, 0x04, 0x12, 0x82, 0x8b, 0x5e, 0xf6, 0x06, 0x09, 0x6e, 0x50, 0x95, 0x3c, 0x06,
	0x37, 0x68, 0x66, 0xd7, 0xde, 0x5d, 0x7b, 0x53, 0x92, 0x28, 0x15, 0x24, 0x70, 0x13, 0xed, 0x7c,
	0x67, 0xe6, 0xcc, 0x9c, 0x9f, 0x39, 0xe7, 0x9b, 0x18, 0x5d, 0xa1, 0x82, 0x4b, 0xa9, 0x48, 0xb0,
	0xd7, 0x80, 0x67, 0x10, 0x2a, 0xe9, 0xf6, 0x04, 0x57, 0x1c, 0xdf, 0x10, 0xbc, 0xaf, 0x40, 0x98,
	0x01, 0xe5, 0x81, 0x1b, 0x0d, 0x69, 0x87, 0xb0, 0xd0, 0x1d, 0x2f, 0x59, 0xab, 0x27, 0xab, 0xc7,
	0x5f, 0x4f, 0x05, 0x7c, 0xd3, 0x07, 0xa9, 0x9e, 0x4a, 0x45, 0x54, 0x3f, 0xd6, 0xb7, 0x76, 0x33,
	0x6f, 0x26, 0xa1, 0xc7, 0x9f, 0x4d, 0x81, 0xf5, 0x26, 0x66, 0xbf, 0xfb, 0xaa, 0x53, 0xe8, 0x55,
	0x6a, 0xd8, 0x83, 0x78, 0xee, 0x9b, 0xdd, 0x7e, 0xa0, 0x98, 0xb1, 0xa3, 0x61, 0xfe, 0xa6, 0x85,
	0x55, 0xca, 0x65, 0x97, 0xcb, 0xc6, 0x0e, 0x91, 0xd0, 0x78, 0x76, 0x7b, 0x07, 0x14, 0xb9, 0xdd,
	0xa0, 0x9c, 0x85, 0xb1, 0x7c, 0xb5, 0xcd, 0xdb, 0xdc, 0x7c, 0x36, 0xf4, 0x57, 0x84, 0x3a, 0xdf,
	0x55, 0xd0, 0xb5, 0x7b, 0xda, 0x77, 0x4d, 0xbd, 0x79, 0x8b, 0x04, 0x7b, 0x5e, 0xb4, 0x77, 0x53,
	0x00, 0x51, 0xe0, 0xe3, 0xb7, 0xd1, 0x32, 0x51, 0x0a, 0xf4, 0x99, 0x19, 0x0f, 0x9f, 0x32, 0xdf,
	0xb6, 0x6a, 0x56, 0x7d, 0xd1, 0x5b, 0x4a, 0xa1, 0x5b, 0x3e, 0xae, 0x22, 0x64, 0x42, 0xf0, 0x90,
	0x87, 0x14, 0xec, 0x42, 0xcd, 0xaa, 0x17, 0xbd, 0x14, 0x82, 0x6b, 0x68, 0x61, 0x27, 0xe0, 0x74,
	0xef, 0x01, 0xb0, 0x76, 0x47, 0xd9, 0xb3, 0x66, 0x42, 0x1a, 0xc2, 0x4f, 0xd0, 0x05, 0xc9, 0xfb,
	0x82, 0x42, 0x53, 0x5b, 0xd6, 0x1a, 0xf6, 0xc0, 0x2e, 0xd6, 0xac, 0xfa, 0xf2, 0xfa, 0x2d, 0xf7,
	0x15, 0xe1, 0x4c, 0x3c, 0xe2, 0x8e, 0xd7, 0x79, 0x93, 0x8a, 0xf0, 0x0d, 0xb4, 0x94, 0x82, 0xb6,
	0x7c, 0x7b, 0xae, 0x66, 0xd5, 0x2b, 0x5e, 0x16, 0xc4, 0x0e, 0x5a, 0x8c, 0x80, 0xd6, 0xe0, 0x01,
	0x91, 0x1d, 0xbb, 0x64, 0x26, 0x65, 0x30, 0x5c, 0x1f, 0x9d, 0xb2, 0xc5, 0xba, 0xda, 0xfc, 0x6e,
	0xcf, 0x9e, 0x37, 0xb6, 0x4c, 0xc2, 0xd8, 0x47, 0xab, 0x3e, 0x48, 0xc5, 0x42, 0xe3, 0xa2, 0xc4,
	0xa8, 0xf2, 0x09, 0x8d, 0xca, 0xd5, 0x86, 0x5d, 0x84, 0x27, 0xf1, 0x2d, 0xdf, 0xae, 0x98, 0x93,
	0xe7, 0x48, 0xf0, 0x2d, 0x74, 0x29, 0x85, 0xde, 0x27, 0xf2, 0x73, 0xd6, 0x65, 0xca, 0x46, 0xc6,
	0x86, 0x3c, 0xd1, 0xf4, 0x8a, 0x47, 0x82, 0x51, 0xb0, 0x17, 0xf2, 0x56, 0x18, 0x91, 0xf6, 0x76,
	0x9c, 0xc0, 0xdb, 0x10, 0xfa, 0x20, 0xec, 0xc5, 0x28, 0x63, 0x32, 0xa0, 0xf6, 0x64, 0x0c, 0xb4,
	0x06, 0x5f, 0x0a, 0xd6, 0x66, 0xa1, 0xbd, 0x64, 0x8e, 0x3d, 0x09, 0xeb, 0xdc, 0x62, 0xd2, 0x03,
	0xe2, 0x37, 0x49, 0x10, 0xd8, 0xcb, 0x35, 0xab, 0x5e, 0xf6, 0x52, 0x88, 0x8e, 0x5b, 0xbc, 0x24,
	0xca, 0xbe, 0x0b, 0xe6, 0x68, 0x19, 0x0c, 0xaf, 0xa1, 0x32, 0x93, 0x1b, 0x8a, 0x77, 0x19, 0xb5,
	0x2f, 0x1a, 0x0d, 0xe3, 0xb1, 0x3e, 0x09, 0x0c, 0x7a, 0x4c, 0x0c, 0x93, 0x98, 0xae, 0x44, 0x31,
	0x9d, 0x80, 0xf1, 0x07, 0xe8, 0xb2, 0x36, 0xb8, 0xc9, 0x43, 0x25, 0x08, 0x55, 0x1b, 0xbe, 0x2f,
	0x40, 0x4a, 0x90, 0x36, 0xae, 0xcd, 0xd6, 0x17, 0xbd, 0x7c, 0x21, 0x5e, 0x8f, 0x32, 0x61, 0x24,
	0x78, 0x44, 0x86, 0x01, 0x27, 0xbe, 0xb4, 0x2f, 0x99, 0x45, 0xb9, 0x32, 0xfc, 0x18, 0xcd, 0x13,
	0xba, 0x67, 0x12, 0x66, 0xd5, 0x24, 0xcc, 0x27, 0xee, 0x51, 0x8a, 0x9a, 0x3b, 0x79, 0x8d, 0x37,
	0x22, 0x25, 0xde, 0x48, 0x9b, 0xbe, 0x88, 0x84, 0xee, 0x8d, 0x03, 0x7f, 0x39, 0xba, 0x88, 0x29,
	0x28, 0x99, 0x11, 0x05, 0xfa, 0x4a, 0x7a, 0x46, 0x14, 0xe0, 0x2a, 0x42, 0x44, 0x76, 0x63, 0x03,
	0xed, 0xab, 0x26, 0xba, 0x29, 0x04, 0xb7, 0x50, 0x29, 0xaa, 0x71, 0xb6, 0x6d, 0xce, 0xfe, 0xf1,
	0xc9, 0xce, 0xbe, 0x6d, 0x74, 0x78, 0xb1, 0x2e, 0xe7, 0xd7, 0x42, 0xba, 0x54, 0x29, 0x33, 0x8f,
	0xf8, 0xc3, 0x16, 0xbf, 0x37, 0x00, 0xda, 0x57, 0x90, 0x57, 0x41, 0xac, 0xd7, 0x56, 0x41, 0x0a,
	0x79, 0x15, 0x24, 0x5b, 0x05, 0x67, 0xa7, 0xaa, 0xe0, 0x35, 0x54, 0xa1, 0x01, 0x61, 0x5d, 0x53,
	0x5e, 0x8a, 0xc6, 0x6f, 0x09, 0xa0, 0x73, 0x74, 0x17, 0xe0, 0x11, 0x19, 0x82, 0x88, 0x0b, 0xd4,
	0x78, 0x8c, 0xbf, 0x46, 0x57, 0x53, 0x57, 0xad, 0x35, 0xd8, 0x04, 0xd8, 0x0a, 0x3d, 0x6d, 0x86,
	0x29, 0x53, 0x0b, 0xeb, 0x6f, 0xb8, 0x51, 0xfd, 0x77, 0x75, 0xfd, 0x77, 0xe3, 0xfa, 0xef, 0x36,
	0x39, 0x0b, 0xef, 0x14, 0x9f, 0xff, 0x71, 0x7d, 0xc6, 0x3b, 0x6c, 0xbd, 0xf3, 0xa7, 0x85, 0xde,
	0xca, 0xfa, 0x75, 0x33, 0xde, 0xf5, 0xab, 0x9e, 0x6f, 0x7a, 0xc0, 0x39, 0x76, 0xac, 0xb3, 0x5f,
	0x40, 0xb5, 0xac, 0xf5, 0x77, 0x41, 0xaa, 0xfb, 0x44, 0x6e, 0x85, 0x54, 0x40, 0x17, 0xc2, 0x73,
	0xee, 0x80, 0xc3, 0x3a, 0x42, 0xe9, 0xd8, 0x1d, 0x61, 0xfe, 0xd0, 0x8e, 0xe0, 0xfc, 0x6e, 0xa1,
	0xab, 0x59, 0x27, 0x37, 0x79, 0xb7, 0x17, 0xc0, 0x39, 0xf0, 0xad, 0xf3, 0x63, 0x4e, 0x59, 0x8a,
	0x18, 0x14, 0x0f, 0x77, 0x99, 0xe8, 0x9e, 0xf9, 0xe4, 0xb9, 0x86, 0x2a, 0xa0, 0x3a, 0xdb, 0xac,
	0x1d, 0x8e, 0xb3, 0x27, 0x01, 0xb4, 0x54, 0xb2, 0x76, 0x48, 0x54, 0x5f, 0x40, 0xcc, 0x98, 0x12,
	0x40, 0xb7, 0x66, 0x2e, 0x68, 0x07, 0xa4, 0x12, 0x44, 0x71, 0x61, 0x72, 0xa4, 0xe2, 0x65, 0x30,
	0xe7, 0xa0, 0x84, 0xae, 0x67, 0x29, 0xe8, 0x06, 0xfd, 0xc7, 0x58, 0xe8, 0x3a, 0x5a, 0x15, 0x10,
	0xe8, 0x8b, 0x61, 0x8a, 0xa3, 0x18, 0x35, 0xb9, 0xa2, 0x39, 0x78, 0xae, 0x2c, 0x2f, 0xc0, 0x73,
	0xaf, 0x2d, 0xc0, 0xa5, 0xbc, 0x00, 0x3f, 0x44, 0x15, 0x3a, 0xde, 0x7b, 0xfe, 0x84, 0x7b, 0x27,
	0x2a, 0xb0, 0x8d, 0xe6, 0x69, 0xbc, 0x5f, 0xd9, 0xec, 0x37, 0x1a, 0xe2, 0x9b, 0x68, 0x25, 0xd3,
	0x47, 0x4c, 0xca, 0x44, 0x74, 0x73, 0x5a, 0x60, 0x98, 0x95, 0xf6, 0xfe, 0x96, 0x0f, 0xa1, 0x62,
	0xbb, 0x0c, 0x44, 0xcc, 0x34, 0x27, 0x61, 0xfc, 0x61, 0xea, 0x31, 0xe7, 0x65, 0xc8, 0xe3, 0x82,
	0x09, 0xf4, 0x21, 0x52, 0xfc, 0x0e, 0x5a, 0x1e, 0x4b, 0xa2, 0xa8, 0x2f, 0x9a, 0x0d, 0x26, 0x50,
	0x1d, 0x57, 0x3a, 0x22, 0x66, 0x3a, 0xbb, 0x64, 0x8f, 0x87, 0x9a, 0xb8, 0x2d, 0x19, 0xed, 0xb9,
	0x32, 0xed, 0x05, 0x18, 0x40, 0x93, 0xfb, 0x60, 0x48, 0x67, 0xd1, 0x1b, 0x0d, 0x4d, 0x9e, 0x0d,
	0x80, 0x46, 0x04, 0xc5, 0xf0, 0xcd, 0xb2, 0x97, 0x42, 0xcc, 0x95, 0x19, 0x00, 0xdd, 0x0c, 0x48,
	0x5b, 0xda, 0x17, 0x6b, 0xb3, 0xf5, 0xb2, 0x97, 0x00, 0xba, 0x1a, 0xeb, 0xc1, 0x5d, 0xa2, 0x88,
	0xbd, 0x62, 0x38, 0xe0, 0x78, 0x8c, 0x1f, 0x8f, 0xa9, 0x13, 0x36, 0x61, 0xfc, 0xf4, 0x98, 0xd4,
	0x29, 0xb9, 0x3a, 0x13, 0xec, 0x69, 0xbf, 0x80, 0x9c, 0xdc, 0x32, 0xb5, 0x09, 0xb0, 0x0d, 0x4a,
	0x05, 0xa6, 0xd7, 0x9d, 0x81, 0x62, 0xf5, 0x05, 0x5a, 0x89, 0x6f, 0x61, 0x8a, 0x03, 0x15, 0x8f,
	0xc6, 0x81, 0xa6, 0x57, 0xe2, 0xcf, 0xd0, 0x45, 0x01, 0xbb, 0xfd, 0xd0, 0x4f, 0x69, 0x9b, 0x3b,
	0x9a, 0xb6, 0xa9, 0x85, 0xce, 0x4f, 0x85, 0x74, 0x29, 0x53, 0x51, 0x3c, 0xfe, 0x43, 0x5c, 0x62,
	0xe2, 0x71, 0x51, 0xfa, 0xdb, 0xc7, 0xc5, 0xfc, 0xd4, 0xe3, 0xc2, 0xf9, 0x3e, 0xcf, 0x87, 0x13,
	0x2d, 0x35, 0x53, 0xef, 0xac, 0x53, 0xad, 0x77, 0x85, 0x6c, 0xbd, 0xfb, 0x77, 0xb7, 0xce, 0x1f,
	0xf2, 0x7d, 0x95, 0x79, 0x15, 0x9d, 0x15, 0x5f, 0xbd, 0x2a, 0xaf, 0x9a, 0x68, 0x51, 0x9d, 0xe0,
	0xc9, 0x93, 0x59, 0xe4, 0xfc, 0x62, 0xa1, 0xb5, 0x29, 0x67, 0x25, 0x3c, 0xf4, 0x8c, 0xf8, 0xc9,
	0xf9, 0x79, 0x36, 0x97, 0x2e, 0x99, 0x7f, 0x2d, 0x9e, 0x09, 0xba, 0x94, 0x71, 0xf4, 0xdc, 0xa9,
	0x3a, 0xba, 0x94, 0x75, 0xf4, 0x15, 0x54, 0x52, 0x11, 0x43, 0x89, 0x2e, 0x4f, 0x3c, 0xca, 0xa3,
	0x25, 0xe5, 0x7c, 0x5a, 0x72, 0x2a, 0xed, 0xd8, 0x84, 0xe6, 0x08, 0xed, 0xd8, 0xcc, 0xfb, 0xbf,
	0x1d, 0x9f, 0x5e, 0x3b, 0x7e, 0x69, 0xa1, 0x6a, 0xae, 0x93, 0xcf, 0xcd, 0xeb, 0xf3, 0xce, 0xf6,
	0xf3, 0xfd, 0xaa, 0xf5, 0x62, 0xbf, 0x6a, 0xbd, 0xdc, 0xaf, 0x5a, 0xdf, 0x1e, 0x54, 0x67, 0x5e,
	0x1c, 0x54, 0x67, 0x7e, 0x3b, 0xa8, 0xce, 0x3c, 0xf9, 0xa8, 0xcd, 0x54, 0xa7, 0xbf, 0xe3, 0x52,
	0xde, 0x6d, 0x44, 0x67, 0x7f, 0x6f, 0x64, 0xcb, 0x68, 0x1c, 0xfd, 0x92, 0x30, 0x48, 0x7e, 0x78,
	0x68, 0xa8, 0x61, 0x0f, 0xe4, 0x4e, 0xc9, 0x4c, 0x7c, 0xff, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x29, 0x00, 0xa6, 0x39, 0x60, 0x19, 0x00, 0x00,
}

func (m *EventCrossTalkRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTalkRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTalkRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.AsmAddress) > 0 {
		i -= len(m.AsmAddress)
		copy(dAtA[i:], m.AsmAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AsmAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.AckGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.AckType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.DestContractPayloads) > 0 {
		for iNdEx := len(m.DestContractPayloads) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestContractPayloads[iNdEx])
			copy(dAtA[i:], m.DestContractPayloads[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.DestContractPayloads[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.DestContractAddresses) > 0 {
		for iNdEx := len(m.DestContractAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestContractAddresses[iNdEx])
			copy(dAtA[i:], m.DestContractAddresses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.DestContractAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RequestNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestNonce))
		i--
		dAtA[i] = 0x78
	}
	if m.IsReadCall {
		i--
		if m.IsReadCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.RequestTxOrigin) > 0 {
		i -= len(m.RequestTxOrigin)
		copy(dAtA[i:], m.RequestTxOrigin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestTxOrigin)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x62
	}
	if m.DestinationGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasPrice))
		i--
		dAtA[i] = 0x58
	}
	if m.DestinationGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasLimit))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x40
	}
	if m.SourceTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkReadyToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkReadyToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkReadyToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DestinationTxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkFeePayerUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkFeePayerUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkFeePayerUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkDestGasIncremented) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkDestGasIncremented) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkDestGasIncremented) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestinationGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.DestinationGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrossTalkAckRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTalkAckRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTalkAckRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.ExecData) > 0 {
		for iNdEx := len(m.ExecData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExecData[iNdEx])
			copy(dAtA[i:], m.ExecData[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecData[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ExecFlags) > 0 {
		for iNdEx := len(m.ExecFlags) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.ExecFlags[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecFlags)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.ExeCode != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExeCode))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ContractAckResponses) > 0 {
		i -= len(m.ContractAckResponses)
		copy(dAtA[i:], m.ContractAckResponses)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAckResponses)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CrosstalkNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CrosstalkNonce))
		i--
		dAtA[i] = 0x60
	}
	if len(m.CrosstalkRequestSender) > 0 {
		i -= len(m.CrosstalkRequestSender)
		copy(dAtA[i:], m.CrosstalkRequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CrosstalkRequestSender)))
		i--
		dAtA[i] = 0x5a
	}
	if m.EventIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DestinationTxHash) > 0 {
		i -= len(m.DestinationTxHash)
		copy(dAtA[i:], m.DestinationTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x32
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkRequestFeeSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkRequestFeeSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkRequestFeeSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.RelayerFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkAckGasIncremented) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkAckGasIncremented) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkAckGasIncremented) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkAckRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkAckRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkAckRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkAckReadyToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkAckReadyToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkAckReadyToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkAckCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkAckCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkAckCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrossTalkAckReceiptCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossTalkAckReceiptCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossTalkAckReceiptCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.EventIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventIdentifier))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkReceiptFeeSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkReceiptFeeSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkReceiptFeeSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.RelayerFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosstalkReceiptCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosstalkReceiptCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosstalkReceiptCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCrossTalkRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SourceTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.SourceTimestamp))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DestinationGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasLimit))
	}
	if m.DestinationGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasPrice))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestTxOrigin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.IsReadCall {
		n += 2
	}
	if m.RequestNonce != 0 {
		n += 1 + sovEvents(uint64(m.RequestNonce))
	}
	if m.IsAtomic {
		n += 3
	}
	if m.ExpiryTimestamp != 0 {
		n += 2 + sovEvents(uint64(m.ExpiryTimestamp))
	}
	if len(m.DestContractAddresses) > 0 {
		for _, b := range m.DestContractAddresses {
			l = len(b)
			n += 2 + l + sovEvents(uint64(l))
		}
	}
	if len(m.DestContractPayloads) > 0 {
		for _, b := range m.DestContractPayloads {
			l = len(b)
			n += 2 + l + sovEvents(uint64(l))
		}
	}
	if m.AckType != 0 {
		n += 2 + sovEvents(uint64(m.AckType))
	}
	if m.AckGasLimit != 0 {
		n += 2 + sovEvents(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 2 + sovEvents(uint64(m.AckGasPrice))
	}
	l = len(m.AsmAddress)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovEvents(uint64(m.Status))
	}
	return n
}

func (m *EventCrosstalkReadyToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.DestinationTxFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosstalkFeePayerUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosstalkDestGasIncremented) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DestinationGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasLimit))
	}
	if m.DestinationGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasPrice))
	}
	return n
}

func (m *EventCrosstalkCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosstalkRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrossTalkAckRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestinationTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.EventIdentifier))
	}
	l = len(m.CrosstalkRequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CrosstalkNonce != 0 {
		n += 1 + sovEvents(uint64(m.CrosstalkNonce))
	}
	l = len(m.ContractAckResponses)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ExeCode != 0 {
		n += 1 + sovEvents(uint64(m.ExeCode))
	}
	if m.ExecStatus {
		n += 2
	}
	if len(m.ExecFlags) > 0 {
		n += 2 + sovEvents(uint64(len(m.ExecFlags))) + len(m.ExecFlags)*1
	}
	if len(m.ExecData) > 0 {
		for _, b := range m.ExecData {
			l = len(b)
			n += 2 + l + sovEvents(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 2 + sovEvents(uint64(m.Status))
	}
	return n
}

func (m *EventCrosstalkRequestFeeSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = m.RelayerFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.RefundFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosstalkAckGasIncremented) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.AckGasPrice))
	}
	return n
}

func (m *EventCrosstalkAckRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosstalkAckReadyToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TxFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosstalkAckCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrossTalkAckReceiptCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.EventIdentifier))
	}
	if m.Status != 0 {
		n += 2 + sovEvents(uint64(m.Status))
	}
	return n
}

func (m *EventCrosstalkReceiptFeeSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = m.RelayerFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.RefundFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosstalkReceiptCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovEvents(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCrossTalkRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTalkRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTalkRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTimestamp", wireType)
			}
			m.SourceTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasLimit", wireType)
			}
			m.DestinationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasPrice", wireType)
			}
			m.DestinationGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = append(m.RequestSender[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestSender == nil {
				m.RequestSender = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestTxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReadCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReadCall = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNonce", wireType)
			}
			m.RequestNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestContractAddresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestContractAddresses = append(m.DestContractAddresses, make([]byte, postIndex-iNdEx))
			copy(m.DestContractAddresses[len(m.DestContractAddresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestContractPayloads", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestContractPayloads = append(m.DestContractPayloads, make([]byte, postIndex-iNdEx))
			copy(m.DestContractPayloads[len(m.DestContractPayloads)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckType", wireType)
			}
			m.AckType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckType |= CrossTalkRequestAckType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsmAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsmAddress = append(m.AsmAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AsmAddress == nil {
				m.AsmAddress = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrossTalkRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkReadyToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkReadyToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkReadyToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestinationTxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkFeePayerUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkFeePayerUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkFeePayerUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkDestGasIncremented) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkDestGasIncremented: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkDestGasIncremented: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasLimit", wireType)
			}
			m.DestinationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasPrice", wireType)
			}
			m.DestinationGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrossTalkAckRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTalkAckRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTalkAckRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkRequestSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosstalkRequestSender = append(m.CrosstalkRequestSender[:0], dAtA[iNdEx:postIndex]...)
			if m.CrosstalkRequestSender == nil {
				m.CrosstalkRequestSender = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosstalkNonce", wireType)
			}
			m.CrosstalkNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrosstalkNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAckResponses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAckResponses = append(m.ContractAckResponses[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAckResponses == nil {
				m.ContractAckResponses = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExeCode", wireType)
			}
			m.ExeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExeCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 16:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExecFlags = append(m.ExecFlags, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ExecFlags) == 0 {
					m.ExecFlags = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExecFlags = append(m.ExecFlags, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFlags", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData, make([]byte, postIndex-iNdEx))
			copy(m.ExecData[len(m.ExecData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrossTalkAckRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkRequestFeeSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkRequestFeeSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkRequestFeeSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkAckGasIncremented) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkAckGasIncremented: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkAckGasIncremented: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkAckRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkAckRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkAckRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkAckReadyToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkAckReadyToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkAckReadyToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkAckCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkAckCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkAckCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrossTalkAckReceiptCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossTalkAckReceiptCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossTalkAckReceiptCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIdentifier", wireType)
			}
			m.EventIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrossTalkAckReceiptStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkReceiptFeeSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkReceiptFeeSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkReceiptFeeSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosstalkReceiptCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosstalkReceiptCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosstalkReceiptCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
