// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosstalk/crosstalk_request_confirm.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosstalkRequestConfirm struct {
	SourceChainType types.ChainType `protobuf:"varint,1,opt,name=sourceChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"sourceChainType,omitempty"`
	SourceChainId   string          `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	EventNonce      uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash       []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner       string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature       string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator    string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *CrosstalkRequestConfirm) Reset()         { *m = CrosstalkRequestConfirm{} }
func (m *CrosstalkRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*CrosstalkRequestConfirm) ProtoMessage()    {}
func (*CrosstalkRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad8bfc9f9e242900, []int{0}
}
func (m *CrosstalkRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosstalkRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosstalkRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosstalkRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosstalkRequestConfirm.Merge(m, src)
}
func (m *CrosstalkRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *CrosstalkRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosstalkRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_CrosstalkRequestConfirm proto.InternalMessageInfo

func (m *CrosstalkRequestConfirm) GetSourceChainType() types.ChainType {
	if m != nil {
		return m.SourceChainType
	}
	return types.CHAIN_TYPE_ROUTER
}

func (m *CrosstalkRequestConfirm) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *CrosstalkRequestConfirm) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *CrosstalkRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *CrosstalkRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *CrosstalkRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *CrosstalkRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func init() {
	proto.RegisterType((*CrosstalkRequestConfirm)(nil), "routerprotocol.routerchain.crosstalk.CrosstalkRequestConfirm")
}

func init() {
	proto.RegisterFile("crosstalk/crosstalk_request_confirm.proto", fileDescriptor_ad8bfc9f9e242900)
}

var fileDescriptor_ad8bfc9f9e242900 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xfb, 0x30,
	0x10, 0xc6, 0xeb, 0xfe, 0xfb, 0x2f, 0xaa, 0x55, 0x40, 0xca, 0x82, 0x05, 0xc8, 0x8a, 0xaa, 0x0e,
	0x61, 0x20, 0x41, 0x30, 0xb1, 0xd2, 0x05, 0x16, 0x86, 0x94, 0xa9, 0x4b, 0x95, 0x9a, 0xa3, 0xb1,
	0x48, 0xe2, 0x62, 0x5f, 0x10, 0x7d, 0x0b, 0x5e, 0x87, 0x37, 0x60, 0xec, 0xc8, 0x88, 0xda, 0x17,
	0x41, 0x89, 0x95, 0xa4, 0x65, 0x60, 0xb1, 0x7c, 0xbf, 0xbb, 0xfb, 0x3e, 0xe9, 0x3e, 0x7a, 0x26,
	0xb4, 0x32, 0x06, 0xa3, 0xe4, 0x39, 0xa8, 0x7f, 0x53, 0x0d, 0x2f, 0x39, 0x18, 0x9c, 0x0a, 0x95,
	0x3d, 0x49, 0x9d, 0xfa, 0x0b, 0xad, 0x50, 0x39, 0x43, 0xad, 0x72, 0x04, 0x5d, 0x16, 0x42, 0x25,
	0xbe, 0x2d, 0x45, 0x1c, 0xc9, 0xcc, 0xaf, 0x77, 0x8f, 0x4f, 0xd2, 0x3c, 0x41, 0x59, 0xd2, 0xa0,
	0x7c, 0xa7, 0xb8, 0x5c, 0x80, 0x95, 0x18, 0x7c, 0xb4, 0xe9, 0xd1, 0xa8, 0x1a, 0x0d, 0xad, 0xcb,
	0xc8, 0x9a, 0x38, 0x13, 0x7a, 0x68, 0x54, 0xae, 0x05, 0x8c, 0x8a, 0xad, 0x87, 0xe5, 0x02, 0x18,
	0x71, 0x89, 0x77, 0x70, 0x79, 0xe1, 0xff, 0x61, 0xdc, 0xb8, 0xf9, 0xf5, 0x5e, 0xf8, 0x5b, 0xc8,
	0x19, 0xd2, 0xfd, 0x2d, 0x74, 0xf7, 0xc8, 0xda, 0x2e, 0xf1, 0x7a, 0xe1, 0x2e, 0x74, 0x38, 0xa5,
	0xf0, 0x0a, 0x19, 0xde, 0xab, 0x4c, 0x00, 0xfb, 0xe7, 0x12, 0xaf, 0x13, 0x6e, 0x11, 0xe7, 0x94,
	0xf6, 0x44, 0x12, 0xc9, 0xf4, 0x36, 0x32, 0x31, 0xeb, 0xb8, 0xc4, 0xeb, 0x87, 0x0d, 0x28, 0xba,
	0x80, 0xf1, 0x58, 0xce, 0x33, 0xd0, 0xec, 0x7f, 0xa9, 0xdf, 0x80, 0xa2, 0x6b, 0xe4, 0x3c, 0x8b,
	0x30, 0xd7, 0xc0, 0xba, 0xb6, 0x5b, 0x03, 0x67, 0x40, 0xfb, 0x4a, 0x8b, 0x18, 0x0c, 0xea, 0x08,
	0x95, 0x66, 0x7b, 0xe5, 0xc0, 0x0e, 0xbb, 0x19, 0x7f, 0xae, 0x39, 0x59, 0xad, 0x39, 0xf9, 0x5e,
	0x73, 0xf2, 0xbe, 0xe1, 0xad, 0xd5, 0x86, 0xb7, 0xbe, 0x36, 0xbc, 0x35, 0xb9, 0x9e, 0x4b, 0x8c,
	0xf3, 0x99, 0x2f, 0x54, 0x1a, 0xd8, 0xdb, 0x9c, 0x57, 0xb7, 0xaa, 0x6a, 0x9b, 0xc7, 0x5b, 0x93,
	0x71, 0x50, 0xa4, 0x62, 0x66, 0xdd, 0x72, 0xf0, 0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0x36, 0x62,
	0x94, 0x76, 0x07, 0x02, 0x00, 0x00,
}

func (m *CrosstalkRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosstalkRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosstalkRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintCrosstalkRequestConfirm(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCrosstalkRequestConfirm(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintCrosstalkRequestConfirm(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintCrosstalkRequestConfirm(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintCrosstalkRequestConfirm(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintCrosstalkRequestConfirm(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceChainType != 0 {
		i = encodeVarintCrosstalkRequestConfirm(dAtA, i, uint64(m.SourceChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosstalkRequestConfirm(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosstalkRequestConfirm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosstalkRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceChainType != 0 {
		n += 1 + sovCrosstalkRequestConfirm(uint64(m.SourceChainType))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovCrosstalkRequestConfirm(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovCrosstalkRequestConfirm(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovCrosstalkRequestConfirm(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovCrosstalkRequestConfirm(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCrosstalkRequestConfirm(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovCrosstalkRequestConfirm(uint64(l))
	}
	return n
}

func sovCrosstalkRequestConfirm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosstalkRequestConfirm(x uint64) (n int) {
	return sovCrosstalkRequestConfirm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosstalkRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosstalkRequestConfirm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosstalkRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosstalkRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainType", wireType)
			}
			m.SourceChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosstalkRequestConfirm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosstalkRequestConfirm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosstalkRequestConfirm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosstalkRequestConfirm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosstalkRequestConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosstalkRequestConfirm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosstalkRequestConfirm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosstalkRequestConfirm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosstalkRequestConfirm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosstalkRequestConfirm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosstalkRequestConfirm = fmt.Errorf("proto: unexpected end of group")
)
