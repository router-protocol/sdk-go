// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/rwasm/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgExecuteCwContract struct {
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Contract is the address of the smart contract
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	// Msg json encoded message to be passed to the contract
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// Funds coins that are transferred to the contract on execution
	Funds string `protobuf:"bytes,4,opt,name=funds,proto3" json:"funds,omitempty"`
}

func (m *MsgExecuteCwContract) Reset()         { *m = MsgExecuteCwContract{} }
func (m *MsgExecuteCwContract) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteCwContract) ProtoMessage()    {}
func (*MsgExecuteCwContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_0853e1875329b220, []int{0}
}
func (m *MsgExecuteCwContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteCwContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteCwContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteCwContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteCwContract.Merge(m, src)
}
func (m *MsgExecuteCwContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteCwContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteCwContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteCwContract proto.InternalMessageInfo

func (m *MsgExecuteCwContract) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgExecuteCwContract) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgExecuteCwContract) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgExecuteCwContract) GetFunds() string {
	if m != nil {
		return m.Funds
	}
	return ""
}

type MsgExecuteCwContractResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgExecuteCwContractResponse) Reset()         { *m = MsgExecuteCwContractResponse{} }
func (m *MsgExecuteCwContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteCwContractResponse) ProtoMessage()    {}
func (*MsgExecuteCwContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0853e1875329b220, []int{1}
}
func (m *MsgExecuteCwContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteCwContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteCwContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteCwContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteCwContractResponse.Merge(m, src)
}
func (m *MsgExecuteCwContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteCwContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteCwContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteCwContractResponse proto.InternalMessageInfo

func (m *MsgExecuteCwContractResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MsgInstantiateCwContract struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Admin  string `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	CodeId uint64 `protobuf:"varint,3,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	Label  string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Msg    string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Funds  string `protobuf:"bytes,6,opt,name=funds,proto3" json:"funds,omitempty"`
}

func (m *MsgInstantiateCwContract) Reset()         { *m = MsgInstantiateCwContract{} }
func (m *MsgInstantiateCwContract) String() string { return proto.CompactTextString(m) }
func (*MsgInstantiateCwContract) ProtoMessage()    {}
func (*MsgInstantiateCwContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_0853e1875329b220, []int{2}
}
func (m *MsgInstantiateCwContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstantiateCwContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstantiateCwContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstantiateCwContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstantiateCwContract.Merge(m, src)
}
func (m *MsgInstantiateCwContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstantiateCwContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstantiateCwContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstantiateCwContract proto.InternalMessageInfo

func (m *MsgInstantiateCwContract) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgInstantiateCwContract) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgInstantiateCwContract) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *MsgInstantiateCwContract) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *MsgInstantiateCwContract) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgInstantiateCwContract) GetFunds() string {
	if m != nil {
		return m.Funds
	}
	return ""
}

type MsgInstantiateCwContractResponse struct {
	// Address is the bech32 address of the new contract instance.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Data contains bytes to returned from the contract
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgInstantiateCwContractResponse) Reset()         { *m = MsgInstantiateCwContractResponse{} }
func (m *MsgInstantiateCwContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInstantiateCwContractResponse) ProtoMessage()    {}
func (*MsgInstantiateCwContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0853e1875329b220, []int{3}
}
func (m *MsgInstantiateCwContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstantiateCwContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstantiateCwContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstantiateCwContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstantiateCwContractResponse.Merge(m, src)
}
func (m *MsgInstantiateCwContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstantiateCwContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstantiateCwContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstantiateCwContractResponse proto.InternalMessageInfo

func (m *MsgInstantiateCwContractResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgInstantiateCwContractResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MsgCwStoreCode struct {
	Sender       string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	WasmByteCode string `protobuf:"bytes,2,opt,name=wasm_byte_code,json=wasmByteCode,proto3" json:"wasm_byte_code,omitempty"`
}

func (m *MsgCwStoreCode) Reset()         { *m = MsgCwStoreCode{} }
func (m *MsgCwStoreCode) String() string { return proto.CompactTextString(m) }
func (*MsgCwStoreCode) ProtoMessage()    {}
func (*MsgCwStoreCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0853e1875329b220, []int{4}
}
func (m *MsgCwStoreCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCwStoreCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCwStoreCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCwStoreCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCwStoreCode.Merge(m, src)
}
func (m *MsgCwStoreCode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCwStoreCode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCwStoreCode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCwStoreCode proto.InternalMessageInfo

func (m *MsgCwStoreCode) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCwStoreCode) GetWasmByteCode() string {
	if m != nil {
		return m.WasmByteCode
	}
	return ""
}

type MsgCwStoreCodeResponse struct {
	// CodeID is the reference to the stored WASM code
	CodeID uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	// Checksum is the sha256 hash of the stored code
	Checksum []byte `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *MsgCwStoreCodeResponse) Reset()         { *m = MsgCwStoreCodeResponse{} }
func (m *MsgCwStoreCodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCwStoreCodeResponse) ProtoMessage()    {}
func (*MsgCwStoreCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0853e1875329b220, []int{5}
}
func (m *MsgCwStoreCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCwStoreCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCwStoreCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCwStoreCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCwStoreCodeResponse.Merge(m, src)
}
func (m *MsgCwStoreCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCwStoreCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCwStoreCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCwStoreCodeResponse proto.InternalMessageInfo

func (m *MsgCwStoreCodeResponse) GetCodeID() uint64 {
	if m != nil {
		return m.CodeID
	}
	return 0
}

func (m *MsgCwStoreCodeResponse) GetChecksum() []byte {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgExecuteCwContract)(nil), "routerprotocol.routerchain.rwasm.MsgExecuteCwContract")
	proto.RegisterType((*MsgExecuteCwContractResponse)(nil), "routerprotocol.routerchain.rwasm.MsgExecuteCwContractResponse")
	proto.RegisterType((*MsgInstantiateCwContract)(nil), "routerprotocol.routerchain.rwasm.MsgInstantiateCwContract")
	proto.RegisterType((*MsgInstantiateCwContractResponse)(nil), "routerprotocol.routerchain.rwasm.MsgInstantiateCwContractResponse")
	proto.RegisterType((*MsgCwStoreCode)(nil), "routerprotocol.routerchain.rwasm.MsgCwStoreCode")
	proto.RegisterType((*MsgCwStoreCodeResponse)(nil), "routerprotocol.routerchain.rwasm.MsgCwStoreCodeResponse")
}

func init() { proto.RegisterFile("routerchain/rwasm/tx.proto", fileDescriptor_0853e1875329b220) }

var fileDescriptor_0853e1875329b220 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x31, 0x8f, 0xd3, 0x30,
	0x18, 0x6d, 0xae, 0x6d, 0x0e, 0x3e, 0x4e, 0x27, 0xb0, 0xca, 0x11, 0x45, 0x28, 0x54, 0x85, 0x81,
	0x85, 0x14, 0x1d, 0x02, 0x21, 0x06, 0x86, 0x16, 0x86, 0x0e, 0x05, 0x54, 0x26, 0x58, 0x2a, 0x37,
	0x36, 0x69, 0x44, 0x63, 0x57, 0xb6, 0xa3, 0xb6, 0xbf, 0x81, 0x85, 0x8d, 0x91, 0x95, 0x9f, 0xc2,
	0x78, 0x23, 0x13, 0x42, 0xed, 0x1f, 0x41, 0x76, 0x12, 0x13, 0x44, 0x4e, 0xf4, 0x6e, 0xf3, 0xb3,
	0xbf, 0xf7, 0xfc, 0x9e, 0xbf, 0x4f, 0x06, 0x5f, 0xf0, 0x4c, 0x51, 0x11, 0xcd, 0x71, 0xc2, 0xfa,
	0x62, 0x85, 0x65, 0xda, 0x57, 0xeb, 0x70, 0x29, 0xb8, 0xe2, 0xa8, 0x9b, 0x9f, 0x19, 0x10, 0xf1,
	0x45, 0x58, 0x29, 0x0d, 0x4d, 0xa9, 0xdf, 0x89, 0x79, 0xcc, 0xcd, 0x79, 0x5f, 0xaf, 0x72, 0x5e,
	0x4f, 0x40, 0x67, 0x2c, 0xe3, 0x97, 0x6b, 0x1a, 0x65, 0x8a, 0x0e, 0x57, 0x43, 0xce, 0x94, 0xc0,
	0x91, 0x42, 0x27, 0xe0, 0x4a, 0xca, 0x08, 0x15, 0x9e, 0xd3, 0x75, 0xee, 0x5f, 0x9d, 0x14, 0x08,
	0xf9, 0x70, 0x25, 0x2a, 0x6a, 0xbc, 0x03, 0x73, 0x62, 0x31, 0xba, 0x0e, 0xcd, 0x54, 0xc6, 0x5e,
	0xd3, 0x6c, 0xeb, 0x25, 0xea, 0x40, 0xfb, 0x43, 0xc6, 0x88, 0xf4, 0x5a, 0x66, 0x2f, 0x07, 0xbd,
	0x53, 0xb8, 0x5d, 0x77, 0xe7, 0x84, 0xca, 0x25, 0x67, 0x92, 0x22, 0x04, 0x2d, 0x82, 0x15, 0x36,
	0x37, 0x1f, 0x4d, 0xcc, 0xba, 0xf7, 0xd5, 0x01, 0x6f, 0x2c, 0xe3, 0x11, 0x93, 0x0a, 0x33, 0x95,
	0xe0, 0xbd, 0xcc, 0x76, 0xa0, 0x8d, 0x49, 0x9a, 0xb0, 0xc2, 0x69, 0x0e, 0xd0, 0x2d, 0x38, 0x8c,
	0x38, 0xa1, 0xd3, 0x84, 0x18, 0xab, 0xad, 0x89, 0xab, 0xe1, 0x88, 0xe8, 0xf2, 0x05, 0x9e, 0xd1,
	0x45, 0xe9, 0xd6, 0x80, 0x32, 0x55, 0xbb, 0x26, 0x95, 0x5b, 0x4d, 0xf5, 0x06, 0xba, 0xe7, 0x19,
	0xb4, 0xc9, 0x3c, 0x38, 0xc4, 0x84, 0x08, 0x2a, 0x65, 0xe1, 0xb4, 0x84, 0x36, 0xf3, 0x41, 0x25,
	0xf3, 0x2b, 0x38, 0x1e, 0xcb, 0x78, 0xb8, 0x7a, 0xab, 0xb8, 0xa0, 0x43, 0x4e, 0xe8, 0xb9, 0x41,
	0xef, 0xc1, 0xb1, 0xee, 0xf1, 0x74, 0xb6, 0x51, 0x74, 0xaa, 0xd3, 0x14, 0x89, 0x8f, 0xf4, 0xee,
	0x60, 0xa3, 0x0c, 0xbb, 0xf7, 0x0e, 0x4e, 0xfe, 0xd6, 0xb3, 0xbe, 0xee, 0xfe, 0x79, 0x12, 0x2d,
	0xdc, 0x1a, 0xc0, 0xf6, 0xe7, 0x1d, 0x57, 0x97, 0x8c, 0x5e, 0xd8, 0xe7, 0xd1, 0xad, 0x9f, 0xd3,
	0xe8, 0xa3, 0xcc, 0xd2, 0xc2, 0xa6, 0xc5, 0xa7, 0xdf, 0x9a, 0xd0, 0x1c, 0xcb, 0x18, 0x7d, 0x72,
	0xe0, 0xc6, 0xbf, 0xc3, 0xf4, 0x24, 0xfc, 0xdf, 0x74, 0x86, 0x75, 0x03, 0xe1, 0x3f, 0xbf, 0x1c,
	0xcf, 0xc6, 0xfa, 0xe2, 0xc0, 0xcd, 0xfa, 0x89, 0x79, 0xb6, 0x97, 0x72, 0x2d, 0xd7, 0x1f, 0x5c,
	0x9e, 0x6b, 0x9d, 0x6d, 0xe0, 0x5a, 0xb5, 0xaf, 0x0f, 0xf7, 0x92, 0xac, 0x30, 0xfc, 0xa7, 0x17,
	0x65, 0x94, 0x57, 0x0f, 0x5e, 0x7f, 0xdf, 0x06, 0xce, 0xd9, 0x36, 0x70, 0x7e, 0x6d, 0x03, 0xe7,
	0xf3, 0x2e, 0x68, 0x9c, 0xed, 0x82, 0xc6, 0x8f, 0x5d, 0xd0, 0x78, 0xff, 0x38, 0x4e, 0xd4, 0x3c,
	0x9b, 0x85, 0x11, 0x4f, 0xfb, 0xb9, 0xdc, 0x83, 0x52, 0xbe, 0xc4, 0xf9, 0xdf, 0xb3, 0x2e, 0x7f,
	0x9f, 0xcd, 0x92, 0xca, 0x99, 0x6b, 0x8a, 0x1e, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x76, 0x69,
	0x8b, 0x72, 0x9f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ExecuteCwContract(ctx context.Context, in *MsgExecuteCwContract, opts ...grpc.CallOption) (*MsgExecuteCwContractResponse, error)
	InstantiateCwContract(ctx context.Context, in *MsgInstantiateCwContract, opts ...grpc.CallOption) (*MsgInstantiateCwContractResponse, error)
	CwStoreCode(ctx context.Context, in *MsgCwStoreCode, opts ...grpc.CallOption) (*MsgCwStoreCodeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ExecuteCwContract(ctx context.Context, in *MsgExecuteCwContract, opts ...grpc.CallOption) (*MsgExecuteCwContractResponse, error) {
	out := new(MsgExecuteCwContractResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.rwasm.Msg/ExecuteCwContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InstantiateCwContract(ctx context.Context, in *MsgInstantiateCwContract, opts ...grpc.CallOption) (*MsgInstantiateCwContractResponse, error) {
	out := new(MsgInstantiateCwContractResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.rwasm.Msg/InstantiateCwContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CwStoreCode(ctx context.Context, in *MsgCwStoreCode, opts ...grpc.CallOption) (*MsgCwStoreCodeResponse, error) {
	out := new(MsgCwStoreCodeResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.rwasm.Msg/CwStoreCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ExecuteCwContract(context.Context, *MsgExecuteCwContract) (*MsgExecuteCwContractResponse, error)
	InstantiateCwContract(context.Context, *MsgInstantiateCwContract) (*MsgInstantiateCwContractResponse, error)
	CwStoreCode(context.Context, *MsgCwStoreCode) (*MsgCwStoreCodeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ExecuteCwContract(ctx context.Context, req *MsgExecuteCwContract) (*MsgExecuteCwContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCwContract not implemented")
}
func (*UnimplementedMsgServer) InstantiateCwContract(ctx context.Context, req *MsgInstantiateCwContract) (*MsgInstantiateCwContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantiateCwContract not implemented")
}
func (*UnimplementedMsgServer) CwStoreCode(ctx context.Context, req *MsgCwStoreCode) (*MsgCwStoreCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CwStoreCode not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ExecuteCwContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteCwContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteCwContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.rwasm.Msg/ExecuteCwContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteCwContract(ctx, req.(*MsgExecuteCwContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InstantiateCwContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInstantiateCwContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InstantiateCwContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.rwasm.Msg/InstantiateCwContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InstantiateCwContract(ctx, req.(*MsgInstantiateCwContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CwStoreCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCwStoreCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CwStoreCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.rwasm.Msg/CwStoreCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CwStoreCode(ctx, req.(*MsgCwStoreCode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.rwasm.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCwContract",
			Handler:    _Msg_ExecuteCwContract_Handler,
		},
		{
			MethodName: "InstantiateCwContract",
			Handler:    _Msg_InstantiateCwContract_Handler,
		},
		{
			MethodName: "CwStoreCode",
			Handler:    _Msg_CwStoreCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerchain/rwasm/tx.proto",
}

func (m *MsgExecuteCwContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteCwContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteCwContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		i -= len(m.Funds)
		copy(dAtA[i:], m.Funds)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Funds)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteCwContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteCwContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteCwContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInstantiateCwContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstantiateCwContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstantiateCwContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		i -= len(m.Funds)
		copy(dAtA[i:], m.Funds)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Funds)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if m.CodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInstantiateCwContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstantiateCwContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstantiateCwContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCwStoreCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCwStoreCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCwStoreCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WasmByteCode) > 0 {
		i -= len(m.WasmByteCode)
		copy(dAtA[i:], m.WasmByteCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WasmByteCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCwStoreCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCwStoreCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCwStoreCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x12
	}
	if m.CodeID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgExecuteCwContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Funds)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecuteCwContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInstantiateCwContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CodeId != 0 {
		n += 1 + sovTx(uint64(m.CodeId))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Funds)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInstantiateCwContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCwStoreCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WasmByteCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCwStoreCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeID != 0 {
		n += 1 + sovTx(uint64(m.CodeID))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgExecuteCwContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteCwContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteCwContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteCwContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteCwContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteCwContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInstantiateCwContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstantiateCwContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstantiateCwContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInstantiateCwContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstantiateCwContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstantiateCwContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCwStoreCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCwStoreCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCwStoreCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasmByteCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WasmByteCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCwStoreCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCwStoreCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCwStoreCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeID", wireType)
			}
			m.CodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
