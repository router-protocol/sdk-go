// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerprotocol/routerchain/pricefeed/symbol_request.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SymbolRequest is a message that represents a symbol request data structure.
// It contains the symbol or name of the requested price data, the ID of the
// oracle script used to fetch the requested price data, and the block interval
// at which the price data should be update every n block.
type SymbolRequest struct {
	Symbol         string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OracleScriptID uint64 `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
	BlockInterval  uint64 `protobuf:"varint,3,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty"`
}

func (m *SymbolRequest) Reset()         { *m = SymbolRequest{} }
func (m *SymbolRequest) String() string { return proto.CompactTextString(m) }
func (*SymbolRequest) ProtoMessage()    {}
func (*SymbolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_390c8e586733d78a, []int{0}
}
func (m *SymbolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SymbolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SymbolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SymbolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SymbolRequest.Merge(m, src)
}
func (m *SymbolRequest) XXX_Size() int {
	return m.Size()
}
func (m *SymbolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SymbolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SymbolRequest proto.InternalMessageInfo

func (m *SymbolRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *SymbolRequest) GetOracleScriptID() uint64 {
	if m != nil {
		return m.OracleScriptID
	}
	return 0
}

func (m *SymbolRequest) GetBlockInterval() uint64 {
	if m != nil {
		return m.BlockInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*SymbolRequest)(nil), "routerprotocol.routerchain.pricefeed.SymbolRequest")
}

func init() {
	proto.RegisterFile("routerprotocol/routerchain/pricefeed/symbol_request.proto", fileDescriptor_390c8e586733d78a)
}

var fileDescriptor_390c8e586733d78a = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x2c, 0xca, 0x2f, 0x2d,
	0x49, 0x2d, 0x2a, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x87, 0x70, 0x93, 0x33, 0x12,
	0x33, 0xf3, 0xf4, 0x0b, 0x8a, 0x32, 0x93, 0x53, 0xd3, 0x52, 0x53, 0x53, 0xf4, 0x8b, 0x2b, 0x73,
	0x93, 0xf2, 0x73, 0xe2, 0x8b, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xf4, 0xc0, 0xaa, 0x85, 0x54,
	0x50, 0xb5, 0xea, 0x21, 0x69, 0xd5, 0x83, 0x6b, 0x95, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xab,
	0xd1, 0x07, 0xb1, 0x20, 0x7a, 0x95, 0x7a, 0x18, 0xb9, 0x78, 0x83, 0xc1, 0x86, 0x06, 0x41, 0xcc,
	0x14, 0x12, 0xe3, 0x62, 0x83, 0xd8, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe5, 0x09,
	0xd9, 0x70, 0x09, 0xe4, 0x17, 0x25, 0x26, 0xe7, 0xa4, 0xc6, 0x17, 0x27, 0x17, 0x65, 0x16, 0x94,
	0xc4, 0x67, 0xa6, 0x48, 0x30, 0x29, 0x30, 0x6a, 0xb0, 0x38, 0x09, 0x3d, 0xba, 0x27, 0xcf, 0xe7,
	0x0f, 0x96, 0x0b, 0x06, 0x4b, 0x79, 0xba, 0x04, 0xf1, 0xe5, 0x23, 0xf3, 0x53, 0x84, 0x54, 0xb9,
	0xf8, 0x92, 0x72, 0xf2, 0x93, 0xb3, 0xe3, 0x33, 0xf3, 0x4a, 0x52, 0x8b, 0xca, 0x12, 0x73, 0x24,
	0x98, 0x41, 0x7a, 0x83, 0x78, 0xc1, 0xa2, 0x9e, 0x50, 0x41, 0xa7, 0xe0, 0x13, 0x8f, 0xe4, 0x18,
	0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5,
	0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x4c, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce,
	0xcf, 0x85, 0x86, 0x8d, 0x2e, 0x5a, 0x58, 0xe9, 0x42, 0x02, 0xab, 0x02, 0x29, 0xb8, 0x4a, 0x2a,
	0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x0a, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0x78,
	0xf8, 0x34, 0x63, 0x01, 0x00, 0x00,
}

func (m *SymbolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymbolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SymbolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockInterval != 0 {
		i = encodeVarintSymbolRequest(dAtA, i, uint64(m.BlockInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.OracleScriptID != 0 {
		i = encodeVarintSymbolRequest(dAtA, i, uint64(m.OracleScriptID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintSymbolRequest(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSymbolRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovSymbolRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SymbolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovSymbolRequest(uint64(l))
	}
	if m.OracleScriptID != 0 {
		n += 1 + sovSymbolRequest(uint64(m.OracleScriptID))
	}
	if m.BlockInterval != 0 {
		n += 1 + sovSymbolRequest(uint64(m.BlockInterval))
	}
	return n
}

func sovSymbolRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSymbolRequest(x uint64) (n int) {
	return sovSymbolRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SymbolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSymbolRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymbolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymbolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSymbolRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSymbolRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSymbolRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptID", wireType)
			}
			m.OracleScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSymbolRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInterval", wireType)
			}
			m.BlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSymbolRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSymbolRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSymbolRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSymbolRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSymbolRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSymbolRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSymbolRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSymbolRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSymbolRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSymbolRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSymbolRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSymbolRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSymbolRequest = fmt.Errorf("proto: unexpected end of group")
)
