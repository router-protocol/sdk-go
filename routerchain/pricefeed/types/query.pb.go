// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerprotocol/routerchain/pricefeed/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPriceRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *QueryGetPriceRequest) Reset()         { *m = QueryGetPriceRequest{} }
func (m *QueryGetPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceRequest) ProtoMessage()    {}
func (*QueryGetPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{2}
}
func (m *QueryGetPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceRequest.Merge(m, src)
}
func (m *QueryGetPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceRequest proto.InternalMessageInfo

func (m *QueryGetPriceRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type QueryGetPriceResponse struct {
	Price Price `protobuf:"bytes,1,opt,name=price,proto3" json:"price"`
}

func (m *QueryGetPriceResponse) Reset()         { *m = QueryGetPriceResponse{} }
func (m *QueryGetPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceResponse) ProtoMessage()    {}
func (*QueryGetPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{3}
}
func (m *QueryGetPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceResponse.Merge(m, src)
}
func (m *QueryGetPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceResponse proto.InternalMessageInfo

func (m *QueryGetPriceResponse) GetPrice() Price {
	if m != nil {
		return m.Price
	}
	return Price{}
}

type QueryAllPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceRequest) Reset()         { *m = QueryAllPriceRequest{} }
func (m *QueryAllPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceRequest) ProtoMessage()    {}
func (*QueryAllPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{4}
}
func (m *QueryAllPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceRequest.Merge(m, src)
}
func (m *QueryAllPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceRequest proto.InternalMessageInfo

func (m *QueryAllPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPriceResponse struct {
	Price      []Price             `protobuf:"bytes,1,rep,name=price,proto3" json:"price"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceResponse) Reset()         { *m = QueryAllPriceResponse{} }
func (m *QueryAllPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceResponse) ProtoMessage()    {}
func (*QueryAllPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{5}
}
func (m *QueryAllPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceResponse.Merge(m, src)
}
func (m *QueryAllPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceResponse proto.InternalMessageInfo

func (m *QueryAllPriceResponse) GetPrice() []Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *QueryAllPriceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSymbolRequestRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *QueryGetSymbolRequestRequest) Reset()         { *m = QueryGetSymbolRequestRequest{} }
func (m *QueryGetSymbolRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSymbolRequestRequest) ProtoMessage()    {}
func (*QueryGetSymbolRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{6}
}
func (m *QueryGetSymbolRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSymbolRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSymbolRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSymbolRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSymbolRequestRequest.Merge(m, src)
}
func (m *QueryGetSymbolRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSymbolRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSymbolRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSymbolRequestRequest proto.InternalMessageInfo

func (m *QueryGetSymbolRequestRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type QueryGetSymbolRequestResponse struct {
	SymbolRequest SymbolRequest `protobuf:"bytes,1,opt,name=symbolRequest,proto3" json:"symbolRequest"`
}

func (m *QueryGetSymbolRequestResponse) Reset()         { *m = QueryGetSymbolRequestResponse{} }
func (m *QueryGetSymbolRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSymbolRequestResponse) ProtoMessage()    {}
func (*QueryGetSymbolRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{7}
}
func (m *QueryGetSymbolRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSymbolRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSymbolRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSymbolRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSymbolRequestResponse.Merge(m, src)
}
func (m *QueryGetSymbolRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSymbolRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSymbolRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSymbolRequestResponse proto.InternalMessageInfo

func (m *QueryGetSymbolRequestResponse) GetSymbolRequest() SymbolRequest {
	if m != nil {
		return m.SymbolRequest
	}
	return SymbolRequest{}
}

type QueryAllSymbolRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSymbolRequestRequest) Reset()         { *m = QueryAllSymbolRequestRequest{} }
func (m *QueryAllSymbolRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSymbolRequestRequest) ProtoMessage()    {}
func (*QueryAllSymbolRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{8}
}
func (m *QueryAllSymbolRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSymbolRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSymbolRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSymbolRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSymbolRequestRequest.Merge(m, src)
}
func (m *QueryAllSymbolRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSymbolRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSymbolRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSymbolRequestRequest proto.InternalMessageInfo

func (m *QueryAllSymbolRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSymbolRequestResponse struct {
	SymbolRequest []SymbolRequest     `protobuf:"bytes,1,rep,name=symbolRequest,proto3" json:"symbolRequest"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSymbolRequestResponse) Reset()         { *m = QueryAllSymbolRequestResponse{} }
func (m *QueryAllSymbolRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSymbolRequestResponse) ProtoMessage()    {}
func (*QueryAllSymbolRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{9}
}
func (m *QueryAllSymbolRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSymbolRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSymbolRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSymbolRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSymbolRequestResponse.Merge(m, src)
}
func (m *QueryAllSymbolRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSymbolRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSymbolRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSymbolRequestResponse proto.InternalMessageInfo

func (m *QueryAllSymbolRequestResponse) GetSymbolRequest() []SymbolRequest {
	if m != nil {
		return m.SymbolRequest
	}
	return nil
}

func (m *QueryAllSymbolRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPriceFeederInfoRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetPriceFeederInfoRequest) Reset()         { *m = QueryGetPriceFeederInfoRequest{} }
func (m *QueryGetPriceFeederInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceFeederInfoRequest) ProtoMessage()    {}
func (*QueryGetPriceFeederInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{10}
}
func (m *QueryGetPriceFeederInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceFeederInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceFeederInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceFeederInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceFeederInfoRequest.Merge(m, src)
}
func (m *QueryGetPriceFeederInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceFeederInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceFeederInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceFeederInfoRequest proto.InternalMessageInfo

func (m *QueryGetPriceFeederInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetPriceFeederInfoResponse struct {
	PriceFeederInfo PriceFeederInfo `protobuf:"bytes,1,opt,name=priceFeederInfo,proto3" json:"priceFeederInfo"`
}

func (m *QueryGetPriceFeederInfoResponse) Reset()         { *m = QueryGetPriceFeederInfoResponse{} }
func (m *QueryGetPriceFeederInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceFeederInfoResponse) ProtoMessage()    {}
func (*QueryGetPriceFeederInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{11}
}
func (m *QueryGetPriceFeederInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceFeederInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceFeederInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceFeederInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceFeederInfoResponse.Merge(m, src)
}
func (m *QueryGetPriceFeederInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceFeederInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceFeederInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceFeederInfoResponse proto.InternalMessageInfo

func (m *QueryGetPriceFeederInfoResponse) GetPriceFeederInfo() PriceFeederInfo {
	if m != nil {
		return m.PriceFeederInfo
	}
	return PriceFeederInfo{}
}

type QueryAllPriceFeederInfoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceFeederInfoRequest) Reset()         { *m = QueryAllPriceFeederInfoRequest{} }
func (m *QueryAllPriceFeederInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceFeederInfoRequest) ProtoMessage()    {}
func (*QueryAllPriceFeederInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{12}
}
func (m *QueryAllPriceFeederInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceFeederInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceFeederInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceFeederInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceFeederInfoRequest.Merge(m, src)
}
func (m *QueryAllPriceFeederInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceFeederInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceFeederInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceFeederInfoRequest proto.InternalMessageInfo

func (m *QueryAllPriceFeederInfoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPriceFeederInfoResponse struct {
	PriceFeederInfo []PriceFeederInfo   `protobuf:"bytes,1,rep,name=priceFeederInfo,proto3" json:"priceFeederInfo"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceFeederInfoResponse) Reset()         { *m = QueryAllPriceFeederInfoResponse{} }
func (m *QueryAllPriceFeederInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceFeederInfoResponse) ProtoMessage()    {}
func (*QueryAllPriceFeederInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{13}
}
func (m *QueryAllPriceFeederInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceFeederInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceFeederInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceFeederInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceFeederInfoResponse.Merge(m, src)
}
func (m *QueryAllPriceFeederInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceFeederInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceFeederInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceFeederInfoResponse proto.InternalMessageInfo

func (m *QueryAllPriceFeederInfoResponse) GetPriceFeederInfo() []PriceFeederInfo {
	if m != nil {
		return m.PriceFeederInfo
	}
	return nil
}

func (m *QueryAllPriceFeederInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGasPriceRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryGetGasPriceRequest) Reset()         { *m = QueryGetGasPriceRequest{} }
func (m *QueryGetGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceRequest) ProtoMessage()    {}
func (*QueryGetGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{14}
}
func (m *QueryGetGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceRequest.Merge(m, src)
}
func (m *QueryGetGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceRequest proto.InternalMessageInfo

func (m *QueryGetGasPriceRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetGasPriceResponse struct {
	GasPrice GasPrice `protobuf:"bytes,1,opt,name=gasPrice,proto3" json:"gasPrice"`
}

func (m *QueryGetGasPriceResponse) Reset()         { *m = QueryGetGasPriceResponse{} }
func (m *QueryGetGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceResponse) ProtoMessage()    {}
func (*QueryGetGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{15}
}
func (m *QueryGetGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceResponse.Merge(m, src)
}
func (m *QueryGetGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceResponse proto.InternalMessageInfo

func (m *QueryGetGasPriceResponse) GetGasPrice() GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return GasPrice{}
}

type QueryAllGasPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceRequest) Reset()         { *m = QueryAllGasPriceRequest{} }
func (m *QueryAllGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceRequest) ProtoMessage()    {}
func (*QueryAllGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{16}
}
func (m *QueryAllGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceRequest.Merge(m, src)
}
func (m *QueryAllGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceRequest proto.InternalMessageInfo

func (m *QueryAllGasPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGasPriceResponse struct {
	GasPrice   []GasPrice          `protobuf:"bytes,1,rep,name=gasPrice,proto3" json:"gasPrice"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceResponse) Reset()         { *m = QueryAllGasPriceResponse{} }
func (m *QueryAllGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceResponse) ProtoMessage()    {}
func (*QueryAllGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{17}
}
func (m *QueryAllGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceResponse.Merge(m, src)
}
func (m *QueryAllGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceResponse proto.InternalMessageInfo

func (m *QueryAllGasPriceResponse) GetGasPrice() []GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *QueryAllGasPriceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryWhitelistedIBCChannelsRequest struct {
}

func (m *QueryWhitelistedIBCChannelsRequest) Reset()         { *m = QueryWhitelistedIBCChannelsRequest{} }
func (m *QueryWhitelistedIBCChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedIBCChannelsRequest) ProtoMessage()    {}
func (*QueryWhitelistedIBCChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{18}
}
func (m *QueryWhitelistedIBCChannelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedIBCChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedIBCChannelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedIBCChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedIBCChannelsRequest.Merge(m, src)
}
func (m *QueryWhitelistedIBCChannelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedIBCChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedIBCChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedIBCChannelsRequest proto.InternalMessageInfo

type QueryWhitelistedIBCChannelsResponse struct {
	Channels []string `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (m *QueryWhitelistedIBCChannelsResponse) Reset()         { *m = QueryWhitelistedIBCChannelsResponse{} }
func (m *QueryWhitelistedIBCChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedIBCChannelsResponse) ProtoMessage()    {}
func (*QueryWhitelistedIBCChannelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{19}
}
func (m *QueryWhitelistedIBCChannelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedIBCChannelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedIBCChannelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedIBCChannelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedIBCChannelsResponse.Merge(m, src)
}
func (m *QueryWhitelistedIBCChannelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedIBCChannelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedIBCChannelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedIBCChannelsResponse proto.InternalMessageInfo

func (m *QueryWhitelistedIBCChannelsResponse) GetChannels() []string {
	if m != nil {
		return m.Channels
	}
	return nil
}

type QueryChainNativePriceInfoRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryChainNativePriceInfoRequest) Reset()         { *m = QueryChainNativePriceInfoRequest{} }
func (m *QueryChainNativePriceInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainNativePriceInfoRequest) ProtoMessage()    {}
func (*QueryChainNativePriceInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{20}
}
func (m *QueryChainNativePriceInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainNativePriceInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainNativePriceInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainNativePriceInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainNativePriceInfoRequest.Merge(m, src)
}
func (m *QueryChainNativePriceInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainNativePriceInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainNativePriceInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainNativePriceInfoRequest proto.InternalMessageInfo

func (m *QueryChainNativePriceInfoRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryChainNativePriceInfoResponse struct {
	GasPrice GasPrice `protobuf:"bytes,1,opt,name=gasPrice,proto3" json:"gasPrice"`
	Price    Price    `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
}

func (m *QueryChainNativePriceInfoResponse) Reset()         { *m = QueryChainNativePriceInfoResponse{} }
func (m *QueryChainNativePriceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainNativePriceInfoResponse) ProtoMessage()    {}
func (*QueryChainNativePriceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8942472a2e077c4, []int{21}
}
func (m *QueryChainNativePriceInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainNativePriceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainNativePriceInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainNativePriceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainNativePriceInfoResponse.Merge(m, src)
}
func (m *QueryChainNativePriceInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainNativePriceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainNativePriceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainNativePriceInfoResponse proto.InternalMessageInfo

func (m *QueryChainNativePriceInfoResponse) GetGasPrice() GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return GasPrice{}
}

func (m *QueryChainNativePriceInfoResponse) GetPrice() Price {
	if m != nil {
		return m.Price
	}
	return Price{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryParamsResponse")
	proto.RegisterType((*QueryGetPriceRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryGetPriceRequest")
	proto.RegisterType((*QueryGetPriceResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryGetPriceResponse")
	proto.RegisterType((*QueryAllPriceRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryAllPriceRequest")
	proto.RegisterType((*QueryAllPriceResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryAllPriceResponse")
	proto.RegisterType((*QueryGetSymbolRequestRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryGetSymbolRequestRequest")
	proto.RegisterType((*QueryGetSymbolRequestResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryGetSymbolRequestResponse")
	proto.RegisterType((*QueryAllSymbolRequestRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryAllSymbolRequestRequest")
	proto.RegisterType((*QueryAllSymbolRequestResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryAllSymbolRequestResponse")
	proto.RegisterType((*QueryGetPriceFeederInfoRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryGetPriceFeederInfoRequest")
	proto.RegisterType((*QueryGetPriceFeederInfoResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryGetPriceFeederInfoResponse")
	proto.RegisterType((*QueryAllPriceFeederInfoRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryAllPriceFeederInfoRequest")
	proto.RegisterType((*QueryAllPriceFeederInfoResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryAllPriceFeederInfoResponse")
	proto.RegisterType((*QueryGetGasPriceRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryGetGasPriceRequest")
	proto.RegisterType((*QueryGetGasPriceResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryGetGasPriceResponse")
	proto.RegisterType((*QueryAllGasPriceRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryAllGasPriceRequest")
	proto.RegisterType((*QueryAllGasPriceResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryAllGasPriceResponse")
	proto.RegisterType((*QueryWhitelistedIBCChannelsRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryWhitelistedIBCChannelsRequest")
	proto.RegisterType((*QueryWhitelistedIBCChannelsResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryWhitelistedIBCChannelsResponse")
	proto.RegisterType((*QueryChainNativePriceInfoRequest)(nil), "routerprotocol.routerchain.pricefeed.QueryChainNativePriceInfoRequest")
	proto.RegisterType((*QueryChainNativePriceInfoResponse)(nil), "routerprotocol.routerchain.pricefeed.QueryChainNativePriceInfoResponse")
}

func init() {
	proto.RegisterFile("routerprotocol/routerchain/pricefeed/query.proto", fileDescriptor_d8942472a2e077c4)
}

var fileDescriptor_d8942472a2e077c4 = []byte{
	// 1092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xcf, 0x6f, 0xdc, 0x54,
	0x10, 0xc7, 0xf3, 0x92, 0x26, 0xa4, 0x53, 0x55, 0x45, 0x43, 0x28, 0x91, 0x55, 0xb6, 0xc5, 0x54,
	0x80, 0x80, 0xd8, 0x4d, 0xd3, 0x46, 0x5d, 0xf2, 0x03, 0x76, 0x37, 0x64, 0xbb, 0x20, 0xa1, 0x74,
	0x7b, 0x40, 0xe2, 0xc0, 0xe2, 0xdd, 0xbc, 0x78, 0x2d, 0x79, 0xed, 0xed, 0xda, 0x5b, 0x88, 0xa2,
	0x48, 0x88, 0x13, 0x47, 0x24, 0xfe, 0x0a, 0xfe, 0x80, 0x5e, 0x38, 0x20, 0x6e, 0x94, 0x0b, 0x2a,
	0xe2, 0x82, 0x84, 0x84, 0x68, 0xd2, 0x03, 0x77, 0x6e, 0x9c, 0x90, 0x9f, 0xc7, 0xbb, 0x6b, 0xef,
	0x8f, 0xd8, 0x6b, 0x73, 0x7b, 0xb6, 0xdf, 0xcc, 0x7c, 0x3f, 0x33, 0x63, 0xbf, 0x31, 0xdc, 0xe8,
	0xd8, 0x5d, 0x97, 0x77, 0xda, 0x1d, 0xdb, 0xb5, 0x1b, 0xb6, 0xa9, 0xfa, 0x97, 0x8d, 0xa6, 0x66,
	0x58, 0x6a, 0xbb, 0x63, 0x34, 0xf8, 0x01, 0xe7, 0xfb, 0xea, 0x83, 0x2e, 0xef, 0x1c, 0x2a, 0x62,
	0x13, 0x5e, 0x0f, 0x5b, 0x28, 0x03, 0x16, 0x4a, 0xcf, 0x42, 0x5a, 0xd2, 0x6d, 0xdd, 0x16, 0x7b,
	0x54, 0x6f, 0xe5, 0xdb, 0x4a, 0x57, 0x74, 0xdb, 0xd6, 0x4d, 0xae, 0x6a, 0x6d, 0x43, 0xd5, 0x2c,
	0xcb, 0x76, 0x35, 0xd7, 0xb0, 0x2d, 0x87, 0x9e, 0xbe, 0xd9, 0xb0, 0x9d, 0x96, 0xed, 0xa8, 0x75,
	0xcd, 0xe1, 0x7e, 0x48, 0xf5, 0xe1, 0x6a, 0x9d, 0xbb, 0xda, 0xaa, 0xda, 0xd6, 0x74, 0xc3, 0x12,
	0x9b, 0x69, 0xef, 0x6a, 0x2c, 0xdd, 0x6d, 0xad, 0xa3, 0xb5, 0x02, 0xf7, 0xf1, 0x50, 0xc5, 0x8a,
	0x2c, 0xf2, 0xb1, 0x2c, 0x9c, 0xc3, 0x56, 0xdd, 0x36, 0x6b, 0x1d, 0xfe, 0xa0, 0xcb, 0x1d, 0x97,
	0x4c, 0x37, 0xe3, 0x07, 0xab, 0x79, 0x4b, 0xde, 0xa9, 0x19, 0xd6, 0x41, 0x90, 0xa7, 0x5b, 0xb1,
	0xac, 0x75, 0xcd, 0xa9, 0x0d, 0xc8, 0x95, 0x97, 0x00, 0xef, 0x79, 0x59, 0xdb, 0x13, 0xd4, 0x55,
	0x5f, 0x8f, 0xac, 0xc1, 0x0b, 0xa1, 0xbb, 0x4e, 0xdb, 0xb6, 0x1c, 0x8e, 0x1f, 0xc0, 0x82, 0x9f,
	0x9d, 0x65, 0x76, 0x8d, 0xbd, 0x71, 0xe1, 0xe6, 0xdb, 0x4a, 0x9c, 0xba, 0x2a, 0xbe, 0x97, 0xe2,
	0xb9, 0xc7, 0x7f, 0x5e, 0x9d, 0xa9, 0x92, 0x07, 0x59, 0x81, 0x25, 0x11, 0xa2, 0xcc, 0xdd, 0x3d,
	0x6f, 0x27, 0x85, 0xc6, 0xcb, 0xb0, 0xe0, 0x27, 0x47, 0xc4, 0x38, 0x5f, 0xa5, 0x2b, 0xf9, 0x33,
	0x78, 0x31, 0xb2, 0x9f, 0x44, 0x95, 0x61, 0x5e, 0x84, 0x22, 0x4d, 0x6f, 0xc5, 0xd4, 0xe4, 0xad,
	0x48, 0x92, 0x6f, 0x2f, 0x7f, 0x4a, 0x8a, 0x0a, 0xa6, 0x19, 0x52, 0xb4, 0x0b, 0xd0, 0x6f, 0x25,
	0x8a, 0xf2, 0x9a, 0xe2, 0xf7, 0x9d, 0xe2, 0xf5, 0x9d, 0xe2, 0xb7, 0x3a, 0xf5, 0x9d, 0xb2, 0xa7,
	0xe9, 0x81, 0x6d, 0x75, 0xc0, 0x52, 0xfe, 0x8e, 0x11, 0x42, 0x3f, 0xc0, 0x30, 0xc2, 0x5c, 0x1a,
	0x04, 0x2c, 0x87, 0xa4, 0xce, 0x0a, 0xa9, 0xaf, 0x9f, 0x29, 0xd5, 0x57, 0x11, 0xd2, 0xba, 0x0e,
	0x57, 0x82, 0x6c, 0xdf, 0x17, 0xf9, 0x0f, 0x80, 0xce, 0xa8, 0xd2, 0x97, 0x0c, 0x5e, 0x1e, 0x63,
	0x48, 0xac, 0x35, 0xb8, 0xe8, 0x0c, 0x3e, 0xa0, 0x84, 0xae, 0xc5, 0x63, 0x0e, 0xf9, 0x24, 0xf6,
	0xb0, 0x3f, 0xf9, 0x80, 0xa4, 0x17, 0x4c, 0x73, 0xa4, 0xf4, 0xac, 0xca, 0xf9, 0x73, 0x80, 0x3a,
	0x1c, 0x68, 0x3c, 0xea, 0x5c, 0x96, 0xa8, 0xd9, 0x95, 0xfb, 0x16, 0xe4, 0x42, 0x2f, 0xd7, 0xae,
	0xf8, 0xba, 0x54, 0xac, 0x03, 0x3b, 0x08, 0x85, 0x70, 0xce, 0xd2, 0x5a, 0x9c, 0xca, 0x2d, 0xd6,
	0xf2, 0xd7, 0x0c, 0xae, 0x8e, 0x35, 0xa3, 0x1c, 0x70, 0xb8, 0xd4, 0x0e, 0x3f, 0xa2, 0x94, 0xdf,
	0x4e, 0xd0, 0xe4, 0x7d, 0x63, 0xca, 0x43, 0xd4, 0xa7, 0xdc, 0x24, 0x80, 0xe0, 0xd5, 0x1a, 0x06,
	0xc8, 0xaa, 0xec, 0xbf, 0x06, 0xd0, 0xa3, 0x42, 0x4d, 0x82, 0x9e, 0xcb, 0x1a, 0x3a, 0xbb, 0xf2,
	0xaf, 0xc1, 0x4b, 0x41, 0x1d, 0xcb, 0x9a, 0x13, 0xfa, 0xf8, 0x2d, 0xc3, 0x73, 0x42, 0x5d, 0x65,
	0x9f, 0x4a, 0x1f, 0x5c, 0xca, 0x26, 0x2c, 0x0f, 0x1b, 0x51, 0x02, 0xf6, 0x60, 0x51, 0xa7, 0x7b,
	0x94, 0x6a, 0x25, 0x1e, 0x79, 0xe0, 0x89, 0x90, 0x7b, 0x5e, 0x64, 0x8d, 0x24, 0x16, 0x4c, 0x33,
	0x2a, 0x31, 0xab, 0xca, 0x3e, 0x62, 0x44, 0x14, 0x8a, 0x31, 0x92, 0x68, 0x2e, 0x3d, 0x51, 0x76,
	0xd5, 0xbb, 0x0e, 0xb2, 0x90, 0xfd, 0x71, 0xd3, 0x70, 0xb9, 0x69, 0x38, 0x2e, 0xdf, 0xaf, 0x14,
	0x4b, 0xa5, 0xa6, 0x66, 0x59, 0xdc, 0xec, 0x1d, 0xe9, 0x05, 0x78, 0x75, 0xe2, 0x2e, 0xe2, 0x94,
	0x60, 0xb1, 0x41, 0xf7, 0x04, 0xe7, 0xf9, 0x6a, 0xef, 0x5a, 0xde, 0x84, 0x6b, 0xc2, 0x45, 0xc9,
	0x43, 0xfc, 0x48, 0x73, 0x8d, 0x87, 0x5c, 0xa0, 0x0c, 0xbe, 0x66, 0xe3, 0xfb, 0xe5, 0x07, 0x06,
	0xaf, 0x4c, 0x30, 0xff, 0xbf, 0x3a, 0xa7, 0x7f, 0xb8, 0xce, 0xa6, 0x9b, 0x0f, 0x6e, 0x3e, 0x45,
	0x98, 0x17, 0x00, 0xf8, 0x88, 0xc1, 0x82, 0x3f, 0xd4, 0xe0, 0x9d, 0x78, 0xee, 0x86, 0x67, 0x2c,
	0x29, 0x3f, 0x85, 0xa5, 0x9f, 0x24, 0x79, 0xfd, 0xab, 0xdf, 0x9e, 0x7d, 0x3b, 0x7b, 0x03, 0x15,
	0x1a, 0xf2, 0x56, 0x22, 0x43, 0xdf, 0xca, 0xe8, 0x99, 0x16, 0x7f, 0x64, 0x30, 0xef, 0x27, 0xe5,
	0x9d, 0x04, 0xc1, 0x23, 0x13, 0x9a, 0xb4, 0x31, 0x95, 0x2d, 0x49, 0xdf, 0x16, 0xd2, 0xef, 0xe0,
	0x7a, 0x6c, 0xe9, 0xde, 0x4a, 0x3d, 0xf2, 0x0f, 0xbe, 0x63, 0xfc, 0x9e, 0xc1, 0xa2, 0xf0, 0x58,
	0x30, 0xcd, 0x44, 0x14, 0x91, 0xa9, 0x2e, 0x11, 0x45, 0x74, 0x60, 0x93, 0x6f, 0x0b, 0x0a, 0x15,
	0x57, 0x12, 0x51, 0xe0, 0x53, 0x06, 0x17, 0x43, 0xc7, 0x3a, 0x16, 0x93, 0xe5, 0x72, 0xd4, 0x40,
	0x23, 0x95, 0x52, 0xf9, 0x20, 0xa2, 0xb2, 0x20, 0x2a, 0xe0, 0xbb, 0x71, 0x89, 0xc2, 0x7f, 0x30,
	0xfd, 0x02, 0xfd, 0xc1, 0xe0, 0xf9, 0x50, 0x08, 0xaf, 0x50, 0xc5, 0x64, 0xc9, 0x4e, 0x8d, 0x39,
	0x6e, 0x24, 0x4b, 0xde, 0x7e, 0x61, 0x4c, 0xfc, 0x9b, 0xc1, 0xa5, 0xc8, 0xe9, 0x8c, 0x3b, 0x53,
	0xbc, 0x0f, 0x43, 0xf3, 0x89, 0xf4, 0x7e, 0x4a, 0x2f, 0x04, 0x78, 0x57, 0x00, 0x16, 0xf1, 0xbd,
	0x44, 0x9d, 0x39, 0xf8, 0x3b, 0xa9, 0x1e, 0x79, 0xc3, 0xdd, 0x31, 0x3e, 0x63, 0x80, 0x91, 0x28,
	0x5e, 0x29, 0x77, 0xa6, 0x78, 0x6f, 0xd2, 0xd1, 0x8e, 0x1f, 0xb4, 0xe4, 0x82, 0xa0, 0xdd, 0xc0,
	0xfc, 0xd4, 0xb4, 0xf8, 0x0b, 0x83, 0xc5, 0xe0, 0xec, 0xc0, 0xad, 0x64, 0x45, 0x88, 0x4c, 0x22,
	0xd2, 0xf6, 0xb4, 0xe6, 0x84, 0x53, 0x12, 0x38, 0x5b, 0xb8, 0x11, 0x17, 0xa7, 0xf7, 0x37, 0xaf,
	0x1e, 0xd1, 0x31, 0x7b, 0x8c, 0x3f, 0x31, 0xb8, 0x10, 0x78, 0xf6, 0x0a, 0xb6, 0x95, 0x2c, 0xd5,
	0x69, 0x98, 0x46, 0x0c, 0x4e, 0x72, 0x5e, 0x30, 0xad, 0xe1, 0x6a, 0x62, 0x26, 0xfc, 0x87, 0xc1,
	0xe5, 0xd1, 0xe3, 0x0a, 0xde, 0x4d, 0xa0, 0x6a, 0xe2, 0x5c, 0x24, 0x55, 0x32, 0xf0, 0x44, 0xa8,
	0x3b, 0x02, 0x75, 0x1b, 0x37, 0xe3, 0xa2, 0x7e, 0xde, 0xf7, 0x57, 0x0b, 0xa6, 0x2c, 0xfc, 0x97,
	0xc1, 0xd2, 0xa8, 0x11, 0x09, 0x77, 0x13, 0x28, 0x9d, 0x30, 0xa2, 0x49, 0xe5, 0xd4, 0x7e, 0x88,
	0xf7, 0x9e, 0xe0, 0xfd, 0x10, 0x2b, 0x71, 0x79, 0xc5, 0x75, 0xcd, 0x12, 0xee, 0xfc, 0x1a, 0xd3,
	0x17, 0x27, 0x68, 0xde, 0xe2, 0xfd, 0xc7, 0x27, 0x39, 0xf6, 0xe4, 0x24, 0xc7, 0xfe, 0x3a, 0xc9,
	0xb1, 0x6f, 0x4e, 0x73, 0x33, 0x4f, 0x4e, 0x73, 0x33, 0xbf, 0x9f, 0xe6, 0x66, 0x3e, 0xc9, 0xeb,
	0x86, 0xdb, 0xec, 0xd6, 0x95, 0x86, 0xdd, 0x9a, 0x1c, 0xee, 0x8b, 0x81, 0x80, 0xee, 0x61, 0x9b,
	0x3b, 0xf5, 0x05, 0xb1, 0x71, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x7e, 0x33, 0x79,
	0xb8, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Price items.
	Price(ctx context.Context, in *QueryGetPriceRequest, opts ...grpc.CallOption) (*QueryGetPriceResponse, error)
	PriceAll(ctx context.Context, in *QueryAllPriceRequest, opts ...grpc.CallOption) (*QueryAllPriceResponse, error)
	// Queries a list of SymbolRequest items.
	SymbolRequest(ctx context.Context, in *QueryGetSymbolRequestRequest, opts ...grpc.CallOption) (*QueryGetSymbolRequestResponse, error)
	SymbolRequestAll(ctx context.Context, in *QueryAllSymbolRequestRequest, opts ...grpc.CallOption) (*QueryAllSymbolRequestResponse, error)
	// Queries a list of PriceFeederInfo items.
	PriceFeederInfo(ctx context.Context, in *QueryGetPriceFeederInfoRequest, opts ...grpc.CallOption) (*QueryGetPriceFeederInfoResponse, error)
	PriceFeederInfoAll(ctx context.Context, in *QueryAllPriceFeederInfoRequest, opts ...grpc.CallOption) (*QueryAllPriceFeederInfoResponse, error)
	// Queries a list of GasPrice items.
	GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error)
	GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error)
	WhitelistedIBCChannels(ctx context.Context, in *QueryWhitelistedIBCChannelsRequest, opts ...grpc.CallOption) (*QueryWhitelistedIBCChannelsResponse, error)
	// Queries a list of ChainNativePriceInfo items.
	ChainNativePriceInfo(ctx context.Context, in *QueryChainNativePriceInfoRequest, opts ...grpc.CallOption) (*QueryChainNativePriceInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Price(ctx context.Context, in *QueryGetPriceRequest, opts ...grpc.CallOption) (*QueryGetPriceResponse, error) {
	out := new(QueryGetPriceResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/Price", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceAll(ctx context.Context, in *QueryAllPriceRequest, opts ...grpc.CallOption) (*QueryAllPriceResponse, error) {
	out := new(QueryAllPriceResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/PriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SymbolRequest(ctx context.Context, in *QueryGetSymbolRequestRequest, opts ...grpc.CallOption) (*QueryGetSymbolRequestResponse, error) {
	out := new(QueryGetSymbolRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/SymbolRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SymbolRequestAll(ctx context.Context, in *QueryAllSymbolRequestRequest, opts ...grpc.CallOption) (*QueryAllSymbolRequestResponse, error) {
	out := new(QueryAllSymbolRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/SymbolRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceFeederInfo(ctx context.Context, in *QueryGetPriceFeederInfoRequest, opts ...grpc.CallOption) (*QueryGetPriceFeederInfoResponse, error) {
	out := new(QueryGetPriceFeederInfoResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/PriceFeederInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceFeederInfoAll(ctx context.Context, in *QueryAllPriceFeederInfoRequest, opts ...grpc.CallOption) (*QueryAllPriceFeederInfoResponse, error) {
	out := new(QueryAllPriceFeederInfoResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/PriceFeederInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error) {
	out := new(QueryGetGasPriceResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error) {
	out := new(QueryAllGasPriceResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/GasPriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhitelistedIBCChannels(ctx context.Context, in *QueryWhitelistedIBCChannelsRequest, opts ...grpc.CallOption) (*QueryWhitelistedIBCChannelsResponse, error) {
	out := new(QueryWhitelistedIBCChannelsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/WhitelistedIBCChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNativePriceInfo(ctx context.Context, in *QueryChainNativePriceInfoRequest, opts ...grpc.CallOption) (*QueryChainNativePriceInfoResponse, error) {
	out := new(QueryChainNativePriceInfoResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.pricefeed.Query/ChainNativePriceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Price items.
	Price(context.Context, *QueryGetPriceRequest) (*QueryGetPriceResponse, error)
	PriceAll(context.Context, *QueryAllPriceRequest) (*QueryAllPriceResponse, error)
	// Queries a list of SymbolRequest items.
	SymbolRequest(context.Context, *QueryGetSymbolRequestRequest) (*QueryGetSymbolRequestResponse, error)
	SymbolRequestAll(context.Context, *QueryAllSymbolRequestRequest) (*QueryAllSymbolRequestResponse, error)
	// Queries a list of PriceFeederInfo items.
	PriceFeederInfo(context.Context, *QueryGetPriceFeederInfoRequest) (*QueryGetPriceFeederInfoResponse, error)
	PriceFeederInfoAll(context.Context, *QueryAllPriceFeederInfoRequest) (*QueryAllPriceFeederInfoResponse, error)
	// Queries a list of GasPrice items.
	GasPrice(context.Context, *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error)
	GasPriceAll(context.Context, *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error)
	WhitelistedIBCChannels(context.Context, *QueryWhitelistedIBCChannelsRequest) (*QueryWhitelistedIBCChannelsResponse, error)
	// Queries a list of ChainNativePriceInfo items.
	ChainNativePriceInfo(context.Context, *QueryChainNativePriceInfoRequest) (*QueryChainNativePriceInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Price(ctx context.Context, req *QueryGetPriceRequest) (*QueryGetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (*UnimplementedQueryServer) PriceAll(ctx context.Context, req *QueryAllPriceRequest) (*QueryAllPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceAll not implemented")
}
func (*UnimplementedQueryServer) SymbolRequest(ctx context.Context, req *QueryGetSymbolRequestRequest) (*QueryGetSymbolRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolRequest not implemented")
}
func (*UnimplementedQueryServer) SymbolRequestAll(ctx context.Context, req *QueryAllSymbolRequestRequest) (*QueryAllSymbolRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SymbolRequestAll not implemented")
}
func (*UnimplementedQueryServer) PriceFeederInfo(ctx context.Context, req *QueryGetPriceFeederInfoRequest) (*QueryGetPriceFeederInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceFeederInfo not implemented")
}
func (*UnimplementedQueryServer) PriceFeederInfoAll(ctx context.Context, req *QueryAllPriceFeederInfoRequest) (*QueryAllPriceFeederInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceFeederInfoAll not implemented")
}
func (*UnimplementedQueryServer) GasPrice(ctx context.Context, req *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedQueryServer) GasPriceAll(ctx context.Context, req *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceAll not implemented")
}
func (*UnimplementedQueryServer) WhitelistedIBCChannels(ctx context.Context, req *QueryWhitelistedIBCChannelsRequest) (*QueryWhitelistedIBCChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistedIBCChannels not implemented")
}
func (*UnimplementedQueryServer) ChainNativePriceInfo(ctx context.Context, req *QueryChainNativePriceInfoRequest) (*QueryChainNativePriceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNativePriceInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/Price",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Price(ctx, req.(*QueryGetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/PriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceAll(ctx, req.(*QueryAllPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SymbolRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSymbolRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SymbolRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/SymbolRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SymbolRequest(ctx, req.(*QueryGetSymbolRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SymbolRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSymbolRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SymbolRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/SymbolRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SymbolRequestAll(ctx, req.(*QueryAllSymbolRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceFeederInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceFeederInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceFeederInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/PriceFeederInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceFeederInfo(ctx, req.(*QueryGetPriceFeederInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceFeederInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPriceFeederInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceFeederInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/PriceFeederInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceFeederInfoAll(ctx, req.(*QueryAllPriceFeederInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPrice(ctx, req.(*QueryGetGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/GasPriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPriceAll(ctx, req.(*QueryAllGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhitelistedIBCChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistedIBCChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhitelistedIBCChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/WhitelistedIBCChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhitelistedIBCChannels(ctx, req.(*QueryWhitelistedIBCChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNativePriceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainNativePriceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNativePriceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.pricefeed.Query/ChainNativePriceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNativePriceInfo(ctx, req.(*QueryChainNativePriceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.pricefeed.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _Query_Price_Handler,
		},
		{
			MethodName: "PriceAll",
			Handler:    _Query_PriceAll_Handler,
		},
		{
			MethodName: "SymbolRequest",
			Handler:    _Query_SymbolRequest_Handler,
		},
		{
			MethodName: "SymbolRequestAll",
			Handler:    _Query_SymbolRequestAll_Handler,
		},
		{
			MethodName: "PriceFeederInfo",
			Handler:    _Query_PriceFeederInfo_Handler,
		},
		{
			MethodName: "PriceFeederInfoAll",
			Handler:    _Query_PriceFeederInfoAll_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _Query_GasPrice_Handler,
		},
		{
			MethodName: "GasPriceAll",
			Handler:    _Query_GasPriceAll_Handler,
		},
		{
			MethodName: "WhitelistedIBCChannels",
			Handler:    _Query_WhitelistedIBCChannels_Handler,
		},
		{
			MethodName: "ChainNativePriceInfo",
			Handler:    _Query_ChainNativePriceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerprotocol/routerchain/pricefeed/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSymbolRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSymbolRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSymbolRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSymbolRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSymbolRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSymbolRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SymbolRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSymbolRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSymbolRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSymbolRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSymbolRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSymbolRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSymbolRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SymbolRequest) > 0 {
		for iNdEx := len(m.SymbolRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SymbolRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceFeederInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceFeederInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceFeederInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceFeederInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceFeederInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceFeederInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PriceFeederInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceFeederInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceFeederInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceFeederInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceFeederInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceFeederInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceFeederInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PriceFeederInfo) > 0 {
		for iNdEx := len(m.PriceFeederInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceFeederInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasPrice) > 0 {
		for iNdEx := len(m.GasPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedIBCChannelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedIBCChannelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedIBCChannelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedIBCChannelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedIBCChannelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedIBCChannelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Channels[iNdEx])
			copy(dAtA[i:], m.Channels[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Channels[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainNativePriceInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainNativePriceInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainNativePriceInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainNativePriceInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainNativePriceInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainNativePriceInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSymbolRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSymbolRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SymbolRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSymbolRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSymbolRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SymbolRequest) > 0 {
		for _, e := range m.SymbolRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceFeederInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceFeederInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PriceFeederInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPriceFeederInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPriceFeederInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceFeederInfo) > 0 {
		for _, e := range m.PriceFeederInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasPrice) > 0 {
		for _, e := range m.GasPrice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWhitelistedIBCChannelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWhitelistedIBCChannelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, s := range m.Channels {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryChainNativePriceInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainNativePriceInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, Price{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSymbolRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSymbolRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSymbolRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSymbolRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSymbolRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSymbolRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SymbolRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSymbolRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSymbolRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSymbolRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSymbolRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSymbolRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSymbolRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymbolRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymbolRequest = append(m.SymbolRequest, SymbolRequest{})
			if err := m.SymbolRequest[len(m.SymbolRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceFeederInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceFeederInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceFeederInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceFeederInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceFeederInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceFeederInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFeederInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceFeederInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceFeederInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceFeederInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceFeederInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceFeederInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceFeederInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceFeederInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFeederInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceFeederInfo = append(m.PriceFeederInfo, PriceFeederInfo{})
			if err := m.PriceFeederInfo[len(m.PriceFeederInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = append(m.GasPrice, GasPrice{})
			if err := m.GasPrice[len(m.GasPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedIBCChannelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedIBCChannelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedIBCChannelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedIBCChannelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedIBCChannelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedIBCChannelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainNativePriceInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainNativePriceInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainNativePriceInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainNativePriceInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainNativePriceInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainNativePriceInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
