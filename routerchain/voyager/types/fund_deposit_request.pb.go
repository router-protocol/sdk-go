// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerprotocol/routerchain/voyager/fund_deposit_request.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FundDepositRequest struct {
	SrcChainId         string                   `protobuf:"bytes,1,opt,name=srcChainId,proto3" json:"srcChainId,omitempty"`
	SrcChainType       types.ChainType          `protobuf:"varint,2,opt,name=srcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"srcChainType,omitempty"`
	SrcTxHash          string                   `protobuf:"bytes,3,opt,name=srcTxHash,proto3" json:"srcTxHash,omitempty"`
	SrcTimestamp       uint64                   `protobuf:"varint,4,opt,name=srcTimestamp,proto3" json:"srcTimestamp,omitempty"`
	Contract           string                   `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	DepositId          uint64                   `protobuf:"varint,6,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	BlockHeight        uint64                   `protobuf:"varint,7,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestChainId        []byte                   `protobuf:"bytes,8,opt,name=destChainId,proto3" json:"destChainId,omitempty"`
	Amount             cosmossdk_io_math.Int    `protobuf:"bytes,9,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	DestAmount         cosmossdk_io_math.Int    `protobuf:"bytes,10,opt,name=destAmount,proto3,customtype=cosmossdk.io/math.Int" json:"destAmount"`
	SrcToken           string                   `protobuf:"bytes,11,opt,name=srcToken,proto3" json:"srcToken,omitempty"`
	Recipient          []byte                   `protobuf:"bytes,12,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Depositor          string                   `protobuf:"bytes,13,opt,name=depositor,proto3" json:"depositor,omitempty"`
	PartnerId          cosmossdk_io_math.Int    `protobuf:"bytes,14,opt,name=partner_id,json=partnerId,proto3,customtype=cosmossdk.io/math.Int" json:"partner_id"`
	Message            []byte                   `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
	Status             VoyagerFundDepositStatus `protobuf:"varint,16,opt,name=status,proto3,enum=routerprotocol.routerchain.voyager.VoyagerFundDepositStatus" json:"status,omitempty"`
	DepositWithMessage bool                     `protobuf:"varint,17,opt,name=deposit_with_message,json=depositWithMessage,proto3" json:"deposit_with_message,omitempty"`
	DestToken          []byte                   `protobuf:"bytes,18,opt,name=destToken,proto3" json:"destToken,omitempty"`
}

func (m *FundDepositRequest) Reset()         { *m = FundDepositRequest{} }
func (m *FundDepositRequest) String() string { return proto.CompactTextString(m) }
func (*FundDepositRequest) ProtoMessage()    {}
func (*FundDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85fffce34d3ee5b6, []int{0}
}
func (m *FundDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundDepositRequest.Merge(m, src)
}
func (m *FundDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *FundDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FundDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FundDepositRequest proto.InternalMessageInfo

func (m *FundDepositRequest) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *FundDepositRequest) GetSrcChainType() types.ChainType {
	if m != nil {
		return m.SrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *FundDepositRequest) GetSrcTxHash() string {
	if m != nil {
		return m.SrcTxHash
	}
	return ""
}

func (m *FundDepositRequest) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *FundDepositRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *FundDepositRequest) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

func (m *FundDepositRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *FundDepositRequest) GetDestChainId() []byte {
	if m != nil {
		return m.DestChainId
	}
	return nil
}

func (m *FundDepositRequest) GetSrcToken() string {
	if m != nil {
		return m.SrcToken
	}
	return ""
}

func (m *FundDepositRequest) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *FundDepositRequest) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *FundDepositRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *FundDepositRequest) GetStatus() VoyagerFundDepositStatus {
	if m != nil {
		return m.Status
	}
	return VOYAGER_FUND_DEPOSIT_REQUEST_CREATED
}

func (m *FundDepositRequest) GetDepositWithMessage() bool {
	if m != nil {
		return m.DepositWithMessage
	}
	return false
}

func (m *FundDepositRequest) GetDestToken() []byte {
	if m != nil {
		return m.DestToken
	}
	return nil
}

type FundDepositRequestClaimHash struct {
	SrcChainId         string                `protobuf:"bytes,1,opt,name=srcChainId,proto3" json:"srcChainId,omitempty"`
	SrcChainType       types.ChainType       `protobuf:"varint,2,opt,name=srcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"srcChainType,omitempty"`
	SrcTxHash          string                `protobuf:"bytes,3,opt,name=srcTxHash,proto3" json:"srcTxHash,omitempty"`
	SrcTimestamp       uint64                `protobuf:"varint,4,opt,name=srcTimestamp,proto3" json:"srcTimestamp,omitempty"`
	Contract           string                `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	DepositId          uint64                `protobuf:"varint,6,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	BlockHeight        uint64                `protobuf:"varint,7,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestChainId        []byte                `protobuf:"bytes,8,opt,name=destChainId,proto3" json:"destChainId,omitempty"`
	Amount             cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	DestAmount         cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=destAmount,proto3,customtype=cosmossdk.io/math.Int" json:"destAmount"`
	SrcToken           string                `protobuf:"bytes,11,opt,name=srcToken,proto3" json:"srcToken,omitempty"`
	Recipient          []byte                `protobuf:"bytes,12,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Depositor          string                `protobuf:"bytes,13,opt,name=depositor,proto3" json:"depositor,omitempty"`
	Message            []byte                `protobuf:"bytes,14,opt,name=message,proto3" json:"message,omitempty"`
	PartnerId          cosmossdk_io_math.Int `protobuf:"bytes,15,opt,name=partner_id,json=partnerId,proto3,customtype=cosmossdk.io/math.Int" json:"partner_id"`
	DepositWithMessage bool                  `protobuf:"varint,16,opt,name=deposit_with_message,json=depositWithMessage,proto3" json:"deposit_with_message,omitempty"`
	DestToken          []byte                `protobuf:"bytes,18,opt,name=destToken,proto3" json:"destToken,omitempty"`
}

func (m *FundDepositRequestClaimHash) Reset()         { *m = FundDepositRequestClaimHash{} }
func (m *FundDepositRequestClaimHash) String() string { return proto.CompactTextString(m) }
func (*FundDepositRequestClaimHash) ProtoMessage()    {}
func (*FundDepositRequestClaimHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_85fffce34d3ee5b6, []int{1}
}
func (m *FundDepositRequestClaimHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundDepositRequestClaimHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundDepositRequestClaimHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundDepositRequestClaimHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundDepositRequestClaimHash.Merge(m, src)
}
func (m *FundDepositRequestClaimHash) XXX_Size() int {
	return m.Size()
}
func (m *FundDepositRequestClaimHash) XXX_DiscardUnknown() {
	xxx_messageInfo_FundDepositRequestClaimHash.DiscardUnknown(m)
}

var xxx_messageInfo_FundDepositRequestClaimHash proto.InternalMessageInfo

func (m *FundDepositRequestClaimHash) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetSrcChainType() types.ChainType {
	if m != nil {
		return m.SrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *FundDepositRequestClaimHash) GetSrcTxHash() string {
	if m != nil {
		return m.SrcTxHash
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetDestChainId() []byte {
	if m != nil {
		return m.DestChainId
	}
	return nil
}

func (m *FundDepositRequestClaimHash) GetSrcToken() string {
	if m != nil {
		return m.SrcToken
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *FundDepositRequestClaimHash) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *FundDepositRequestClaimHash) GetDepositWithMessage() bool {
	if m != nil {
		return m.DepositWithMessage
	}
	return false
}

func (m *FundDepositRequestClaimHash) GetDestToken() []byte {
	if m != nil {
		return m.DestToken
	}
	return nil
}

func init() {
	proto.RegisterType((*FundDepositRequest)(nil), "routerprotocol.routerchain.voyager.FundDepositRequest")
	proto.RegisterType((*FundDepositRequestClaimHash)(nil), "routerprotocol.routerchain.voyager.FundDepositRequestClaimHash")
}

func init() {
	proto.RegisterFile("routerprotocol/routerchain/voyager/fund_deposit_request.proto", fileDescriptor_85fffce34d3ee5b6)
}

var fileDescriptor_85fffce34d3ee5b6 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0xde, 0x2a, 0x2c, 0xec, 0x80, 0x80, 0x13, 0x4c, 0x26, 0x28, 0x65, 0xb3, 0xa7, 0xbd, 0xd0,
	0x82, 0x46, 0xbd, 0xc0, 0x41, 0x20, 0x86, 0x3d, 0x78, 0xb0, 0x6e, 0x34, 0xf1, 0xb2, 0x99, 0x6d,
	0xc7, 0xed, 0x84, 0x6d, 0xa7, 0xce, 0xbc, 0x22, 0xfc, 0x0b, 0x6f, 0xfe, 0x25, 0xe2, 0x89, 0xa3,
	0xf1, 0x40, 0x0c, 0xfc, 0x11, 0xd3, 0x99, 0xe9, 0xd2, 0x6a, 0xc4, 0xd5, 0x33, 0x97, 0xdd, 0x79,
	0xdf, 0x9b, 0xef, 0xbd, 0x79, 0x5f, 0xdf, 0xcb, 0x43, 0xbb, 0x52, 0xe4, 0xc0, 0x64, 0x26, 0x05,
	0x88, 0x50, 0x8c, 0x7d, 0x63, 0x86, 0x31, 0xe5, 0xa9, 0x7f, 0x2c, 0x4e, 0xe9, 0x88, 0x49, 0xff,
	0x43, 0x9e, 0x46, 0x83, 0x88, 0x65, 0x42, 0x71, 0x18, 0x48, 0xf6, 0x31, 0x67, 0x0a, 0x3c, 0xcd,
	0xc0, 0x9d, 0x3a, 0xdd, 0xab, 0xd0, 0x3d, 0x4b, 0x5f, 0x7b, 0x76, 0x43, 0x8a, 0x24, 0x1f, 0x03,
	0x37, 0x47, 0xfd, 0x3b, 0x80, 0xd3, 0x8c, 0x99, 0xd8, 0x6b, 0x6e, 0x28, 0x54, 0x22, 0x94, 0x3f,
	0xa4, 0x8a, 0xf9, 0xc7, 0xdb, 0x43, 0x06, 0x74, 0xdb, 0x0f, 0x05, 0x4f, 0xad, 0x7f, 0x75, 0x24,
	0x46, 0x42, 0x1f, 0xfd, 0xe2, 0x64, 0xd1, 0x83, 0x29, 0x0a, 0xb2, 0xff, 0x83, 0x5a, 0x61, 0x0a,
	0x28, 0xe4, 0xca, 0x44, 0xe9, 0x7c, 0x69, 0x22, 0xfc, 0x32, 0x4f, 0xa3, 0x03, 0xe3, 0x0c, 0x4c,
	0xd1, 0xd8, 0x45, 0x48, 0xc9, 0x70, 0xbf, 0x08, 0xd6, 0x8b, 0x88, 0xd3, 0x76, 0xba, 0xad, 0xa0,
	0x82, 0xe0, 0x3e, 0x5a, 0x2c, 0xad, 0xfe, 0x69, 0xc6, 0xc8, 0x9d, 0xb6, 0xd3, 0x5d, 0x7a, 0xbc,
	0xe5, 0xdd, 0xa0, 0xd2, 0xb5, 0x02, 0xde, 0x84, 0x17, 0xd4, 0xa2, 0xe0, 0x47, 0xa8, 0xa5, 0x64,
	0xd8, 0x3f, 0x39, 0xa4, 0x2a, 0x26, 0x77, 0x75, 0xd2, 0x6b, 0x00, 0x77, 0x74, 0xce, 0x3e, 0x4f,
	0x98, 0x02, 0x9a, 0x64, 0x64, 0xa6, 0xed, 0x74, 0x67, 0x82, 0x1a, 0x86, 0xd7, 0xd0, 0x7c, 0x28,
	0x52, 0x90, 0x34, 0x04, 0x32, 0xab, 0x03, 0x4c, 0x6c, 0xbc, 0x8e, 0x50, 0x29, 0x01, 0x8f, 0x48,
	0x53, 0xb3, 0x5b, 0x16, 0xe9, 0x45, 0xb8, 0x8d, 0x16, 0x86, 0x63, 0x11, 0x1e, 0x1d, 0x32, 0x3e,
	0x8a, 0x81, 0xcc, 0x69, 0x7f, 0x15, 0x2a, 0x6e, 0x44, 0x4c, 0x41, 0xa9, 0xca, 0x7c, 0xdb, 0xe9,
	0x2e, 0x06, 0x55, 0x08, 0x3f, 0x45, 0x4d, 0x9a, 0x88, 0x3c, 0x05, 0xd2, 0x2a, 0x92, 0xef, 0xad,
	0x9f, 0x5d, 0x6c, 0x34, 0xbe, 0x5f, 0x6c, 0x3c, 0x30, 0x5f, 0x58, 0x45, 0x47, 0x1e, 0x17, 0x7e,
	0x42, 0x21, 0xf6, 0x7a, 0x29, 0x04, 0xf6, 0x32, 0xde, 0x2d, 0x5e, 0xa6, 0xe0, 0x85, 0xa1, 0xa2,
	0x69, 0xa8, 0x15, 0x42, 0x51, 0x74, 0x21, 0x82, 0x38, 0x62, 0x29, 0x59, 0x30, 0x45, 0x97, 0x76,
	0x21, 0xa9, 0x64, 0x21, 0xcf, 0x38, 0x4b, 0x81, 0x2c, 0xea, 0x17, 0x5f, 0x03, 0x85, 0xd7, 0x0a,
	0x20, 0x24, 0xb9, 0x67, 0x04, 0x9f, 0x00, 0x78, 0x07, 0xa1, 0x8c, 0x4a, 0x48, 0x99, 0x2c, 0x04,
	0x5b, 0x9a, 0xe6, 0x59, 0x2d, 0x4b, 0xe8, 0x45, 0x98, 0xa0, 0xb9, 0x84, 0x29, 0x45, 0x47, 0x8c,
	0x2c, 0xeb, 0xbc, 0xa5, 0x89, 0xfb, 0xa8, 0x69, 0x7a, 0x90, 0xac, 0xe8, 0xb6, 0xd9, 0xf1, 0xfe,
	0x3e, 0x5c, 0xde, 0x5b, 0xf3, 0x5f, 0xe9, 0xd5, 0x37, 0x3a, 0x46, 0x60, 0x63, 0xe1, 0x2d, 0xb4,
	0x5a, 0x7e, 0xde, 0x4f, 0x1c, 0xe2, 0x41, 0x99, 0xfc, 0x7e, 0xdb, 0xe9, 0xce, 0x07, 0xd8, 0xfa,
	0xde, 0x71, 0x88, 0x5f, 0xd9, 0x77, 0xe8, 0xea, 0x15, 0x18, 0xe1, 0xb0, 0xd1, 0x66, 0x02, 0x74,
	0xbe, 0xce, 0xa2, 0x87, 0xbf, 0x4f, 0xc6, 0xfe, 0x98, 0xf2, 0x44, 0xb7, 0xe3, 0xed, 0x88, 0xdc,
	0x8e, 0x48, 0xb5, 0xc9, 0x97, 0xea, 0x4d, 0x5e, 0x1f, 0x9e, 0xe5, 0x7f, 0x1c, 0x9e, 0x3f, 0x35,
	0xf3, 0xca, 0xff, 0x35, 0xf3, 0xde, 0xeb, 0xb3, 0x4b, 0xd7, 0x39, 0xbf, 0x74, 0x9d, 0x1f, 0x97,
	0xae, 0xf3, 0xf9, 0xca, 0x6d, 0x9c, 0x5f, 0xb9, 0x8d, 0x6f, 0x57, 0x6e, 0xe3, 0xfd, 0xf3, 0x11,
	0x87, 0x38, 0x1f, 0x7a, 0xa1, 0x48, 0xec, 0x0a, 0xd9, 0xfc, 0x65, 0xa5, 0x6c, 0x9a, 0x9d, 0x72,
	0x32, 0xd9, 0x2a, 0xc5, 0xea, 0x52, 0xc3, 0xa6, 0xbe, 0xf6, 0xe4, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe6, 0xb3, 0x26, 0xba, 0x59, 0x07, 0x00, 0x00,
}

func (m *FundDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestToken) > 0 {
		i -= len(m.DestToken)
		copy(dAtA[i:], m.DestToken)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.DestToken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DepositWithMessage {
		i--
		if m.DepositWithMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Status != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x7a
	}
	{
		size := m.PartnerId.Size()
		i -= size
		if _, err := m.PartnerId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SrcToken) > 0 {
		i -= len(m.SrcToken)
		copy(dAtA[i:], m.SrcToken)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcToken)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.DestAmount.Size()
		i -= size
		if _, err := m.DestAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.BlockHeight != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.DepositId != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SrcTxHash) > 0 {
		i -= len(m.SrcTxHash)
		copy(dAtA[i:], m.SrcTxHash)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SrcChainType != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundDepositRequestClaimHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundDepositRequestClaimHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundDepositRequestClaimHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestToken) > 0 {
		i -= len(m.DestToken)
		copy(dAtA[i:], m.DestToken)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.DestToken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.DepositWithMessage {
		i--
		if m.DepositWithMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size := m.PartnerId.Size()
		i -= size
		if _, err := m.PartnerId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SrcToken) > 0 {
		i -= len(m.SrcToken)
		copy(dAtA[i:], m.SrcToken)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcToken)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.DestAmount.Size()
		i -= size
		if _, err := m.DestAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.BlockHeight != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.DepositId != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SrcTxHash) > 0 {
		i -= len(m.SrcTxHash)
		copy(dAtA[i:], m.SrcTxHash)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SrcChainType != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFundDepositRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovFundDepositRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FundDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcChainType != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcChainType))
	}
	l = len(m.SrcTxHash)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcTimestamp))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.DepositId != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.DepositId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.BlockHeight))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovFundDepositRequest(uint64(l))
	l = m.DestAmount.Size()
	n += 1 + l + sovFundDepositRequest(uint64(l))
	l = len(m.SrcToken)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = m.PartnerId.Size()
	n += 1 + l + sovFundDepositRequest(uint64(l))
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovFundDepositRequest(uint64(m.Status))
	}
	if m.DepositWithMessage {
		n += 3
	}
	l = len(m.DestToken)
	if l > 0 {
		n += 2 + l + sovFundDepositRequest(uint64(l))
	}
	return n
}

func (m *FundDepositRequestClaimHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcChainType != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcChainType))
	}
	l = len(m.SrcTxHash)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcTimestamp))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.DepositId != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.DepositId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.BlockHeight))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovFundDepositRequest(uint64(l))
	l = m.DestAmount.Size()
	n += 1 + l + sovFundDepositRequest(uint64(l))
	l = len(m.SrcToken)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = m.PartnerId.Size()
	n += 1 + l + sovFundDepositRequest(uint64(l))
	if m.DepositWithMessage {
		n += 3
	}
	l = len(m.DestToken)
	if l > 0 {
		n += 2 + l + sovFundDepositRequest(uint64(l))
	}
	return n
}

func sovFundDepositRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFundDepositRequest(x uint64) (n int) {
	return sovFundDepositRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FundDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundDepositRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainType", wireType)
			}
			m.SrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = append(m.DestChainId[:0], dAtA[iNdEx:postIndex]...)
			if m.DestChainId == nil {
				m.DestChainId = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartnerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VoyagerFundDepositStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositWithMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositWithMessage = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestToken = append(m.DestToken[:0], dAtA[iNdEx:postIndex]...)
			if m.DestToken == nil {
				m.DestToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundDepositRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundDepositRequestClaimHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundDepositRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundDepositRequestClaimHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundDepositRequestClaimHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainType", wireType)
			}
			m.SrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = append(m.DestChainId[:0], dAtA[iNdEx:postIndex]...)
			if m.DestChainId == nil {
				m.DestChainId = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PartnerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositWithMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositWithMessage = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestToken = append(m.DestToken[:0], dAtA[iNdEx:postIndex]...)
			if m.DestToken == nil {
				m.DestToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundDepositRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFundDepositRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFundDepositRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFundDepositRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFundDepositRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFundDepositRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFundDepositRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFundDepositRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFundDepositRequest = fmt.Errorf("proto: unexpected end of group")
)
