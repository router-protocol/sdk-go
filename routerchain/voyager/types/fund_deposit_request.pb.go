// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/voyager/fund_deposit_request.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FundDepositRequest struct {
	SrcChainId    string          `protobuf:"bytes,1,opt,name=srcChainId,proto3" json:"srcChainId,omitempty"`
	SrcChainType  types.ChainType `protobuf:"varint,2,opt,name=srcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"srcChainType,omitempty"`
	SrcTxHash     string          `protobuf:"bytes,3,opt,name=srcTxHash,proto3" json:"srcTxHash,omitempty"`
	SrcTimestamp  uint64          `protobuf:"varint,4,opt,name=srcTimestamp,proto3" json:"srcTimestamp,omitempty"`
	Contract      string          `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	DepositId     uint64          `protobuf:"varint,6,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	BlockHeight   uint64          `protobuf:"varint,7,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestChainId   string          `protobuf:"bytes,8,opt,name=destChainId,proto3" json:"destChainId,omitempty"`
	DestChainType types.ChainType `protobuf:"varint,9,opt,name=destChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destChainType,omitempty"`
	Amount        uint64          `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`
	RelayerFees   uint64          `protobuf:"varint,11,opt,name=relayerFees,proto3" json:"relayerFees,omitempty"`
	SrcToken      string          `protobuf:"bytes,12,opt,name=srcToken,proto3" json:"srcToken,omitempty"`
	Recipient     string          `protobuf:"bytes,13,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Depositor     string          `protobuf:"bytes,14,opt,name=depositor,proto3" json:"depositor,omitempty"`
	Status        string          `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *FundDepositRequest) Reset()         { *m = FundDepositRequest{} }
func (m *FundDepositRequest) String() string { return proto.CompactTextString(m) }
func (*FundDepositRequest) ProtoMessage()    {}
func (*FundDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a6ef72f6d84c90, []int{0}
}
func (m *FundDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundDepositRequest.Merge(m, src)
}
func (m *FundDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *FundDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FundDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FundDepositRequest proto.InternalMessageInfo

func (m *FundDepositRequest) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *FundDepositRequest) GetSrcChainType() types.ChainType {
	if m != nil {
		return m.SrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *FundDepositRequest) GetSrcTxHash() string {
	if m != nil {
		return m.SrcTxHash
	}
	return ""
}

func (m *FundDepositRequest) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *FundDepositRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *FundDepositRequest) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

func (m *FundDepositRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *FundDepositRequest) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *FundDepositRequest) GetDestChainType() types.ChainType {
	if m != nil {
		return m.DestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *FundDepositRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FundDepositRequest) GetRelayerFees() uint64 {
	if m != nil {
		return m.RelayerFees
	}
	return 0
}

func (m *FundDepositRequest) GetSrcToken() string {
	if m != nil {
		return m.SrcToken
	}
	return ""
}

func (m *FundDepositRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *FundDepositRequest) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *FundDepositRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type FundDepositRequestClaimHash struct {
	SrcChainId    string          `protobuf:"bytes,1,opt,name=srcChainId,proto3" json:"srcChainId,omitempty"`
	SrcChainType  types.ChainType `protobuf:"varint,2,opt,name=srcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"srcChainType,omitempty"`
	SrcTxHash     string          `protobuf:"bytes,3,opt,name=srcTxHash,proto3" json:"srcTxHash,omitempty"`
	SrcTimestamp  uint64          `protobuf:"varint,4,opt,name=srcTimestamp,proto3" json:"srcTimestamp,omitempty"`
	Contract      string          `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	DepositId     uint64          `protobuf:"varint,6,opt,name=deposit_id,json=depositId,proto3" json:"deposit_id,omitempty"`
	BlockHeight   uint64          `protobuf:"varint,7,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestChainId   string          `protobuf:"bytes,8,opt,name=destChainId,proto3" json:"destChainId,omitempty"`
	DestChainType types.ChainType `protobuf:"varint,9,opt,name=destChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destChainType,omitempty"`
	Amount        uint64          `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`
	RelayerFees   uint64          `protobuf:"varint,11,opt,name=relayerFees,proto3" json:"relayerFees,omitempty"`
	SrcToken      string          `protobuf:"bytes,12,opt,name=srcToken,proto3" json:"srcToken,omitempty"`
	Recipient     string          `protobuf:"bytes,13,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Depositor     string          `protobuf:"bytes,14,opt,name=depositor,proto3" json:"depositor,omitempty"`
}

func (m *FundDepositRequestClaimHash) Reset()         { *m = FundDepositRequestClaimHash{} }
func (m *FundDepositRequestClaimHash) String() string { return proto.CompactTextString(m) }
func (*FundDepositRequestClaimHash) ProtoMessage()    {}
func (*FundDepositRequestClaimHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_21a6ef72f6d84c90, []int{1}
}
func (m *FundDepositRequestClaimHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundDepositRequestClaimHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundDepositRequestClaimHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundDepositRequestClaimHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundDepositRequestClaimHash.Merge(m, src)
}
func (m *FundDepositRequestClaimHash) XXX_Size() int {
	return m.Size()
}
func (m *FundDepositRequestClaimHash) XXX_DiscardUnknown() {
	xxx_messageInfo_FundDepositRequestClaimHash.DiscardUnknown(m)
}

var xxx_messageInfo_FundDepositRequestClaimHash proto.InternalMessageInfo

func (m *FundDepositRequestClaimHash) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetSrcChainType() types.ChainType {
	if m != nil {
		return m.SrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *FundDepositRequestClaimHash) GetSrcTxHash() string {
	if m != nil {
		return m.SrcTxHash
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetDepositId() uint64 {
	if m != nil {
		return m.DepositId
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetDestChainType() types.ChainType {
	if m != nil {
		return m.DestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *FundDepositRequestClaimHash) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetRelayerFees() uint64 {
	if m != nil {
		return m.RelayerFees
	}
	return 0
}

func (m *FundDepositRequestClaimHash) GetSrcToken() string {
	if m != nil {
		return m.SrcToken
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *FundDepositRequestClaimHash) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func init() {
	proto.RegisterType((*FundDepositRequest)(nil), "routerprotocol.routerchain.voyager.FundDepositRequest")
	proto.RegisterType((*FundDepositRequestClaimHash)(nil), "routerprotocol.routerchain.voyager.FundDepositRequestClaimHash")
}

func init() {
	proto.RegisterFile("routerchain/voyager/fund_deposit_request.proto", fileDescriptor_21a6ef72f6d84c90)
}

var fileDescriptor_21a6ef72f6d84c90 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0x5e, 0xa0, 0x94, 0xd5, 0xfb, 0x81, 0x64, 0x21, 0x64, 0x75, 0x10, 0x55, 0x3d, 0xf5, 0x42,
	0xc2, 0xe0, 0xc0, 0x9d, 0xa1, 0x69, 0x3b, 0x52, 0x55, 0x1c, 0xb8, 0x54, 0x8e, 0xf3, 0x48, 0xad,
	0x25, 0x71, 0xb0, 0x5f, 0xa6, 0xf5, 0xbf, 0xe0, 0x2f, 0xe2, 0xcc, 0x05, 0x69, 0x47, 0x8e, 0xa8,
	0xfd, 0x47, 0x90, 0xed, 0x24, 0x4b, 0x85, 0xb4, 0x03, 0xe7, 0x5d, 0x22, 0x7f, 0xdf, 0xf3, 0xfb,
	0xfc, 0xf9, 0xcb, 0x93, 0x49, 0xa4, 0x55, 0x8d, 0xa0, 0xc5, 0x8a, 0xcb, 0x32, 0xbe, 0x56, 0x6b,
	0x9e, 0x81, 0x8e, 0xbf, 0xd6, 0x65, 0xba, 0x4c, 0xa1, 0x52, 0x46, 0xe2, 0x52, 0xc3, 0xb7, 0x1a,
	0x0c, 0x46, 0x95, 0x56, 0xa8, 0xe8, 0xd4, 0xef, 0x77, 0x40, 0xa8, 0xbc, 0xdf, 0x1e, 0x35, 0xed,
	0xe3, 0x93, 0xa2, 0xce, 0x51, 0x7a, 0x49, 0xf7, 0x5d, 0xe2, 0xba, 0x02, 0x2f, 0x30, 0x0e, 0x85,
	0x32, 0x85, 0x32, 0x71, 0xc2, 0x0d, 0xc4, 0xd7, 0xa7, 0x09, 0x20, 0x3f, 0x8d, 0x85, 0x92, 0x65,
	0x53, 0x7f, 0x9e, 0xa9, 0x4c, 0xb9, 0x65, 0x6c, 0x57, 0x9e, 0x9d, 0xfe, 0x1a, 0x10, 0x7a, 0x5e,
	0x97, 0xe9, 0x47, 0x6f, 0x6a, 0xee, 0x3d, 0xd1, 0x90, 0x10, 0xa3, 0xc5, 0x99, 0x3d, 0xe3, 0x32,
	0x65, 0xc1, 0x24, 0x98, 0x8d, 0xe6, 0x3d, 0x86, 0x2e, 0xc8, 0x61, 0x8b, 0x16, 0xeb, 0x0a, 0xd8,
	0xa3, 0x49, 0x30, 0x3b, 0x7e, 0xfb, 0x26, 0xba, 0xe7, 0x12, 0x77, 0xde, 0xa3, 0xae, 0x6f, 0xbe,
	0xa3, 0x42, 0x5f, 0x92, 0x91, 0xd1, 0x62, 0x71, 0x73, 0xc1, 0xcd, 0x8a, 0x3d, 0x76, 0x87, 0xde,
	0x11, 0x74, 0xea, 0xce, 0x5c, 0xc8, 0x02, 0x0c, 0xf2, 0xa2, 0x62, 0x83, 0x49, 0x30, 0x1b, 0xcc,
	0x77, 0x38, 0x3a, 0x26, 0xfb, 0x42, 0x95, 0xa8, 0xb9, 0x40, 0xf6, 0xc4, 0x09, 0x74, 0x98, 0xbe,
	0x22, 0xa4, 0x8d, 0x5e, 0xa6, 0x6c, 0xe8, 0xba, 0x47, 0x0d, 0x73, 0x99, 0xd2, 0x09, 0x39, 0x48,
	0x72, 0x25, 0xae, 0x2e, 0x40, 0x66, 0x2b, 0x64, 0x4f, 0x5d, 0xbd, 0x4f, 0xd9, 0x1d, 0x29, 0x18,
	0x6c, 0x53, 0xd9, 0x77, 0xfa, 0x7d, 0x8a, 0x7e, 0x26, 0x47, 0x1d, 0x74, 0xb9, 0x8c, 0xfe, 0x33,
	0x97, 0x5d, 0x19, 0xfa, 0x82, 0x0c, 0x79, 0xa1, 0xea, 0x12, 0x19, 0x71, 0xb6, 0x1a, 0x64, 0x1d,
	0x69, 0xc8, 0xf9, 0x1a, 0xf4, 0x39, 0x80, 0x61, 0x07, 0xde, 0x73, 0x8f, 0xb2, 0x81, 0xd8, 0x80,
	0xd4, 0x15, 0x94, 0xec, 0xd0, 0x07, 0xd2, 0x62, 0x1b, 0xb7, 0x06, 0x21, 0x2b, 0x09, 0x25, 0xb2,
	0x23, 0x1f, 0x77, 0x47, 0xd8, 0x6a, 0x13, 0x8e, 0xd2, 0xec, 0xd8, 0x57, 0x3b, 0xc2, 0x3a, 0x32,
	0xc8, 0xb1, 0x36, 0xec, 0x99, 0x2b, 0x35, 0x68, 0xfa, 0x63, 0x40, 0x4e, 0xfe, 0x9d, 0xa7, 0xb3,
	0x9c, 0xcb, 0xc2, 0xfd, 0xc4, 0x87, 0xc1, 0x7a, 0x18, 0xac, 0xfb, 0x06, 0xeb, 0xc3, 0xa7, 0x9f,
	0x9b, 0x30, 0xb8, 0xdd, 0x84, 0xc1, 0x9f, 0x4d, 0x18, 0x7c, 0xdf, 0x86, 0x7b, 0xb7, 0xdb, 0x70,
	0xef, 0xf7, 0x36, 0xdc, 0xfb, 0xf2, 0x3e, 0x93, 0xb8, 0xaa, 0x93, 0x48, 0xa8, 0x22, 0xf6, 0xf7,
	0x7c, 0xdd, 0xde, 0xbb, 0xc5, 0xfe, 0x69, 0xbc, 0xe9, 0xde, 0x5b, 0xfb, 0x3c, 0x9a, 0x64, 0xe8,
	0xb6, 0xbd, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf6, 0x52, 0xa4, 0x93, 0x05, 0x00, 0x00,
}

func (m *FundDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SrcToken) > 0 {
		i -= len(m.SrcToken)
		copy(dAtA[i:], m.SrcToken)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcToken)))
		i--
		dAtA[i] = 0x62
	}
	if m.RelayerFees != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.RelayerFees))
		i--
		dAtA[i] = 0x58
	}
	if m.Amount != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x50
	}
	if m.DestChainType != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.DestChainType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.BlockHeight != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.DepositId != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SrcTxHash) > 0 {
		i -= len(m.SrcTxHash)
		copy(dAtA[i:], m.SrcTxHash)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SrcChainType != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundDepositRequestClaimHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundDepositRequestClaimHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundDepositRequestClaimHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SrcToken) > 0 {
		i -= len(m.SrcToken)
		copy(dAtA[i:], m.SrcToken)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcToken)))
		i--
		dAtA[i] = 0x62
	}
	if m.RelayerFees != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.RelayerFees))
		i--
		dAtA[i] = 0x58
	}
	if m.Amount != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x50
	}
	if m.DestChainType != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.DestChainType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.BlockHeight != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.DepositId != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.DepositId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SrcTxHash) > 0 {
		i -= len(m.SrcTxHash)
		copy(dAtA[i:], m.SrcTxHash)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SrcChainType != 0 {
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(m.SrcChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintFundDepositRequest(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFundDepositRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovFundDepositRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FundDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcChainType != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcChainType))
	}
	l = len(m.SrcTxHash)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcTimestamp))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.DepositId != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.DepositId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.BlockHeight))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.DestChainType != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.DestChainType))
	}
	if m.Amount != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.Amount))
	}
	if m.RelayerFees != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.RelayerFees))
	}
	l = len(m.SrcToken)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	return n
}

func (m *FundDepositRequestClaimHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcChainType != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcChainType))
	}
	l = len(m.SrcTxHash)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.SrcTimestamp))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.DepositId != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.DepositId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.BlockHeight))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	if m.DestChainType != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.DestChainType))
	}
	if m.Amount != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.Amount))
	}
	if m.RelayerFees != 0 {
		n += 1 + sovFundDepositRequest(uint64(m.RelayerFees))
	}
	l = len(m.SrcToken)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovFundDepositRequest(uint64(l))
	}
	return n
}

func sovFundDepositRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFundDepositRequest(x uint64) (n int) {
	return sovFundDepositRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FundDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundDepositRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainType", wireType)
			}
			m.SrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainType", wireType)
			}
			m.DestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFees", wireType)
			}
			m.RelayerFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayerFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundDepositRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundDepositRequestClaimHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundDepositRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundDepositRequestClaimHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundDepositRequestClaimHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainType", wireType)
			}
			m.SrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositId", wireType)
			}
			m.DepositId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainType", wireType)
			}
			m.DestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFees", wireType)
			}
			m.RelayerFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayerFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundDepositRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundDepositRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFundDepositRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFundDepositRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundDepositRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFundDepositRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFundDepositRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFundDepositRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFundDepositRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFundDepositRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFundDepositRequest = fmt.Errorf("proto: unexpected end of group")
)
