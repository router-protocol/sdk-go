// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbound/events.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventOutgoingBatchTxCreated struct {
	OutgoingTxNonce      uint64                                 `protobuf:"varint,1,opt,name=outgoing_tx_nonce,json=outgoingTxNonce,proto3" json:"outgoing_tx_nonce,omitempty"`
	DestinationChainType types.ChainType                        `protobuf:"varint,2,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId   string                                 `protobuf:"bytes,3,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	ContractCalls        []ContractCall                         `protobuf:"bytes,4,rep,name=contractCalls,proto3" json:"contractCalls"`
	RelayerFee           types1.Coin                            `protobuf:"bytes,5,opt,name=relayerFee,proto3" json:"relayerFee"`
	DestinationGasLimit  uint64                                 `protobuf:"varint,6,opt,name=destinationGasLimit,proto3" json:"destinationGasLimit,omitempty"`
	DestinationGasPrice  uint64                                 `protobuf:"varint,7,opt,name=destinationGasPrice,proto3" json:"destinationGasPrice,omitempty"`
	OutgoingTxFeeInRoute types1.Coin                            `protobuf:"bytes,8,opt,name=outgoingTxFeeInRoute,proto3" json:"outgoingTxFeeInRoute"`
	OutboundAckGasLimit  uint64                                 `protobuf:"varint,9,opt,name=outboundAckGasLimit,proto3" json:"outboundAckGasLimit,omitempty"`
	IsAtomic             bool                                   `protobuf:"varint,10,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	SourceAddress        string                                 `protobuf:"bytes,11,opt,name=sourceAddress,proto3" json:"sourceAddress,omitempty"`
	ChainTimestamp       uint64                                 `protobuf:"varint,12,opt,name=chainTimestamp,proto3" json:"chainTimestamp,omitempty"`
	ExpiryTimestamp      int64                                  `protobuf:"varint,13,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	Status               OutgoingTxStatus                       `protobuf:"varint,14,opt,name=status,proto3,enum=routerprotocol.routerchain.outbound.OutgoingTxStatus" json:"status,omitempty"`
	RouteAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,15,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient       []byte                                 `protobuf:"bytes,16,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	AsmAddress           []byte                                 `protobuf:"bytes,17,opt,name=asmAddress,proto3" json:"asmAddress,omitempty"`
}

func (m *EventOutgoingBatchTxCreated) Reset()         { *m = EventOutgoingBatchTxCreated{} }
func (m *EventOutgoingBatchTxCreated) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingBatchTxCreated) ProtoMessage()    {}
func (*EventOutgoingBatchTxCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0c6aaae2ca660b, []int{0}
}
func (m *EventOutgoingBatchTxCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingBatchTxCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingBatchTxCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingBatchTxCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingBatchTxCreated.Merge(m, src)
}
func (m *EventOutgoingBatchTxCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingBatchTxCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingBatchTxCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingBatchTxCreated proto.InternalMessageInfo

func (m *EventOutgoingBatchTxCreated) GetOutgoingTxNonce() uint64 {
	if m != nil {
		return m.OutgoingTxNonce
	}
	return 0
}

func (m *EventOutgoingBatchTxCreated) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventOutgoingBatchTxCreated) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *EventOutgoingBatchTxCreated) GetContractCalls() []ContractCall {
	if m != nil {
		return m.ContractCalls
	}
	return nil
}

func (m *EventOutgoingBatchTxCreated) GetRelayerFee() types1.Coin {
	if m != nil {
		return m.RelayerFee
	}
	return types1.Coin{}
}

func (m *EventOutgoingBatchTxCreated) GetDestinationGasLimit() uint64 {
	if m != nil {
		return m.DestinationGasLimit
	}
	return 0
}

func (m *EventOutgoingBatchTxCreated) GetDestinationGasPrice() uint64 {
	if m != nil {
		return m.DestinationGasPrice
	}
	return 0
}

func (m *EventOutgoingBatchTxCreated) GetOutgoingTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.OutgoingTxFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventOutgoingBatchTxCreated) GetOutboundAckGasLimit() uint64 {
	if m != nil {
		return m.OutboundAckGasLimit
	}
	return 0
}

func (m *EventOutgoingBatchTxCreated) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *EventOutgoingBatchTxCreated) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *EventOutgoingBatchTxCreated) GetChainTimestamp() uint64 {
	if m != nil {
		return m.ChainTimestamp
	}
	return 0
}

func (m *EventOutgoingBatchTxCreated) GetExpiryTimestamp() int64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *EventOutgoingBatchTxCreated) GetStatus() OutgoingTxStatus {
	if m != nil {
		return m.Status
	}
	return OUTGOING_TX_CREATED
}

func (m *EventOutgoingBatchTxCreated) GetRouteRecipient() []byte {
	if m != nil {
		return m.RouteRecipient
	}
	return nil
}

func (m *EventOutgoingBatchTxCreated) GetAsmAddress() []byte {
	if m != nil {
		return m.AsmAddress
	}
	return nil
}

type EventOutgoingBatchTxConfirm struct {
	DestinationChainType types.ChainType `protobuf:"varint,1,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId   string          `protobuf:"bytes,2,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	OutgoingBatchSender  string          `protobuf:"bytes,3,opt,name=outgoingBatchSender,proto3" json:"outgoingBatchSender,omitempty"`
	OutgoingBatchNonce   uint64          `protobuf:"varint,4,opt,name=outgoingBatchNonce,proto3" json:"outgoingBatchNonce,omitempty"`
	EthSigner            string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator         string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *EventOutgoingBatchTxConfirm) Reset()         { *m = EventOutgoingBatchTxConfirm{} }
func (m *EventOutgoingBatchTxConfirm) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingBatchTxConfirm) ProtoMessage()    {}
func (*EventOutgoingBatchTxConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0c6aaae2ca660b, []int{1}
}
func (m *EventOutgoingBatchTxConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingBatchTxConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingBatchTxConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingBatchTxConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingBatchTxConfirm.Merge(m, src)
}
func (m *EventOutgoingBatchTxConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingBatchTxConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingBatchTxConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingBatchTxConfirm proto.InternalMessageInfo

func (m *EventOutgoingBatchTxConfirm) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventOutgoingBatchTxConfirm) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *EventOutgoingBatchTxConfirm) GetOutgoingBatchSender() string {
	if m != nil {
		return m.OutgoingBatchSender
	}
	return ""
}

func (m *EventOutgoingBatchTxConfirm) GetOutgoingBatchNonce() uint64 {
	if m != nil {
		return m.OutgoingBatchNonce
	}
	return 0
}

func (m *EventOutgoingBatchTxConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventOutgoingBatchTxConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *EventOutgoingBatchTxConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type EventOutgoingAckCreated struct {
	AttestationId         []byte           `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	DestinationChainType  types.ChainType  `protobuf:"varint,2,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId    string           `protobuf:"bytes,3,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	EventNonce            uint64           `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight           uint64           `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	OutboundTxNonce       uint64           `protobuf:"varint,6,opt,name=outboundTxNonce,proto3" json:"outboundTxNonce,omitempty"`
	OutboundTxRequestedBy string           `protobuf:"bytes,7,opt,name=outboundTxRequestedBy,proto3" json:"outboundTxRequestedBy,omitempty"`
	RelayerRouterAddress  string           `protobuf:"bytes,8,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	DestinationTxHash     string           `protobuf:"bytes,9,opt,name=destinationTxHash,proto3" json:"destinationTxHash,omitempty"`
	FeeConsumed           uint64           `protobuf:"varint,10,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	ContractAckResponses  []byte           `protobuf:"bytes,11,opt,name=contractAckResponses,proto3" json:"contractAckResponses,omitempty"`
	ExeCode               uint64           `protobuf:"varint,12,opt,name=exeCode,proto3" json:"exeCode,omitempty"`
	ExecStatus            bool             `protobuf:"varint,13,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	ExecFlags             []bool           `protobuf:"varint,14,rep,packed,name=execFlags,proto3" json:"execFlags,omitempty"`
	ExecData              [][]byte         `protobuf:"bytes,15,rep,name=execData,proto3" json:"execData,omitempty"`
	Status                OutgoingTxStatus `protobuf:"varint,16,opt,name=status,proto3,enum=routerprotocol.routerchain.outbound.OutgoingTxStatus" json:"status,omitempty"`
}

func (m *EventOutgoingAckCreated) Reset()         { *m = EventOutgoingAckCreated{} }
func (m *EventOutgoingAckCreated) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingAckCreated) ProtoMessage()    {}
func (*EventOutgoingAckCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0c6aaae2ca660b, []int{2}
}
func (m *EventOutgoingAckCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingAckCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingAckCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingAckCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingAckCreated.Merge(m, src)
}
func (m *EventOutgoingAckCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingAckCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingAckCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingAckCreated proto.InternalMessageInfo

func (m *EventOutgoingAckCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventOutgoingAckCreated) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventOutgoingAckCreated) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *EventOutgoingAckCreated) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventOutgoingAckCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventOutgoingAckCreated) GetOutboundTxNonce() uint64 {
	if m != nil {
		return m.OutboundTxNonce
	}
	return 0
}

func (m *EventOutgoingAckCreated) GetOutboundTxRequestedBy() string {
	if m != nil {
		return m.OutboundTxRequestedBy
	}
	return ""
}

func (m *EventOutgoingAckCreated) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *EventOutgoingAckCreated) GetDestinationTxHash() string {
	if m != nil {
		return m.DestinationTxHash
	}
	return ""
}

func (m *EventOutgoingAckCreated) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *EventOutgoingAckCreated) GetContractAckResponses() []byte {
	if m != nil {
		return m.ContractAckResponses
	}
	return nil
}

func (m *EventOutgoingAckCreated) GetExeCode() uint64 {
	if m != nil {
		return m.ExeCode
	}
	return 0
}

func (m *EventOutgoingAckCreated) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *EventOutgoingAckCreated) GetExecFlags() []bool {
	if m != nil {
		return m.ExecFlags
	}
	return nil
}

func (m *EventOutgoingAckCreated) GetExecData() [][]byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *EventOutgoingAckCreated) GetStatus() OutgoingTxStatus {
	if m != nil {
		return m.Status
	}
	return OUTGOING_TX_CREATED
}

type EventOutgoingTxFeeSettlement struct {
	DestinationChainType types.ChainType `protobuf:"varint,1,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId   string          `protobuf:"bytes,2,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	OutgoingBatchSender  string          `protobuf:"bytes,3,opt,name=outgoingBatchSender,proto3" json:"outgoingBatchSender,omitempty"`
	OutgoingBatchNonce   uint64          `protobuf:"varint,4,opt,name=outgoingBatchNonce,proto3" json:"outgoingBatchNonce,omitempty"`
	RelayerFeeInRoute    types1.Coin     `protobuf:"bytes,5,opt,name=relayerFeeInRoute,proto3" json:"relayerFeeInRoute"`
	RefundFeeInRoute     types1.Coin     `protobuf:"bytes,6,opt,name=refundFeeInRoute,proto3" json:"refundFeeInRoute"`
}

func (m *EventOutgoingTxFeeSettlement) Reset()         { *m = EventOutgoingTxFeeSettlement{} }
func (m *EventOutgoingTxFeeSettlement) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingTxFeeSettlement) ProtoMessage()    {}
func (*EventOutgoingTxFeeSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0c6aaae2ca660b, []int{3}
}
func (m *EventOutgoingTxFeeSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingTxFeeSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingTxFeeSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingTxFeeSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingTxFeeSettlement.Merge(m, src)
}
func (m *EventOutgoingTxFeeSettlement) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingTxFeeSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingTxFeeSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingTxFeeSettlement proto.InternalMessageInfo

func (m *EventOutgoingTxFeeSettlement) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventOutgoingTxFeeSettlement) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *EventOutgoingTxFeeSettlement) GetOutgoingBatchSender() string {
	if m != nil {
		return m.OutgoingBatchSender
	}
	return ""
}

func (m *EventOutgoingTxFeeSettlement) GetOutgoingBatchNonce() uint64 {
	if m != nil {
		return m.OutgoingBatchNonce
	}
	return 0
}

func (m *EventOutgoingTxFeeSettlement) GetRelayerFeeInRoute() types1.Coin {
	if m != nil {
		return m.RelayerFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventOutgoingTxFeeSettlement) GetRefundFeeInRoute() types1.Coin {
	if m != nil {
		return m.RefundFeeInRoute
	}
	return types1.Coin{}
}

type EventOutgoingAckReadyToExecute struct {
	ChainType    types.ChainType `protobuf:"varint,1,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId      string          `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce   uint64          `protobuf:"varint,3,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	ClaimHash    []byte          `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	TxFeeInRoute types1.Coin     `protobuf:"bytes,5,opt,name=txFeeInRoute,proto3" json:"txFeeInRoute"`
}

func (m *EventOutgoingAckReadyToExecute) Reset()         { *m = EventOutgoingAckReadyToExecute{} }
func (m *EventOutgoingAckReadyToExecute) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingAckReadyToExecute) ProtoMessage()    {}
func (*EventOutgoingAckReadyToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0c6aaae2ca660b, []int{4}
}
func (m *EventOutgoingAckReadyToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingAckReadyToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingAckReadyToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingAckReadyToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingAckReadyToExecute.Merge(m, src)
}
func (m *EventOutgoingAckReadyToExecute) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingAckReadyToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingAckReadyToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingAckReadyToExecute proto.InternalMessageInfo

func (m *EventOutgoingAckReadyToExecute) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventOutgoingAckReadyToExecute) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventOutgoingAckReadyToExecute) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventOutgoingAckReadyToExecute) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventOutgoingAckReadyToExecute) GetTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.TxFeeInRoute
	}
	return types1.Coin{}
}

type EventOutgoingAckExecuted struct {
	AttestationId      []byte          `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType          types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId            string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce         uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	DelegationResponse []byte          `protobuf:"bytes,5,opt,name=delegationResponse,proto3" json:"delegationResponse,omitempty"`
}

func (m *EventOutgoingAckExecuted) Reset()         { *m = EventOutgoingAckExecuted{} }
func (m *EventOutgoingAckExecuted) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingAckExecuted) ProtoMessage()    {}
func (*EventOutgoingAckExecuted) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0c6aaae2ca660b, []int{5}
}
func (m *EventOutgoingAckExecuted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingAckExecuted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingAckExecuted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingAckExecuted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingAckExecuted.Merge(m, src)
}
func (m *EventOutgoingAckExecuted) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingAckExecuted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingAckExecuted.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingAckExecuted proto.InternalMessageInfo

func (m *EventOutgoingAckExecuted) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventOutgoingAckExecuted) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventOutgoingAckExecuted) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventOutgoingAckExecuted) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventOutgoingAckExecuted) GetDelegationResponse() []byte {
	if m != nil {
		return m.DelegationResponse
	}
	return nil
}

type EventOutgoingAckExecutionFailed struct {
	AttestationId           []byte          `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	ChainType               types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId                 string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce              uint64          `protobuf:"varint,4,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	DelegationErrorResponse string          `protobuf:"bytes,5,opt,name=delegationErrorResponse,proto3" json:"delegationErrorResponse,omitempty"`
}

func (m *EventOutgoingAckExecutionFailed) Reset()         { *m = EventOutgoingAckExecutionFailed{} }
func (m *EventOutgoingAckExecutionFailed) String() string { return proto.CompactTextString(m) }
func (*EventOutgoingAckExecutionFailed) ProtoMessage()    {}
func (*EventOutgoingAckExecutionFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c0c6aaae2ca660b, []int{6}
}
func (m *EventOutgoingAckExecutionFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutgoingAckExecutionFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutgoingAckExecutionFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutgoingAckExecutionFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutgoingAckExecutionFailed.Merge(m, src)
}
func (m *EventOutgoingAckExecutionFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventOutgoingAckExecutionFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutgoingAckExecutionFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutgoingAckExecutionFailed proto.InternalMessageInfo

func (m *EventOutgoingAckExecutionFailed) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventOutgoingAckExecutionFailed) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *EventOutgoingAckExecutionFailed) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventOutgoingAckExecutionFailed) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *EventOutgoingAckExecutionFailed) GetDelegationErrorResponse() string {
	if m != nil {
		return m.DelegationErrorResponse
	}
	return ""
}

func init() {
	proto.RegisterType((*EventOutgoingBatchTxCreated)(nil), "routerprotocol.routerchain.outbound.EventOutgoingBatchTxCreated")
	proto.RegisterType((*EventOutgoingBatchTxConfirm)(nil), "routerprotocol.routerchain.outbound.EventOutgoingBatchTxConfirm")
	proto.RegisterType((*EventOutgoingAckCreated)(nil), "routerprotocol.routerchain.outbound.EventOutgoingAckCreated")
	proto.RegisterType((*EventOutgoingTxFeeSettlement)(nil), "routerprotocol.routerchain.outbound.EventOutgoingTxFeeSettlement")
	proto.RegisterType((*EventOutgoingAckReadyToExecute)(nil), "routerprotocol.routerchain.outbound.EventOutgoingAckReadyToExecute")
	proto.RegisterType((*EventOutgoingAckExecuted)(nil), "routerprotocol.routerchain.outbound.EventOutgoingAckExecuted")
	proto.RegisterType((*EventOutgoingAckExecutionFailed)(nil), "routerprotocol.routerchain.outbound.EventOutgoingAckExecutionFailed")
}

func init() { proto.RegisterFile("outbound/events.proto", fileDescriptor_9c0c6aaae2ca660b) }

var fileDescriptor_9c0c6aaae2ca660b = []byte{
	// 1143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x41, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xda, 0x6e, 0x6a, 0x4f, 0x9c, 0xa4, 0x99, 0x7f, 0xfe, 0xea, 0xd2, 0x46, 0x8e, 0x31,
	0x50, 0x2c, 0x44, 0xd7, 0x4d, 0x00, 0xa9, 0x37, 0xe4, 0x98, 0x84, 0x46, 0xd0, 0x16, 0x26, 0x3e,
	0x21, 0x21, 0x6b, 0x3c, 0xfb, 0x62, 0x8f, 0xb2, 0xbb, 0x63, 0x66, 0x67, 0xab, 0xf5, 0x77, 0x00,
	0x89, 0xcf, 0xc2, 0xa7, 0xe8, 0xb1, 0x47, 0xc4, 0xa1, 0x42, 0xc9, 0x89, 0x33, 0xe2, 0xc4, 0x05,
	0xed, 0xec, 0xae, 0x77, 0x6d, 0x6f, 0x2a, 0x23, 0x2a, 0x04, 0xe2, 0x92, 0x78, 0x7e, 0x6f, 0xde,
	0xdb, 0xf7, 0x7e, 0x6f, 0xde, 0x6f, 0x76, 0xd1, 0xff, 0x45, 0xa0, 0x86, 0x22, 0xf0, 0xec, 0x0e,
	0x3c, 0x03, 0x4f, 0xf9, 0xd6, 0x44, 0x0a, 0x25, 0xf0, 0x5b, 0x52, 0x04, 0x0a, 0xa4, 0x5e, 0x30,
	0xe1, 0x58, 0xf1, 0x92, 0x8d, 0x29, 0xf7, 0xac, 0xd4, 0xe3, 0xce, 0x9b, 0x33, 0x5f, 0x11, 0xa8,
	0x91, 0xe0, 0xde, 0x68, 0xa0, 0xc2, 0x81, 0xaf, 0xa8, 0x0a, 0x92, 0x38, 0x77, 0xf6, 0x66, 0x5b,
	0x98, 0xf0, 0x94, 0xa4, 0x4c, 0x0d, 0x18, 0x75, 0x9c, 0xc4, 0x7a, 0xd7, 0x0d, 0x1c, 0xc5, 0x75,
	0xd4, 0x8e, 0xfe, 0x3b, 0x50, 0xd3, 0x09, 0x24, 0xc6, 0x06, 0x13, 0xbe, 0x2b, 0xfc, 0xce, 0x90,
	0xfa, 0xd0, 0x79, 0x76, 0x30, 0x04, 0x45, 0x0f, 0x3a, 0x4c, 0x70, 0x2f, 0xb1, 0xef, 0x8e, 0xc4,
	0x48, 0xe8, 0x9f, 0x9d, 0xe8, 0x57, 0x8c, 0xb6, 0x7e, 0xb9, 0x89, 0xee, 0x1e, 0x47, 0x95, 0x3c,
	0x4d, 0x52, 0x3a, 0xa2, 0x8a, 0x8d, 0xfb, 0x61, 0x4f, 0x02, 0x55, 0x60, 0xe3, 0xf7, 0xd0, 0x4e,
	0x3e, 0x59, 0x4f, 0x78, 0x0c, 0x4c, 0xa3, 0x69, 0xb4, 0x2b, 0x64, 0x3b, 0x35, 0xf4, 0xc3, 0x27,
	0x11, 0x8c, 0x6d, 0xb4, 0x6b, 0x83, 0xaf, 0xb8, 0x47, 0x15, 0x17, 0x5e, 0x2f, 0x4a, 0xb0, 0x3f,
	0x9d, 0x80, 0x59, 0x6a, 0x1a, 0xed, 0xad, 0xc3, 0x07, 0xd6, 0x2b, 0x38, 0xca, 0x0a, 0xb3, 0x66,
	0x7e, 0xa4, 0x30, 0x1a, 0xb6, 0x10, 0x5e, 0xc4, 0x4f, 0x6d, 0xb3, 0xdc, 0x34, 0xda, 0x35, 0x52,
	0x60, 0xc1, 0x5f, 0xa3, 0xcd, 0x94, 0xcb, 0x1e, 0x75, 0x1c, 0xdf, 0xac, 0x34, 0xcb, 0xed, 0x8d,
	0xc3, 0x03, 0x6b, 0x85, 0x96, 0x59, 0xbd, 0x9c, 0xe7, 0x51, 0xe5, 0xf9, 0xcb, 0xfd, 0x35, 0x32,
	0x1f, 0x0d, 0x7f, 0x8c, 0x90, 0x04, 0x87, 0x4e, 0x41, 0x9e, 0x00, 0x98, 0x37, 0x9a, 0x46, 0x7b,
	0xe3, 0xf0, 0x0d, 0x2b, 0xee, 0x85, 0x15, 0xf5, 0xc2, 0x4a, 0x7a, 0x61, 0xf5, 0x04, 0xf7, 0x92,
	0x18, 0x39, 0x17, 0xfc, 0x00, 0xfd, 0x2f, 0x97, 0xf5, 0xa7, 0xd4, 0xff, 0x9c, 0xbb, 0x5c, 0x99,
	0xeb, 0x9a, 0xe3, 0x22, 0xd3, 0xb2, 0xc7, 0x17, 0x92, 0x33, 0x30, 0x6f, 0x16, 0x79, 0x68, 0x13,
	0x3e, 0x43, 0xbb, 0x59, 0xb3, 0x4e, 0x00, 0x4e, 0x3d, 0x12, 0x55, 0x6b, 0x56, 0x57, 0x4b, 0xb7,
	0xd0, 0x39, 0x4a, 0x23, 0xe5, 0xa9, 0xcb, 0x2e, 0x66, 0x89, 0xd7, 0xe2, 0x34, 0x0a, 0x4c, 0xf8,
	0x0e, 0xaa, 0x72, 0xbf, 0xab, 0x84, 0xcb, 0x99, 0x89, 0x9a, 0x46, 0xbb, 0x4a, 0x66, 0x6b, 0xfc,
	0x36, 0xda, 0xf4, 0x45, 0x20, 0x19, 0x74, 0x6d, 0x5b, 0x82, 0xef, 0x9b, 0x1b, 0xba, 0xa3, 0xf3,
	0x20, 0xbe, 0x87, 0xb6, 0x74, 0x87, 0xfa, 0xdc, 0x05, 0x5f, 0x51, 0x77, 0x62, 0xd6, 0xf5, 0xe3,
	0x16, 0x50, 0xdc, 0x46, 0xdb, 0x10, 0x4e, 0xb8, 0x9c, 0x66, 0x1b, 0x37, 0x9b, 0x46, 0xbb, 0x4c,
	0x16, 0x61, 0xfc, 0x18, 0xad, 0xc7, 0x13, 0x68, 0x6e, 0xe9, 0x63, 0xfa, 0xd1, 0x4a, 0xe7, 0xe2,
	0xe9, 0x8c, 0x90, 0x33, 0xed, 0x4c, 0x92, 0x20, 0xf8, 0x4b, 0x54, 0xd7, 0x0e, 0x03, 0xea, 0x8a,
	0xc0, 0x53, 0xe6, 0x76, 0x54, 0xc5, 0x91, 0x15, 0xd1, 0xf8, 0xd3, 0xcb, 0xfd, 0x7b, 0x23, 0xae,
	0xc6, 0xc1, 0xd0, 0x62, 0xc2, 0xed, 0x24, 0xe3, 0x1a, 0xff, 0xbb, 0xef, 0xdb, 0x17, 0x9d, 0x68,
	0x98, 0x7d, 0xeb, 0xd4, 0x53, 0x64, 0x43, 0xc7, 0xe8, 0xea, 0x10, 0xf8, 0x5d, 0xb4, 0x1d, 0x87,
	0x94, 0xc0, 0xf8, 0x84, 0x83, 0xa7, 0xcc, 0x5b, 0x4d, 0xa3, 0x5d, 0x27, 0x5b, 0x1a, 0x26, 0x29,
	0x8a, 0x1b, 0x08, 0x51, 0xdf, 0x4d, 0xf9, 0xdb, 0xd1, 0x7b, 0x72, 0x48, 0xeb, 0xb7, 0xd2, 0x35,
	0xb3, 0x2e, 0xbc, 0x73, 0x2e, 0xdd, 0x6b, 0xe7, 0xd7, 0xf8, 0x1b, 0xe6, 0xb7, 0x74, 0xed, 0xfc,
	0xc6, 0xc7, 0x2c, 0xcb, 0xf7, 0x0c, 0x3c, 0x1b, 0x64, 0x32, 0xf0, 0x45, 0xa6, 0xe8, 0x09, 0x73,
	0xb0, 0x56, 0x27, 0xb3, 0xa2, 0x0f, 0x4a, 0x81, 0x05, 0xef, 0xa1, 0x1a, 0xa8, 0xf1, 0x19, 0x1f,
	0x79, 0x20, 0xf5, 0x04, 0xd7, 0x48, 0x06, 0x44, 0x56, 0x9f, 0x8f, 0x3c, 0xaa, 0x02, 0x09, 0x7a,
	0x2a, 0x6b, 0x24, 0x03, 0x70, 0x0b, 0xd5, 0x85, 0x64, 0x63, 0xf0, 0x95, 0xa4, 0x4a, 0x48, 0x3d,
	0x84, 0x35, 0x32, 0x87, 0xb5, 0x7e, 0xbd, 0x81, 0x6e, 0xcf, 0xf1, 0xde, 0x65, 0x17, 0xa9, 0xbe,
	0xbe, 0x83, 0xb6, 0xa8, 0x52, 0xd1, 0x59, 0x8c, 0x6a, 0x1e, 0x70, 0x5b, 0xb3, 0x5d, 0x27, 0x9b,
	0x39, 0xf4, 0xd4, 0xfe, 0x87, 0x4a, 0x6b, 0x03, 0x21, 0x7d, 0x0b, 0xe6, 0x09, 0xce, 0x21, 0xb8,
	0x89, 0x36, 0x86, 0x8e, 0x60, 0x17, 0x8f, 0x80, 0x8f, 0xc6, 0x4a, 0x53, 0x5b, 0x21, 0x79, 0x28,
	0x9a, 0xd3, 0x74, 0xa6, 0x92, 0x5b, 0x24, 0x11, 0xbe, 0x45, 0x18, 0x7f, 0x98, 0x5d, 0xbd, 0xfd,
	0x90, 0xc0, 0x37, 0x01, 0xf8, 0x0a, 0xec, 0xa3, 0x69, 0xc2, 0x78, 0xb1, 0x11, 0x1f, 0xa2, 0xdd,
	0x44, 0x6a, 0xb5, 0x66, 0xc9, 0x74, 0x38, 0xaa, 0xda, 0xa9, 0xd0, 0x86, 0xdf, 0x47, 0x3b, 0xb9,
	0x5a, 0xfb, 0xe1, 0x23, 0xea, 0x8f, 0xb5, 0xaa, 0xd5, 0xc8, 0xb2, 0x21, 0xaa, 0xf1, 0x1c, 0xa0,
	0x27, 0x3c, 0x3f, 0x70, 0xc1, 0xd6, 0xb2, 0x56, 0x21, 0x79, 0x28, 0xca, 0x21, 0xbd, 0x32, 0xba,
	0xec, 0x82, 0x80, 0x3f, 0x11, 0x9e, 0x0f, 0xb1, 0xc0, 0xd5, 0x49, 0xa1, 0x0d, 0x9b, 0xe8, 0x26,
	0x84, 0xd0, 0x13, 0x36, 0x24, 0x02, 0x97, 0x2e, 0x35, 0xe7, 0x21, 0xb0, 0x58, 0x76, 0xb4, 0xa8,
	0x55, 0x49, 0x0e, 0xd1, 0x87, 0x39, 0x04, 0x76, 0xe2, 0xd0, 0x51, 0x24, 0x69, 0xe5, 0x76, 0x95,
	0x64, 0x40, 0xa4, 0xc0, 0xd1, 0xe2, 0x13, 0xaa, 0xa8, 0xb9, 0xdd, 0x2c, 0xb7, 0xeb, 0x64, 0xb6,
	0xce, 0x29, 0xe1, 0xad, 0xd7, 0xa0, 0x84, 0xad, 0x1f, 0xca, 0x68, 0x6f, 0xee, 0xd4, 0xeb, 0xcb,
	0xe3, 0x0c, 0x94, 0x72, 0xc0, 0x8d, 0xe4, 0xea, 0xbf, 0x2a, 0x37, 0x8f, 0xd1, 0x4e, 0x76, 0xfd,
	0xa7, 0x37, 0xf1, 0x8a, 0x2f, 0x0e, 0xcb, 0x9e, 0xf8, 0x33, 0x74, 0x4b, 0xc2, 0x79, 0xe0, 0xd9,
	0xb9, 0x68, 0xeb, 0xab, 0x45, 0x5b, 0x72, 0x6c, 0x7d, 0x57, 0x42, 0x8d, 0x45, 0xa9, 0x22, 0x40,
	0xed, 0x69, 0x5f, 0x1c, 0x87, 0xc0, 0xa2, 0xe7, 0x3d, 0x41, 0x35, 0xf6, 0x97, 0x7b, 0x95, 0x85,
	0x88, 0x8e, 0x3a, 0x9b, 0xeb, 0x4a, 0xba, 0x5c, 0x90, 0x97, 0xf2, 0x92, 0xbc, 0xec, 0xa1, 0x1a,
	0x73, 0x28, 0x77, 0xf5, 0x80, 0x56, 0xf4, 0x34, 0x65, 0x00, 0xee, 0xa1, 0xba, 0x0a, 0xff, 0x3c,
	0xc3, 0x73, 0x4e, 0xad, 0xdf, 0x0d, 0x64, 0x2e, 0xf2, 0x91, 0x10, 0xb1, 0xb2, 0x76, 0xcf, 0x11,
	0x56, 0x7a, 0xad, 0x84, 0x95, 0x5f, 0x45, 0xd8, 0xb2, 0x1e, 0xeb, 0x59, 0x70, 0x60, 0xa4, 0x33,
	0x4b, 0xc5, 0x46, 0x13, 0x53, 0x27, 0x05, 0x96, 0xd6, 0xb7, 0x25, 0xb4, 0x5f, 0x5c, 0x3d, 0x17,
	0xde, 0x09, 0xe5, 0xce, 0xbf, 0x91, 0x84, 0x87, 0xe8, 0x76, 0x56, 0xea, 0xb1, 0x94, 0x42, 0xce,
	0x31, 0x51, 0x23, 0xd7, 0x99, 0x8f, 0xc8, 0xf3, 0xcb, 0x86, 0xf1, 0xe2, 0xb2, 0x61, 0xfc, 0x7c,
	0xd9, 0x30, 0xbe, 0xbf, 0x6a, 0xac, 0xbd, 0xb8, 0x6a, 0xac, 0xfd, 0x78, 0xd5, 0x58, 0xfb, 0xea,
	0x61, 0xee, 0xbd, 0x2e, 0xae, 0xe2, 0x7e, 0x5a, 0x55, 0xba, 0x8e, 0xbf, 0xda, 0xc2, 0xce, 0xec,
	0x03, 0x4f, 0xbf, 0xed, 0x0d, 0xd7, 0xf5, 0xbe, 0x0f, 0xfe, 0x08, 0x00, 0x00, 0xff, 0xff, 0x01,
	0xfa, 0xe5, 0xf9, 0x58, 0x0e, 0x00, 0x00,
}

func (m *EventOutgoingBatchTxCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingBatchTxCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingBatchTxCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsmAddress) > 0 {
		i -= len(m.AsmAddress)
		copy(dAtA[i:], m.AsmAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AsmAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x68
	}
	if m.ChainTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainTimestamp))
		i--
		dAtA[i] = 0x60
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.OutboundAckGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OutboundAckGasLimit))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.OutgoingTxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.DestinationGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.DestinationGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationGasLimit))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.RelayerFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ContractCalls) > 0 {
		for iNdEx := len(m.ContractCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x10
	}
	if m.OutgoingTxNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OutgoingTxNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingBatchTxConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingBatchTxConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingBatchTxConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OutgoingBatchNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OutgoingBatchNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutgoingBatchSender) > 0 {
		i -= len(m.OutgoingBatchSender)
		copy(dAtA[i:], m.OutgoingBatchSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OutgoingBatchSender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingAckCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingAckCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingAckCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.ExecData) > 0 {
		for iNdEx := len(m.ExecData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExecData[iNdEx])
			copy(dAtA[i:], m.ExecData[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecData[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ExecFlags) > 0 {
		for iNdEx := len(m.ExecFlags) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.ExecFlags[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecFlags)))
		i--
		dAtA[i] = 0x72
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.ExeCode != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ExeCode))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ContractAckResponses) > 0 {
		i -= len(m.ContractAckResponses)
		copy(dAtA[i:], m.ContractAckResponses)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAckResponses)))
		i--
		dAtA[i] = 0x5a
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x50
	}
	if len(m.DestinationTxHash) > 0 {
		i -= len(m.DestinationTxHash)
		copy(dAtA[i:], m.DestinationTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OutboundTxRequestedBy) > 0 {
		i -= len(m.OutboundTxRequestedBy)
		copy(dAtA[i:], m.OutboundTxRequestedBy)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OutboundTxRequestedBy)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OutboundTxNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OutboundTxNonce))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingTxFeeSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingTxFeeSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingTxFeeSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.RelayerFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.OutgoingBatchNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OutgoingBatchNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutgoingBatchSender) > 0 {
		i -= len(m.OutgoingBatchSender)
		copy(dAtA[i:], m.OutgoingBatchSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OutgoingBatchSender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingAckReadyToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingAckReadyToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingAckReadyToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingAckExecuted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingAckExecuted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingAckExecuted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationResponse) > 0 {
		i -= len(m.DelegationResponse)
		copy(dAtA[i:], m.DelegationResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DelegationResponse)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutgoingAckExecutionFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutgoingAckExecutionFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutgoingAckExecutionFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationErrorResponse) > 0 {
		i -= len(m.DelegationErrorResponse)
		copy(dAtA[i:], m.DelegationErrorResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DelegationErrorResponse)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EventNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventOutgoingBatchTxCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutgoingTxNonce != 0 {
		n += 1 + sovEvents(uint64(m.OutgoingTxNonce))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.ContractCalls) > 0 {
		for _, e := range m.ContractCalls {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.RelayerFee.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.DestinationGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasLimit))
	}
	if m.DestinationGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.DestinationGasPrice))
	}
	l = m.OutgoingTxFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.OutboundAckGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.OutboundAckGasLimit))
	}
	if m.IsAtomic {
		n += 2
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.ChainTimestamp))
	}
	if m.ExpiryTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.ExpiryTimestamp))
	}
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	l = len(m.AsmAddress)
	if l > 0 {
		n += 2 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOutgoingBatchTxConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationChainType != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OutgoingBatchSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OutgoingBatchNonce != 0 {
		n += 1 + sovEvents(uint64(m.OutgoingBatchNonce))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOutgoingAckCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	if m.OutboundTxNonce != 0 {
		n += 1 + sovEvents(uint64(m.OutboundTxNonce))
	}
	l = len(m.OutboundTxRequestedBy)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestinationTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovEvents(uint64(m.FeeConsumed))
	}
	l = len(m.ContractAckResponses)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ExeCode != 0 {
		n += 1 + sovEvents(uint64(m.ExeCode))
	}
	if m.ExecStatus {
		n += 2
	}
	if len(m.ExecFlags) > 0 {
		n += 1 + sovEvents(uint64(len(m.ExecFlags))) + len(m.ExecFlags)*1
	}
	if len(m.ExecData) > 0 {
		for _, b := range m.ExecData {
			l = len(b)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 2 + sovEvents(uint64(m.Status))
	}
	return n
}

func (m *EventOutgoingTxFeeSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationChainType != 0 {
		n += 1 + sovEvents(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OutgoingBatchSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OutgoingBatchNonce != 0 {
		n += 1 + sovEvents(uint64(m.OutgoingBatchNonce))
	}
	l = m.RelayerFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.RefundFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventOutgoingAckReadyToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TxFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventOutgoingAckExecuted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.DelegationResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOutgoingAckExecutionFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvents(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovEvents(uint64(m.EventNonce))
	}
	l = len(m.DelegationErrorResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventOutgoingBatchTxCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingBatchTxCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingBatchTxCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxNonce", wireType)
			}
			m.OutgoingTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCalls = append(m.ContractCalls, ContractCall{})
			if err := m.ContractCalls[len(m.ContractCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasLimit", wireType)
			}
			m.DestinationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasPrice", wireType)
			}
			m.DestinationGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingTxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundAckGasLimit", wireType)
			}
			m.OutboundAckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundAckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTimestamp", wireType)
			}
			m.ChainTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OutgoingTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = append(m.RouteRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteRecipient == nil {
				m.RouteRecipient = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsmAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsmAddress = append(m.AsmAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AsmAddress == nil {
				m.AsmAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingBatchTxConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingBatchTxConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingBatchTxConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingBatchSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchNonce", wireType)
			}
			m.OutgoingBatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingBatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingAckCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingAckCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingAckCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxNonce", wireType)
			}
			m.OutboundTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxRequestedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxRequestedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAckResponses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAckResponses = append(m.ContractAckResponses[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAckResponses == nil {
				m.ContractAckResponses = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExeCode", wireType)
			}
			m.ExeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExeCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 14:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExecFlags = append(m.ExecFlags, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ExecFlags) == 0 {
					m.ExecFlags = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExecFlags = append(m.ExecFlags, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFlags", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData, make([]byte, postIndex-iNdEx))
			copy(m.ExecData[len(m.ExecData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OutgoingTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingTxFeeSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingTxFeeSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingTxFeeSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingBatchSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchNonce", wireType)
			}
			m.OutgoingBatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingBatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingAckReadyToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingAckReadyToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingAckReadyToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingAckExecuted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingAckExecuted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingAckExecuted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationResponse = append(m.DelegationResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.DelegationResponse == nil {
				m.DelegationResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutgoingAckExecutionFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutgoingAckExecutionFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutgoingAckExecutionFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationErrorResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationErrorResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
