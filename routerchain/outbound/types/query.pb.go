// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbound/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetOutgoingBatchTxRequest struct {
	DestinationChainType uint64 `protobuf:"varint,1,opt,name=destination_chain_type,json=destinationChainType,proto3" json:"destination_chain_type,omitempty"`
	DestinationChainId   string `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	SourceAddress        string `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Nonce                uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetOutgoingBatchTxRequest) Reset()         { *m = QueryGetOutgoingBatchTxRequest{} }
func (m *QueryGetOutgoingBatchTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutgoingBatchTxRequest) ProtoMessage()    {}
func (*QueryGetOutgoingBatchTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{2}
}
func (m *QueryGetOutgoingBatchTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutgoingBatchTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutgoingBatchTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutgoingBatchTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutgoingBatchTxRequest.Merge(m, src)
}
func (m *QueryGetOutgoingBatchTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutgoingBatchTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutgoingBatchTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutgoingBatchTxRequest proto.InternalMessageInfo

func (m *QueryGetOutgoingBatchTxRequest) GetDestinationChainType() uint64 {
	if m != nil {
		return m.DestinationChainType
	}
	return 0
}

func (m *QueryGetOutgoingBatchTxRequest) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *QueryGetOutgoingBatchTxRequest) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *QueryGetOutgoingBatchTxRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryGetOutgoingBatchTxResponse struct {
	OutgoingBatchTx OutgoingBatchTx `protobuf:"bytes,1,opt,name=outgoingBatchTx,proto3" json:"outgoingBatchTx"`
}

func (m *QueryGetOutgoingBatchTxResponse) Reset()         { *m = QueryGetOutgoingBatchTxResponse{} }
func (m *QueryGetOutgoingBatchTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutgoingBatchTxResponse) ProtoMessage()    {}
func (*QueryGetOutgoingBatchTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{3}
}
func (m *QueryGetOutgoingBatchTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutgoingBatchTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutgoingBatchTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutgoingBatchTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutgoingBatchTxResponse.Merge(m, src)
}
func (m *QueryGetOutgoingBatchTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutgoingBatchTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutgoingBatchTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutgoingBatchTxResponse proto.InternalMessageInfo

func (m *QueryGetOutgoingBatchTxResponse) GetOutgoingBatchTx() OutgoingBatchTx {
	if m != nil {
		return m.OutgoingBatchTx
	}
	return OutgoingBatchTx{}
}

type QueryAllOutgoingBatchTxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutgoingBatchTxRequest) Reset()         { *m = QueryAllOutgoingBatchTxRequest{} }
func (m *QueryAllOutgoingBatchTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutgoingBatchTxRequest) ProtoMessage()    {}
func (*QueryAllOutgoingBatchTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{4}
}
func (m *QueryAllOutgoingBatchTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutgoingBatchTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutgoingBatchTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutgoingBatchTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutgoingBatchTxRequest.Merge(m, src)
}
func (m *QueryAllOutgoingBatchTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutgoingBatchTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutgoingBatchTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutgoingBatchTxRequest proto.InternalMessageInfo

func (m *QueryAllOutgoingBatchTxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutgoingBatchTxResponse struct {
	OutgoingBatchTx []OutgoingBatchTx   `protobuf:"bytes,1,rep,name=outgoingBatchTx,proto3" json:"outgoingBatchTx"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutgoingBatchTxResponse) Reset()         { *m = QueryAllOutgoingBatchTxResponse{} }
func (m *QueryAllOutgoingBatchTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutgoingBatchTxResponse) ProtoMessage()    {}
func (*QueryAllOutgoingBatchTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{5}
}
func (m *QueryAllOutgoingBatchTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutgoingBatchTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutgoingBatchTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutgoingBatchTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutgoingBatchTxResponse.Merge(m, src)
}
func (m *QueryAllOutgoingBatchTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutgoingBatchTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutgoingBatchTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutgoingBatchTxResponse proto.InternalMessageInfo

func (m *QueryAllOutgoingBatchTxResponse) GetOutgoingBatchTx() []OutgoingBatchTx {
	if m != nil {
		return m.OutgoingBatchTx
	}
	return nil
}

func (m *QueryAllOutgoingBatchTxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOutgoingBatchConfirmRequest struct {
	DestinationChainType uint64 `protobuf:"varint,1,opt,name=destination_chain_type,json=destinationChainType,proto3" json:"destination_chain_type,omitempty"`
	DestinationChainId   string `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	SourceAddress        string `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Nonce                uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Orchestrator         string `protobuf:"bytes,5,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *QueryGetOutgoingBatchConfirmRequest) Reset()         { *m = QueryGetOutgoingBatchConfirmRequest{} }
func (m *QueryGetOutgoingBatchConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutgoingBatchConfirmRequest) ProtoMessage()    {}
func (*QueryGetOutgoingBatchConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{6}
}
func (m *QueryGetOutgoingBatchConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutgoingBatchConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutgoingBatchConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutgoingBatchConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutgoingBatchConfirmRequest.Merge(m, src)
}
func (m *QueryGetOutgoingBatchConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutgoingBatchConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutgoingBatchConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutgoingBatchConfirmRequest proto.InternalMessageInfo

func (m *QueryGetOutgoingBatchConfirmRequest) GetDestinationChainType() uint64 {
	if m != nil {
		return m.DestinationChainType
	}
	return 0
}

func (m *QueryGetOutgoingBatchConfirmRequest) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *QueryGetOutgoingBatchConfirmRequest) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *QueryGetOutgoingBatchConfirmRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryGetOutgoingBatchConfirmRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type QueryGetOutgoingBatchConfirmResponse struct {
	OutgoingBatchConfirm OutgoingBatchConfirm `protobuf:"bytes,1,opt,name=outgoingBatchConfirm,proto3" json:"outgoingBatchConfirm"`
}

func (m *QueryGetOutgoingBatchConfirmResponse) Reset()         { *m = QueryGetOutgoingBatchConfirmResponse{} }
func (m *QueryGetOutgoingBatchConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutgoingBatchConfirmResponse) ProtoMessage()    {}
func (*QueryGetOutgoingBatchConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{7}
}
func (m *QueryGetOutgoingBatchConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutgoingBatchConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutgoingBatchConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutgoingBatchConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutgoingBatchConfirmResponse.Merge(m, src)
}
func (m *QueryGetOutgoingBatchConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutgoingBatchConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutgoingBatchConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutgoingBatchConfirmResponse proto.InternalMessageInfo

func (m *QueryGetOutgoingBatchConfirmResponse) GetOutgoingBatchConfirm() OutgoingBatchConfirm {
	if m != nil {
		return m.OutgoingBatchConfirm
	}
	return OutgoingBatchConfirm{}
}

type QueryAllOutgoingBatchConfirmRequest struct {
	DestinationChainType uint64             `protobuf:"varint,1,opt,name=destination_chain_type,json=destinationChainType,proto3" json:"destination_chain_type,omitempty"`
	DestinationChainId   string             `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	SourceAddress        string             `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Nonce                uint64             `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pagination           *query.PageRequest `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutgoingBatchConfirmRequest) Reset()         { *m = QueryAllOutgoingBatchConfirmRequest{} }
func (m *QueryAllOutgoingBatchConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutgoingBatchConfirmRequest) ProtoMessage()    {}
func (*QueryAllOutgoingBatchConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{8}
}
func (m *QueryAllOutgoingBatchConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutgoingBatchConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutgoingBatchConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutgoingBatchConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutgoingBatchConfirmRequest.Merge(m, src)
}
func (m *QueryAllOutgoingBatchConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutgoingBatchConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutgoingBatchConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutgoingBatchConfirmRequest proto.InternalMessageInfo

func (m *QueryAllOutgoingBatchConfirmRequest) GetDestinationChainType() uint64 {
	if m != nil {
		return m.DestinationChainType
	}
	return 0
}

func (m *QueryAllOutgoingBatchConfirmRequest) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *QueryAllOutgoingBatchConfirmRequest) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *QueryAllOutgoingBatchConfirmRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *QueryAllOutgoingBatchConfirmRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutgoingBatchConfirmResponse struct {
	OutgoingBatchConfirm []OutgoingBatchConfirm `protobuf:"bytes,1,rep,name=outgoingBatchConfirm,proto3" json:"outgoingBatchConfirm"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutgoingBatchConfirmResponse) Reset()         { *m = QueryAllOutgoingBatchConfirmResponse{} }
func (m *QueryAllOutgoingBatchConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutgoingBatchConfirmResponse) ProtoMessage()    {}
func (*QueryAllOutgoingBatchConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{9}
}
func (m *QueryAllOutgoingBatchConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutgoingBatchConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutgoingBatchConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutgoingBatchConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutgoingBatchConfirmResponse.Merge(m, src)
}
func (m *QueryAllOutgoingBatchConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutgoingBatchConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutgoingBatchConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutgoingBatchConfirmResponse proto.InternalMessageInfo

func (m *QueryAllOutgoingBatchConfirmResponse) GetOutgoingBatchConfirm() []OutgoingBatchConfirm {
	if m != nil {
		return m.OutgoingBatchConfirm
	}
	return nil
}

func (m *QueryAllOutgoingBatchConfirmResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOutboundAckRequest struct {
	ChainType  uint64 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId    string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EventNonce uint64 `protobuf:"varint,3,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryGetOutboundAckRequest) Reset()         { *m = QueryGetOutboundAckRequest{} }
func (m *QueryGetOutboundAckRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutboundAckRequest) ProtoMessage()    {}
func (*QueryGetOutboundAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{10}
}
func (m *QueryGetOutboundAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutboundAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutboundAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutboundAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutboundAckRequest.Merge(m, src)
}
func (m *QueryGetOutboundAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutboundAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutboundAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutboundAckRequest proto.InternalMessageInfo

func (m *QueryGetOutboundAckRequest) GetChainType() uint64 {
	if m != nil {
		return m.ChainType
	}
	return 0
}

func (m *QueryGetOutboundAckRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetOutboundAckRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryGetOutboundAckResponse struct {
	OutboundAck OutboundAck `protobuf:"bytes,1,opt,name=OutboundAck,proto3" json:"OutboundAck"`
}

func (m *QueryGetOutboundAckResponse) Reset()         { *m = QueryGetOutboundAckResponse{} }
func (m *QueryGetOutboundAckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutboundAckResponse) ProtoMessage()    {}
func (*QueryGetOutboundAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{11}
}
func (m *QueryGetOutboundAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutboundAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutboundAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutboundAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutboundAckResponse.Merge(m, src)
}
func (m *QueryGetOutboundAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutboundAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutboundAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutboundAckResponse proto.InternalMessageInfo

func (m *QueryGetOutboundAckResponse) GetOutboundAck() OutboundAck {
	if m != nil {
		return m.OutboundAck
	}
	return OutboundAck{}
}

type QueryAllOutboundAckRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundAckRequest) Reset()         { *m = QueryAllOutboundAckRequest{} }
func (m *QueryAllOutboundAckRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundAckRequest) ProtoMessage()    {}
func (*QueryAllOutboundAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{12}
}
func (m *QueryAllOutboundAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundAckRequest.Merge(m, src)
}
func (m *QueryAllOutboundAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundAckRequest proto.InternalMessageInfo

func (m *QueryAllOutboundAckRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutboundAckResponse struct {
	OutboundAck []OutboundAck       `protobuf:"bytes,1,rep,name=OutboundAck,proto3" json:"OutboundAck"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundAckResponse) Reset()         { *m = QueryAllOutboundAckResponse{} }
func (m *QueryAllOutboundAckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundAckResponse) ProtoMessage()    {}
func (*QueryAllOutboundAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{13}
}
func (m *QueryAllOutboundAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundAckResponse.Merge(m, src)
}
func (m *QueryAllOutboundAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundAckResponse proto.InternalMessageInfo

func (m *QueryAllOutboundAckResponse) GetOutboundAck() []OutboundAck {
	if m != nil {
		return m.OutboundAck
	}
	return nil
}

func (m *QueryAllOutboundAckResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLastOutboundBatchNonceRequest struct {
	DestinationChainType uint64 `protobuf:"varint,1,opt,name=destination_chain_type,json=destinationChainType,proto3" json:"destination_chain_type,omitempty"`
	DestinationChainId   string `protobuf:"bytes,2,opt,name=destination_chain_id,json=destinationChainId,proto3" json:"destination_chain_id,omitempty"`
	SourceAddress        string `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (m *QueryLastOutboundBatchNonceRequest) Reset()         { *m = QueryLastOutboundBatchNonceRequest{} }
func (m *QueryLastOutboundBatchNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastOutboundBatchNonceRequest) ProtoMessage()    {}
func (*QueryLastOutboundBatchNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{14}
}
func (m *QueryLastOutboundBatchNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastOutboundBatchNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastOutboundBatchNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastOutboundBatchNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastOutboundBatchNonceRequest.Merge(m, src)
}
func (m *QueryLastOutboundBatchNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastOutboundBatchNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastOutboundBatchNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastOutboundBatchNonceRequest proto.InternalMessageInfo

func (m *QueryLastOutboundBatchNonceRequest) GetDestinationChainType() uint64 {
	if m != nil {
		return m.DestinationChainType
	}
	return 0
}

func (m *QueryLastOutboundBatchNonceRequest) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *QueryLastOutboundBatchNonceRequest) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

type QueryLastOutboundBatchNonceResponse struct {
	OutboundBatchNonce uint64 `protobuf:"varint,1,opt,name=outboundBatchNonce,proto3" json:"outboundBatchNonce,omitempty"`
}

func (m *QueryLastOutboundBatchNonceResponse) Reset()         { *m = QueryLastOutboundBatchNonceResponse{} }
func (m *QueryLastOutboundBatchNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastOutboundBatchNonceResponse) ProtoMessage()    {}
func (*QueryLastOutboundBatchNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_88a2da1ca53c2871, []int{15}
}
func (m *QueryLastOutboundBatchNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastOutboundBatchNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastOutboundBatchNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastOutboundBatchNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastOutboundBatchNonceResponse.Merge(m, src)
}
func (m *QueryLastOutboundBatchNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastOutboundBatchNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastOutboundBatchNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastOutboundBatchNonceResponse proto.InternalMessageInfo

func (m *QueryLastOutboundBatchNonceResponse) GetOutboundBatchNonce() uint64 {
	if m != nil {
		return m.OutboundBatchNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.outbound.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.outbound.QueryParamsResponse")
	proto.RegisterType((*QueryGetOutgoingBatchTxRequest)(nil), "routerprotocol.routerchain.outbound.QueryGetOutgoingBatchTxRequest")
	proto.RegisterType((*QueryGetOutgoingBatchTxResponse)(nil), "routerprotocol.routerchain.outbound.QueryGetOutgoingBatchTxResponse")
	proto.RegisterType((*QueryAllOutgoingBatchTxRequest)(nil), "routerprotocol.routerchain.outbound.QueryAllOutgoingBatchTxRequest")
	proto.RegisterType((*QueryAllOutgoingBatchTxResponse)(nil), "routerprotocol.routerchain.outbound.QueryAllOutgoingBatchTxResponse")
	proto.RegisterType((*QueryGetOutgoingBatchConfirmRequest)(nil), "routerprotocol.routerchain.outbound.QueryGetOutgoingBatchConfirmRequest")
	proto.RegisterType((*QueryGetOutgoingBatchConfirmResponse)(nil), "routerprotocol.routerchain.outbound.QueryGetOutgoingBatchConfirmResponse")
	proto.RegisterType((*QueryAllOutgoingBatchConfirmRequest)(nil), "routerprotocol.routerchain.outbound.QueryAllOutgoingBatchConfirmRequest")
	proto.RegisterType((*QueryAllOutgoingBatchConfirmResponse)(nil), "routerprotocol.routerchain.outbound.QueryAllOutgoingBatchConfirmResponse")
	proto.RegisterType((*QueryGetOutboundAckRequest)(nil), "routerprotocol.routerchain.outbound.QueryGetOutboundAckRequest")
	proto.RegisterType((*QueryGetOutboundAckResponse)(nil), "routerprotocol.routerchain.outbound.QueryGetOutboundAckResponse")
	proto.RegisterType((*QueryAllOutboundAckRequest)(nil), "routerprotocol.routerchain.outbound.QueryAllOutboundAckRequest")
	proto.RegisterType((*QueryAllOutboundAckResponse)(nil), "routerprotocol.routerchain.outbound.QueryAllOutboundAckResponse")
	proto.RegisterType((*QueryLastOutboundBatchNonceRequest)(nil), "routerprotocol.routerchain.outbound.QueryLastOutboundBatchNonceRequest")
	proto.RegisterType((*QueryLastOutboundBatchNonceResponse)(nil), "routerprotocol.routerchain.outbound.QueryLastOutboundBatchNonceResponse")
}

func init() { proto.RegisterFile("outbound/query.proto", fileDescriptor_88a2da1ca53c2871) }

var fileDescriptor_88a2da1ca53c2871 = []byte{
	// 1095 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcb, 0x6f, 0xdc, 0x44,
	0x18, 0xcf, 0xec, 0x26, 0x81, 0x4e, 0xa0, 0x45, 0xc3, 0x52, 0x96, 0x6d, 0xd9, 0x04, 0x97, 0x42,
	0x05, 0xaa, 0xdd, 0xa7, 0x08, 0x70, 0x68, 0x93, 0x20, 0x92, 0x48, 0x08, 0xca, 0xaa, 0x48, 0x3c,
	0x0e, 0x66, 0xd6, 0x1e, 0xbc, 0x56, 0x1d, 0xcf, 0xd6, 0x33, 0x6e, 0x13, 0xad, 0xf6, 0x00, 0x42,
	0x42, 0x02, 0x21, 0x21, 0x1e, 0x12, 0x12, 0x07, 0xee, 0x1c, 0xe1, 0xc4, 0x8d, 0x4b, 0xa5, 0x5e,
	0x90, 0x22, 0x71, 0xe1, 0x84, 0x20, 0xe9, 0x89, 0x03, 0x17, 0xfe, 0x01, 0xb4, 0x33, 0xe3, 0xad,
	0xed, 0xb5, 0x13, 0xaf, 0xb3, 0x95, 0xe8, 0x6d, 0x3d, 0x8f, 0xef, 0xfb, 0x7e, 0x8f, 0x99, 0xf9,
	0x16, 0xd6, 0x68, 0xc8, 0xdb, 0x34, 0xf4, 0x6d, 0xe3, 0x7a, 0x48, 0x82, 0x2d, 0xbd, 0x1b, 0x50,
	0x4e, 0xd1, 0x89, 0x80, 0x86, 0x9c, 0x04, 0xe2, 0xc3, 0xa2, 0x9e, 0x2e, 0x3f, 0xad, 0x0e, 0x76,
	0x7d, 0x3d, 0xda, 0xd0, 0x38, 0xee, 0x50, 0xea, 0x78, 0xc4, 0xc0, 0x5d, 0xd7, 0xc0, 0xbe, 0x4f,
	0x39, 0xe6, 0x2e, 0xf5, 0x99, 0x0c, 0xd1, 0x78, 0xce, 0xa2, 0x6c, 0x83, 0x32, 0xa3, 0x8d, 0x19,
	0x91, 0xb1, 0x8d, 0x1b, 0x67, 0xdb, 0x84, 0xe3, 0xb3, 0x46, 0x17, 0x3b, 0xae, 0x2f, 0x16, 0xab,
	0xb5, 0x8f, 0x0d, 0x8b, 0xe8, 0xe2, 0x00, 0x6f, 0x44, 0x21, 0x16, 0x86, 0xc3, 0x34, 0xe4, 0x0e,
	0x75, 0x7d, 0xc7, 0x6c, 0x63, 0x6e, 0x75, 0x4c, 0xbe, 0xa9, 0x56, 0x9c, 0xcc, 0x5b, 0x61, 0x51,
	0xff, 0x03, 0x37, 0xd8, 0x50, 0xcb, 0x9e, 0x1a, 0x5d, 0xc6, 0x37, 0x4d, 0xc6, 0x31, 0x0f, 0xa3,
	0x5c, 0xc7, 0x87, 0x4b, 0x2c, 0xea, 0xf3, 0x00, 0x5b, 0xdc, 0xb4, 0xb0, 0xe7, 0xa9, 0xd9, 0x66,
	0x1c, 0x4c, 0x04, 0xc3, 0xa2, 0x6e, 0x04, 0xa0, 0xe6, 0x50, 0x87, 0x8a, 0x9f, 0xc6, 0xe0, 0x97,
	0x1a, 0x3d, 0x16, 0x4f, 0x2b, 0x7e, 0x98, 0xd8, 0xba, 0x26, 0x27, 0xb5, 0x1a, 0x44, 0x6f, 0x0e,
	0x58, 0xb9, 0x22, 0x10, 0xb7, 0xc8, 0xf5, 0x90, 0x30, 0xae, 0xbd, 0x0f, 0x1f, 0x4d, 0x8c, 0xb2,
	0x2e, 0xf5, 0x19, 0x41, 0xeb, 0x70, 0x56, 0x32, 0x53, 0x07, 0x0b, 0xe0, 0xd4, 0xdc, 0xb9, 0xe7,
	0xf5, 0x02, 0x02, 0xe9, 0x32, 0xc8, 0xf2, 0xf4, 0xed, 0x3f, 0xe6, 0xa7, 0x5a, 0x2a, 0x80, 0x76,
	0x0b, 0xc0, 0xa6, 0x48, 0xb1, 0x4a, 0xf8, 0x1b, 0x8a, 0x8d, 0xe5, 0x01, 0x67, 0x57, 0x37, 0x55,
	0x11, 0xe8, 0x02, 0x3c, 0x6a, 0x13, 0xc6, 0x95, 0x46, 0xa6, 0x88, 0x6a, 0xf2, 0xad, 0x2e, 0x11,
	0xd9, 0xa7, 0x5b, 0xb5, 0xd8, 0xec, 0xca, 0x60, 0xf2, 0xea, 0x56, 0x97, 0xa0, 0x33, 0xb0, 0x36,
	0xba, 0xcb, 0xb5, 0xeb, 0x95, 0x05, 0x70, 0xea, 0x50, 0x0b, 0xa5, 0xf7, 0xac, 0xdb, 0xe8, 0x24,
	0x3c, 0xcc, 0x68, 0x18, 0x58, 0xc4, 0xc4, 0xb6, 0x1d, 0x10, 0xc6, 0xea, 0x55, 0xb1, 0xf6, 0x61,
	0x39, 0xba, 0x24, 0x07, 0x51, 0x0d, 0xce, 0xf8, 0xd4, 0xb7, 0x48, 0x7d, 0x5a, 0x64, 0x97, 0x1f,
	0xda, 0x27, 0x00, 0xce, 0xe7, 0xe2, 0x50, 0xb4, 0xd9, 0xf0, 0x08, 0x4d, 0x4e, 0x29, 0xfe, 0x2e,
	0x14, 0xe2, 0x2f, 0x15, 0x56, 0x11, 0x99, 0x0e, 0xa9, 0x75, 0x14, 0xa1, 0x4b, 0x9e, 0x97, 0x43,
	0xe8, 0xab, 0x10, 0xde, 0xf5, 0xbc, 0x2a, 0xe1, 0x19, 0x5d, 0x7a, 0x4a, 0x1f, 0x78, 0x4a, 0x97,
	0x87, 0x4f, 0x39, 0x4b, 0xbf, 0x82, 0x1d, 0xa2, 0xf6, 0xb6, 0x62, 0x3b, 0xb5, 0xed, 0x08, 0x73,
	0x56, 0xaa, 0xbd, 0x30, 0x57, 0x27, 0x8c, 0x19, 0xad, 0x26, 0x10, 0x55, 0x04, 0xa2, 0x67, 0xf7,
	0x45, 0x24, 0x4b, 0x4c, 0x40, 0xfa, 0x07, 0xc0, 0x13, 0x99, 0x32, 0xae, 0xc8, 0x13, 0x7c, 0x3f,
	0x79, 0x12, 0x69, 0xf0, 0x21, 0x1a, 0x58, 0x1d, 0xc2, 0x78, 0x80, 0x39, 0x0d, 0xea, 0x33, 0x62,
	0x6b, 0x62, 0x4c, 0xfb, 0x0e, 0xc0, 0xa7, 0xf7, 0x06, 0xac, 0x84, 0x64, 0xe2, 0x6e, 0x1e, 0x99,
	0x57, 0xf6, 0x79, 0x71, 0x7c, 0x35, 0x55, 0x00, 0x25, 0x69, 0x66, 0x70, 0xed, 0xcb, 0x8a, 0x92,
	0x23, 0xed, 0xb0, 0xfb, 0x51, 0x8e, 0xe4, 0xb1, 0x9b, 0x29, 0x7d, 0xec, 0xee, 0x44, 0x92, 0xe5,
	0x92, 0xb2, 0xaf, 0x64, 0xd5, 0x7b, 0x26, 0xd9, 0xe4, 0x8e, 0xe2, 0x4d, 0xd8, 0x88, 0x19, 0x53,
	0x54, 0xb3, 0x64, 0x5d, 0x8b, 0x14, 0x7f, 0x12, 0xc2, 0x11, 0x95, 0x0f, 0x59, 0x43, 0x69, 0x9f,
	0x80, 0x0f, 0xa6, 0xe4, 0x7c, 0xc0, 0x52, 0x1a, 0xce, 0xc3, 0x39, 0x72, 0x83, 0xf8, 0xdc, 0x94,
	0x12, 0x55, 0xc5, 0x56, 0x28, 0x86, 0x5e, 0x17, 0x57, 0xf9, 0x4d, 0x78, 0x2c, 0x33, 0xb1, 0x62,
	0xf5, 0x6d, 0x38, 0x17, 0x1b, 0x56, 0xfe, 0x3f, 0x53, 0x94, 0xcc, 0x68, 0x9f, 0xe2, 0x30, 0x1e,
	0x4a, 0xb3, 0x15, 0x62, 0xa9, 0x6b, 0x1a, 0xf1, 0xa4, 0x6e, 0xed, 0x5f, 0x80, 0xc2, 0x97, 0x4e,
	0x93, 0x87, 0xaf, 0x3a, 0x21, 0x7c, 0x93, 0xb3, 0xc6, 0x4f, 0x00, 0x6a, 0x02, 0xc2, 0x6b, 0x98,
	0x0d, 0x35, 0x12, 0x2e, 0x14, 0x0a, 0xfe, 0x3f, 0x6f, 0x05, 0xed, 0x2d, 0x75, 0x97, 0xe5, 0x15,
	0xad, 0xf8, 0xd7, 0x21, 0xa2, 0x23, 0xb3, 0xaa, 0xe2, 0x8c, 0x99, 0x73, 0x7f, 0x3f, 0x02, 0x67,
	0x44, 0x5c, 0xf4, 0x23, 0x80, 0xb3, 0xb2, 0xc9, 0x42, 0x2f, 0x14, 0xd2, 0x6b, 0xb4, 0xe3, 0x6b,
	0x2c, 0x8e, 0xbf, 0x51, 0xd6, 0xad, 0x5d, 0xfc, 0xe8, 0xb7, 0x3b, 0x5f, 0x55, 0x0c, 0x74, 0xda,
	0x90, 0x5b, 0x4e, 0x47, 0x21, 0xa2, 0x6f, 0x11, 0xc3, 0x48, 0xf5, 0xd6, 0xe8, 0x87, 0x0a, 0x3c,
	0x92, 0x7a, 0xe5, 0xd1, 0x4a, 0xf1, 0x22, 0x72, 0xdb, 0xc6, 0xc6, 0x2b, 0x07, 0x0b, 0xa2, 0x50,
	0x7d, 0x06, 0x04, 0xac, 0x8f, 0x01, 0xfa, 0x10, 0x14, 0x04, 0x36, 0xf2, 0xef, 0xc0, 0xe8, 0x65,
	0xdb, 0xb0, 0x9f, 0x35, 0xe1, 0xda, 0x7d, 0xa3, 0x97, 0xb4, 0x53, 0xdf, 0xe8, 0x89, 0xbb, 0xaa,
	0x8f, 0xfe, 0x02, 0x10, 0xa5, 0x2a, 0x5d, 0xf2, 0xbc, 0x71, 0xf8, 0xca, 0xed, 0x0a, 0xc7, 0xe1,
	0x2b, 0xbf, 0xdf, 0xd3, 0x2e, 0x0b, 0xba, 0x5e, 0x42, 0x8b, 0x65, 0xc9, 0x42, 0xbf, 0x56, 0x60,
	0x2d, 0xeb, 0xd5, 0x41, 0x6b, 0xe5, 0x05, 0x4d, 0xb6, 0x0b, 0x8d, 0xf5, 0x09, 0x44, 0x52, 0x78,
	0xbf, 0x97, 0xfe, 0xf8, 0x16, 0xa0, 0x6f, 0x4a, 0xfa, 0x43, 0xfd, 0x37, 0x9c, 0x98, 0x49, 0x8c,
	0x5e, 0xbc, 0xc1, 0xeb, 0xa3, 0x5b, 0x15, 0xf8, 0x78, 0x16, 0x84, 0x81, 0x71, 0xd6, 0xca, 0x6b,
	0x5e, 0x9e, 0xd2, 0x7d, 0xda, 0x16, 0xed, 0x6b, 0x49, 0xe9, 0xe7, 0x00, 0x7d, 0x5a, 0x94, 0x52,
	0xec, 0x79, 0xe6, 0x3d, 0xa6, 0x15, 0xfd, 0x0b, 0x12, 0x0f, 0x23, 0xba, 0x34, 0xae, 0x89, 0x52,
	0x0f, 0x7a, 0xe3, 0x72, 0xf9, 0x00, 0x8a, 0x29, 0x2c, 0x88, 0x7a, 0x0f, 0xbd, 0x53, 0xdc, 0x79,
	0xc3, 0xff, 0xfd, 0x46, 0x2f, 0x41, 0x46, 0x8c, 0x80, 0x58, 0x77, 0xd4, 0x47, 0xdb, 0x00, 0x1e,
	0x8e, 0xa5, 0x1e, 0x98, 0xe6, 0xd2, 0xb8, 0x52, 0x1f, 0x00, 0x78, 0x76, 0x8f, 0xa2, 0xbd, 0x2c,
	0x80, 0x5f, 0x44, 0xe7, 0x4b, 0x00, 0x47, 0x3f, 0x57, 0xe0, 0xd1, 0xec, 0x37, 0x18, 0xad, 0x16,
	0xaf, 0x6c, 0xcf, 0xd6, 0xa3, 0xb1, 0x76, 0xf0, 0x40, 0xe5, 0x1f, 0x20, 0x0f, 0x33, 0x6e, 0x0e,
	0x21, 0xcb, 0xe3, 0x20, 0xe4, 0x3c, 0xf0, 0x61, 0x58, 0x6e, 0xdd, 0xde, 0x69, 0x82, 0xed, 0x9d,
	0x26, 0xf8, 0x73, 0xa7, 0x09, 0xbe, 0xd8, 0x6d, 0x4e, 0x6d, 0xef, 0x36, 0xa7, 0x7e, 0xdf, 0x6d,
	0x4e, 0xbd, 0xbb, 0xe8, 0xb8, 0xbc, 0x13, 0xb6, 0x75, 0x8b, 0x6e, 0xec, 0x5d, 0xe6, 0xe6, 0xdd,
	0x42, 0x07, 0xb9, 0x59, 0x7b, 0x56, 0xac, 0x3b, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d,
	0x10, 0xd6, 0x17, 0xfc, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a OutgoingBatchTx by index.
	OutgoingBatchTx(ctx context.Context, in *QueryGetOutgoingBatchTxRequest, opts ...grpc.CallOption) (*QueryGetOutgoingBatchTxResponse, error)
	// Queries a list of OutgoingBatchTx items.
	OutgoingBatchTxAll(ctx context.Context, in *QueryAllOutgoingBatchTxRequest, opts ...grpc.CallOption) (*QueryAllOutgoingBatchTxResponse, error)
	// Queries a OutgoingBatchConfirm by index.
	OutgoingBatchConfirm(ctx context.Context, in *QueryGetOutgoingBatchConfirmRequest, opts ...grpc.CallOption) (*QueryGetOutgoingBatchConfirmResponse, error)
	// Queries a list of OutgoingBatchConfirm items.
	OutgoingBatchConfirmAll(ctx context.Context, in *QueryAllOutgoingBatchConfirmRequest, opts ...grpc.CallOption) (*QueryAllOutgoingBatchConfirmResponse, error)
	// Queries a OutboundAck by index.
	OutboundAck(ctx context.Context, in *QueryGetOutboundAckRequest, opts ...grpc.CallOption) (*QueryGetOutboundAckResponse, error)
	// Queries a list of OutboundAck items.
	OutboundAckAll(ctx context.Context, in *QueryAllOutboundAckRequest, opts ...grpc.CallOption) (*QueryAllOutboundAckResponse, error)
	// Queries a list of LastOutboundBatchNonce items.
	LastOutboundBatchNonce(ctx context.Context, in *QueryLastOutboundBatchNonceRequest, opts ...grpc.CallOption) (*QueryLastOutboundBatchNonceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingBatchTx(ctx context.Context, in *QueryGetOutgoingBatchTxRequest, opts ...grpc.CallOption) (*QueryGetOutgoingBatchTxResponse, error) {
	out := new(QueryGetOutgoingBatchTxResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/OutgoingBatchTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingBatchTxAll(ctx context.Context, in *QueryAllOutgoingBatchTxRequest, opts ...grpc.CallOption) (*QueryAllOutgoingBatchTxResponse, error) {
	out := new(QueryAllOutgoingBatchTxResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/OutgoingBatchTxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingBatchConfirm(ctx context.Context, in *QueryGetOutgoingBatchConfirmRequest, opts ...grpc.CallOption) (*QueryGetOutgoingBatchConfirmResponse, error) {
	out := new(QueryGetOutgoingBatchConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/OutgoingBatchConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingBatchConfirmAll(ctx context.Context, in *QueryAllOutgoingBatchConfirmRequest, opts ...grpc.CallOption) (*QueryAllOutgoingBatchConfirmResponse, error) {
	out := new(QueryAllOutgoingBatchConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/OutgoingBatchConfirmAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundAck(ctx context.Context, in *QueryGetOutboundAckRequest, opts ...grpc.CallOption) (*QueryGetOutboundAckResponse, error) {
	out := new(QueryGetOutboundAckResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/OutboundAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundAckAll(ctx context.Context, in *QueryAllOutboundAckRequest, opts ...grpc.CallOption) (*QueryAllOutboundAckResponse, error) {
	out := new(QueryAllOutboundAckResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/OutboundAckAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastOutboundBatchNonce(ctx context.Context, in *QueryLastOutboundBatchNonceRequest, opts ...grpc.CallOption) (*QueryLastOutboundBatchNonceResponse, error) {
	out := new(QueryLastOutboundBatchNonceResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Query/LastOutboundBatchNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a OutgoingBatchTx by index.
	OutgoingBatchTx(context.Context, *QueryGetOutgoingBatchTxRequest) (*QueryGetOutgoingBatchTxResponse, error)
	// Queries a list of OutgoingBatchTx items.
	OutgoingBatchTxAll(context.Context, *QueryAllOutgoingBatchTxRequest) (*QueryAllOutgoingBatchTxResponse, error)
	// Queries a OutgoingBatchConfirm by index.
	OutgoingBatchConfirm(context.Context, *QueryGetOutgoingBatchConfirmRequest) (*QueryGetOutgoingBatchConfirmResponse, error)
	// Queries a list of OutgoingBatchConfirm items.
	OutgoingBatchConfirmAll(context.Context, *QueryAllOutgoingBatchConfirmRequest) (*QueryAllOutgoingBatchConfirmResponse, error)
	// Queries a OutboundAck by index.
	OutboundAck(context.Context, *QueryGetOutboundAckRequest) (*QueryGetOutboundAckResponse, error)
	// Queries a list of OutboundAck items.
	OutboundAckAll(context.Context, *QueryAllOutboundAckRequest) (*QueryAllOutboundAckResponse, error)
	// Queries a list of LastOutboundBatchNonce items.
	LastOutboundBatchNonce(context.Context, *QueryLastOutboundBatchNonceRequest) (*QueryLastOutboundBatchNonceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OutgoingBatchTx(ctx context.Context, req *QueryGetOutgoingBatchTxRequest) (*QueryGetOutgoingBatchTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingBatchTx not implemented")
}
func (*UnimplementedQueryServer) OutgoingBatchTxAll(ctx context.Context, req *QueryAllOutgoingBatchTxRequest) (*QueryAllOutgoingBatchTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingBatchTxAll not implemented")
}
func (*UnimplementedQueryServer) OutgoingBatchConfirm(ctx context.Context, req *QueryGetOutgoingBatchConfirmRequest) (*QueryGetOutgoingBatchConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingBatchConfirm not implemented")
}
func (*UnimplementedQueryServer) OutgoingBatchConfirmAll(ctx context.Context, req *QueryAllOutgoingBatchConfirmRequest) (*QueryAllOutgoingBatchConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingBatchConfirmAll not implemented")
}
func (*UnimplementedQueryServer) OutboundAck(ctx context.Context, req *QueryGetOutboundAckRequest) (*QueryGetOutboundAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundAck not implemented")
}
func (*UnimplementedQueryServer) OutboundAckAll(ctx context.Context, req *QueryAllOutboundAckRequest) (*QueryAllOutboundAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundAckAll not implemented")
}
func (*UnimplementedQueryServer) LastOutboundBatchNonce(ctx context.Context, req *QueryLastOutboundBatchNonceRequest) (*QueryLastOutboundBatchNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastOutboundBatchNonce not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingBatchTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutgoingBatchTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingBatchTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/OutgoingBatchTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingBatchTx(ctx, req.(*QueryGetOutgoingBatchTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingBatchTxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutgoingBatchTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingBatchTxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/OutgoingBatchTxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingBatchTxAll(ctx, req.(*QueryAllOutgoingBatchTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingBatchConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutgoingBatchConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingBatchConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/OutgoingBatchConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingBatchConfirm(ctx, req.(*QueryGetOutgoingBatchConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingBatchConfirmAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutgoingBatchConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingBatchConfirmAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/OutgoingBatchConfirmAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingBatchConfirmAll(ctx, req.(*QueryAllOutgoingBatchConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutboundAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/OutboundAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundAck(ctx, req.(*QueryGetOutboundAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundAckAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutboundAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundAckAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/OutboundAckAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundAckAll(ctx, req.(*QueryAllOutboundAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastOutboundBatchNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastOutboundBatchNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastOutboundBatchNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Query/LastOutboundBatchNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastOutboundBatchNonce(ctx, req.(*QueryLastOutboundBatchNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.outbound.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OutgoingBatchTx",
			Handler:    _Query_OutgoingBatchTx_Handler,
		},
		{
			MethodName: "OutgoingBatchTxAll",
			Handler:    _Query_OutgoingBatchTxAll_Handler,
		},
		{
			MethodName: "OutgoingBatchConfirm",
			Handler:    _Query_OutgoingBatchConfirm_Handler,
		},
		{
			MethodName: "OutgoingBatchConfirmAll",
			Handler:    _Query_OutgoingBatchConfirmAll_Handler,
		},
		{
			MethodName: "OutboundAck",
			Handler:    _Query_OutboundAck_Handler,
		},
		{
			MethodName: "OutboundAckAll",
			Handler:    _Query_OutboundAckAll_Handler,
		},
		{
			MethodName: "LastOutboundBatchNonce",
			Handler:    _Query_LastOutboundBatchNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outbound/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetOutgoingBatchTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutgoingBatchTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutgoingBatchTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutgoingBatchTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutgoingBatchTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutgoingBatchTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutgoingBatchTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOutgoingBatchTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutgoingBatchTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutgoingBatchTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutgoingBatchTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutgoingBatchTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutgoingBatchTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutgoingBatchTx) > 0 {
		for iNdEx := len(m.OutgoingBatchTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutgoingBatchTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutgoingBatchConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutgoingBatchConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutgoingBatchConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutgoingBatchConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutgoingBatchConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutgoingBatchConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutgoingBatchConfirm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOutgoingBatchConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutgoingBatchConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutgoingBatchConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutgoingBatchConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutgoingBatchConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutgoingBatchConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutgoingBatchConfirm) > 0 {
		for iNdEx := len(m.OutgoingBatchConfirm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutgoingBatchConfirm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutboundAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutboundAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutboundAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutboundAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutboundAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutboundAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutboundAck.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutboundAck) > 0 {
		for iNdEx := len(m.OutboundAck) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundAck[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastOutboundBatchNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastOutboundBatchNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastOutboundBatchNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastOutboundBatchNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastOutboundBatchNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastOutboundBatchNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundBatchNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OutboundBatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetOutgoingBatchTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationChainType != 0 {
		n += 1 + sovQuery(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetOutgoingBatchTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutgoingBatchTx.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOutgoingBatchTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutgoingBatchTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutgoingBatchTx) > 0 {
		for _, e := range m.OutgoingBatchTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOutgoingBatchConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationChainType != 0 {
		n += 1 + sovQuery(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOutgoingBatchConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutgoingBatchConfirm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOutgoingBatchConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationChainType != 0 {
		n += 1 + sovQuery(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutgoingBatchConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutgoingBatchConfirm) > 0 {
		for _, e := range m.OutgoingBatchConfirm {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOutboundAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainType != 0 {
		n += 1 + sovQuery(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryGetOutboundAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutboundAck.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOutboundAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutboundAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutboundAck) > 0 {
		for _, e := range m.OutboundAck {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastOutboundBatchNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationChainType != 0 {
		n += 1 + sovQuery(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastOutboundBatchNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutboundBatchNonce != 0 {
		n += 1 + sovQuery(uint64(m.OutboundBatchNonce))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutgoingBatchTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutgoingBatchTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingBatchTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutgoingBatchTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutgoingBatchTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingBatchTx = append(m.OutgoingBatchTx, OutgoingBatchTx{})
			if err := m.OutgoingBatchTx[len(m.OutgoingBatchTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutgoingBatchConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutgoingBatchConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutgoingBatchConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingBatchConfirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutgoingBatchConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutgoingBatchConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutgoingBatchConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingBatchConfirm = append(m.OutgoingBatchConfirm, OutgoingBatchConfirm{})
			if err := m.OutgoingBatchConfirm[len(m.OutgoingBatchConfirm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutboundAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutboundAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutboundAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutboundAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutboundAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutboundAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutboundAck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundAck = append(m.OutboundAck, OutboundAck{})
			if err := m.OutboundAck[len(m.OutboundAck)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastOutboundBatchNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastOutboundBatchNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastOutboundBatchNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastOutboundBatchNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastOutboundBatchNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastOutboundBatchNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundBatchNonce", wireType)
			}
			m.OutboundBatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundBatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
