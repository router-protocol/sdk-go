// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbound/outgoing_batch_confirm.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/router-chain/x/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutgoingBatchConfirm struct {
	DestinationChainType types.ChainType `protobuf:"varint,1,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId   string          `protobuf:"bytes,2,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	OutgoingBatchSender  string          `protobuf:"bytes,3,opt,name=outgoingBatchSender,proto3" json:"outgoingBatchSender,omitempty"`
	OutgoingBatchNonce   uint64          `protobuf:"varint,4,opt,name=outgoingBatchNonce,proto3" json:"outgoingBatchNonce,omitempty"`
	EthSigner            string          `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string          `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator         string          `protobuf:"bytes,7,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *OutgoingBatchConfirm) Reset()         { *m = OutgoingBatchConfirm{} }
func (m *OutgoingBatchConfirm) String() string { return proto.CompactTextString(m) }
func (*OutgoingBatchConfirm) ProtoMessage()    {}
func (*OutgoingBatchConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a69507d89501d91, []int{0}
}
func (m *OutgoingBatchConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingBatchConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingBatchConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingBatchConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingBatchConfirm.Merge(m, src)
}
func (m *OutgoingBatchConfirm) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingBatchConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingBatchConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingBatchConfirm proto.InternalMessageInfo

func (m *OutgoingBatchConfirm) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *OutgoingBatchConfirm) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *OutgoingBatchConfirm) GetOutgoingBatchSender() string {
	if m != nil {
		return m.OutgoingBatchSender
	}
	return ""
}

func (m *OutgoingBatchConfirm) GetOutgoingBatchNonce() uint64 {
	if m != nil {
		return m.OutgoingBatchNonce
	}
	return 0
}

func (m *OutgoingBatchConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *OutgoingBatchConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *OutgoingBatchConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func init() {
	proto.RegisterType((*OutgoingBatchConfirm)(nil), "routerprotocol.routerchain.outbound.OutgoingBatchConfirm")
}

func init() {
	proto.RegisterFile("outbound/outgoing_batch_confirm.proto", fileDescriptor_0a69507d89501d91)
}

var fileDescriptor_0a69507d89501d91 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x4f, 0xeb, 0x30,
	0x10, 0xc7, 0xeb, 0xbe, 0xbe, 0x3e, 0xd5, 0x7a, 0x62, 0x30, 0x1d, 0x2c, 0x40, 0x51, 0x55, 0x84,
	0xd4, 0x05, 0xa7, 0x82, 0x85, 0xb9, 0x9d, 0x58, 0x40, 0x4a, 0x99, 0x58, 0xaa, 0xc4, 0x31, 0x89,
	0xa5, 0xd6, 0x57, 0x39, 0x67, 0x89, 0x7e, 0x0b, 0x3e, 0x16, 0x63, 0x47, 0x46, 0xd4, 0xee, 0x7c,
	0x06, 0x14, 0x87, 0xb6, 0x14, 0x45, 0x2c, 0x91, 0xee, 0xff, 0xbf, 0xfb, 0xff, 0xa2, 0x3b, 0xd3,
	0x0b, 0x70, 0x98, 0x80, 0x33, 0x69, 0x08, 0x0e, 0x33, 0xd0, 0x26, 0x9b, 0x26, 0x31, 0xca, 0x7c,
	0x2a, 0xc1, 0x3c, 0x69, 0x3b, 0x17, 0x0b, 0x0b, 0x08, 0xec, 0xdc, 0x82, 0x43, 0x65, 0x7d, 0x21,
	0x61, 0x26, 0xaa, 0x52, 0xe6, 0xb1, 0x36, 0x62, 0x9b, 0x70, 0x72, 0x3a, 0x77, 0x33, 0xd4, 0x5e,
	0x0c, 0xfd, 0x77, 0x8a, 0xcb, 0x85, 0xaa, 0x12, 0xfa, 0x1f, 0x4d, 0xda, 0xbd, 0xff, 0x42, 0x8c,
	0x4a, 0xc2, 0xb8, 0x02, 0xb0, 0x94, 0x76, 0x53, 0x55, 0xa0, 0x36, 0x31, 0x6a, 0x30, 0xe3, 0x72,
	0xee, 0x61, 0xb9, 0x50, 0x9c, 0xf4, 0xc8, 0xe0, 0xe8, 0x6a, 0x28, 0x7e, 0x21, 0xef, 0x79, 0x62,
	0x37, 0x17, 0xd5, 0xa6, 0x31, 0x41, 0xd9, 0x4f, 0xfd, 0x36, 0xe5, 0xcd, 0x1e, 0x19, 0x74, 0xa2,
	0x1a, 0x87, 0x0d, 0xe9, 0x31, 0x7c, 0xff, 0xdb, 0x89, 0x32, 0xa9, 0xb2, 0xfc, 0x8f, 0x1f, 0xa8,
	0xb3, 0x4a, 0xc2, 0x81, 0x7c, 0x07, 0x46, 0x2a, 0xde, 0xea, 0x91, 0x41, 0x2b, 0xaa, 0x71, 0xd8,
	0x19, 0xed, 0x28, 0xcc, 0x27, 0x3a, 0x33, 0xca, 0xf2, 0xbf, 0x3e, 0x77, 0x2f, 0x94, 0x6e, 0xa1,
	0x33, 0x13, 0xa3, 0xb3, 0x8a, 0xb7, 0x2b, 0x77, 0x27, 0xb0, 0x3e, 0xfd, 0x0f, 0x56, 0xe6, 0xaa,
	0x40, 0x1b, 0x23, 0x58, 0xfe, 0xcf, 0x37, 0x1c, 0x68, 0xa3, 0xe8, 0x75, 0x1d, 0x90, 0xd5, 0x3a,
	0x20, 0xef, 0xeb, 0x80, 0xbc, 0x6c, 0x82, 0xc6, 0x6a, 0x13, 0x34, 0xde, 0x36, 0x41, 0xe3, 0xf1,
	0x26, 0xd3, 0x98, 0xbb, 0x44, 0x48, 0x98, 0x87, 0xd5, 0x3a, 0x2f, 0xb7, 0xeb, 0xdd, 0xd6, 0xd5,
	0x11, 0x9f, 0xc3, 0xdd, 0xeb, 0x28, 0x2f, 0x59, 0x24, 0x6d, 0xdf, 0x77, 0xfd, 0x19, 0x00, 0x00,
	0xff, 0xff, 0xee, 0x2d, 0x06, 0x53, 0x36, 0x02, 0x00, 0x00,
}

func (m *OutgoingBatchConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingBatchConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingBatchConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintOutgoingBatchConfirm(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintOutgoingBatchConfirm(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintOutgoingBatchConfirm(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OutgoingBatchNonce != 0 {
		i = encodeVarintOutgoingBatchConfirm(dAtA, i, uint64(m.OutgoingBatchNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutgoingBatchSender) > 0 {
		i -= len(m.OutgoingBatchSender)
		copy(dAtA[i:], m.OutgoingBatchSender)
		i = encodeVarintOutgoingBatchConfirm(dAtA, i, uint64(len(m.OutgoingBatchSender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintOutgoingBatchConfirm(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintOutgoingBatchConfirm(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutgoingBatchConfirm(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutgoingBatchConfirm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingBatchConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationChainType != 0 {
		n += 1 + sovOutgoingBatchConfirm(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchConfirm(uint64(l))
	}
	l = len(m.OutgoingBatchSender)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchConfirm(uint64(l))
	}
	if m.OutgoingBatchNonce != 0 {
		n += 1 + sovOutgoingBatchConfirm(uint64(m.OutgoingBatchNonce))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchConfirm(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchConfirm(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchConfirm(uint64(l))
	}
	return n
}

func sovOutgoingBatchConfirm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutgoingBatchConfirm(x uint64) (n int) {
	return sovOutgoingBatchConfirm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingBatchConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutgoingBatchConfirm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingBatchConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingBatchConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingBatchSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchNonce", wireType)
			}
			m.OutgoingBatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingBatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutgoingBatchConfirm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutgoingBatchConfirm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutgoingBatchConfirm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutgoingBatchConfirm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutgoingBatchConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutgoingBatchConfirm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutgoingBatchConfirm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutgoingBatchConfirm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutgoingBatchConfirm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutgoingBatchConfirm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutgoingBatchConfirm = fmt.Errorf("proto: unexpected end of group")
)
