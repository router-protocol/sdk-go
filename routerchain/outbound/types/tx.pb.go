// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbound/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types2 "github.com/router-protocol/sdk-go/routerchain/types"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgOutboundBatchRequest struct {
	Sender                 string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DestinationChainType   types.ChainType                        `protobuf:"varint,2,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId     string                                 `protobuf:"bytes,3,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	ContractCalls          []ContractCall                         `protobuf:"bytes,4,rep,name=contractCalls,proto3" json:"contractCalls"`
	IsAtomic               bool                                   `protobuf:"varint,5,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	RelayerFee             types1.Coin                            `protobuf:"bytes,6,opt,name=relayerFee,proto3" json:"relayerFee"`
	DestinationGasLimit    uint64                                 `protobuf:"varint,7,opt,name=destinationGasLimit,proto3" json:"destinationGasLimit,omitempty"`
	DestinationGasPrice    uint64                                 `protobuf:"varint,8,opt,name=destinationGasPrice,proto3" json:"destinationGasPrice,omitempty"`
	OutboundAckGasLimit    uint64                                 `protobuf:"varint,9,opt,name=outboundAckGasLimit,proto3" json:"outboundAckGasLimit,omitempty"`
	ExpiryTimestamp        int64                                  `protobuf:"varint,10,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	RouteAmount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient         []byte                                 `protobuf:"bytes,12,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	AsmAddress             []byte                                 `protobuf:"bytes,13,opt,name=asmAddress,proto3" json:"asmAddress,omitempty"`
	MiddlewareContractType types2.MiddlewareContractType          `protobuf:"varint,14,opt,name=middlewareContractType,proto3,enum=routerprotocol.routerchain.types.MiddlewareContractType" json:"middlewareContractType,omitempty"`
}

func (m *MsgOutboundBatchRequest) Reset()         { *m = MsgOutboundBatchRequest{} }
func (m *MsgOutboundBatchRequest) String() string { return proto.CompactTextString(m) }
func (*MsgOutboundBatchRequest) ProtoMessage()    {}
func (*MsgOutboundBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84e637447b1d299f, []int{0}
}
func (m *MsgOutboundBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutboundBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutboundBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutboundBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutboundBatchRequest.Merge(m, src)
}
func (m *MsgOutboundBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutboundBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutboundBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutboundBatchRequest proto.InternalMessageInfo

func (m *MsgOutboundBatchRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgOutboundBatchRequest) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *MsgOutboundBatchRequest) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *MsgOutboundBatchRequest) GetContractCalls() []ContractCall {
	if m != nil {
		return m.ContractCalls
	}
	return nil
}

func (m *MsgOutboundBatchRequest) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *MsgOutboundBatchRequest) GetRelayerFee() types1.Coin {
	if m != nil {
		return m.RelayerFee
	}
	return types1.Coin{}
}

func (m *MsgOutboundBatchRequest) GetDestinationGasLimit() uint64 {
	if m != nil {
		return m.DestinationGasLimit
	}
	return 0
}

func (m *MsgOutboundBatchRequest) GetDestinationGasPrice() uint64 {
	if m != nil {
		return m.DestinationGasPrice
	}
	return 0
}

func (m *MsgOutboundBatchRequest) GetOutboundAckGasLimit() uint64 {
	if m != nil {
		return m.OutboundAckGasLimit
	}
	return 0
}

func (m *MsgOutboundBatchRequest) GetExpiryTimestamp() int64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *MsgOutboundBatchRequest) GetRouteRecipient() []byte {
	if m != nil {
		return m.RouteRecipient
	}
	return nil
}

func (m *MsgOutboundBatchRequest) GetAsmAddress() []byte {
	if m != nil {
		return m.AsmAddress
	}
	return nil
}

func (m *MsgOutboundBatchRequest) GetMiddlewareContractType() types2.MiddlewareContractType {
	if m != nil {
		return m.MiddlewareContractType
	}
	return types2.MIDDLEWARE_COSMWASM
}

type MsgOutboundBatchRequestResponse struct {
	OutboundBatchNonce   uint64      `protobuf:"varint,1,opt,name=outbound_batch_nonce,json=outboundBatchNonce,proto3" json:"outbound_batch_nonce,omitempty"`
	OutgoingTxFeeInRoute types1.Coin `protobuf:"bytes,2,opt,name=outgoingTxFeeInRoute,proto3" json:"outgoingTxFeeInRoute"`
}

func (m *MsgOutboundBatchRequestResponse) Reset()         { *m = MsgOutboundBatchRequestResponse{} }
func (m *MsgOutboundBatchRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOutboundBatchRequestResponse) ProtoMessage()    {}
func (*MsgOutboundBatchRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84e637447b1d299f, []int{1}
}
func (m *MsgOutboundBatchRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutboundBatchRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutboundBatchRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutboundBatchRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutboundBatchRequestResponse.Merge(m, src)
}
func (m *MsgOutboundBatchRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutboundBatchRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutboundBatchRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutboundBatchRequestResponse proto.InternalMessageInfo

func (m *MsgOutboundBatchRequestResponse) GetOutboundBatchNonce() uint64 {
	if m != nil {
		return m.OutboundBatchNonce
	}
	return 0
}

func (m *MsgOutboundBatchRequestResponse) GetOutgoingTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.OutgoingTxFeeInRoute
	}
	return types1.Coin{}
}

type MsgOutgoingBatchConfirm struct {
	Orchestrator         string          `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	DestinationChainType types.ChainType `protobuf:"varint,2,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId   string          `protobuf:"bytes,3,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	OutgoingBatchSender  string          `protobuf:"bytes,4,opt,name=outgoingBatchSender,proto3" json:"outgoingBatchSender,omitempty"`
	OutgoingBatchNonce   uint64          `protobuf:"varint,5,opt,name=outgoingBatchNonce,proto3" json:"outgoingBatchNonce,omitempty"`
	EthSigner            string          `protobuf:"bytes,6,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string          `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgOutgoingBatchConfirm) Reset()         { *m = MsgOutgoingBatchConfirm{} }
func (m *MsgOutgoingBatchConfirm) String() string { return proto.CompactTextString(m) }
func (*MsgOutgoingBatchConfirm) ProtoMessage()    {}
func (*MsgOutgoingBatchConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_84e637447b1d299f, []int{2}
}
func (m *MsgOutgoingBatchConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutgoingBatchConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutgoingBatchConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutgoingBatchConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutgoingBatchConfirm.Merge(m, src)
}
func (m *MsgOutgoingBatchConfirm) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutgoingBatchConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutgoingBatchConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutgoingBatchConfirm proto.InternalMessageInfo

func (m *MsgOutgoingBatchConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgOutgoingBatchConfirm) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *MsgOutgoingBatchConfirm) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *MsgOutgoingBatchConfirm) GetOutgoingBatchSender() string {
	if m != nil {
		return m.OutgoingBatchSender
	}
	return ""
}

func (m *MsgOutgoingBatchConfirm) GetOutgoingBatchNonce() uint64 {
	if m != nil {
		return m.OutgoingBatchNonce
	}
	return 0
}

func (m *MsgOutgoingBatchConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgOutgoingBatchConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgOutgoingBatchConfirmResponse struct {
}

func (m *MsgOutgoingBatchConfirmResponse) Reset()         { *m = MsgOutgoingBatchConfirmResponse{} }
func (m *MsgOutgoingBatchConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOutgoingBatchConfirmResponse) ProtoMessage()    {}
func (*MsgOutgoingBatchConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84e637447b1d299f, []int{3}
}
func (m *MsgOutgoingBatchConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutgoingBatchConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutgoingBatchConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutgoingBatchConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutgoingBatchConfirmResponse.Merge(m, src)
}
func (m *MsgOutgoingBatchConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutgoingBatchConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutgoingBatchConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutgoingBatchConfirmResponse proto.InternalMessageInfo

type MsgOutboundAckRequest struct {
	Orchestrator          string          `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	ChainType             types.ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ChainId               string          `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	OutboundTxNonce       uint64          `protobuf:"varint,4,opt,name=outboundTxNonce,proto3" json:"outboundTxNonce,omitempty"`
	OutboundTxRequestedBy string          `protobuf:"bytes,5,opt,name=outboundTxRequestedBy,proto3" json:"outboundTxRequestedBy,omitempty"`
	RelayerRouterAddress  string          `protobuf:"bytes,6,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	DestinationTxHash     string          `protobuf:"bytes,7,opt,name=destinationTxHash,proto3" json:"destinationTxHash,omitempty"`
	FeeConsumed           uint64          `protobuf:"varint,8,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	EventNonce            uint64          `protobuf:"varint,9,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight           uint64          `protobuf:"varint,10,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ContractAckResponses  []byte          `protobuf:"bytes,11,opt,name=contractAckResponses,proto3" json:"contractAckResponses,omitempty"`
	ExeCode               uint64          `protobuf:"varint,12,opt,name=exeCode,proto3" json:"exeCode,omitempty"`
	ExecStatus            bool            `protobuf:"varint,13,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	ExecFlags             []bool          `protobuf:"varint,14,rep,packed,name=execFlags,proto3" json:"execFlags,omitempty"`
	ExecData              [][]byte        `protobuf:"bytes,15,rep,name=execData,proto3" json:"execData,omitempty"`
}

func (m *MsgOutboundAckRequest) Reset()         { *m = MsgOutboundAckRequest{} }
func (m *MsgOutboundAckRequest) String() string { return proto.CompactTextString(m) }
func (*MsgOutboundAckRequest) ProtoMessage()    {}
func (*MsgOutboundAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84e637447b1d299f, []int{4}
}
func (m *MsgOutboundAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutboundAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutboundAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutboundAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutboundAckRequest.Merge(m, src)
}
func (m *MsgOutboundAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutboundAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutboundAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutboundAckRequest proto.InternalMessageInfo

func (m *MsgOutboundAckRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgOutboundAckRequest) GetChainType() types.ChainType {
	if m != nil {
		return m.ChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *MsgOutboundAckRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgOutboundAckRequest) GetOutboundTxNonce() uint64 {
	if m != nil {
		return m.OutboundTxNonce
	}
	return 0
}

func (m *MsgOutboundAckRequest) GetOutboundTxRequestedBy() string {
	if m != nil {
		return m.OutboundTxRequestedBy
	}
	return ""
}

func (m *MsgOutboundAckRequest) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *MsgOutboundAckRequest) GetDestinationTxHash() string {
	if m != nil {
		return m.DestinationTxHash
	}
	return ""
}

func (m *MsgOutboundAckRequest) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *MsgOutboundAckRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgOutboundAckRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgOutboundAckRequest) GetContractAckResponses() []byte {
	if m != nil {
		return m.ContractAckResponses
	}
	return nil
}

func (m *MsgOutboundAckRequest) GetExeCode() uint64 {
	if m != nil {
		return m.ExeCode
	}
	return 0
}

func (m *MsgOutboundAckRequest) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *MsgOutboundAckRequest) GetExecFlags() []bool {
	if m != nil {
		return m.ExecFlags
	}
	return nil
}

func (m *MsgOutboundAckRequest) GetExecData() [][]byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

type MsgOutboundAckRequestResponse struct {
}

func (m *MsgOutboundAckRequestResponse) Reset()         { *m = MsgOutboundAckRequestResponse{} }
func (m *MsgOutboundAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOutboundAckRequestResponse) ProtoMessage()    {}
func (*MsgOutboundAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84e637447b1d299f, []int{5}
}
func (m *MsgOutboundAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutboundAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutboundAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutboundAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutboundAckRequestResponse.Merge(m, src)
}
func (m *MsgOutboundAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutboundAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutboundAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutboundAckRequestResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgOutboundBatchRequest)(nil), "routerprotocol.routerchain.outbound.MsgOutboundBatchRequest")
	proto.RegisterType((*MsgOutboundBatchRequestResponse)(nil), "routerprotocol.routerchain.outbound.MsgOutboundBatchRequestResponse")
	proto.RegisterType((*MsgOutgoingBatchConfirm)(nil), "routerprotocol.routerchain.outbound.MsgOutgoingBatchConfirm")
	proto.RegisterType((*MsgOutgoingBatchConfirmResponse)(nil), "routerprotocol.routerchain.outbound.MsgOutgoingBatchConfirmResponse")
	proto.RegisterType((*MsgOutboundAckRequest)(nil), "routerprotocol.routerchain.outbound.MsgOutboundAckRequest")
	proto.RegisterType((*MsgOutboundAckRequestResponse)(nil), "routerprotocol.routerchain.outbound.MsgOutboundAckRequestResponse")
}

func init() { proto.RegisterFile("outbound/tx.proto", fileDescriptor_84e637447b1d299f) }

var fileDescriptor_84e637447b1d299f = []byte{
	// 1041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xcf, 0xd6, 0xfe, 0xa7, 0xf1, 0xc4, 0x4d, 0xd4, 0xf9, 0xa7, 0x65, 0x09, 0xc5, 0x59, 0xcc,
	0xd7, 0x5e, 0xd0, 0x75, 0x13, 0xb8, 0xa8, 0x10, 0x12, 0x8a, 0x5d, 0x85, 0x46, 0x22, 0x05, 0x26,
	0xb9, 0x42, 0x42, 0xd6, 0x78, 0xf6, 0x74, 0x3d, 0x8a, 0x77, 0xc7, 0xec, 0xcc, 0x16, 0xe7, 0x2d,
	0xb8, 0xe0, 0x8a, 0x27, 0xe0, 0x51, 0x7a, 0x59, 0x6e, 0x10, 0xe2, 0xa2, 0x42, 0xc9, 0x13, 0x20,
	0x5e, 0x00, 0xcd, 0xec, 0x8e, 0x77, 0x13, 0x6f, 0xaa, 0x84, 0xde, 0x70, 0x93, 0xf8, 0x9c, 0x33,
	0xbf, 0x33, 0xe7, 0xf3, 0x37, 0x8b, 0x6e, 0x8b, 0x4c, 0x8d, 0x44, 0x96, 0x84, 0x3d, 0x35, 0x0b,
	0xa6, 0xa9, 0x50, 0x02, 0xbf, 0x9b, 0x8a, 0x4c, 0x41, 0x6a, 0x04, 0x26, 0x26, 0x41, 0x2e, 0xb2,
	0x31, 0xe5, 0x49, 0x60, 0x4f, 0x6f, 0xbe, 0x3f, 0xc7, 0x89, 0x4c, 0x45, 0x82, 0x27, 0xd1, 0x70,
	0x44, 0x15, 0x1b, 0x0f, 0x99, 0x48, 0x9e, 0xf2, 0x34, 0xce, 0x7d, 0x6d, 0xde, 0x9b, 0x1f, 0x63,
	0x22, 0x51, 0x29, 0x65, 0x6a, 0xc8, 0xe8, 0x64, 0x52, 0x58, 0x3b, 0x4c, 0xc8, 0x58, 0xc8, 0xde,
	0x88, 0x4a, 0xe8, 0x3d, 0xdb, 0x1e, 0x81, 0xa2, 0xdb, 0x3d, 0x26, 0x78, 0x52, 0xd8, 0x37, 0x22,
	0x11, 0x09, 0xf3, 0xb3, 0xa7, 0x7f, 0x15, 0xda, 0xb7, 0xe2, 0x6c, 0xa2, 0xb8, 0x89, 0xa7, 0x67,
	0xfe, 0x0e, 0xd5, 0xc9, 0x14, 0x0a, 0xe3, 0x7b, 0xfa, 0xb7, 0xec, 0xc5, 0x3c, 0x0c, 0x27, 0xf0,
	0x03, 0x4d, 0x61, 0x38, 0xbf, 0xb8, 0x3c, 0xd5, 0xfd, 0x75, 0x19, 0xbd, 0x71, 0x20, 0xa3, 0xaf,
	0x8a, 0xe0, 0xfa, 0x3a, 0x72, 0x02, 0xdf, 0x67, 0x20, 0x15, 0xbe, 0x8b, 0x96, 0x25, 0x24, 0x21,
	0xa4, 0xae, 0xe3, 0x39, 0x7e, 0x8b, 0x14, 0x12, 0x0e, 0xd1, 0x46, 0x08, 0x52, 0xf1, 0x84, 0x2a,
	0x2e, 0x92, 0x81, 0xbe, 0xf8, 0xe8, 0x64, 0x0a, 0xee, 0x0d, 0xcf, 0xf1, 0xd7, 0x76, 0x1e, 0x04,
	0xaf, 0xa8, 0x5a, 0x19, 0x70, 0x30, 0xc7, 0x91, 0x5a, 0x6f, 0x38, 0x40, 0xf8, 0xa2, 0x7e, 0x3f,
	0x74, 0x1b, 0x26, 0x92, 0x1a, 0x0b, 0xfe, 0x0e, 0xdd, 0xb2, 0x09, 0x0e, 0xe8, 0x64, 0x22, 0xdd,
	0xa6, 0xd7, 0xf0, 0x57, 0x77, 0xb6, 0x83, 0x2b, 0x34, 0x31, 0x18, 0x54, 0x90, 0xfd, 0xe6, 0xf3,
	0x97, 0x5b, 0x4b, 0xe4, 0xbc, 0x37, 0xbc, 0x89, 0x56, 0xb8, 0xdc, 0x55, 0x22, 0xe6, 0xcc, 0xfd,
	0x9f, 0xe7, 0xf8, 0x2b, 0x64, 0x2e, 0xe3, 0xcf, 0x11, 0x4a, 0x61, 0x42, 0x4f, 0x20, 0xdd, 0x03,
	0x70, 0x97, 0x3d, 0xc7, 0x5f, 0xdd, 0x79, 0x33, 0xc8, 0x5b, 0x1a, 0xe8, 0x96, 0x06, 0x45, 0x4b,
	0x83, 0x81, 0xe0, 0x49, 0xe1, 0xbf, 0x02, 0xc1, 0x0f, 0xd0, 0xff, 0x2b, 0x19, 0x7d, 0x41, 0xe5,
	0x97, 0x3c, 0xe6, 0xca, 0xbd, 0xe9, 0x39, 0x7e, 0x93, 0xd4, 0x99, 0x16, 0x11, 0x5f, 0xa7, 0x9c,
	0x81, 0xbb, 0x52, 0x87, 0x30, 0x26, 0x8d, 0xb0, 0xe9, 0xee, 0xb2, 0xe3, 0xf9, 0x1d, 0xad, 0x1c,
	0x51, 0x63, 0xc2, 0x3e, 0x5a, 0x87, 0xd9, 0x94, 0xa7, 0x27, 0x47, 0x3c, 0x06, 0xa9, 0x68, 0x3c,
	0x75, 0x91, 0xe7, 0xf8, 0x0d, 0x72, 0x51, 0x8d, 0xbf, 0x41, 0x6d, 0x53, 0xd6, 0x21, 0x8d, 0x45,
	0x96, 0x28, 0x77, 0x55, 0x77, 0xa9, 0x1f, 0xe8, 0x3c, 0xff, 0x78, 0xb9, 0xf5, 0x41, 0xc4, 0xd5,
	0x38, 0x1b, 0x05, 0x4c, 0xc4, 0xbd, 0x62, 0xce, 0xf3, 0x7f, 0xf7, 0x65, 0x78, 0xdc, 0x33, 0x63,
	0x1a, 0xec, 0x27, 0x8a, 0xac, 0x1a, 0x1f, 0xbb, 0xc6, 0x05, 0xfe, 0x10, 0xad, 0xe7, 0x2e, 0x53,
	0x60, 0x7c, 0xca, 0x21, 0x51, 0x6e, 0xdb, 0x73, 0xfc, 0x36, 0x59, 0x33, 0x6a, 0x62, 0xb5, 0xb8,
	0x83, 0x10, 0x95, 0xf1, 0x6e, 0x18, 0xa6, 0x20, 0xa5, 0x7b, 0xcb, 0x9c, 0xa9, 0x68, 0xf0, 0x14,
	0xdd, 0x2d, 0x77, 0xc0, 0xf6, 0xd9, 0xcc, 0xeb, 0x9a, 0x99, 0xd7, 0x87, 0xaf, 0x1a, 0x90, 0x3c,
	0xb8, 0x83, 0x5a, 0x3c, 0xb9, 0xc4, 0x6f, 0xf7, 0x17, 0x07, 0x6d, 0x5d, 0xb2, 0x53, 0x04, 0xe4,
	0x54, 0x24, 0x52, 0x77, 0x63, 0xc3, 0x96, 0xbc, 0xa0, 0x8b, 0x44, 0x24, 0x0c, 0xcc, 0xa6, 0x35,
	0x09, 0x16, 0x55, 0xec, 0x13, 0x6d, 0xc1, 0x87, 0x06, 0x61, 0x08, 0xe6, 0x68, 0xb6, 0x07, 0xb0,
	0x9f, 0x10, 0x1d, 0xa8, 0xd9, 0xba, 0x2b, 0x8c, 0x5b, 0x2d, 0xb8, 0xfb, 0xd7, 0x0d, 0xbb, 0xfe,
	0xc6, 0x66, 0xae, 0x1b, 0xe4, 0xbc, 0x85, 0xbb, 0xa8, 0x2d, 0x52, 0x36, 0x06, 0xa9, 0x52, 0xaa,
	0x84, 0x25, 0x81, 0x73, 0xba, 0xff, 0x28, 0x15, 0xe4, 0xa3, 0x5e, 0x66, 0x74, 0x98, 0xb3, 0x58,
	0xd3, 0x00, 0xea, 0x4c, 0xfa, 0x86, 0x73, 0x6a, 0x53, 0x72, 0xb3, 0xe7, 0x79, 0x33, 0x2e, 0x58,
	0xf0, 0x3d, 0xd4, 0x02, 0x35, 0x3e, 0xe4, 0x51, 0x02, 0xa9, 0x59, 0xf8, 0x16, 0x29, 0x15, 0xda,
	0x2a, 0x79, 0x94, 0x50, 0x95, 0xa5, 0x60, 0x96, 0xb8, 0x45, 0x4a, 0x45, 0xf7, 0x1d, 0x3b, 0x1d,
	0x0b, 0x25, 0xb7, 0xd3, 0xd1, 0xfd, 0xbb, 0x89, 0xee, 0x54, 0x26, 0x68, 0x97, 0x1d, 0x5b, 0x4e,
	0xbe, 0x4a, 0x53, 0x9e, 0xa0, 0x16, 0x7b, 0xed, 0x4e, 0x94, 0x2e, 0xb0, 0x8b, 0x6e, 0xb2, 0x73,
	0x35, 0xb7, 0xa2, 0x66, 0x08, 0x3b, 0xa9, 0x47, 0xb3, 0xbc, 0x66, 0x4d, 0x53, 0xb3, 0x8b, 0x6a,
	0xfc, 0x09, 0xba, 0x53, 0xaa, 0x8a, 0x64, 0x20, 0xec, 0x9f, 0x98, 0x1a, 0xb7, 0x48, 0xbd, 0x11,
	0xef, 0xa0, 0x8d, 0x82, 0x25, 0xcd, 0xb8, 0xa6, 0x76, 0xcb, 0xf3, 0x8a, 0xd7, 0xda, 0xf0, 0x47,
	0xe8, 0x76, 0x65, 0x24, 0x8e, 0x66, 0x8f, 0xa9, 0x1c, 0x17, 0x4d, 0x58, 0x34, 0x60, 0x0f, 0xad,
	0x3e, 0x05, 0xbd, 0xbe, 0x32, 0x8b, 0x21, 0x2c, 0xf8, 0xb3, 0xaa, 0xd2, 0xfc, 0x02, 0xcf, 0x20,
	0x51, 0x79, 0x7a, 0x39, 0x5d, 0x56, 0x34, 0xda, 0xc3, 0x68, 0x22, 0xd8, 0xf1, 0x63, 0xe0, 0xd1,
	0x58, 0x19, 0x86, 0x6c, 0x92, 0xaa, 0x4a, 0x67, 0x61, 0xdf, 0x12, 0xd3, 0xc9, 0xbc, 0xc9, 0xd2,
	0xb0, 0x64, 0x9b, 0xd4, 0xda, 0x74, 0xcd, 0x61, 0x06, 0x03, 0x11, 0x82, 0xa1, 0xbd, 0x26, 0xb1,
	0xa2, 0x89, 0x67, 0x06, 0xec, 0x50, 0x51, 0x95, 0xe5, 0x7c, 0xb7, 0x42, 0x2a, 0x1a, 0x33, 0x9a,
	0x33, 0x60, 0x7b, 0x13, 0x1a, 0x49, 0x77, 0xcd, 0x6b, 0xf8, 0x2b, 0xa4, 0x54, 0xe8, 0x67, 0x4c,
	0x0b, 0x8f, 0xa8, 0xa2, 0xee, 0xba, 0xd7, 0xf0, 0xdb, 0x64, 0x2e, 0x77, 0xb7, 0xd0, 0xdb, 0xb5,
	0x43, 0x67, 0xa3, 0xda, 0xf9, 0xad, 0x81, 0x1a, 0x07, 0x32, 0xc2, 0x3f, 0x3b, 0x68, 0xa3, 0xf6,
	0x8b, 0xe1, 0xb3, 0x2b, 0x3d, 0xb6, 0x97, 0x70, 0xe3, 0xe6, 0xa3, 0xd7, 0x41, 0xcf, 0x99, 0xb5,
	0x08, 0x6e, 0x91, 0xcf, 0xae, 0x13, 0xdc, 0x02, 0xfa, 0x5a, 0xc1, 0x5d, 0xba, 0xd8, 0xf8, 0x27,
	0x07, 0xe1, 0x9a, 0xad, 0xfe, 0xf4, 0xba, 0x99, 0x97, 0xd8, 0xcd, 0xfe, 0xbf, 0xc7, 0xda, 0xb0,
	0xfa, 0xe4, 0xf9, 0x69, 0xc7, 0x79, 0x71, 0xda, 0x71, 0xfe, 0x3c, 0xed, 0x38, 0x3f, 0x9e, 0x75,
	0x96, 0x5e, 0x9c, 0x75, 0x96, 0x7e, 0x3f, 0xeb, 0x2c, 0x7d, 0xfb, 0xb0, 0xf2, 0x76, 0xe7, 0x8e,
	0xef, 0xdb, 0x8b, 0xac, 0x9c, 0x7f, 0x7f, 0xce, 0x7a, 0xe5, 0xf7, 0xb3, 0x7e, 0x34, 0x47, 0xcb,
	0xe6, 0xdc, 0xc7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x25, 0x10, 0x8f, 0x65, 0x58, 0x0b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	OutboundBatchRequest(ctx context.Context, in *MsgOutboundBatchRequest, opts ...grpc.CallOption) (*MsgOutboundBatchRequestResponse, error)
	OutgoingBatchConfirm(ctx context.Context, in *MsgOutgoingBatchConfirm, opts ...grpc.CallOption) (*MsgOutgoingBatchConfirmResponse, error)
	OutboundAckRequest(ctx context.Context, in *MsgOutboundAckRequest, opts ...grpc.CallOption) (*MsgOutboundAckRequestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) OutboundBatchRequest(ctx context.Context, in *MsgOutboundBatchRequest, opts ...grpc.CallOption) (*MsgOutboundBatchRequestResponse, error) {
	out := new(MsgOutboundBatchRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Msg/OutboundBatchRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OutgoingBatchConfirm(ctx context.Context, in *MsgOutgoingBatchConfirm, opts ...grpc.CallOption) (*MsgOutgoingBatchConfirmResponse, error) {
	out := new(MsgOutgoingBatchConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Msg/OutgoingBatchConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OutboundAckRequest(ctx context.Context, in *MsgOutboundAckRequest, opts ...grpc.CallOption) (*MsgOutboundAckRequestResponse, error) {
	out := new(MsgOutboundAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.outbound.Msg/OutboundAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	OutboundBatchRequest(context.Context, *MsgOutboundBatchRequest) (*MsgOutboundBatchRequestResponse, error)
	OutgoingBatchConfirm(context.Context, *MsgOutgoingBatchConfirm) (*MsgOutgoingBatchConfirmResponse, error)
	OutboundAckRequest(context.Context, *MsgOutboundAckRequest) (*MsgOutboundAckRequestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) OutboundBatchRequest(ctx context.Context, req *MsgOutboundBatchRequest) (*MsgOutboundBatchRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundBatchRequest not implemented")
}
func (*UnimplementedMsgServer) OutgoingBatchConfirm(ctx context.Context, req *MsgOutgoingBatchConfirm) (*MsgOutgoingBatchConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingBatchConfirm not implemented")
}
func (*UnimplementedMsgServer) OutboundAckRequest(ctx context.Context, req *MsgOutboundAckRequest) (*MsgOutboundAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundAckRequest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_OutboundBatchRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOutboundBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OutboundBatchRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Msg/OutboundBatchRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OutboundBatchRequest(ctx, req.(*MsgOutboundBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OutgoingBatchConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOutgoingBatchConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OutgoingBatchConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Msg/OutgoingBatchConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OutgoingBatchConfirm(ctx, req.(*MsgOutgoingBatchConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OutboundAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOutboundAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OutboundAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.outbound.Msg/OutboundAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OutboundAckRequest(ctx, req.(*MsgOutboundAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.outbound.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutboundBatchRequest",
			Handler:    _Msg_OutboundBatchRequest_Handler,
		},
		{
			MethodName: "OutgoingBatchConfirm",
			Handler:    _Msg_OutgoingBatchConfirm_Handler,
		},
		{
			MethodName: "OutboundAckRequest",
			Handler:    _Msg_OutboundAckRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outbound/tx.proto",
}

func (m *MsgOutboundBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutboundBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutboundBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MiddlewareContractType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MiddlewareContractType))
		i--
		dAtA[i] = 0x70
	}
	if len(m.AsmAddress) > 0 {
		i -= len(m.AsmAddress)
		copy(dAtA[i:], m.AsmAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AsmAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x62
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.OutboundAckGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutboundAckGasLimit))
		i--
		dAtA[i] = 0x48
	}
	if m.DestinationGasPrice != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationGasPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.DestinationGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationGasLimit))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.RelayerFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ContractCalls) > 0 {
		for iNdEx := len(m.ContractCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOutboundBatchRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutboundBatchRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutboundBatchRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutgoingTxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OutboundBatchNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutboundBatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgOutgoingBatchConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutgoingBatchConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutgoingBatchConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x32
	}
	if m.OutgoingBatchNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutgoingBatchNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OutgoingBatchSender) > 0 {
		i -= len(m.OutgoingBatchSender)
		copy(dAtA[i:], m.OutgoingBatchSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutgoingBatchSender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOutgoingBatchConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutgoingBatchConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutgoingBatchConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOutboundAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutboundAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutboundAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecData) > 0 {
		for iNdEx := len(m.ExecData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExecData[iNdEx])
			copy(dAtA[i:], m.ExecData[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ExecData[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ExecFlags) > 0 {
		for iNdEx := len(m.ExecFlags) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.ExecFlags[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecFlags)))
		i--
		dAtA[i] = 0x72
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.ExeCode != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExeCode))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ContractAckResponses) > 0 {
		i -= len(m.ContractAckResponses)
		copy(dAtA[i:], m.ContractAckResponses)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAckResponses)))
		i--
		dAtA[i] = 0x5a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x48
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DestinationTxHash) > 0 {
		i -= len(m.DestinationTxHash)
		copy(dAtA[i:], m.DestinationTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationTxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OutboundTxRequestedBy) > 0 {
		i -= len(m.OutboundTxRequestedBy)
		copy(dAtA[i:], m.OutboundTxRequestedBy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutboundTxRequestedBy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OutboundTxNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutboundTxNonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOutboundAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutboundAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutboundAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgOutboundBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovTx(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ContractCalls) > 0 {
		for _, e := range m.ContractCalls {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.IsAtomic {
		n += 2
	}
	l = m.RelayerFee.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DestinationGasLimit != 0 {
		n += 1 + sovTx(uint64(m.DestinationGasLimit))
	}
	if m.DestinationGasPrice != 0 {
		n += 1 + sovTx(uint64(m.DestinationGasPrice))
	}
	if m.OutboundAckGasLimit != 0 {
		n += 1 + sovTx(uint64(m.OutboundAckGasLimit))
	}
	if m.ExpiryTimestamp != 0 {
		n += 1 + sovTx(uint64(m.ExpiryTimestamp))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AsmAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MiddlewareContractType != 0 {
		n += 1 + sovTx(uint64(m.MiddlewareContractType))
	}
	return n
}

func (m *MsgOutboundBatchRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutboundBatchNonce != 0 {
		n += 1 + sovTx(uint64(m.OutboundBatchNonce))
	}
	l = m.OutgoingTxFeeInRoute.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgOutgoingBatchConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovTx(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OutgoingBatchSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OutgoingBatchNonce != 0 {
		n += 1 + sovTx(uint64(m.OutgoingBatchNonce))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOutgoingBatchConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOutboundAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovTx(uint64(m.ChainType))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OutboundTxNonce != 0 {
		n += 1 + sovTx(uint64(m.OutboundTxNonce))
	}
	l = len(m.OutboundTxRequestedBy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovTx(uint64(m.FeeConsumed))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.ContractAckResponses)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExeCode != 0 {
		n += 1 + sovTx(uint64(m.ExeCode))
	}
	if m.ExecStatus {
		n += 2
	}
	if len(m.ExecFlags) > 0 {
		n += 1 + sovTx(uint64(len(m.ExecFlags))) + len(m.ExecFlags)*1
	}
	if len(m.ExecData) > 0 {
		for _, b := range m.ExecData {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgOutboundAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgOutboundBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutboundBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutboundBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCalls = append(m.ContractCalls, ContractCall{})
			if err := m.ContractCalls[len(m.ContractCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasLimit", wireType)
			}
			m.DestinationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasPrice", wireType)
			}
			m.DestinationGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundAckGasLimit", wireType)
			}
			m.OutboundAckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundAckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = append(m.RouteRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteRecipient == nil {
				m.RouteRecipient = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsmAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsmAddress = append(m.AsmAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AsmAddress == nil {
				m.AsmAddress = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddlewareContractType", wireType)
			}
			m.MiddlewareContractType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MiddlewareContractType |= types2.MiddlewareContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOutboundBatchRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutboundBatchRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutboundBatchRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundBatchNonce", wireType)
			}
			m.OutboundBatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundBatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingTxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOutgoingBatchConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutgoingBatchConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutgoingBatchConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingBatchSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingBatchNonce", wireType)
			}
			m.OutgoingBatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingBatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOutgoingBatchConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutgoingBatchConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutgoingBatchConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOutboundAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutboundAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutboundAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxNonce", wireType)
			}
			m.OutboundTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxRequestedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxRequestedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAckResponses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAckResponses = append(m.ContractAckResponses[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAckResponses == nil {
				m.ContractAckResponses = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExeCode", wireType)
			}
			m.ExeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExeCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 14:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExecFlags = append(m.ExecFlags, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.ExecFlags) == 0 {
					m.ExecFlags = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExecFlags = append(m.ExecFlags, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecFlags", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData, make([]byte, postIndex-iNdEx))
			copy(m.ExecData[len(m.ExecData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOutboundAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutboundAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutboundAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
