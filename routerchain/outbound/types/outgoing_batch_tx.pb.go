// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbound/outgoing_batch_tx.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/router-chain/x/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutgoingBatchTx struct {
	Nonce                uint64           `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	DestinationChainType types.ChainType  `protobuf:"varint,2,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId   string           `protobuf:"bytes,3,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	ContractCalls        []ContractCall   `protobuf:"bytes,4,rep,name=contractCalls,proto3" json:"contractCalls"`
	RelayerFee           types1.Coin      `protobuf:"bytes,5,opt,name=relayerFee,proto3" json:"relayerFee"`
	OutgoingTxFee        types1.Coin      `protobuf:"bytes,6,opt,name=outgoingTxFee,proto3" json:"outgoingTxFee"`
	ExpiryTimestamp      int64            `protobuf:"varint,7,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	IsAtomic             bool             `protobuf:"varint,8,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	SourceAddress        string           `protobuf:"bytes,9,opt,name=sourceAddress,proto3" json:"sourceAddress,omitempty"`
	Status               OutgoingTxStatus `protobuf:"varint,10,opt,name=status,proto3,enum=routerprotocol.routerchain.outbound.OutgoingTxStatus" json:"status,omitempty"`
}

func (m *OutgoingBatchTx) Reset()         { *m = OutgoingBatchTx{} }
func (m *OutgoingBatchTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingBatchTx) ProtoMessage()    {}
func (*OutgoingBatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_fabc9c28a23b97ef, []int{0}
}
func (m *OutgoingBatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingBatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingBatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingBatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingBatchTx.Merge(m, src)
}
func (m *OutgoingBatchTx) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingBatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingBatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingBatchTx proto.InternalMessageInfo

func (m *OutgoingBatchTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *OutgoingBatchTx) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *OutgoingBatchTx) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *OutgoingBatchTx) GetContractCalls() []ContractCall {
	if m != nil {
		return m.ContractCalls
	}
	return nil
}

func (m *OutgoingBatchTx) GetRelayerFee() types1.Coin {
	if m != nil {
		return m.RelayerFee
	}
	return types1.Coin{}
}

func (m *OutgoingBatchTx) GetOutgoingTxFee() types1.Coin {
	if m != nil {
		return m.OutgoingTxFee
	}
	return types1.Coin{}
}

func (m *OutgoingBatchTx) GetExpiryTimestamp() int64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *OutgoingBatchTx) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *OutgoingBatchTx) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *OutgoingBatchTx) GetStatus() OutgoingTxStatus {
	if m != nil {
		return m.Status
	}
	return OUTGOING_TX_CREATED
}

func init() {
	proto.RegisterType((*OutgoingBatchTx)(nil), "routerprotocol.routerchain.outbound.OutgoingBatchTx")
}

func init() { proto.RegisterFile("outbound/outgoing_batch_tx.proto", fileDescriptor_fabc9c28a23b97ef) }

var fileDescriptor_fabc9c28a23b97ef = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0xad, 0x69, 0xb7, 0x74, 0xbd, 0x2a, 0x2b, 0x59, 0x3d, 0x84, 0x82, 0x42, 0xf8, 0x38, 0xe4,
	0x82, 0x43, 0x8b, 0x90, 0xb8, 0xa1, 0x6d, 0x05, 0x12, 0x07, 0xb4, 0x52, 0xe8, 0x09, 0x09, 0x55,
	0x8e, 0x63, 0xa5, 0x96, 0x12, 0x4f, 0x14, 0x3b, 0x28, 0xfd, 0x17, 0xfc, 0xac, 0x3d, 0xee, 0x91,
	0x13, 0xa0, 0xf6, 0x8f, 0xa0, 0x7c, 0xb2, 0x5d, 0x56, 0xa8, 0x97, 0xc8, 0x6f, 0xc6, 0xef, 0xcd,
	0xe4, 0xcd, 0x18, 0x3b, 0x90, 0x9b, 0x00, 0x72, 0x15, 0x7a, 0x90, 0x9b, 0x08, 0xa4, 0x8a, 0xd6,
	0x01, 0x33, 0x7c, 0xb3, 0x36, 0x05, 0x4d, 0x33, 0x30, 0x40, 0x9e, 0x67, 0x90, 0x1b, 0x91, 0x55,
	0x80, 0x43, 0x4c, 0x6b, 0xc8, 0x37, 0x4c, 0x2a, 0xda, 0x92, 0xa7, 0x8f, 0x3b, 0x19, 0x0e, 0xca,
	0x64, 0x8c, 0x9b, 0x35, 0x67, 0x71, 0x5c, 0x4b, 0x4c, 0x9f, 0xfe, 0x5b, 0xc4, 0x14, 0x6b, 0x6d,
	0x98, 0xc9, 0x75, 0x73, 0x65, 0x12, 0x41, 0x04, 0xd5, 0xd1, 0x2b, 0x4f, 0x4d, 0xd4, 0xe6, 0xa0,
	0x13, 0xd0, 0x5e, 0xc0, 0xb4, 0xf0, 0xbe, 0xcd, 0x02, 0x61, 0xd8, 0xcc, 0xe3, 0x20, 0x55, 0x93,
	0x7f, 0x94, 0xe4, 0xb1, 0x91, 0x55, 0x2f, 0x5e, 0xf5, 0x5d, 0x9b, 0x6d, 0x2a, 0xea, 0xe4, 0xb3,
	0x5f, 0x03, 0x7c, 0x7e, 0xd9, 0xd4, 0x5b, 0x94, 0xff, 0xb4, 0x2a, 0xc8, 0x04, 0x9f, 0x28, 0x50,
	0x5c, 0x58, 0xc8, 0x41, 0xee, 0xc0, 0xaf, 0x01, 0x09, 0xf1, 0x24, 0x14, 0xda, 0x48, 0xc5, 0x8c,
	0x04, 0xb5, 0x2c, 0x85, 0x56, 0xdb, 0x54, 0x58, 0xf7, 0x1c, 0xe4, 0x3e, 0x98, 0xbf, 0xa2, 0xff,
	0x71, 0xe0, 0x6f, 0x03, 0xb4, 0xe3, 0xf9, 0x77, 0xaa, 0x11, 0x8a, 0xc9, 0xed, 0xf8, 0xc7, 0xd0,
	0xea, 0x3b, 0xc8, 0x3d, 0xf5, 0xef, 0xc8, 0x90, 0xaf, 0x78, 0xdc, 0x9a, 0xb9, 0x64, 0x71, 0xac,
	0xad, 0x81, 0xd3, 0x77, 0xcf, 0xe6, 0x33, 0x7a, 0xc4, 0x40, 0xe8, 0xf2, 0x06, 0x73, 0x31, 0xb8,
	0xfa, 0xf9, 0xa4, 0xe7, 0x1f, 0xaa, 0x91, 0x77, 0x18, 0x67, 0x22, 0x66, 0x5b, 0x91, 0x7d, 0x10,
	0xc2, 0x3a, 0x71, 0x90, 0x7b, 0x36, 0x7f, 0x48, 0x6b, 0xc3, 0x69, 0x69, 0x38, 0x6d, 0x0c, 0xa7,
	0x4b, 0x90, 0xaa, 0xd1, 0xb8, 0x41, 0x21, 0xef, 0xf1, 0xb8, 0x1d, 0xe7, 0xaa, 0x28, 0x35, 0x86,
	0xc7, 0x69, 0x1c, 0xb2, 0x88, 0x8b, 0xcf, 0x45, 0x91, 0xca, 0x6c, 0xbb, 0x92, 0x89, 0xd0, 0x86,
	0x25, 0xa9, 0x75, 0xdf, 0x41, 0x6e, 0xdf, 0xbf, 0x1d, 0x26, 0x53, 0x3c, 0x92, 0xfa, 0xc2, 0x40,
	0x22, 0xb9, 0x35, 0x72, 0x90, 0x3b, 0xf2, 0x3b, 0x4c, 0x5e, 0xe0, 0xb1, 0x86, 0x3c, 0xe3, 0xe2,
	0x22, 0x0c, 0x33, 0xa1, 0xb5, 0x75, 0x5a, 0xf9, 0x7a, 0x18, 0x24, 0x9f, 0xf0, 0xb0, 0xde, 0x3a,
	0x0b, 0x57, 0xa3, 0x7d, 0x73, 0x94, 0x97, 0x97, 0x5d, 0xbf, 0x9f, 0x2b, 0xb2, 0xdf, 0x88, 0x2c,
	0xfc, 0xab, 0x9d, 0x8d, 0xae, 0x77, 0x36, 0xfa, 0xbd, 0xb3, 0xd1, 0xf7, 0xbd, 0xdd, 0xbb, 0xde,
	0xdb, 0xbd, 0x1f, 0x7b, 0xbb, 0xf7, 0xe5, 0x6d, 0x24, 0xcd, 0x26, 0x0f, 0x28, 0x87, 0xc4, 0xab,
	0x35, 0x5f, 0xb6, 0x35, 0x5a, 0x5c, 0x6f, 0x6d, 0xe1, 0x75, 0x6f, 0xa3, 0x5c, 0x5d, 0x1d, 0x0c,
	0xab, 0x7b, 0xaf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x77, 0xd1, 0xf7, 0x04, 0x99, 0x03, 0x00,
	0x00,
}

func (m *OutgoingBatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingBatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingBatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.OutgoingTxFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.RelayerFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ContractCalls) > 0 {
		for iNdEx := len(m.ContractCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutgoingBatchTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutgoingBatchTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingBatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.Nonce))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchTx(uint64(l))
	}
	if len(m.ContractCalls) > 0 {
		for _, e := range m.ContractCalls {
			l = e.Size()
			n += 1 + l + sovOutgoingBatchTx(uint64(l))
		}
	}
	l = m.RelayerFee.Size()
	n += 1 + l + sovOutgoingBatchTx(uint64(l))
	l = m.OutgoingTxFee.Size()
	n += 1 + l + sovOutgoingBatchTx(uint64(l))
	if m.ExpiryTimestamp != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.ExpiryTimestamp))
	}
	if m.IsAtomic {
		n += 2
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.Status))
	}
	return n
}

func sovOutgoingBatchTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutgoingBatchTx(x uint64) (n int) {
	return sovOutgoingBatchTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingBatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutgoingBatchTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingBatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingBatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCalls = append(m.ContractCalls, ContractCall{})
			if err := m.ContractCalls[len(m.ContractCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingTxFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OutgoingTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutgoingBatchTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutgoingBatchTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutgoingBatchTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutgoingBatchTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutgoingBatchTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutgoingBatchTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutgoingBatchTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutgoingBatchTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutgoingBatchTx = fmt.Errorf("proto: unexpected end of group")
)
