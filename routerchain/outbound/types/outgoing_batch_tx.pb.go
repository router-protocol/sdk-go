// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbound/outgoing_batch_tx.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types2 "github.com/router-protocol/sdk-go/routerchain/types"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutgoingBatchTx struct {
	Nonce                  uint64                                 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	DestinationChainType   types.ChainType                        `protobuf:"varint,2,opt,name=destinationChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"destinationChainType,omitempty"`
	DestinationChainId     string                                 `protobuf:"bytes,3,opt,name=destinationChainId,proto3" json:"destinationChainId,omitempty"`
	ContractCalls          []ContractCall                         `protobuf:"bytes,4,rep,name=contractCalls,proto3" json:"contractCalls"`
	RelayerFee             types1.Coin                            `protobuf:"bytes,5,opt,name=relayerFee,proto3" json:"relayerFee"`
	DestinationGasLimit    uint64                                 `protobuf:"varint,6,opt,name=destinationGasLimit,proto3" json:"destinationGasLimit,omitempty"`
	DestinationGasPrice    uint64                                 `protobuf:"varint,7,opt,name=destinationGasPrice,proto3" json:"destinationGasPrice,omitempty"`
	OutgoingTxFeeInRoute   types1.Coin                            `protobuf:"bytes,8,opt,name=outgoingTxFeeInRoute,proto3" json:"outgoingTxFeeInRoute"`
	OutboundAckGasLimit    uint64                                 `protobuf:"varint,9,opt,name=outboundAckGasLimit,proto3" json:"outboundAckGasLimit,omitempty"`
	ChainTimestamp         uint64                                 `protobuf:"varint,10,opt,name=chainTimestamp,proto3" json:"chainTimestamp,omitempty"`
	ExpiryTimestamp        int64                                  `protobuf:"varint,11,opt,name=expiryTimestamp,proto3" json:"expiryTimestamp,omitempty"`
	IsAtomic               bool                                   `protobuf:"varint,12,opt,name=isAtomic,proto3" json:"isAtomic,omitempty"`
	SourceAddress          string                                 `protobuf:"bytes,13,opt,name=sourceAddress,proto3" json:"sourceAddress,omitempty"`
	Status                 OutgoingTxStatus                       `protobuf:"varint,14,opt,name=status,proto3,enum=routerprotocol.routerchain.outbound.OutgoingTxStatus" json:"status,omitempty"`
	RouteAmount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,15,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient         []byte                                 `protobuf:"bytes,16,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	AsmAddress             []byte                                 `protobuf:"bytes,17,opt,name=asmAddress,proto3" json:"asmAddress,omitempty"`
	MiddlewareContractType types2.MiddlewareContractType          `protobuf:"varint,18,opt,name=middlewareContractType,proto3,enum=routerprotocol.routerchain.types.MiddlewareContractType" json:"middlewareContractType,omitempty"`
}

func (m *OutgoingBatchTx) Reset()         { *m = OutgoingBatchTx{} }
func (m *OutgoingBatchTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingBatchTx) ProtoMessage()    {}
func (*OutgoingBatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_fabc9c28a23b97ef, []int{0}
}
func (m *OutgoingBatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingBatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingBatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingBatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingBatchTx.Merge(m, src)
}
func (m *OutgoingBatchTx) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingBatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingBatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingBatchTx proto.InternalMessageInfo

func (m *OutgoingBatchTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *OutgoingBatchTx) GetDestinationChainType() types.ChainType {
	if m != nil {
		return m.DestinationChainType
	}
	return types.CHAIN_TYPE_EVM
}

func (m *OutgoingBatchTx) GetDestinationChainId() string {
	if m != nil {
		return m.DestinationChainId
	}
	return ""
}

func (m *OutgoingBatchTx) GetContractCalls() []ContractCall {
	if m != nil {
		return m.ContractCalls
	}
	return nil
}

func (m *OutgoingBatchTx) GetRelayerFee() types1.Coin {
	if m != nil {
		return m.RelayerFee
	}
	return types1.Coin{}
}

func (m *OutgoingBatchTx) GetDestinationGasLimit() uint64 {
	if m != nil {
		return m.DestinationGasLimit
	}
	return 0
}

func (m *OutgoingBatchTx) GetDestinationGasPrice() uint64 {
	if m != nil {
		return m.DestinationGasPrice
	}
	return 0
}

func (m *OutgoingBatchTx) GetOutgoingTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.OutgoingTxFeeInRoute
	}
	return types1.Coin{}
}

func (m *OutgoingBatchTx) GetOutboundAckGasLimit() uint64 {
	if m != nil {
		return m.OutboundAckGasLimit
	}
	return 0
}

func (m *OutgoingBatchTx) GetChainTimestamp() uint64 {
	if m != nil {
		return m.ChainTimestamp
	}
	return 0
}

func (m *OutgoingBatchTx) GetExpiryTimestamp() int64 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

func (m *OutgoingBatchTx) GetIsAtomic() bool {
	if m != nil {
		return m.IsAtomic
	}
	return false
}

func (m *OutgoingBatchTx) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *OutgoingBatchTx) GetStatus() OutgoingTxStatus {
	if m != nil {
		return m.Status
	}
	return OUTGOING_TX_CREATED
}

func (m *OutgoingBatchTx) GetRouteRecipient() []byte {
	if m != nil {
		return m.RouteRecipient
	}
	return nil
}

func (m *OutgoingBatchTx) GetAsmAddress() []byte {
	if m != nil {
		return m.AsmAddress
	}
	return nil
}

func (m *OutgoingBatchTx) GetMiddlewareContractType() types2.MiddlewareContractType {
	if m != nil {
		return m.MiddlewareContractType
	}
	return types2.MIDDLEWARE_COSMWASM
}

func init() {
	proto.RegisterType((*OutgoingBatchTx)(nil), "routerprotocol.routerchain.outbound.OutgoingBatchTx")
}

func init() { proto.RegisterFile("outbound/outgoing_batch_tx.proto", fileDescriptor_fabc9c28a23b97ef) }

var fileDescriptor_fabc9c28a23b97ef = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdf, 0x4e, 0xdb, 0x3e,
	0x14, 0x6e, 0x7e, 0xfc, 0xf9, 0x15, 0x17, 0xda, 0xcd, 0xab, 0x26, 0x8f, 0x4d, 0x21, 0xdb, 0x10,
	0xcb, 0x0d, 0x0e, 0x30, 0x4d, 0xe2, 0x6e, 0x6a, 0x2b, 0x31, 0x21, 0x0d, 0xb1, 0x85, 0x5e, 0x4d,
	0x9a, 0x2a, 0xd7, 0xb1, 0x8a, 0x45, 0x62, 0x57, 0xb1, 0xb3, 0xb5, 0x6f, 0xb1, 0xd7, 0xd9, 0x1b,
	0x70, 0xc9, 0xe5, 0xb4, 0x0b, 0x34, 0xc1, 0x8b, 0x4c, 0x71, 0xfe, 0xb4, 0x40, 0x86, 0xb8, 0x69,
	0xed, 0x73, 0xce, 0xf7, 0x9d, 0xef, 0x1c, 0x9f, 0x13, 0xe0, 0xc8, 0x44, 0x0f, 0x65, 0x22, 0x02,
	0x4f, 0x26, 0x7a, 0x24, 0xb9, 0x18, 0x0d, 0x86, 0x44, 0xd3, 0xd3, 0x81, 0x9e, 0xe0, 0x71, 0x2c,
	0xb5, 0x84, 0xaf, 0x63, 0x99, 0x68, 0x16, 0x9b, 0x0b, 0x95, 0x21, 0xce, 0xae, 0xf4, 0x94, 0x70,
	0x81, 0x0b, 0xf0, 0xfa, 0x8b, 0x92, 0x86, 0x4a, 0xa1, 0x63, 0x42, 0xf5, 0x80, 0x92, 0x30, 0xcc,
	0x28, 0xd6, 0x5f, 0xde, 0x4d, 0xa2, 0x27, 0x03, 0xa5, 0x89, 0x4e, 0x54, 0x1e, 0xd2, 0x1e, 0xc9,
	0x91, 0x34, 0x47, 0x2f, 0x3d, 0xe5, 0x56, 0x9b, 0x4a, 0x15, 0x49, 0xe5, 0x0d, 0x89, 0x62, 0xde,
	0xb7, 0xdd, 0x21, 0xd3, 0x64, 0xd7, 0xa3, 0x92, 0x8b, 0xdc, 0xff, 0x3c, 0x4a, 0x42, 0xcd, 0x8d,
	0x16, 0xcf, 0xfc, 0x0e, 0xf4, 0x74, 0xcc, 0x72, 0xe7, 0x66, 0x7a, 0x56, 0x5e, 0xc4, 0x83, 0x20,
	0x64, 0xdf, 0x49, 0xcc, 0x06, 0xa5, 0xb6, 0x59, 0xd4, 0xab, 0x9f, 0x75, 0xd0, 0x3a, 0xce, 0x55,
	0x75, 0xd3, 0xca, 0xfb, 0x13, 0xd8, 0x06, 0x4b, 0x42, 0x0a, 0xca, 0x90, 0xe5, 0x58, 0xee, 0xa2,
	0x9f, 0x5d, 0x60, 0x00, 0xda, 0x01, 0x53, 0x9a, 0x0b, 0xa2, 0xb9, 0x14, 0xbd, 0x34, 0x5d, 0x7f,
	0x3a, 0x66, 0xe8, 0x3f, 0xc7, 0x72, 0x9b, 0x7b, 0x3b, 0xf8, 0x9e, 0x3e, 0xcd, 0x64, 0xe2, 0x12,
	0xe7, 0x57, 0xb2, 0x41, 0x0c, 0xe0, 0x6d, 0xfb, 0x61, 0x80, 0x16, 0x1c, 0xcb, 0x5d, 0xf1, 0x2b,
	0x3c, 0xf0, 0x2b, 0x58, 0x2b, 0xca, 0xea, 0x91, 0x30, 0x54, 0x68, 0xd1, 0x59, 0x70, 0x1b, 0x7b,
	0xbb, 0xf8, 0x01, 0xcf, 0x86, 0x7b, 0x73, 0xc8, 0xee, 0xe2, 0xf9, 0xe5, 0x46, 0xcd, 0xbf, 0xc9,
	0x06, 0xdf, 0x03, 0x10, 0xb3, 0x90, 0x4c, 0x59, 0x7c, 0xc0, 0x18, 0x5a, 0x72, 0x2c, 0xb7, 0xb1,
	0xf7, 0x0c, 0x67, 0xcf, 0x82, 0xd3, 0x67, 0xc1, 0xf9, 0xb3, 0xe0, 0x9e, 0xe4, 0x22, 0xe7, 0x98,
	0x83, 0xc0, 0x1d, 0xf0, 0x64, 0x4e, 0xf5, 0x07, 0xa2, 0x3e, 0xf2, 0x88, 0x6b, 0xb4, 0x6c, 0x3a,
	0x5b, 0xe5, 0xba, 0x8b, 0xf8, 0x14, 0x73, 0xca, 0xd0, 0xff, 0x55, 0x08, 0xe3, 0x82, 0x27, 0xa0,
	0x5d, 0x0c, 0x56, 0x7f, 0x72, 0xc0, 0xd8, 0xa1, 0xf0, 0xd3, 0x6a, 0x51, 0xfd, 0x61, 0x72, 0x2b,
	0xc1, 0xa9, 0x8c, 0xa2, 0x4f, 0x1d, 0x7a, 0x56, 0x0a, 0x5f, 0xc9, 0x64, 0x54, 0xb8, 0xe0, 0x16,
	0x68, 0x9a, 0xfe, 0xf6, 0x79, 0xc4, 0x94, 0x26, 0xd1, 0x18, 0x01, 0x13, 0x7c, 0xcb, 0x0a, 0x5d,
	0xd0, 0x62, 0x93, 0x31, 0x8f, 0xa7, 0xb3, 0xc0, 0x86, 0x63, 0xb9, 0x0b, 0xfe, 0x6d, 0x33, 0x5c,
	0x07, 0x75, 0xae, 0x3a, 0x5a, 0x46, 0x9c, 0xa2, 0x55, 0xc7, 0x72, 0xeb, 0x7e, 0x79, 0x87, 0x9b,
	0x60, 0x4d, 0xc9, 0x24, 0xa6, 0xac, 0x13, 0x04, 0x31, 0x53, 0x0a, 0xad, 0x99, 0x19, 0xb9, 0x69,
	0x84, 0x47, 0x60, 0x39, 0xdb, 0x33, 0xd4, 0x34, 0x63, 0xfa, 0xee, 0x41, 0x73, 0x71, 0x5c, 0x36,
	0xe4, 0xc4, 0x80, 0xfd, 0x9c, 0x04, 0x7e, 0x06, 0xab, 0x06, 0x30, 0x20, 0x91, 0x4c, 0x84, 0x46,
	0xad, 0x34, 0x67, 0x17, 0xa7, 0x6d, 0xfc, 0x7d, 0xb9, 0xb1, 0x35, 0xe2, 0xfa, 0x34, 0x19, 0x62,
	0x2a, 0x23, 0x2f, 0xdf, 0xdc, 0xec, 0x6f, 0x5b, 0x05, 0x67, 0x9e, 0x59, 0x47, 0x7c, 0x28, 0xb4,
	0xdf, 0x30, 0x1c, 0x1d, 0x43, 0x01, 0xdf, 0x80, 0x56, 0x46, 0x19, 0x33, 0xca, 0xc7, 0x9c, 0x09,
	0x8d, 0x1e, 0x39, 0x96, 0xbb, 0xea, 0x37, 0x8d, 0xd9, 0x2f, 0xac, 0xd0, 0x06, 0x80, 0xa8, 0xa8,
	0xa8, 0xf6, 0xb1, 0x89, 0x99, 0xb3, 0xc0, 0x31, 0x78, 0x3a, 0xdb, 0xf5, 0x62, 0xb2, 0xcd, 0x86,
	0x42, 0x53, 0xfa, 0xfe, 0x7d, 0xa5, 0x67, 0xe2, 0x8e, 0x2a, 0xf1, 0xfe, 0x3f, 0x78, 0xbb, 0xfe,
	0xf9, 0x95, 0x6d, 0x5d, 0x5c, 0xd9, 0xd6, 0x9f, 0x2b, 0xdb, 0xfa, 0x71, 0x6d, 0xd7, 0x2e, 0xae,
	0xed, 0xda, 0xaf, 0x6b, 0xbb, 0xf6, 0x65, 0x7f, 0xae, 0x13, 0x59, 0x9a, 0xed, 0x22, 0x6d, 0x71,
	0xcf, 0xbe, 0x5a, 0x13, 0xaf, 0xfc, 0x36, 0x1a, 0x09, 0xc3, 0x65, 0x13, 0xf7, 0xf6, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xcc, 0xd0, 0xc4, 0x05, 0x99, 0x05, 0x00, 0x00,
}

func (m *OutgoingBatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingBatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingBatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MiddlewareContractType != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.MiddlewareContractType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.AsmAddress) > 0 {
		i -= len(m.AsmAddress)
		copy(dAtA[i:], m.AsmAddress)
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(len(m.AsmAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.Status != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsAtomic {
		i--
		if m.IsAtomic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.ExpiryTimestamp != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.ExpiryTimestamp))
		i--
		dAtA[i] = 0x58
	}
	if m.ChainTimestamp != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.ChainTimestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.OutboundAckGasLimit != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.OutboundAckGasLimit))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.OutgoingTxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.DestinationGasPrice != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.DestinationGasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.DestinationGasLimit != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.DestinationGasLimit))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.RelayerFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ContractCalls) > 0 {
		for iNdEx := len(m.ContractCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DestinationChainId) > 0 {
		i -= len(m.DestinationChainId)
		copy(dAtA[i:], m.DestinationChainId)
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(len(m.DestinationChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationChainType != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.DestinationChainType))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintOutgoingBatchTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutgoingBatchTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutgoingBatchTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingBatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.Nonce))
	}
	if m.DestinationChainType != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.DestinationChainType))
	}
	l = len(m.DestinationChainId)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchTx(uint64(l))
	}
	if len(m.ContractCalls) > 0 {
		for _, e := range m.ContractCalls {
			l = e.Size()
			n += 1 + l + sovOutgoingBatchTx(uint64(l))
		}
	}
	l = m.RelayerFee.Size()
	n += 1 + l + sovOutgoingBatchTx(uint64(l))
	if m.DestinationGasLimit != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.DestinationGasLimit))
	}
	if m.DestinationGasPrice != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.DestinationGasPrice))
	}
	l = m.OutgoingTxFeeInRoute.Size()
	n += 1 + l + sovOutgoingBatchTx(uint64(l))
	if m.OutboundAckGasLimit != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.OutboundAckGasLimit))
	}
	if m.ChainTimestamp != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.ChainTimestamp))
	}
	if m.ExpiryTimestamp != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.ExpiryTimestamp))
	}
	if m.IsAtomic {
		n += 2
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovOutgoingBatchTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOutgoingBatchTx(uint64(m.Status))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovOutgoingBatchTx(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 2 + l + sovOutgoingBatchTx(uint64(l))
	}
	l = len(m.AsmAddress)
	if l > 0 {
		n += 2 + l + sovOutgoingBatchTx(uint64(l))
	}
	if m.MiddlewareContractType != 0 {
		n += 2 + sovOutgoingBatchTx(uint64(m.MiddlewareContractType))
	}
	return n
}

func sovOutgoingBatchTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutgoingBatchTx(x uint64) (n int) {
	return sovOutgoingBatchTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingBatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutgoingBatchTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingBatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingBatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainType", wireType)
			}
			m.DestinationChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCalls = append(m.ContractCalls, ContractCall{})
			if err := m.ContractCalls[len(m.ContractCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasLimit", wireType)
			}
			m.DestinationGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationGasPrice", wireType)
			}
			m.DestinationGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingTxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundAckGasLimit", wireType)
			}
			m.OutboundAckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundAckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTimestamp", wireType)
			}
			m.ChainTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTimestamp", wireType)
			}
			m.ExpiryTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtomic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtomic = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OutgoingTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = append(m.RouteRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteRecipient == nil {
				m.RouteRecipient = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsmAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsmAddress = append(m.AsmAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AsmAddress == nil {
				m.AsmAddress = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddlewareContractType", wireType)
			}
			m.MiddlewareContractType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MiddlewareContractType |= types2.MiddlewareContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutgoingBatchTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutgoingBatchTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutgoingBatchTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutgoingBatchTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutgoingBatchTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutgoingBatchTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutgoingBatchTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutgoingBatchTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutgoingBatchTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutgoingBatchTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutgoingBatchTx = fmt.Errorf("proto: unexpected end of group")
)
