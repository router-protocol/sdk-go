// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerprotocol/routerchain/txlookup/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateAdhocRequest struct {
	From                      string     `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ChainIds                  []string   `protobuf:"bytes,2,rep,name=chain_ids,json=chainIds,proto3" json:"chain_ids,omitempty"`
	TxHashes                  []string   `protobuf:"bytes,3,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
	MetaData                  [][]byte   `protobuf:"bytes,4,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	MiddlewareContractAddress string     `protobuf:"bytes,5,opt,name=middleware_contract_address,json=middlewareContractAddress,proto3" json:"middleware_contract_address,omitempty"`
	Fee                       types.Coin `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee"`
	CwGasLimit                uint64     `protobuf:"varint,7,opt,name=cw_gas_limit,json=cwGasLimit,proto3" json:"cw_gas_limit,omitempty"`
}

func (m *MsgCreateAdhocRequest) Reset()         { *m = MsgCreateAdhocRequest{} }
func (m *MsgCreateAdhocRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAdhocRequest) ProtoMessage()    {}
func (*MsgCreateAdhocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff2beb4f60b1070, []int{0}
}
func (m *MsgCreateAdhocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAdhocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAdhocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAdhocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAdhocRequest.Merge(m, src)
}
func (m *MsgCreateAdhocRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAdhocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAdhocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAdhocRequest proto.InternalMessageInfo

func (m *MsgCreateAdhocRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCreateAdhocRequest) GetChainIds() []string {
	if m != nil {
		return m.ChainIds
	}
	return nil
}

func (m *MsgCreateAdhocRequest) GetTxHashes() []string {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *MsgCreateAdhocRequest) GetMetaData() [][]byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *MsgCreateAdhocRequest) GetMiddlewareContractAddress() string {
	if m != nil {
		return m.MiddlewareContractAddress
	}
	return ""
}

func (m *MsgCreateAdhocRequest) GetFee() types.Coin {
	if m != nil {
		return m.Fee
	}
	return types.Coin{}
}

func (m *MsgCreateAdhocRequest) GetCwGasLimit() uint64 {
	if m != nil {
		return m.CwGasLimit
	}
	return 0
}

type MsgCreateAdhocResponse struct {
}

func (m *MsgCreateAdhocResponse) Reset()         { *m = MsgCreateAdhocResponse{} }
func (m *MsgCreateAdhocResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAdhocResponse) ProtoMessage()    {}
func (*MsgCreateAdhocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff2beb4f60b1070, []int{1}
}
func (m *MsgCreateAdhocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAdhocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAdhocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAdhocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAdhocResponse.Merge(m, src)
}
func (m *MsgCreateAdhocResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAdhocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAdhocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAdhocResponse proto.InternalMessageInfo

type MsgCreateTxDataRequest struct {
	Orchestrator string `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	ChainId      string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash       string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxData       []byte `protobuf:"bytes,4,opt,name=tx_data,json=txData,proto3" json:"tx_data,omitempty"`
	BlockHeight  uint64 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *MsgCreateTxDataRequest) Reset()         { *m = MsgCreateTxDataRequest{} }
func (m *MsgCreateTxDataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTxDataRequest) ProtoMessage()    {}
func (*MsgCreateTxDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff2beb4f60b1070, []int{2}
}
func (m *MsgCreateTxDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTxDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTxDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTxDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTxDataRequest.Merge(m, src)
}
func (m *MsgCreateTxDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTxDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTxDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTxDataRequest proto.InternalMessageInfo

func (m *MsgCreateTxDataRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCreateTxDataRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgCreateTxDataRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgCreateTxDataRequest) GetTxData() []byte {
	if m != nil {
		return m.TxData
	}
	return nil
}

func (m *MsgCreateTxDataRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type MsgCreateTxDataResponse struct {
}

func (m *MsgCreateTxDataResponse) Reset()         { *m = MsgCreateTxDataResponse{} }
func (m *MsgCreateTxDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTxDataResponse) ProtoMessage()    {}
func (*MsgCreateTxDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ff2beb4f60b1070, []int{3}
}
func (m *MsgCreateTxDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTxDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTxDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTxDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTxDataResponse.Merge(m, src)
}
func (m *MsgCreateTxDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTxDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTxDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTxDataResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateAdhocRequest)(nil), "routerprotocol.routerchain.txlookup.MsgCreateAdhocRequest")
	proto.RegisterType((*MsgCreateAdhocResponse)(nil), "routerprotocol.routerchain.txlookup.MsgCreateAdhocResponse")
	proto.RegisterType((*MsgCreateTxDataRequest)(nil), "routerprotocol.routerchain.txlookup.MsgCreateTxDataRequest")
	proto.RegisterType((*MsgCreateTxDataResponse)(nil), "routerprotocol.routerchain.txlookup.MsgCreateTxDataResponse")
}

func init() {
	proto.RegisterFile("routerprotocol/routerchain/txlookup/tx.proto", fileDescriptor_1ff2beb4f60b1070)
}

var fileDescriptor_1ff2beb4f60b1070 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x33, 0x71, 0xc8, 0xcf, 0x34, 0xab, 0xe1, 0xa7, 0x4e, 0x2a, 0x19, 0x13, 0x36, 0x5e,
	0x50, 0x5b, 0x29, 0x1b, 0x04, 0x08, 0xa9, 0x0d, 0x12, 0x45, 0xa2, 0x1b, 0x8b, 0x15, 0x1b, 0x6b,
	0x32, 0x9e, 0xda, 0x56, 0xe3, 0xdc, 0x30, 0x33, 0x21, 0xe6, 0x21, 0x90, 0xba, 0xe3, 0x15, 0x58,
	0xf0, 0x20, 0x5d, 0x76, 0xc9, 0x0a, 0xa1, 0xe4, 0x45, 0x90, 0x67, 0x1c, 0x91, 0x94, 0x2c, 0xa0,
	0xbb, 0x99, 0x73, 0xce, 0xb5, 0xef, 0xfd, 0x34, 0x17, 0x3f, 0x11, 0x30, 0x57, 0x5c, 0xcc, 0x04,
	0x28, 0x60, 0x30, 0x09, 0xcc, 0x95, 0xa5, 0x34, 0x9b, 0x06, 0xaa, 0x98, 0x00, 0x5c, 0xcc, 0x67,
	0x81, 0x2a, 0x7c, 0x1d, 0x20, 0x8f, 0xb7, 0xd3, 0xfe, 0x46, 0xda, 0x5f, 0xa7, 0xfb, 0xf7, 0x12,
	0x48, 0x40, 0x47, 0x82, 0xf2, 0x64, 0x4a, 0xfb, 0x0e, 0x03, 0x99, 0x83, 0x0c, 0xc6, 0x54, 0xf2,
	0xe0, 0xd3, 0x70, 0xcc, 0x15, 0x1d, 0x06, 0x0c, 0xb2, 0xa9, 0xf1, 0x07, 0x5f, 0xeb, 0xf8, 0xfe,
	0x99, 0x4c, 0x46, 0x82, 0x53, 0xc5, 0x8f, 0xe3, 0x14, 0x58, 0xc8, 0x3f, 0xce, 0xb9, 0x54, 0x84,
	0xe0, 0xc6, 0xb9, 0x80, 0xdc, 0x46, 0x2e, 0xf2, 0x3a, 0xa1, 0x3e, 0x93, 0x03, 0xdc, 0xd1, 0x7f,
	0x8d, 0xb2, 0x58, 0xda, 0x75, 0xd7, 0xf2, 0x3a, 0x61, 0x5b, 0x0b, 0x6f, 0x63, 0x59, 0x9a, 0xaa,
	0x88, 0x52, 0x2a, 0x53, 0x2e, 0x6d, 0xcb, 0x98, 0xaa, 0x38, 0xd5, 0xf7, 0xd2, 0xcc, 0xb9, 0xa2,
	0x51, 0x4c, 0x15, 0xb5, 0x1b, 0xae, 0xe5, 0x75, 0xc3, 0x76, 0x29, 0xbc, 0xa6, 0x8a, 0x92, 0x57,
	0xf8, 0x20, 0xcf, 0xe2, 0x78, 0xc2, 0x17, 0x54, 0xf0, 0x88, 0xc1, 0x54, 0x09, 0xca, 0x54, 0x44,
	0xe3, 0x58, 0x70, 0x29, 0xed, 0x3b, 0xba, 0x83, 0xde, 0x9f, 0xc8, 0xa8, 0x4a, 0x1c, 0x9b, 0x00,
	0x19, 0x62, 0xeb, 0x9c, 0x73, 0xbb, 0xe9, 0x22, 0x6f, 0xef, 0xa8, 0xe7, 0x9b, 0x91, 0xfd, 0x72,
	0x64, 0xbf, 0x1a, 0xd9, 0x1f, 0x41, 0x36, 0x3d, 0x69, 0x5c, 0xfd, 0x7c, 0x58, 0x0b, 0xcb, 0x2c,
	0x71, 0x71, 0x97, 0x2d, 0xa2, 0x84, 0xca, 0x68, 0x92, 0xe5, 0x99, 0xb2, 0x5b, 0x2e, 0xf2, 0x1a,
	0x21, 0x66, 0x8b, 0x37, 0x54, 0xbe, 0x2b, 0x95, 0x81, 0x8d, 0x1f, 0xdc, 0x04, 0x23, 0x67, 0x30,
	0x95, 0x7c, 0xf0, 0x1d, 0x6d, 0x58, 0xef, 0x8b, 0x72, 0x84, 0x35, 0xb4, 0x01, 0xee, 0x82, 0x60,
	0x29, 0x97, 0x4a, 0x50, 0x05, 0xa2, 0x82, 0xb7, 0xa5, 0x91, 0x1e, 0x6e, 0xaf, 0x21, 0xda, 0x75,
	0xed, 0xb7, 0x2a, 0x86, 0x64, 0x1f, 0xb7, 0x2a, 0x84, 0xb6, 0xa5, 0x9d, 0xa6, 0x01, 0x58, 0x19,
	0x15, 0x3c, 0xe4, 0x75, 0x4b, 0x43, 0xa3, 0x7b, 0x84, 0xbb, 0xe3, 0x09, 0xb0, 0x8b, 0x28, 0xe5,
	0x59, 0x92, 0x2a, 0xcd, 0xaa, 0x11, 0xee, 0x69, 0xed, 0x54, 0x4b, 0x83, 0x1e, 0xde, 0xff, 0xab,
	0x5b, 0x33, 0xc9, 0xd1, 0xb7, 0x3a, 0xb6, 0xce, 0x64, 0x42, 0xbe, 0x20, 0x4c, 0x76, 0x3c, 0x81,
	0xe7, 0xfe, 0x3f, 0x3c, 0x3c, 0x7f, 0xe7, 0xf3, 0xe9, 0xbf, 0xb8, 0x55, 0xad, 0xe9, 0x8b, 0x5c,
	0x22, 0x7c, 0x77, 0x17, 0xde, 0xff, 0xfc, 0xe8, 0x56, 0x71, 0xff, 0xe5, 0xed, 0x8a, 0x4d, 0x4b,
	0x27, 0xe1, 0xd5, 0xd2, 0x41, 0xd7, 0x4b, 0x07, 0xfd, 0x5a, 0x3a, 0xe8, 0x72, 0xe5, 0xd4, 0xae,
	0x57, 0x4e, 0xed, 0xc7, 0xca, 0xa9, 0x7d, 0x78, 0x96, 0x64, 0x2a, 0x9d, 0x8f, 0x7d, 0x06, 0x79,
	0xb5, 0xc7, 0x87, 0x37, 0xf6, 0xfa, 0xd0, 0x2c, 0x76, 0xb1, 0xb1, 0xda, 0x9f, 0x67, 0x5c, 0x8e,
	0x9b, 0x3a, 0xf7, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0xaa, 0x53, 0x16, 0x0e, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateAdhocRequest defines a method to initiate an adhoc request from the user
	CreateAdhocRequest(ctx context.Context, in *MsgCreateAdhocRequest, opts ...grpc.CallOption) (*MsgCreateAdhocResponse, error)
	// CreateTxDataRequest defines a method to submit transaction data from orchestrator
	CreateTxDataRequest(ctx context.Context, in *MsgCreateTxDataRequest, opts ...grpc.CallOption) (*MsgCreateTxDataResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateAdhocRequest(ctx context.Context, in *MsgCreateAdhocRequest, opts ...grpc.CallOption) (*MsgCreateAdhocResponse, error) {
	out := new(MsgCreateAdhocResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.txlookup.Msg/CreateAdhocRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTxDataRequest(ctx context.Context, in *MsgCreateTxDataRequest, opts ...grpc.CallOption) (*MsgCreateTxDataResponse, error) {
	out := new(MsgCreateTxDataResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.txlookup.Msg/CreateTxDataRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateAdhocRequest defines a method to initiate an adhoc request from the user
	CreateAdhocRequest(context.Context, *MsgCreateAdhocRequest) (*MsgCreateAdhocResponse, error)
	// CreateTxDataRequest defines a method to submit transaction data from orchestrator
	CreateTxDataRequest(context.Context, *MsgCreateTxDataRequest) (*MsgCreateTxDataResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateAdhocRequest(ctx context.Context, req *MsgCreateAdhocRequest) (*MsgCreateAdhocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdhocRequest not implemented")
}
func (*UnimplementedMsgServer) CreateTxDataRequest(ctx context.Context, req *MsgCreateTxDataRequest) (*MsgCreateTxDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTxDataRequest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateAdhocRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAdhocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAdhocRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.txlookup.Msg/CreateAdhocRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAdhocRequest(ctx, req.(*MsgCreateAdhocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTxDataRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTxDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTxDataRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.txlookup.Msg/CreateTxDataRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTxDataRequest(ctx, req.(*MsgCreateTxDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.txlookup.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdhocRequest",
			Handler:    _Msg_CreateAdhocRequest_Handler,
		},
		{
			MethodName: "CreateTxDataRequest",
			Handler:    _Msg_CreateTxDataRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerprotocol/routerchain/txlookup/tx.proto",
}

func (m *MsgCreateAdhocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAdhocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAdhocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CwGasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CwGasLimit))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.MiddlewareContractAddress) > 0 {
		i -= len(m.MiddlewareContractAddress)
		copy(dAtA[i:], m.MiddlewareContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MiddlewareContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MetaData) > 0 {
		for iNdEx := len(m.MetaData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MetaData[iNdEx])
			copy(dAtA[i:], m.MetaData[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.MetaData[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TxHashes) > 0 {
		for iNdEx := len(m.TxHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashes[iNdEx])
			copy(dAtA[i:], m.TxHashes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TxHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChainIds) > 0 {
		for iNdEx := len(m.ChainIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChainIds[iNdEx])
			copy(dAtA[i:], m.ChainIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ChainIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAdhocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAdhocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAdhocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTxDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTxDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTxDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxData) > 0 {
		i -= len(m.TxData)
		copy(dAtA[i:], m.TxData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTxDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTxDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTxDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateAdhocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ChainIds) > 0 {
		for _, s := range m.ChainIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.TxHashes) > 0 {
		for _, s := range m.TxHashes {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.MetaData) > 0 {
		for _, b := range m.MetaData {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.MiddlewareContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Fee.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.CwGasLimit != 0 {
		n += 1 + sovTx(uint64(m.CwGasLimit))
	}
	return n
}

func (m *MsgCreateAdhocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTxDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	return n
}

func (m *MsgCreateTxDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateAdhocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAdhocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAdhocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainIds = append(m.ChainIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashes = append(m.TxHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaData = append(m.MetaData, make([]byte, postIndex-iNdEx))
			copy(m.MetaData[len(m.MetaData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddlewareContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddlewareContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CwGasLimit", wireType)
			}
			m.CwGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CwGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAdhocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAdhocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAdhocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTxDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTxDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTxDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxData = append(m.TxData[:0], dAtA[iNdEx:postIndex]...)
			if m.TxData == nil {
				m.TxData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTxDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTxDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTxDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
