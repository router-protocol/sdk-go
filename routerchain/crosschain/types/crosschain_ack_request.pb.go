// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/crosschain_ack_request.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosschainAckRequest struct {
	AckSrcChainId        string                `protobuf:"bytes,1,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	Contract             string                `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	AckRequestIdentifier uint64                `protobuf:"varint,3,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	BlockHeight          uint64                `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestTxHash           string                `protobuf:"bytes,5,opt,name=destTxHash,proto3" json:"destTxHash,omitempty"`
	RelayerRouterAddress string                `protobuf:"bytes,6,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	AckDestChainId       string                `protobuf:"bytes,7,opt,name=ack_dest_chain_id,json=ackDestChainId,proto3" json:"ack_dest_chain_id,omitempty"`
	RequestSender        string                `protobuf:"bytes,8,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestIdentifier    uint64                `protobuf:"varint,9,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	AckSrcChainType      types.ChainType       `protobuf:"varint,10,opt,name=ack_src_chain_type,json=ackSrcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_src_chain_type,omitempty"`
	AckDestChainType     types.ChainType       `protobuf:"varint,11,opt,name=ack_dest_chain_type,json=ackDestChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_dest_chain_type,omitempty"`
	FeeConsumed          uint64                `protobuf:"varint,12,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	ExecData             []byte                `protobuf:"bytes,13,opt,name=execData,proto3" json:"execData,omitempty"`
	ExecStatus           bool                  `protobuf:"varint,14,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	EthSigner            string                `protobuf:"bytes,15,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string                `protobuf:"bytes,16,opt,name=signature,proto3" json:"signature,omitempty"`
	AckGasLimit          uint64                `protobuf:"varint,17,opt,name=ack_gas_limit,json=ackGasLimit,proto3" json:"ack_gas_limit,omitempty"`
	AckGasPrice          uint64                `protobuf:"varint,18,opt,name=ack_gas_price,json=ackGasPrice,proto3" json:"ack_gas_price,omitempty"`
	AckFeeDeducted       types1.Coin           `protobuf:"bytes,19,opt,name=ack_fee_deducted,json=ackFeeDeducted,proto3" json:"ack_fee_deducted"`
	AckRelayerIncentive  types1.Coin           `protobuf:"bytes,20,opt,name=ack_relayer_incentive,json=ackRelayerIncentive,proto3" json:"ack_relayer_incentive"`
	Status               CrosschainAckTxStatus `protobuf:"varint,21,opt,name=status,proto3,enum=routerprotocol.routerchain.crosschain.CrosschainAckTxStatus" json:"status,omitempty"`
	BlockedExpiryHeight  uint64                `protobuf:"varint,22,opt,name=blocked_expiry_height,json=blockedExpiryHeight,proto3" json:"blocked_expiry_height,omitempty"`
}

func (m *CrosschainAckRequest) Reset()         { *m = CrosschainAckRequest{} }
func (m *CrosschainAckRequest) String() string { return proto.CompactTextString(m) }
func (*CrosschainAckRequest) ProtoMessage()    {}
func (*CrosschainAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8c0246ccbaf4ddc, []int{0}
}
func (m *CrosschainAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainAckRequest.Merge(m, src)
}
func (m *CrosschainAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainAckRequest proto.InternalMessageInfo

func (m *CrosschainAckRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *CrosschainAckRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *CrosschainAckRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *CrosschainAckRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrosschainAckRequest) GetDestTxHash() string {
	if m != nil {
		return m.DestTxHash
	}
	return ""
}

func (m *CrosschainAckRequest) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrosschainAckRequest) GetAckDestChainId() string {
	if m != nil {
		return m.AckDestChainId
	}
	return ""
}

func (m *CrosschainAckRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *CrosschainAckRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *CrosschainAckRequest) GetAckSrcChainType() types.ChainType {
	if m != nil {
		return m.AckSrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *CrosschainAckRequest) GetAckDestChainType() types.ChainType {
	if m != nil {
		return m.AckDestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *CrosschainAckRequest) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *CrosschainAckRequest) GetExecData() []byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *CrosschainAckRequest) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *CrosschainAckRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *CrosschainAckRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *CrosschainAckRequest) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *CrosschainAckRequest) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

func (m *CrosschainAckRequest) GetAckFeeDeducted() types1.Coin {
	if m != nil {
		return m.AckFeeDeducted
	}
	return types1.Coin{}
}

func (m *CrosschainAckRequest) GetAckRelayerIncentive() types1.Coin {
	if m != nil {
		return m.AckRelayerIncentive
	}
	return types1.Coin{}
}

func (m *CrosschainAckRequest) GetStatus() CrosschainAckTxStatus {
	if m != nil {
		return m.Status
	}
	return CROSSCHAIN_ACK_TX_CREATED
}

func (m *CrosschainAckRequest) GetBlockedExpiryHeight() uint64 {
	if m != nil {
		return m.BlockedExpiryHeight
	}
	return 0
}

type CrosschainAckRequestClaimHash struct {
	AckSrcChainId        string          `protobuf:"bytes,1,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	Contract             string          `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	AckRequestIdentifier uint64          `protobuf:"varint,3,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	BlockHeight          uint64          `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestTxHash           string          `protobuf:"bytes,5,opt,name=destTxHash,proto3" json:"destTxHash,omitempty"`
	RelayerRouterAddress string          `protobuf:"bytes,6,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	AckDestChainId       string          `protobuf:"bytes,7,opt,name=ack_dest_chain_id,json=ackDestChainId,proto3" json:"ack_dest_chain_id,omitempty"`
	RequestSender        string          `protobuf:"bytes,8,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestIdentifier    uint64          `protobuf:"varint,9,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	AckSrcChainType      types.ChainType `protobuf:"varint,10,opt,name=ack_src_chain_type,json=ackSrcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_src_chain_type,omitempty"`
	AckDestChainType     types.ChainType `protobuf:"varint,11,opt,name=ack_dest_chain_type,json=ackDestChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_dest_chain_type,omitempty"`
	FeeConsumed          uint64          `protobuf:"varint,12,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	ExecData             []byte          `protobuf:"bytes,13,opt,name=execData,proto3" json:"execData,omitempty"`
	ExecStatus           bool            `protobuf:"varint,14,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
}

func (m *CrosschainAckRequestClaimHash) Reset()         { *m = CrosschainAckRequestClaimHash{} }
func (m *CrosschainAckRequestClaimHash) String() string { return proto.CompactTextString(m) }
func (*CrosschainAckRequestClaimHash) ProtoMessage()    {}
func (*CrosschainAckRequestClaimHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8c0246ccbaf4ddc, []int{1}
}
func (m *CrosschainAckRequestClaimHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainAckRequestClaimHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainAckRequestClaimHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainAckRequestClaimHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainAckRequestClaimHash.Merge(m, src)
}
func (m *CrosschainAckRequestClaimHash) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainAckRequestClaimHash) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainAckRequestClaimHash.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainAckRequestClaimHash proto.InternalMessageInfo

func (m *CrosschainAckRequestClaimHash) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *CrosschainAckRequestClaimHash) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *CrosschainAckRequestClaimHash) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *CrosschainAckRequestClaimHash) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrosschainAckRequestClaimHash) GetDestTxHash() string {
	if m != nil {
		return m.DestTxHash
	}
	return ""
}

func (m *CrosschainAckRequestClaimHash) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrosschainAckRequestClaimHash) GetAckDestChainId() string {
	if m != nil {
		return m.AckDestChainId
	}
	return ""
}

func (m *CrosschainAckRequestClaimHash) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *CrosschainAckRequestClaimHash) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *CrosschainAckRequestClaimHash) GetAckSrcChainType() types.ChainType {
	if m != nil {
		return m.AckSrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *CrosschainAckRequestClaimHash) GetAckDestChainType() types.ChainType {
	if m != nil {
		return m.AckDestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *CrosschainAckRequestClaimHash) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *CrosschainAckRequestClaimHash) GetExecData() []byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *CrosschainAckRequestClaimHash) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func init() {
	proto.RegisterType((*CrosschainAckRequest)(nil), "routerprotocol.routerchain.crosschain.CrosschainAckRequest")
	proto.RegisterType((*CrosschainAckRequestClaimHash)(nil), "routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/crosschain_ack_request.proto", fileDescriptor_d8c0246ccbaf4ddc)
}

var fileDescriptor_d8c0246ccbaf4ddc = []byte{
	// 726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x4f, 0x4f, 0x1b, 0x39,
	0x14, 0xcf, 0xec, 0x02, 0x1b, 0x1c, 0x08, 0xe0, 0x04, 0xe4, 0x65, 0x77, 0x67, 0x47, 0x48, 0x68,
	0xb3, 0xd2, 0xee, 0xa4, 0x84, 0xf6, 0x52, 0xf5, 0x02, 0xa1, 0x2d, 0x91, 0x7a, 0xa8, 0x26, 0x39,
	0x55, 0xaa, 0x46, 0x8e, 0xe7, 0x91, 0x58, 0x49, 0x66, 0x52, 0xdb, 0x83, 0x92, 0x6f, 0xd1, 0x4f,
	0xd2, 0xcf, 0xc1, 0x11, 0xa9, 0x97, 0x9e, 0xaa, 0x0a, 0xbe, 0x48, 0x65, 0x7b, 0x92, 0x0c, 0x14,
	0x55, 0xa8, 0xa7, 0x1e, 0xb8, 0xd9, 0xbf, 0xf7, 0x67, 0xde, 0x7b, 0xfe, 0xfd, 0xde, 0xa0, 0x43,
	0x91, 0xa4, 0x0a, 0x04, 0xeb, 0x53, 0x1e, 0xd7, 0x99, 0x48, 0xa4, 0xbc, 0x7d, 0x0c, 0x29, 0x1b,
	0x84, 0x02, 0xde, 0xa5, 0x20, 0x95, 0x3f, 0x16, 0x89, 0x4a, 0xf0, 0xbe, 0x0d, 0x32, 0x17, 0x96,
	0x0c, 0xfd, 0x5c, 0x0e, 0x7f, 0x11, 0xb8, 0xfb, 0xc7, 0x28, 0x1d, 0x2a, 0x9e, 0xe5, 0x33, 0xa9,
	0xd4, 0x74, 0x0c, 0x36, 0xc7, 0xae, 0xcb, 0x12, 0x39, 0x4a, 0x64, 0xbd, 0x4b, 0x25, 0xd4, 0xcf,
	0x0f, 0xba, 0xa0, 0xe8, 0x41, 0x9d, 0x25, 0x3c, 0xce, 0xec, 0xd5, 0x5e, 0xd2, 0x4b, 0xcc, 0xb1,
	0xae, 0x4f, 0x19, 0xfa, 0xe4, 0x7e, 0xe5, 0xaa, 0x49, 0x28, 0x15, 0x55, 0xa9, 0xb4, 0x61, 0x7b,
	0x1f, 0x8b, 0xa8, 0xda, 0x9c, 0xbb, 0x1c, 0xb1, 0x41, 0x60, 0xfb, 0xc1, 0xff, 0xa0, 0x4d, 0xed,
	0x2f, 0x05, 0x0b, 0x6d, 0x34, 0x8f, 0x88, 0xe3, 0x39, 0xb5, 0xd5, 0x60, 0x9d, 0xb2, 0x41, 0x5b,
	0xb0, 0xa6, 0x46, 0x5b, 0x11, 0xde, 0x45, 0x45, 0x96, 0xc4, 0x4a, 0x50, 0xa6, 0xc8, 0x2f, 0xc6,
	0x61, 0x7e, 0xc7, 0x8f, 0xd1, 0x4e, 0x6e, 0x46, 0x21, 0x8f, 0x20, 0x56, 0xfc, 0x8c, 0x83, 0x20,
	0xbf, 0x7a, 0x4e, 0x6d, 0x29, 0xa8, 0xd2, 0xf9, 0x07, 0x5b, 0x73, 0x1b, 0xf6, 0x50, 0xa9, 0x3b,
	0x4c, 0xd8, 0xe0, 0x14, 0x78, 0xaf, 0xaf, 0xc8, 0x92, 0x71, 0xcd, 0x43, 0xd8, 0x45, 0x28, 0x02,
	0xa9, 0x3a, 0x93, 0x53, 0x2a, 0xfb, 0x64, 0xd9, 0x7c, 0x35, 0x87, 0xe0, 0x06, 0xaa, 0x0a, 0x18,
	0xd2, 0x29, 0x88, 0xc0, 0x4c, 0xe5, 0x28, 0x8a, 0x04, 0x48, 0x49, 0x56, 0x8c, 0xe7, 0x9d, 0x36,
	0xfc, 0x2f, 0xda, 0xd2, 0xb5, 0xea, 0x2c, 0x8b, 0x8e, 0x7f, 0x33, 0x01, 0x65, 0xca, 0x06, 0x27,
	0x20, 0xd5, 0xac, 0xe5, 0x7d, 0x54, 0x9e, 0xb5, 0x24, 0x21, 0x8e, 0x40, 0x90, 0xa2, 0x9d, 0x4c,
	0x86, 0xb6, 0x0d, 0x88, 0xff, 0x43, 0x5b, 0xe2, 0x76, 0x73, 0x64, 0xd5, 0x74, 0xf3, 0xad, 0x01,
	0xbf, 0x45, 0xf8, 0xe6, 0xc0, 0x35, 0x25, 0x08, 0xf2, 0x9c, 0x5a, 0xb9, 0xf1, 0xc8, 0xff, 0x0e,
	0xaf, 0x16, 0x5c, 0xf2, 0x4d, 0x81, 0x9d, 0xe9, 0x18, 0x82, 0x8d, 0xdc, 0x23, 0x69, 0x00, 0x87,
	0xa8, 0x72, 0xab, 0x3d, 0x93, 0xbf, 0xf4, 0x83, 0xf9, 0x37, 0xf3, 0x23, 0x31, 0x1f, 0xf0, 0x50,
	0xe9, 0x0c, 0xa0, 0x99, 0xc4, 0x32, 0x1d, 0x41, 0x44, 0xd6, 0xec, 0xab, 0xe5, 0x20, 0xcd, 0x14,
	0x98, 0x00, 0x3b, 0xa1, 0x8a, 0x92, 0x75, 0xcf, 0xa9, 0xad, 0x05, 0xf3, 0xbb, 0x7e, 0x51, 0x7d,
	0x6e, 0x1b, 0x6e, 0x92, 0xb2, 0xe7, 0xd4, 0x8a, 0x41, 0x0e, 0xc1, 0x7f, 0xa2, 0x55, 0x50, 0xfd,
	0x36, 0xef, 0xc5, 0x20, 0xc8, 0x86, 0x99, 0xf6, 0x02, 0xd0, 0x56, 0xc9, 0x7b, 0x31, 0x55, 0xa9,
	0x00, 0xb2, 0x69, 0xad, 0x73, 0x00, 0xef, 0x21, 0x4d, 0xd9, 0xb0, 0x47, 0x65, 0x38, 0xe4, 0x23,
	0xae, 0xc8, 0x96, 0xad, 0x8d, 0xb2, 0xc1, 0x4b, 0x2a, 0x5f, 0x69, 0x28, 0xef, 0x33, 0x16, 0x9c,
	0x01, 0xc1, 0x79, 0x9f, 0xd7, 0x1a, 0xc2, 0x2d, 0x2b, 0x89, 0x33, 0x80, 0x30, 0x82, 0x28, 0x65,
	0x0a, 0x22, 0x52, 0xf1, 0x9c, 0x5a, 0xa9, 0xf1, 0xbb, 0x6f, 0x35, 0xeb, 0x6b, 0xcd, 0xfa, 0x99,
	0x66, 0xfd, 0x66, 0xc2, 0xe3, 0xe3, 0xa5, 0x8b, 0xcf, 0x7f, 0x17, 0x0c, 0x83, 0x5e, 0x00, 0x9c,
	0x64, 0x61, 0xb8, 0x8d, 0xb6, 0xad, 0x30, 0x0c, 0x11, 0x43, 0x1e, 0x33, 0xcd, 0x83, 0x73, 0x20,
	0xd5, 0xfb, 0xe5, 0xab, 0x18, 0xe1, 0x98, 0xe0, 0xd6, 0x2c, 0x16, 0x77, 0xd0, 0x8a, 0xd5, 0x36,
	0xd9, 0x36, 0xaf, 0xfa, 0xcc, 0xbf, 0xd7, 0x36, 0xf2, 0x6f, 0xe8, 0xbf, 0x33, 0xb1, 0x13, 0x0f,
	0xb2, 0x5c, 0xb8, 0x81, 0xb6, 0x8d, 0xf4, 0x20, 0x0a, 0x61, 0x32, 0xe6, 0x62, 0x1a, 0xf6, 0xad,
	0x2e, 0x77, 0xcc, 0x84, 0x2a, 0x99, 0xf1, 0xb9, 0xb1, 0x59, 0x7d, 0xee, 0x7d, 0x58, 0x46, 0x7f,
	0xdd, 0xb5, 0x55, 0x9a, 0x43, 0xca, 0x47, 0x46, 0xa1, 0x0f, 0xeb, 0xe5, 0x61, 0xbd, 0xfc, 0x3c,
	0xeb, 0xe5, 0xb8, 0x73, 0x71, 0xe5, 0x3a, 0x97, 0x57, 0xae, 0xf3, 0xe5, 0xca, 0x75, 0xde, 0x5f,
	0xbb, 0x85, 0xcb, 0x6b, 0xb7, 0xf0, 0xe9, 0xda, 0x2d, 0xbc, 0x79, 0xda, 0xe3, 0xaa, 0x9f, 0x76,
	0x7d, 0x96, 0x8c, 0xea, 0xb6, 0xec, 0xff, 0x67, 0x6d, 0xcc, 0xee, 0xf6, 0x47, 0x3b, 0xc9, 0xff,
	0x75, 0x75, 0xf3, 0xb2, 0xbb, 0x62, 0x3c, 0x0f, 0xbf, 0x06, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xd5,
	0x49, 0x40, 0x4b, 0x08, 0x00, 0x00,
}

func (m *CrosschainAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockedExpiryHeight != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.BlockedExpiryHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Status != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	{
		size, err := m.AckRelayerIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.AckFeeDeducted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.AckGasPrice != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x7a
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.ExecData) > 0 {
		i -= len(m.ExecData)
		copy(dAtA[i:], m.ExecData)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.ExecData)))
		i--
		dAtA[i] = 0x6a
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x60
	}
	if m.AckDestChainType != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckDestChainType))
		i--
		dAtA[i] = 0x58
	}
	if m.AckSrcChainType != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckSrcChainType))
		i--
		dAtA[i] = 0x50
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AckDestChainId) > 0 {
		i -= len(m.AckDestChainId)
		copy(dAtA[i:], m.AckDestChainId)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.AckDestChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestTxHash) > 0 {
		i -= len(m.DestTxHash)
		copy(dAtA[i:], m.DestTxHash)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.DestTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrosschainAckRequestClaimHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainAckRequestClaimHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainAckRequestClaimHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.ExecData) > 0 {
		i -= len(m.ExecData)
		copy(dAtA[i:], m.ExecData)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.ExecData)))
		i--
		dAtA[i] = 0x6a
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x60
	}
	if m.AckDestChainType != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckDestChainType))
		i--
		dAtA[i] = 0x58
	}
	if m.AckSrcChainType != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckSrcChainType))
		i--
		dAtA[i] = 0x50
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AckDestChainId) > 0 {
		i -= len(m.AckDestChainId)
		copy(dAtA[i:], m.AckDestChainId)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.AckDestChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestTxHash) > 0 {
		i -= len(m.DestTxHash)
		copy(dAtA[i:], m.DestTxHash)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.DestTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainAckRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainAckRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosschainAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckRequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.BlockHeight))
	}
	l = len(m.DestTxHash)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.AckDestChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.RequestIdentifier))
	}
	if m.AckSrcChainType != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckSrcChainType))
	}
	if m.AckDestChainType != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckDestChainType))
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.FeeConsumed))
	}
	l = len(m.ExecData)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.ExecStatus {
		n += 2
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.AckGasLimit != 0 {
		n += 2 + sovCrosschainAckRequest(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 2 + sovCrosschainAckRequest(uint64(m.AckGasPrice))
	}
	l = m.AckFeeDeducted.Size()
	n += 2 + l + sovCrosschainAckRequest(uint64(l))
	l = m.AckRelayerIncentive.Size()
	n += 2 + l + sovCrosschainAckRequest(uint64(l))
	if m.Status != 0 {
		n += 2 + sovCrosschainAckRequest(uint64(m.Status))
	}
	if m.BlockedExpiryHeight != 0 {
		n += 2 + sovCrosschainAckRequest(uint64(m.BlockedExpiryHeight))
	}
	return n
}

func (m *CrosschainAckRequestClaimHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckRequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.BlockHeight))
	}
	l = len(m.DestTxHash)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.AckDestChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.RequestIdentifier))
	}
	if m.AckSrcChainType != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckSrcChainType))
	}
	if m.AckDestChainType != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckDestChainType))
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.FeeConsumed))
	}
	l = len(m.ExecData)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.ExecStatus {
		n += 2
	}
	return n
}

func sovCrosschainAckRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainAckRequest(x uint64) (n int) {
	return sovCrosschainAckRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosschainAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainAckRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckDestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainType", wireType)
			}
			m.AckSrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckSrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainType", wireType)
			}
			m.AckDestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckDestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecData == nil {
				m.ExecData = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckFeeDeducted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AckFeeDeducted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRelayerIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AckRelayerIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrosschainAckTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedExpiryHeight", wireType)
			}
			m.BlockedExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainAckRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrosschainAckRequestClaimHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainAckRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainAckRequestClaimHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainAckRequestClaimHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckDestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainType", wireType)
			}
			m.AckSrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckSrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainType", wireType)
			}
			m.AckDestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckDestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecData == nil {
				m.ExecData = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainAckRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainAckRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainAckRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainAckRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainAckRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainAckRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainAckRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainAckRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainAckRequest = fmt.Errorf("proto: unexpected end of group")
)
