// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/crosschain_ack_request.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosschainAckRequest struct {
	AckSrcChainId        string          `protobuf:"bytes,1,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64          `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	BlockHeight          uint64          `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestTxHash           string          `protobuf:"bytes,4,opt,name=destTxHash,proto3" json:"destTxHash,omitempty"`
	RelayerRouterAddress string          `protobuf:"bytes,5,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	AckDestChainId       string          `protobuf:"bytes,6,opt,name=ack_dest_chain_id,json=ackDestChainId,proto3" json:"ack_dest_chain_id,omitempty"`
	RequestSender        []byte          `protobuf:"bytes,7,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestIdentifier    uint64          `protobuf:"varint,8,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	AckSrcChainType      types.ChainType `protobuf:"varint,9,opt,name=ack_src_chain_type,json=ackSrcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_src_chain_type,omitempty"`
	AckDestChainType     types.ChainType `protobuf:"varint,10,opt,name=ack_dest_chain_type,json=ackDestChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_dest_chain_type,omitempty"`
	ExecData             []byte          `protobuf:"bytes,11,opt,name=execData,proto3" json:"execData,omitempty"`
	ExecStatus           bool            `protobuf:"varint,12,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	EthSigner            string          `protobuf:"bytes,13,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string          `protobuf:"bytes,14,opt,name=signature,proto3" json:"signature,omitempty"`
	Status               string          `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CrosschainAckRequest) Reset()         { *m = CrosschainAckRequest{} }
func (m *CrosschainAckRequest) String() string { return proto.CompactTextString(m) }
func (*CrosschainAckRequest) ProtoMessage()    {}
func (*CrosschainAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8c0246ccbaf4ddc, []int{0}
}
func (m *CrosschainAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainAckRequest.Merge(m, src)
}
func (m *CrosschainAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainAckRequest proto.InternalMessageInfo

func (m *CrosschainAckRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *CrosschainAckRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *CrosschainAckRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrosschainAckRequest) GetDestTxHash() string {
	if m != nil {
		return m.DestTxHash
	}
	return ""
}

func (m *CrosschainAckRequest) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrosschainAckRequest) GetAckDestChainId() string {
	if m != nil {
		return m.AckDestChainId
	}
	return ""
}

func (m *CrosschainAckRequest) GetRequestSender() []byte {
	if m != nil {
		return m.RequestSender
	}
	return nil
}

func (m *CrosschainAckRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *CrosschainAckRequest) GetAckSrcChainType() types.ChainType {
	if m != nil {
		return m.AckSrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *CrosschainAckRequest) GetAckDestChainType() types.ChainType {
	if m != nil {
		return m.AckDestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *CrosschainAckRequest) GetExecData() []byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *CrosschainAckRequest) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *CrosschainAckRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *CrosschainAckRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *CrosschainAckRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*CrosschainAckRequest)(nil), "routerprotocol.routerchain.crosschain.CrosschainAckRequest")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/crosschain_ack_request.proto", fileDescriptor_d8c0246ccbaf4ddc)
}

var fileDescriptor_d8c0246ccbaf4ddc = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xa1, 0x0d, 0xc9, 0xb6, 0x49, 0xdb, 0x25, 0xaa, 0x56, 0x01, 0x59, 0x16, 0x52, 0x45,
	0x90, 0xc0, 0xa6, 0x2d, 0x27, 0x6e, 0xa5, 0x3d, 0xb4, 0x57, 0x27, 0x27, 0x24, 0x14, 0xad, 0xd7,
	0x83, 0xbd, 0x72, 0xe2, 0x0d, 0xbb, 0x6b, 0x94, 0xfc, 0x05, 0xff, 0xc3, 0x0f, 0x70, 0xec, 0x91,
	0x23, 0x4a, 0x7e, 0x04, 0xed, 0x3a, 0x71, 0x4c, 0x40, 0x1c, 0x7a, 0x9b, 0x79, 0x6f, 0xe7, 0xcd,
	0xbc, 0x19, 0x1b, 0x5d, 0x4a, 0x51, 0x68, 0x90, 0x2c, 0xa5, 0x3c, 0x0f, 0x98, 0x14, 0x4a, 0xed,
	0x86, 0x63, 0xca, 0xb2, 0xb1, 0x84, 0x2f, 0x05, 0x28, 0xed, 0xcf, 0xa4, 0xd0, 0x02, 0x9f, 0x95,
	0x45, 0x36, 0x61, 0x62, 0xe2, 0xd7, 0x34, 0xfc, 0x6d, 0x61, 0xff, 0xd9, 0xb4, 0x98, 0x68, 0xbe,
	0xd6, 0xb3, 0x52, 0x7a, 0x31, 0x83, 0x52, 0xa3, 0xef, 0x32, 0xa1, 0xa6, 0x42, 0x05, 0x11, 0x55,
	0x10, 0x7c, 0x3d, 0x8f, 0x40, 0xd3, 0xf3, 0x80, 0x09, 0x9e, 0xaf, 0xf9, 0x5e, 0x22, 0x12, 0x61,
	0xc3, 0xc0, 0x44, 0x25, 0xfa, 0xe2, 0xfb, 0x3e, 0xea, 0x5d, 0x57, 0x1d, 0xae, 0x58, 0x16, 0x96,
	0x83, 0xe1, 0x97, 0xe8, 0xd8, 0xcc, 0xa9, 0x24, 0x1b, 0x97, 0xad, 0x78, 0x4c, 0x1c, 0xcf, 0x19,
	0xb4, 0xc3, 0x0e, 0x65, 0xd9, 0x50, 0xb2, 0x6b, 0x83, 0xde, 0xc5, 0xf8, 0x1d, 0x3a, 0xad, 0x19,
	0x1a, 0xf3, 0x18, 0x72, 0xcd, 0x3f, 0x73, 0x90, 0xe4, 0x91, 0xe7, 0x0c, 0xf6, 0xc2, 0x1e, 0xad,
	0x44, 0xef, 0x2a, 0x0e, 0x7b, 0xe8, 0x20, 0x9a, 0x08, 0x96, 0xdd, 0x02, 0x4f, 0x52, 0x4d, 0x1e,
	0xdb, 0xa7, 0x75, 0x08, 0xbb, 0x08, 0xc5, 0xa0, 0xf4, 0x68, 0x7e, 0x4b, 0x55, 0x4a, 0xf6, 0x6c,
	0xeb, 0x1a, 0x82, 0x2f, 0x50, 0x4f, 0xc2, 0x84, 0x2e, 0x40, 0x86, 0x76, 0x5b, 0x57, 0x71, 0x2c,
	0x41, 0x29, 0xb2, 0x6f, 0x5f, 0xfe, 0x93, 0xc3, 0xaf, 0xd0, 0x89, 0x99, 0xd5, 0xa8, 0x6c, 0x5d,
	0x35, 0x6d, 0x41, 0x97, 0xb2, 0xec, 0x06, 0x94, 0xde, 0xd8, 0x3a, 0x43, 0xdd, 0x8d, 0x25, 0x05,
	0x79, 0x0c, 0x92, 0x3c, 0xf1, 0x9c, 0xc1, 0x61, 0xd8, 0x59, 0xa3, 0x43, 0x0b, 0xe2, 0xd7, 0xe8,
	0x44, 0xee, 0x9a, 0x23, 0x2d, 0xeb, 0xe6, 0x6f, 0x02, 0x7f, 0x42, 0xf8, 0xcf, 0xa5, 0x9a, 0xfb,
	0x91, 0xb6, 0xe7, 0x0c, 0xba, 0x17, 0x6f, 0xfd, 0xff, 0x7c, 0x04, 0xdb, 0xc3, 0xfb, 0x76, 0xc0,
	0xd1, 0x62, 0x06, 0xe1, 0x51, 0xed, 0x10, 0x06, 0xc0, 0x63, 0xf4, 0x74, 0xc7, 0x9e, 0xd5, 0x47,
	0x0f, 0xd4, 0x3f, 0xae, 0xaf, 0xc4, 0x36, 0xe8, 0xa3, 0x16, 0xcc, 0x81, 0xdd, 0x50, 0x4d, 0xc9,
	0x81, 0x5d, 0x47, 0x95, 0x9b, 0x7b, 0x99, 0x78, 0xa8, 0xa9, 0x2e, 0x14, 0x39, 0xf4, 0x9c, 0x41,
	0x2b, 0xac, 0x21, 0xf8, 0x39, 0x6a, 0x83, 0x4e, 0x87, 0x3c, 0xc9, 0x41, 0x92, 0x8e, 0xdd, 0xf9,
	0x16, 0x30, 0xac, 0xe2, 0x49, 0x4e, 0x75, 0x21, 0x81, 0x74, 0x4b, 0xb6, 0x02, 0xf0, 0x29, 0x6a,
	0xaa, 0x52, 0xf7, 0xc8, 0x52, 0xeb, 0xec, 0xc3, 0xe8, 0xc7, 0xd2, 0x75, 0xee, 0x97, 0xae, 0xf3,
	0x6b, 0xe9, 0x3a, 0xdf, 0x56, 0x6e, 0xe3, 0x7e, 0xe5, 0x36, 0x7e, 0xae, 0xdc, 0xc6, 0xc7, 0xf7,
	0x09, 0xd7, 0x69, 0x11, 0xf9, 0x4c, 0x4c, 0x83, 0xd2, 0xe8, 0x9b, 0x8d, 0xf1, 0x4d, 0x5e, 0xfe,
	0x47, 0xf3, 0xfa, 0x4f, 0x6a, 0xd6, 0xa5, 0xa2, 0xa6, 0x7d, 0x79, 0xf9, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x1b, 0x00, 0xe0, 0x2b, 0xcb, 0x03, 0x00, 0x00,
}

func (m *CrosschainAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x6a
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.ExecData) > 0 {
		i -= len(m.ExecData)
		copy(dAtA[i:], m.ExecData)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.ExecData)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AckDestChainType != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckDestChainType))
		i--
		dAtA[i] = 0x50
	}
	if m.AckSrcChainType != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckSrcChainType))
		i--
		dAtA[i] = 0x48
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AckDestChainId) > 0 {
		i -= len(m.AckDestChainId)
		copy(dAtA[i:], m.AckDestChainId)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.AckDestChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DestTxHash) > 0 {
		i -= len(m.DestTxHash)
		copy(dAtA[i:], m.DestTxHash)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.DestTxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintCrosschainAckRequest(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainAckRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainAckRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosschainAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckRequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.BlockHeight))
	}
	l = len(m.DestTxHash)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.AckDestChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.RequestIdentifier))
	}
	if m.AckSrcChainType != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckSrcChainType))
	}
	if m.AckDestChainType != 0 {
		n += 1 + sovCrosschainAckRequest(uint64(m.AckDestChainType))
	}
	l = len(m.ExecData)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	if m.ExecStatus {
		n += 2
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequest(uint64(l))
	}
	return n
}

func sovCrosschainAckRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainAckRequest(x uint64) (n int) {
	return sovCrosschainAckRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosschainAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainAckRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckDestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = append(m.RequestSender[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestSender == nil {
				m.RequestSender = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainType", wireType)
			}
			m.AckSrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckSrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainType", wireType)
			}
			m.AckDestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckDestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecData == nil {
				m.ExecData = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainAckRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainAckRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainAckRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainAckRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainAckRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainAckRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainAckRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainAckRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainAckRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainAckRequest = fmt.Errorf("proto: unexpected end of group")
)
