// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCrosschainRequest struct {
	Orchestrator      string                                 `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	SrcChainId        string                                 `protobuf:"bytes,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	Contract          string                                 `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	RequestIdentifier uint64                                 `protobuf:"varint,4,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	BlockHeight       uint64                                 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	SourceTxHash      string                                 `protobuf:"bytes,6,opt,name=source_tx_hash,json=sourceTxHash,proto3" json:"source_tx_hash,omitempty"`
	SrcTimestamp      uint64                                 `protobuf:"varint,7,opt,name=src_timestamp,json=srcTimestamp,proto3" json:"src_timestamp,omitempty"`
	SrcTxOrigin       string                                 `protobuf:"bytes,8,opt,name=src_tx_origin,json=srcTxOrigin,proto3" json:"src_tx_origin,omitempty"`
	RouteAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient    string                                 `protobuf:"bytes,10,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	DestChainId       string                                 `protobuf:"bytes,11,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestSender     string                                 `protobuf:"bytes,12,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestMetadata   []byte                                 `protobuf:"bytes,13,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	RequestPacket     []byte                                 `protobuf:"bytes,14,opt,name=request_packet,json=requestPacket,proto3" json:"request_packet,omitempty"`
	SrcChainType      types.ChainType                        `protobuf:"varint,15,opt,name=src_chain_type,json=srcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"src_chain_type,omitempty"`
	DestChainType     types.ChainType                        `protobuf:"varint,16,opt,name=dest_chain_type,json=destChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"dest_chain_type,omitempty"`
	EthSigner         string                                 `protobuf:"bytes,17,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature         string                                 `protobuf:"bytes,18,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgCrosschainRequest) Reset()         { *m = MsgCrosschainRequest{} }
func (m *MsgCrosschainRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainRequest) ProtoMessage()    {}
func (*MsgCrosschainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{0}
}
func (m *MsgCrosschainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainRequest.Merge(m, src)
}
func (m *MsgCrosschainRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainRequest proto.InternalMessageInfo

func (m *MsgCrosschainRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCrosschainRequest) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *MsgCrosschainRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCrosschainRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *MsgCrosschainRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgCrosschainRequest) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *MsgCrosschainRequest) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *MsgCrosschainRequest) GetSrcTxOrigin() string {
	if m != nil {
		return m.SrcTxOrigin
	}
	return ""
}

func (m *MsgCrosschainRequest) GetRouteRecipient() string {
	if m != nil {
		return m.RouteRecipient
	}
	return ""
}

func (m *MsgCrosschainRequest) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *MsgCrosschainRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *MsgCrosschainRequest) GetRequestMetadata() []byte {
	if m != nil {
		return m.RequestMetadata
	}
	return nil
}

func (m *MsgCrosschainRequest) GetRequestPacket() []byte {
	if m != nil {
		return m.RequestPacket
	}
	return nil
}

func (m *MsgCrosschainRequest) GetSrcChainType() types.ChainType {
	if m != nil {
		return m.SrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *MsgCrosschainRequest) GetDestChainType() types.ChainType {
	if m != nil {
		return m.DestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *MsgCrosschainRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgCrosschainRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgCrosschainRequestResponse struct {
	RequestIdentifier uint64      `protobuf:"varint,1,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	FeeDeducted       types1.Coin `protobuf:"bytes,2,opt,name=fee_deducted,json=feeDeducted,proto3" json:"fee_deducted"`
}

func (m *MsgCrosschainRequestResponse) Reset()         { *m = MsgCrosschainRequestResponse{} }
func (m *MsgCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainRequestResponse) ProtoMessage()    {}
func (*MsgCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{1}
}
func (m *MsgCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainRequestResponse.Merge(m, src)
}
func (m *MsgCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainRequestResponse proto.InternalMessageInfo

func (m *MsgCrosschainRequestResponse) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *MsgCrosschainRequestResponse) GetFeeDeducted() types1.Coin {
	if m != nil {
		return m.FeeDeducted
	}
	return types1.Coin{}
}

type MsgConfirmCrosschainRequest struct {
	Orchestrator      string `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	SourceChainId     string `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ClaimHash         []byte `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner         string `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature         string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgConfirmCrosschainRequest) Reset()         { *m = MsgConfirmCrosschainRequest{} }
func (m *MsgConfirmCrosschainRequest) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCrosschainRequest) ProtoMessage()    {}
func (*MsgConfirmCrosschainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{2}
}
func (m *MsgConfirmCrosschainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCrosschainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCrosschainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCrosschainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCrosschainRequest.Merge(m, src)
}
func (m *MsgConfirmCrosschainRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCrosschainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCrosschainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCrosschainRequest proto.InternalMessageInfo

func (m *MsgConfirmCrosschainRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgConfirmCrosschainRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *MsgConfirmCrosschainRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *MsgConfirmCrosschainRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *MsgConfirmCrosschainRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgConfirmCrosschainRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgConfirmCrosschainRequestResponse struct {
}

func (m *MsgConfirmCrosschainRequestResponse) Reset()         { *m = MsgConfirmCrosschainRequestResponse{} }
func (m *MsgConfirmCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCrosschainRequestResponse) ProtoMessage()    {}
func (*MsgConfirmCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{3}
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCrosschainRequestResponse.Merge(m, src)
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCrosschainRequestResponse proto.InternalMessageInfo

type MsgCrosschainAckRequest struct {
	Orchestrator         string          `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	AckSrcChainId        string          `protobuf:"bytes,2,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	Contract             string          `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	AckRequestIdentifier uint64          `protobuf:"varint,4,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	BlockHeight          uint64          `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	DestTxHash           string          `protobuf:"bytes,6,opt,name=destTxHash,proto3" json:"destTxHash,omitempty"`
	RelayerRouterAddress string          `protobuf:"bytes,7,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	AckDestChainId       string          `protobuf:"bytes,8,opt,name=ack_dest_chain_id,json=ackDestChainId,proto3" json:"ack_dest_chain_id,omitempty"`
	RequestSender        string          `protobuf:"bytes,9,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestIdentifier    uint64          `protobuf:"varint,10,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	AckSrcChainType      types.ChainType `protobuf:"varint,11,opt,name=ack_src_chain_type,json=ackSrcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_src_chain_type,omitempty"`
	AckDestChainType     types.ChainType `protobuf:"varint,12,opt,name=ack_dest_chain_type,json=ackDestChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_dest_chain_type,omitempty"`
	FeeConsumed          uint64          `protobuf:"varint,13,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	ExecData             []byte          `protobuf:"bytes,14,opt,name=execData,proto3" json:"execData,omitempty"`
	ExecStatus           bool            `protobuf:"varint,15,opt,name=execStatus,proto3" json:"execStatus,omitempty"`
	EthSigner            string          `protobuf:"bytes,16,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string          `protobuf:"bytes,17,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgCrosschainAckRequest) Reset()         { *m = MsgCrosschainAckRequest{} }
func (m *MsgCrosschainAckRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainAckRequest) ProtoMessage()    {}
func (*MsgCrosschainAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{4}
}
func (m *MsgCrosschainAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainAckRequest.Merge(m, src)
}
func (m *MsgCrosschainAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainAckRequest proto.InternalMessageInfo

func (m *MsgCrosschainAckRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *MsgCrosschainAckRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgCrosschainAckRequest) GetDestTxHash() string {
	if m != nil {
		return m.DestTxHash
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetAckDestChainId() string {
	if m != nil {
		return m.AckDestChainId
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *MsgCrosschainAckRequest) GetAckSrcChainType() types.ChainType {
	if m != nil {
		return m.AckSrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *MsgCrosschainAckRequest) GetAckDestChainType() types.ChainType {
	if m != nil {
		return m.AckDestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *MsgCrosschainAckRequest) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *MsgCrosschainAckRequest) GetExecData() []byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *MsgCrosschainAckRequest) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *MsgCrosschainAckRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgCrosschainAckRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgCrosschainAckRequestResponse struct {
}

func (m *MsgCrosschainAckRequestResponse) Reset()         { *m = MsgCrosschainAckRequestResponse{} }
func (m *MsgCrosschainAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainAckRequestResponse) ProtoMessage()    {}
func (*MsgCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{5}
}
func (m *MsgCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainAckRequestResponse.Merge(m, src)
}
func (m *MsgCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainAckRequestResponse proto.InternalMessageInfo

type MsgConfirmCrosschainAckRequest struct {
	Orchestrator         string `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	AckSrcChainId        string `protobuf:"bytes,2,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,3,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner            string `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgConfirmCrosschainAckRequest) Reset()         { *m = MsgConfirmCrosschainAckRequest{} }
func (m *MsgConfirmCrosschainAckRequest) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCrosschainAckRequest) ProtoMessage()    {}
func (*MsgConfirmCrosschainAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{6}
}
func (m *MsgConfirmCrosschainAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCrosschainAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCrosschainAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCrosschainAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCrosschainAckRequest.Merge(m, src)
}
func (m *MsgConfirmCrosschainAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCrosschainAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCrosschainAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCrosschainAckRequest proto.InternalMessageInfo

func (m *MsgConfirmCrosschainAckRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgConfirmCrosschainAckRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *MsgConfirmCrosschainAckRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *MsgConfirmCrosschainAckRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *MsgConfirmCrosschainAckRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgConfirmCrosschainAckRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgConfirmCrosschainAckRequestResponse struct {
}

func (m *MsgConfirmCrosschainAckRequestResponse) Reset() {
	*m = MsgConfirmCrosschainAckRequestResponse{}
}
func (m *MsgConfirmCrosschainAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCrosschainAckRequestResponse) ProtoMessage()    {}
func (*MsgConfirmCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{7}
}
func (m *MsgConfirmCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCrosschainAckRequestResponse.Merge(m, src)
}
func (m *MsgConfirmCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCrosschainAckRequestResponse proto.InternalMessageInfo

type MsgCrosschainAckReceipt struct {
	Orchestrator          string `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	AckReceiptSrcChainId  string `protobuf:"bytes,2,opt,name=ackReceiptSrcChainId,proto3" json:"ackReceiptSrcChainId,omitempty"`
	Contract              string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	AckReceiptIdentifier  uint64 `protobuf:"varint,4,opt,name=ack_receipt_identifier,json=ackReceiptIdentifier,proto3" json:"ack_receipt_identifier,omitempty"`
	AckReceiptBlockHeight uint64 `protobuf:"varint,5,opt,name=ack_receipt_blockHeight,json=ackReceiptBlockHeight,proto3" json:"ack_receipt_blockHeight,omitempty"`
	AckReceiptTxHash      string `protobuf:"bytes,6,opt,name=ack_receipt_txHash,json=ackReceiptTxHash,proto3" json:"ack_receipt_txHash,omitempty"`
	RelayerRouterAddress  string `protobuf:"bytes,7,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	RequestIdentifier     uint64 `protobuf:"varint,8,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	AckSrcChainId         string `protobuf:"bytes,9,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier  uint64 `protobuf:"varint,10,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	AckExecData           []byte `protobuf:"bytes,11,opt,name=ackExecData,proto3" json:"ackExecData,omitempty"`
	AckExecStatus         bool   `protobuf:"varint,12,opt,name=ackExecStatus,proto3" json:"ackExecStatus,omitempty"`
	FeeConsumed           uint64 `protobuf:"varint,13,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
}

func (m *MsgCrosschainAckReceipt) Reset()         { *m = MsgCrosschainAckReceipt{} }
func (m *MsgCrosschainAckReceipt) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainAckReceipt) ProtoMessage()    {}
func (*MsgCrosschainAckReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{8}
}
func (m *MsgCrosschainAckReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainAckReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainAckReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainAckReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainAckReceipt.Merge(m, src)
}
func (m *MsgCrosschainAckReceipt) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainAckReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainAckReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainAckReceipt proto.InternalMessageInfo

func (m *MsgCrosschainAckReceipt) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCrosschainAckReceipt) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *MsgCrosschainAckReceipt) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCrosschainAckReceipt) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

func (m *MsgCrosschainAckReceipt) GetAckReceiptBlockHeight() uint64 {
	if m != nil {
		return m.AckReceiptBlockHeight
	}
	return 0
}

func (m *MsgCrosschainAckReceipt) GetAckReceiptTxHash() string {
	if m != nil {
		return m.AckReceiptTxHash
	}
	return ""
}

func (m *MsgCrosschainAckReceipt) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *MsgCrosschainAckReceipt) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *MsgCrosschainAckReceipt) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *MsgCrosschainAckReceipt) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *MsgCrosschainAckReceipt) GetAckExecData() []byte {
	if m != nil {
		return m.AckExecData
	}
	return nil
}

func (m *MsgCrosschainAckReceipt) GetAckExecStatus() bool {
	if m != nil {
		return m.AckExecStatus
	}
	return false
}

func (m *MsgCrosschainAckReceipt) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

type MsgCrosschainAckReceiptResponse struct {
}

func (m *MsgCrosschainAckReceiptResponse) Reset()         { *m = MsgCrosschainAckReceiptResponse{} }
func (m *MsgCrosschainAckReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainAckReceiptResponse) ProtoMessage()    {}
func (*MsgCrosschainAckReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{9}
}
func (m *MsgCrosschainAckReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainAckReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainAckReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainAckReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainAckReceiptResponse.Merge(m, src)
}
func (m *MsgCrosschainAckReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainAckReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainAckReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainAckReceiptResponse proto.InternalMessageInfo

type MsgCreateRelayerConfig struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId        string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	RelayerName    string `protobuf:"bytes,3,opt,name=relayerName,proto3" json:"relayerName,omitempty"`
	Channel        string `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	RelayerEnabled bool   `protobuf:"varint,5,opt,name=relayerEnabled,proto3" json:"relayerEnabled,omitempty"`
}

func (m *MsgCreateRelayerConfig) Reset()         { *m = MsgCreateRelayerConfig{} }
func (m *MsgCreateRelayerConfig) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelayerConfig) ProtoMessage()    {}
func (*MsgCreateRelayerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{10}
}
func (m *MsgCreateRelayerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelayerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelayerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelayerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelayerConfig.Merge(m, src)
}
func (m *MsgCreateRelayerConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelayerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelayerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelayerConfig proto.InternalMessageInfo

func (m *MsgCreateRelayerConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateRelayerConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgCreateRelayerConfig) GetRelayerName() string {
	if m != nil {
		return m.RelayerName
	}
	return ""
}

func (m *MsgCreateRelayerConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *MsgCreateRelayerConfig) GetRelayerEnabled() bool {
	if m != nil {
		return m.RelayerEnabled
	}
	return false
}

type MsgCreateRelayerConfigResponse struct {
}

func (m *MsgCreateRelayerConfigResponse) Reset()         { *m = MsgCreateRelayerConfigResponse{} }
func (m *MsgCreateRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRelayerConfigResponse) ProtoMessage()    {}
func (*MsgCreateRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{11}
}
func (m *MsgCreateRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRelayerConfigResponse.Merge(m, src)
}
func (m *MsgCreateRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRelayerConfigResponse proto.InternalMessageInfo

type MsgUpdateRelayerConfig struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId        string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	RelayerName    string `protobuf:"bytes,3,opt,name=relayerName,proto3" json:"relayerName,omitempty"`
	Channel        string `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	RelayerEnabled bool   `protobuf:"varint,5,opt,name=relayerEnabled,proto3" json:"relayerEnabled,omitempty"`
}

func (m *MsgUpdateRelayerConfig) Reset()         { *m = MsgUpdateRelayerConfig{} }
func (m *MsgUpdateRelayerConfig) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRelayerConfig) ProtoMessage()    {}
func (*MsgUpdateRelayerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{12}
}
func (m *MsgUpdateRelayerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRelayerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRelayerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRelayerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRelayerConfig.Merge(m, src)
}
func (m *MsgUpdateRelayerConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRelayerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRelayerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRelayerConfig proto.InternalMessageInfo

func (m *MsgUpdateRelayerConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRelayerConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgUpdateRelayerConfig) GetRelayerName() string {
	if m != nil {
		return m.RelayerName
	}
	return ""
}

func (m *MsgUpdateRelayerConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *MsgUpdateRelayerConfig) GetRelayerEnabled() bool {
	if m != nil {
		return m.RelayerEnabled
	}
	return false
}

type MsgUpdateRelayerConfigResponse struct {
}

func (m *MsgUpdateRelayerConfigResponse) Reset()         { *m = MsgUpdateRelayerConfigResponse{} }
func (m *MsgUpdateRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRelayerConfigResponse) ProtoMessage()    {}
func (*MsgUpdateRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{13}
}
func (m *MsgUpdateRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRelayerConfigResponse.Merge(m, src)
}
func (m *MsgUpdateRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRelayerConfigResponse proto.InternalMessageInfo

type MsgDeleteRelayerConfig struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *MsgDeleteRelayerConfig) Reset()         { *m = MsgDeleteRelayerConfig{} }
func (m *MsgDeleteRelayerConfig) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRelayerConfig) ProtoMessage()    {}
func (*MsgDeleteRelayerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{14}
}
func (m *MsgDeleteRelayerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRelayerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRelayerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRelayerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRelayerConfig.Merge(m, src)
}
func (m *MsgDeleteRelayerConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRelayerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRelayerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRelayerConfig proto.InternalMessageInfo

func (m *MsgDeleteRelayerConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteRelayerConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type MsgDeleteRelayerConfigResponse struct {
}

func (m *MsgDeleteRelayerConfigResponse) Reset()         { *m = MsgDeleteRelayerConfigResponse{} }
func (m *MsgDeleteRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteRelayerConfigResponse) ProtoMessage()    {}
func (*MsgDeleteRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{15}
}
func (m *MsgDeleteRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteRelayerConfigResponse.Merge(m, src)
}
func (m *MsgDeleteRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteRelayerConfigResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCrosschainRequest)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainRequest")
	proto.RegisterType((*MsgCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse")
	proto.RegisterType((*MsgConfirmCrosschainRequest)(nil), "routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest")
	proto.RegisterType((*MsgConfirmCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse")
	proto.RegisterType((*MsgCrosschainAckRequest)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest")
	proto.RegisterType((*MsgCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse")
	proto.RegisterType((*MsgConfirmCrosschainAckRequest)(nil), "routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest")
	proto.RegisterType((*MsgConfirmCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse")
	proto.RegisterType((*MsgCrosschainAckReceipt)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt")
	proto.RegisterType((*MsgCrosschainAckReceiptResponse)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse")
	proto.RegisterType((*MsgCreateRelayerConfig)(nil), "routerprotocol.routerchain.crosschain.MsgCreateRelayerConfig")
	proto.RegisterType((*MsgCreateRelayerConfigResponse)(nil), "routerprotocol.routerchain.crosschain.MsgCreateRelayerConfigResponse")
	proto.RegisterType((*MsgUpdateRelayerConfig)(nil), "routerprotocol.routerchain.crosschain.MsgUpdateRelayerConfig")
	proto.RegisterType((*MsgUpdateRelayerConfigResponse)(nil), "routerprotocol.routerchain.crosschain.MsgUpdateRelayerConfigResponse")
	proto.RegisterType((*MsgDeleteRelayerConfig)(nil), "routerprotocol.routerchain.crosschain.MsgDeleteRelayerConfig")
	proto.RegisterType((*MsgDeleteRelayerConfigResponse)(nil), "routerprotocol.routerchain.crosschain.MsgDeleteRelayerConfigResponse")
}

func init() { proto.RegisterFile("routerchain/crosschain/tx.proto", fileDescriptor_ef225a639df9939d) }

var fileDescriptor_ef225a639df9939d = []byte{
	// 1343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xd2, 0x34, 0x4d, 0x9e, 0xff, 0xc4, 0xd9, 0x86, 0x76, 0x71, 0x2b, 0xc7, 0x75, 0xff,
	0xa5, 0xa2, 0x5d, 0xd3, 0x80, 0x38, 0x80, 0x40, 0xaa, 0x93, 0xa0, 0x16, 0x11, 0xfe, 0x6c, 0x02,
	0x42, 0x48, 0x68, 0x35, 0x9e, 0x9d, 0xd8, 0x2b, 0xdb, 0xbb, 0x66, 0x67, 0x8c, 0x9c, 0x6f, 0xc0,
	0x11, 0x0e, 0x9c, 0x40, 0x7c, 0x00, 0x4e, 0x48, 0x7c, 0x01, 0x8e, 0xbd, 0xd1, 0x23, 0xe2, 0x50,
	0xa1, 0xe6, 0x0b, 0x70, 0xe7, 0x82, 0xe6, 0xcd, 0xee, 0x7a, 0x37, 0x59, 0x9b, 0xd8, 0x6e, 0x0f,
	0x5c, 0xda, 0x9d, 0xdf, 0xbc, 0xf7, 0xe6, 0xbd, 0x37, 0xef, 0xf7, 0xdb, 0x8d, 0x61, 0x23, 0xf0,
	0x07, 0x82, 0x05, 0xb4, 0x4d, 0x5c, 0xaf, 0x4e, 0x03, 0x9f, 0x73, 0xf5, 0x28, 0x86, 0x66, 0x3f,
	0xf0, 0x85, 0xaf, 0xdf, 0x54, 0x06, 0xb8, 0xa0, 0x7e, 0xd7, 0x4c, 0xd8, 0x9b, 0x23, 0xfb, 0xf2,
	0xed, 0x64, 0x9c, 0xde, 0xa0, 0x2b, 0xdc, 0x30, 0xa4, 0xfc, 0xd7, 0x16, 0x47, 0x7d, 0xa6, 0xe2,
	0x95, 0x2b, 0xd4, 0xe7, 0x3d, 0x9f, 0xd7, 0x9b, 0x84, 0xb3, 0xfa, 0xd7, 0xf7, 0x9b, 0x4c, 0x90,
	0xfb, 0x75, 0xea, 0xbb, 0x5e, 0xb8, 0xbf, 0xde, 0xf2, 0x5b, 0x3e, 0x3e, 0xd6, 0xe5, 0x53, 0x88,
	0xbe, 0x3a, 0x26, 0xcd, 0x80, 0x75, 0xc9, 0x11, 0x0b, 0x6c, 0xea, 0x7b, 0x87, 0x6e, 0x4b, 0x19,
	0xd7, 0x7e, 0x5b, 0x82, 0xf5, 0x3d, 0xde, 0xda, 0x8e, 0xcd, 0x2c, 0xf6, 0xd5, 0x80, 0x71, 0xa1,
	0xd7, 0x20, 0xef, 0x07, 0xb4, 0xcd, 0xb8, 0x08, 0x88, 0xf0, 0x03, 0x43, 0xab, 0x6a, 0x9b, 0x2b,
	0x56, 0x0a, 0xd3, 0xab, 0x90, 0xe7, 0x01, 0xb5, 0x55, 0xde, 0xae, 0x63, 0xbc, 0x84, 0x36, 0xc0,
	0x03, 0xba, 0x2d, 0xa1, 0x47, 0x8e, 0x5e, 0x86, 0x65, 0xea, 0x7b, 0x22, 0x20, 0x54, 0x18, 0xe7,
	0x70, 0x37, 0x5e, 0xeb, 0xf7, 0x40, 0x0f, 0xd4, 0x61, 0xb6, 0xeb, 0x30, 0x4f, 0xb8, 0x87, 0x2e,
	0x0b, 0x8c, 0xc5, 0xaa, 0xb6, 0xb9, 0x68, 0xad, 0x85, 0x3b, 0x8f, 0xe2, 0x0d, 0xfd, 0x1a, 0xe4,
	0x9b, 0x5d, 0x9f, 0x76, 0xec, 0x36, 0x73, 0x5b, 0x6d, 0x61, 0x9c, 0x47, 0xc3, 0x1c, 0x62, 0x0f,
	0x11, 0xd2, 0x6f, 0x40, 0x91, 0xfb, 0x83, 0x80, 0x32, 0x5b, 0x0c, 0xed, 0x36, 0xe1, 0x6d, 0x63,
	0x49, 0x65, 0xad, 0xd0, 0x83, 0xe1, 0x43, 0xc2, 0xdb, 0xfa, 0x75, 0x28, 0xc8, 0xac, 0x85, 0xdb,
	0x63, 0x5c, 0x90, 0x5e, 0xdf, 0xb8, 0x80, 0x91, 0x64, 0x29, 0x07, 0x11, 0xa6, 0xd7, 0x42, 0xa3,
	0xa1, 0xed, 0x07, 0x6e, 0xcb, 0xf5, 0x8c, 0x65, 0x8c, 0x94, 0x93, 0x46, 0xc3, 0x8f, 0x10, 0xd2,
	0x3f, 0x81, 0x3c, 0xb6, 0xda, 0x26, 0x3d, 0x7f, 0xe0, 0x09, 0x63, 0x45, 0x9a, 0x34, 0xcc, 0xc7,
	0x4f, 0x37, 0x16, 0xfe, 0x7c, 0xba, 0x71, 0xab, 0xe5, 0x8a, 0xf6, 0xa0, 0x69, 0x52, 0xbf, 0x57,
	0x0f, 0xef, 0x51, 0xfd, 0x77, 0x8f, 0x3b, 0x9d, 0xba, 0xbc, 0x65, 0x6e, 0x3e, 0xf2, 0x84, 0x95,
	0xc3, 0x18, 0x0f, 0x30, 0x84, 0x7e, 0x1b, 0x56, 0x55, 0xc8, 0x80, 0x51, 0xb7, 0xef, 0x32, 0x4f,
	0x18, 0x80, 0x07, 0x17, 0x11, 0xb6, 0x22, 0x54, 0xe6, 0xe7, 0xc8, 0xce, 0xc5, 0xbd, 0xcf, 0xa9,
	0xfc, 0x24, 0x18, 0x35, 0xff, 0x26, 0x14, 0xa3, 0x06, 0x73, 0xe6, 0x39, 0x2c, 0x30, 0xf2, 0x68,
	0x54, 0x08, 0xd1, 0x7d, 0x04, 0xf5, 0x3b, 0x50, 0x8a, 0xcc, 0x7a, 0x4c, 0x10, 0x87, 0x08, 0x62,
	0x14, 0xaa, 0xda, 0x66, 0xde, 0x5a, 0x0d, 0xf1, 0xbd, 0x10, 0x4e, 0x46, 0xec, 0x13, 0xda, 0x61,
	0xc2, 0x28, 0xa2, 0x61, 0x14, 0xf1, 0x63, 0x04, 0xf5, 0xcf, 0xa0, 0x38, 0x9a, 0x0b, 0x59, 0xa9,
	0xb1, 0x5a, 0xd5, 0x36, 0x8b, 0x5b, 0xaf, 0x99, 0x13, 0x08, 0x32, 0x22, 0x82, 0x89, 0x05, 0x1c,
	0x1c, 0xf5, 0x19, 0x5e, 0x4a, 0xbc, 0xd2, 0x3f, 0x87, 0xd5, 0x44, 0xd1, 0x18, 0xb8, 0x34, 0x63,
	0xe0, 0x42, 0xdc, 0x28, 0x8c, 0x7c, 0x15, 0x56, 0x98, 0x68, 0xef, 0xbb, 0x2d, 0x8f, 0x05, 0xc6,
	0x1a, 0x76, 0x69, 0x04, 0xc8, 0x5d, 0xee, 0xb6, 0x3c, 0x22, 0x06, 0x01, 0x33, 0x74, 0xb5, 0x1b,
	0x03, 0xb5, 0xef, 0x34, 0xb8, 0x9a, 0x45, 0x21, 0x8b, 0xf1, 0xbe, 0xef, 0x71, 0x36, 0x66, 0xd0,
	0xb5, 0x71, 0x83, 0xde, 0x80, 0xfc, 0x21, 0x63, 0xb6, 0xc3, 0x9c, 0x01, 0x15, 0x4c, 0xb1, 0x2a,
	0xb7, 0xf5, 0x8a, 0xa9, 0xa6, 0xc7, 0x94, 0x62, 0x60, 0x86, 0x62, 0x60, 0x6e, 0xfb, 0xae, 0xd7,
	0x58, 0x94, 0x13, 0x67, 0xe5, 0x0e, 0x19, 0xdb, 0x09, 0x7d, 0x6a, 0x7f, 0x6b, 0x70, 0x45, 0xe6,
	0x24, 0xa9, 0x1e, 0xf4, 0x66, 0x63, 0xf7, 0x0d, 0x28, 0x28, 0xde, 0x84, 0xf3, 0x14, 0xd2, 0x3b,
	0x0d, 0x8e, 0x29, 0xee, 0xdc, 0xb8, 0xe2, 0xae, 0xc2, 0x0a, 0xed, 0x12, 0xb7, 0x27, 0x99, 0x88,
	0x5c, 0xcf, 0x5b, 0x23, 0x20, 0x7d, 0x0d, 0xe7, 0x27, 0x5e, 0xc3, 0xd2, 0xc9, 0x6b, 0xb8, 0x09,
	0xd7, 0x27, 0x54, 0x1c, 0x5d, 0x46, 0xed, 0x9b, 0x25, 0xb8, 0x9c, 0xba, 0xad, 0x07, 0xb4, 0x33,
	0x4d, 0x57, 0x6e, 0x43, 0x89, 0xd0, 0x8e, 0x9d, 0xa1, 0x7b, 0x05, 0x42, 0x3b, 0xfb, 0x67, 0x93,
	0xbe, 0x37, 0xe0, 0x92, 0x0c, 0x32, 0x56, 0xfe, 0xd6, 0x49, 0x9c, 0x54, 0xa2, 0x77, 0x55, 0x48,
	0xaa, 0x5d, 0x96, 0x00, 0x56, 0x00, 0xe4, 0x5c, 0x2b, 0xa1, 0x0b, 0x5b, 0x94, 0x40, 0xf4, 0x2d,
	0x58, 0x0f, 0xdf, 0x02, 0x16, 0x12, 0xe4, 0x81, 0xe3, 0x04, 0x8c, 0x73, 0x54, 0xc0, 0x15, 0x2b,
	0x73, 0x4f, 0xbf, 0x03, 0x6b, 0x32, 0xd7, 0xb4, 0xda, 0x28, 0x35, 0x2c, 0x12, 0xda, 0xd9, 0x99,
	0x28, 0x38, 0x2b, 0x59, 0x82, 0x73, 0x17, 0x4e, 0x0f, 0x06, 0xca, 0x5c, 0xe6, 0xc4, 0x7c, 0x09,
	0x7a, 0xba, 0xe1, 0xc8, 0xfb, 0xdc, 0x8c, 0xbc, 0x5f, 0x4d, 0x5c, 0x12, 0x32, 0xdf, 0x86, 0x8b,
	0x27, 0xca, 0xc3, 0xf8, 0xf9, 0x19, 0xe3, 0x97, 0x92, 0x2d, 0xc1, 0x03, 0xaa, 0x20, 0x99, 0xb9,
	0xed, 0x7b, 0x7c, 0xd0, 0x63, 0x0e, 0x2a, 0xeb, 0xa2, 0x95, 0x84, 0xe4, 0xa4, 0xb0, 0x21, 0xa3,
	0x3b, 0x52, 0x78, 0x95, 0x9e, 0xc6, 0x6b, 0x79, 0xa3, 0xf2, 0x79, 0x5f, 0x10, 0x31, 0xe0, 0x28,
	0xa3, 0xcb, 0x56, 0x02, 0x49, 0x33, 0xa6, 0x34, 0x91, 0x31, 0x6b, 0x27, 0x19, 0x73, 0x0d, 0x36,
	0xc6, 0x30, 0x21, 0x66, 0xcb, 0x3f, 0x1a, 0x54, 0xb2, 0x58, 0xf5, 0xa2, 0x48, 0xb3, 0x05, 0x99,
	0xa3, 0x1f, 0xea, 0x49, 0x36, 0x2d, 0x5e, 0x9c, 0xa4, 0x6c, 0xc2, 0xad, 0xc9, 0xc5, 0xc7, 0x7d,
	0xfa, 0x7d, 0x31, 0x4b, 0x55, 0x28, 0x73, 0xfb, 0x67, 0x6b, 0x50, 0x54, 0x37, 0x7a, 0x8c, 0xfa,
	0x11, 0x36, 0x29, 0x73, 0xef, 0x6c, 0x02, 0x83, 0x4e, 0xe3, 0x04, 0x06, 0x37, 0x13, 0x9d, 0x7c,
	0x13, 0x2e, 0x27, 0xbd, 0x4e, 0x8b, 0xcd, 0xcb, 0x23, 0xb7, 0x46, 0x42, 0x76, 0xee, 0x2a, 0x8a,
	0x46, 0x7e, 0x22, 0x29, 0x3f, 0xa5, 0x91, 0xcb, 0x1c, 0x22, 0x94, 0x29, 0x19, 0xcb, 0xe3, 0x24,
	0xe3, 0x06, 0xa4, 0xc7, 0x2a, 0x92, 0xa1, 0xb3, 0xcd, 0x1a, 0x4c, 0x96, 0x60, 0x42, 0x3b, 0xbb,
	0x11, 0x5b, 0x73, 0x38, 0x6d, 0x49, 0x28, 0x3c, 0x7b, 0x77, 0xc4, 0xd9, 0x3c, 0x72, 0x36, 0x0d,
	0xfe, 0xb7, 0x28, 0x64, 0x93, 0x13, 0xdb, 0x18, 0x0f, 0xdd, 0x2f, 0x1a, 0x5c, 0x42, 0x1b, 0x46,
	0xe4, 0xa7, 0x21, 0xb6, 0x0d, 0x87, 0xb5, 0xa5, 0x1b, 0x70, 0x81, 0x4a, 0x38, 0x1e, 0xb7, 0x68,
	0x89, 0x3b, 0xa9, 0xe1, 0x8a, 0x96, 0x32, 0xa7, 0xb0, 0xf7, 0x1f, 0x92, 0x1e, 0x0b, 0x47, 0x2a,
	0x09, 0x85, 0xbe, 0x9e, 0xc7, 0xba, 0x38, 0x46, 0xca, 0x57, 0x2e, 0xf5, 0x5b, 0x52, 0xf9, 0xd1,
	0x70, 0xd7, 0x23, 0xcd, 0x2e, 0x73, 0x70, 0x60, 0x96, 0xad, 0x13, 0x68, 0xad, 0xaa, 0xe4, 0xe4,
	0x74, 0xc6, 0x27, 0x8b, 0xfa, 0xb4, 0xef, 0xfc, 0xcf, 0x8a, 0xca, 0xc8, 0x38, 0x2e, 0xea, 0x03,
	0xac, 0x69, 0x87, 0x75, 0xd9, 0x73, 0xa8, 0x29, 0x3c, 0x2f, 0x23, 0x5a, 0x74, 0xde, 0xd6, 0x8f,
	0x00, 0xe7, 0xf6, 0x78, 0x4b, 0xff, 0x5e, 0x83, 0xb5, 0xd3, 0x1f, 0x7f, 0x6f, 0x9b, 0x67, 0xfa,
	0x3b, 0xd5, 0xcc, 0xfa, 0xa8, 0x2d, 0x6f, 0xcf, 0xe1, 0x1c, 0x7f, 0x11, 0xff, 0xac, 0x81, 0x31,
	0xf6, 0xdb, 0xb4, 0x31, 0xc5, 0x09, 0x63, 0x62, 0x94, 0xdf, 0x9f, 0x3f, 0x46, 0x9c, 0xec, 0x4f,
	0x1a, 0xac, 0x67, 0xbe, 0xf9, 0xde, 0x9d, 0xa5, 0x15, 0x23, 0xff, 0xf2, 0x7b, 0xf3, 0xf9, 0xc7,
	0x09, 0xfe, 0xaa, 0xc1, 0x95, 0x49, 0x6f, 0xe8, 0xdd, 0x39, 0x9a, 0x91, 0x48, 0x77, 0xef, 0xb9,
	0x84, 0x99, 0xd4, 0x56, 0xf5, 0xbe, 0x9c, 0xbd, 0xad, 0xe8, 0x3f, 0x47, 0x5b, 0x53, 0xf2, 0xaa,
	0xff, 0xa0, 0xc1, 0xc5, 0x2c, 0x6d, 0x7d, 0x67, 0x9a, 0xf8, 0xa7, 0xdc, 0xcb, 0xbb, 0x73, 0xb9,
	0xa7, 0xb2, 0xcb, 0x12, 0xc9, 0x29, 0xb2, 0xcb, 0x70, 0x9f, 0x26, 0xbb, 0x09, 0x82, 0x87, 0xd9,
	0x65, 0xc9, 0xdd, 0x14, 0xd9, 0x65, 0xb8, 0x4f, 0x93, 0xdd, 0x04, 0x79, 0x6c, 0x1c, 0x3c, 0x7e,
	0x56, 0xd1, 0x9e, 0x3c, 0xab, 0x68, 0x7f, 0x3d, 0xab, 0x68, 0xdf, 0x1e, 0x57, 0x16, 0x9e, 0x1c,
	0x57, 0x16, 0xfe, 0x38, 0xae, 0x2c, 0x7c, 0xf1, 0x56, 0xe2, 0x47, 0x1b, 0x15, 0xfb, 0x5e, 0x74,
	0x56, 0xb4, 0x56, 0x3f, 0xa6, 0x0d, 0x53, 0x3f, 0x00, 0x1e, 0xf5, 0x19, 0x6f, 0x2e, 0xa1, 0xe5,
	0xeb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x91, 0x9c, 0x17, 0xd6, 0x27, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CrosschainRequest(ctx context.Context, in *MsgCrosschainRequest, opts ...grpc.CallOption) (*MsgCrosschainRequestResponse, error)
	ConfirmCrosschainRequest(ctx context.Context, in *MsgConfirmCrosschainRequest, opts ...grpc.CallOption) (*MsgConfirmCrosschainRequestResponse, error)
	CrosschainAckRequest(ctx context.Context, in *MsgCrosschainAckRequest, opts ...grpc.CallOption) (*MsgCrosschainAckRequestResponse, error)
	ConfirmCrosschainAckRequest(ctx context.Context, in *MsgConfirmCrosschainAckRequest, opts ...grpc.CallOption) (*MsgConfirmCrosschainAckRequestResponse, error)
	CrosschainAckReceipt(ctx context.Context, in *MsgCrosschainAckReceipt, opts ...grpc.CallOption) (*MsgCrosschainAckReceiptResponse, error)
	CreateRelayerConfig(ctx context.Context, in *MsgCreateRelayerConfig, opts ...grpc.CallOption) (*MsgCreateRelayerConfigResponse, error)
	UpdateRelayerConfig(ctx context.Context, in *MsgUpdateRelayerConfig, opts ...grpc.CallOption) (*MsgUpdateRelayerConfigResponse, error)
	DeleteRelayerConfig(ctx context.Context, in *MsgDeleteRelayerConfig, opts ...grpc.CallOption) (*MsgDeleteRelayerConfigResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CrosschainRequest(ctx context.Context, in *MsgCrosschainRequest, opts ...grpc.CallOption) (*MsgCrosschainRequestResponse, error) {
	out := new(MsgCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/CrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmCrosschainRequest(ctx context.Context, in *MsgConfirmCrosschainRequest, opts ...grpc.CallOption) (*MsgConfirmCrosschainRequestResponse, error) {
	out := new(MsgConfirmCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/ConfirmCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CrosschainAckRequest(ctx context.Context, in *MsgCrosschainAckRequest, opts ...grpc.CallOption) (*MsgCrosschainAckRequestResponse, error) {
	out := new(MsgCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/CrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmCrosschainAckRequest(ctx context.Context, in *MsgConfirmCrosschainAckRequest, opts ...grpc.CallOption) (*MsgConfirmCrosschainAckRequestResponse, error) {
	out := new(MsgConfirmCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/ConfirmCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CrosschainAckReceipt(ctx context.Context, in *MsgCrosschainAckReceipt, opts ...grpc.CallOption) (*MsgCrosschainAckReceiptResponse, error) {
	out := new(MsgCrosschainAckReceiptResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/CrosschainAckReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRelayerConfig(ctx context.Context, in *MsgCreateRelayerConfig, opts ...grpc.CallOption) (*MsgCreateRelayerConfigResponse, error) {
	out := new(MsgCreateRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/CreateRelayerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRelayerConfig(ctx context.Context, in *MsgUpdateRelayerConfig, opts ...grpc.CallOption) (*MsgUpdateRelayerConfigResponse, error) {
	out := new(MsgUpdateRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/UpdateRelayerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteRelayerConfig(ctx context.Context, in *MsgDeleteRelayerConfig, opts ...grpc.CallOption) (*MsgDeleteRelayerConfigResponse, error) {
	out := new(MsgDeleteRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/DeleteRelayerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CrosschainRequest(context.Context, *MsgCrosschainRequest) (*MsgCrosschainRequestResponse, error)
	ConfirmCrosschainRequest(context.Context, *MsgConfirmCrosschainRequest) (*MsgConfirmCrosschainRequestResponse, error)
	CrosschainAckRequest(context.Context, *MsgCrosschainAckRequest) (*MsgCrosschainAckRequestResponse, error)
	ConfirmCrosschainAckRequest(context.Context, *MsgConfirmCrosschainAckRequest) (*MsgConfirmCrosschainAckRequestResponse, error)
	CrosschainAckReceipt(context.Context, *MsgCrosschainAckReceipt) (*MsgCrosschainAckReceiptResponse, error)
	CreateRelayerConfig(context.Context, *MsgCreateRelayerConfig) (*MsgCreateRelayerConfigResponse, error)
	UpdateRelayerConfig(context.Context, *MsgUpdateRelayerConfig) (*MsgUpdateRelayerConfigResponse, error)
	DeleteRelayerConfig(context.Context, *MsgDeleteRelayerConfig) (*MsgDeleteRelayerConfigResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CrosschainRequest(ctx context.Context, req *MsgCrosschainRequest) (*MsgCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequest not implemented")
}
func (*UnimplementedMsgServer) ConfirmCrosschainRequest(ctx context.Context, req *MsgConfirmCrosschainRequest) (*MsgConfirmCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCrosschainRequest not implemented")
}
func (*UnimplementedMsgServer) CrosschainAckRequest(ctx context.Context, req *MsgCrosschainAckRequest) (*MsgCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequest not implemented")
}
func (*UnimplementedMsgServer) ConfirmCrosschainAckRequest(ctx context.Context, req *MsgConfirmCrosschainAckRequest) (*MsgConfirmCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCrosschainAckRequest not implemented")
}
func (*UnimplementedMsgServer) CrosschainAckReceipt(ctx context.Context, req *MsgCrosschainAckReceipt) (*MsgCrosschainAckReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckReceipt not implemented")
}
func (*UnimplementedMsgServer) CreateRelayerConfig(ctx context.Context, req *MsgCreateRelayerConfig) (*MsgCreateRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelayerConfig not implemented")
}
func (*UnimplementedMsgServer) UpdateRelayerConfig(ctx context.Context, req *MsgUpdateRelayerConfig) (*MsgUpdateRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelayerConfig not implemented")
}
func (*UnimplementedMsgServer) DeleteRelayerConfig(ctx context.Context, req *MsgDeleteRelayerConfig) (*MsgDeleteRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelayerConfig not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrosschainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/CrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrosschainRequest(ctx, req.(*MsgCrosschainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmCrosschainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/ConfirmCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmCrosschainRequest(ctx, req.(*MsgConfirmCrosschainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrosschainAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/CrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrosschainAckRequest(ctx, req.(*MsgCrosschainAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmCrosschainAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/ConfirmCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmCrosschainAckRequest(ctx, req.(*MsgConfirmCrosschainAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CrosschainAckReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrosschainAckReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrosschainAckReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/CrosschainAckReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrosschainAckReceipt(ctx, req.(*MsgCrosschainAckReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRelayerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRelayerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRelayerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/CreateRelayerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRelayerConfig(ctx, req.(*MsgCreateRelayerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRelayerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRelayerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRelayerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/UpdateRelayerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRelayerConfig(ctx, req.(*MsgUpdateRelayerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteRelayerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteRelayerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteRelayerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/DeleteRelayerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteRelayerConfig(ctx, req.(*MsgDeleteRelayerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.crosschain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrosschainRequest",
			Handler:    _Msg_CrosschainRequest_Handler,
		},
		{
			MethodName: "ConfirmCrosschainRequest",
			Handler:    _Msg_ConfirmCrosschainRequest_Handler,
		},
		{
			MethodName: "CrosschainAckRequest",
			Handler:    _Msg_CrosschainAckRequest_Handler,
		},
		{
			MethodName: "ConfirmCrosschainAckRequest",
			Handler:    _Msg_ConfirmCrosschainAckRequest_Handler,
		},
		{
			MethodName: "CrosschainAckReceipt",
			Handler:    _Msg_CrosschainAckReceipt_Handler,
		},
		{
			MethodName: "CreateRelayerConfig",
			Handler:    _Msg_CreateRelayerConfig_Handler,
		},
		{
			MethodName: "UpdateRelayerConfig",
			Handler:    _Msg_UpdateRelayerConfig_Handler,
		},
		{
			MethodName: "DeleteRelayerConfig",
			Handler:    _Msg_DeleteRelayerConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerchain/crosschain/tx.proto",
}

func (m *MsgCrosschainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.DestChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestChainType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SrcChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SrcChainType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.RequestPacket) > 0 {
		i -= len(m.RequestPacket)
		copy(dAtA[i:], m.RequestPacket)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestPacket)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RequestMetadata) > 0 {
		i -= len(m.RequestMetadata)
		copy(dAtA[i:], m.RequestMetadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestMetadata)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.SrcTxOrigin) > 0 {
		i -= len(m.SrcTxOrigin)
		copy(dAtA[i:], m.SrcTxOrigin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcTxOrigin)))
		i--
		dAtA[i] = 0x42
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeDeducted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCrosschainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCrosschainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCrosschainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCrosschainAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.ExecData) > 0 {
		i -= len(m.ExecData)
		copy(dAtA[i:], m.ExecData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecData)))
		i--
		dAtA[i] = 0x72
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x68
	}
	if m.AckDestChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckDestChainType))
		i--
		dAtA[i] = 0x60
	}
	if m.AckSrcChainType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckSrcChainType))
		i--
		dAtA[i] = 0x58
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AckDestChainId) > 0 {
		i -= len(m.AckDestChainId)
		copy(dAtA[i:], m.AckDestChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AckDestChainId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DestTxHash) > 0 {
		i -= len(m.DestTxHash)
		copy(dAtA[i:], m.DestTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCrosschainAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCrosschainAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCrosschainAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCrosschainAckReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainAckReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainAckReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeConsumed != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x68
	}
	if m.AckExecStatus {
		i--
		if m.AckExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.AckExecData) > 0 {
		i -= len(m.AckExecData)
		copy(dAtA[i:], m.AckExecData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AckExecData)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x50
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AckReceiptTxHash) > 0 {
		i -= len(m.AckReceiptTxHash)
		copy(dAtA[i:], m.AckReceiptTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AckReceiptTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.AckReceiptBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckReceiptBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrosschainAckReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainAckReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainAckReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateRelayerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelayerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelayerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelayerEnabled {
		i--
		if m.RelayerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RelayerName) > 0 {
		i -= len(m.RelayerName)
		copy(dAtA[i:], m.RelayerName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRelayerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRelayerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRelayerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelayerEnabled {
		i--
		if m.RelayerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RelayerName) > 0 {
		i -= len(m.RelayerName)
		copy(dAtA[i:], m.RelayerName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RelayerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRelayerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRelayerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRelayerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCrosschainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.RequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovTx(uint64(m.SrcTimestamp))
	}
	l = len(m.SrcTxOrigin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestMetadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestPacket)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SrcChainType != 0 {
		n += 1 + sovTx(uint64(m.SrcChainType))
	}
	if m.DestChainType != 0 {
		n += 2 + sovTx(uint64(m.DestChainType))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.RequestIdentifier))
	}
	l = m.FeeDeducted.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgConfirmCrosschainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCrosschainAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.AckRequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.DestTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AckDestChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.RequestIdentifier))
	}
	if m.AckSrcChainType != 0 {
		n += 1 + sovTx(uint64(m.AckSrcChainType))
	}
	if m.AckDestChainType != 0 {
		n += 1 + sovTx(uint64(m.AckDestChainType))
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovTx(uint64(m.FeeConsumed))
	}
	l = len(m.ExecData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExecStatus {
		n += 2
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmCrosschainAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCrosschainAckReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovTx(uint64(m.AckReceiptIdentifier))
	}
	if m.AckReceiptBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.AckReceiptBlockHeight))
	}
	l = len(m.AckReceiptTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.RequestIdentifier))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovTx(uint64(m.AckRequestIdentifier))
	}
	l = len(m.AckExecData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AckExecStatus {
		n += 2
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovTx(uint64(m.FeeConsumed))
	}
	return n
}

func (m *MsgCrosschainAckReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateRelayerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RelayerEnabled {
		n += 2
	}
	return n
}

func (m *MsgCreateRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRelayerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RelayerName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RelayerEnabled {
		n += 2
	}
	return n
}

func (m *MsgUpdateRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteRelayerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCrosschainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestMetadata = append(m.RequestMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestMetadata == nil {
				m.RequestMetadata = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPacket = append(m.RequestPacket[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestPacket == nil {
				m.RequestPacket = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainType", wireType)
			}
			m.SrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainType", wireType)
			}
			m.DestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDeducted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeDeducted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCrosschainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrosschainAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckDestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainType", wireType)
			}
			m.AckSrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckSrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainType", wireType)
			}
			m.AckDestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckDestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecData == nil {
				m.ExecData = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCrosschainAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCrosschainAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCrosschainAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrosschainAckReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainAckReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainAckReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptBlockHeight", wireType)
			}
			m.AckReceiptBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckExecData = append(m.AckExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.AckExecData == nil {
				m.AckExecData = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AckExecStatus = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrosschainAckReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainAckReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainAckReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRelayerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelayerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelayerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelayerEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRelayerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRelayerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRelayerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelayerEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRelayerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRelayerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRelayerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
