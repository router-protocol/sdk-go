// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCrosschainRequest struct {
	Orchestrator    string                                 `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	SrcChainId      string                                 `protobuf:"bytes,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	EventNonce      uint64                                 `protobuf:"varint,3,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	BlockHeight     uint64                                 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	SourceTxHash    string                                 `protobuf:"bytes,5,opt,name=source_tx_hash,json=sourceTxHash,proto3" json:"source_tx_hash,omitempty"`
	SrcTimestamp    uint64                                 `protobuf:"varint,6,opt,name=src_timestamp,json=srcTimestamp,proto3" json:"src_timestamp,omitempty"`
	SrcTxOrigin     string                                 `protobuf:"bytes,7,opt,name=src_tx_origin,json=srcTxOrigin,proto3" json:"src_tx_origin,omitempty"`
	RouteAmount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient  []byte                                 `protobuf:"bytes,9,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	DestChainId     string                                 `protobuf:"bytes,10,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestSender   []byte                                 `protobuf:"bytes,11,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestMetadata []byte                                 `protobuf:"bytes,12,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	RequestPacket   []byte                                 `protobuf:"bytes,13,opt,name=request_packet,json=requestPacket,proto3" json:"request_packet,omitempty"`
	EthSigner       string                                 `protobuf:"bytes,14,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature       string                                 `protobuf:"bytes,15,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgCrosschainRequest) Reset()         { *m = MsgCrosschainRequest{} }
func (m *MsgCrosschainRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainRequest) ProtoMessage()    {}
func (*MsgCrosschainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{0}
}
func (m *MsgCrosschainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainRequest.Merge(m, src)
}
func (m *MsgCrosschainRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainRequest proto.InternalMessageInfo

func (m *MsgCrosschainRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgCrosschainRequest) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *MsgCrosschainRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *MsgCrosschainRequest) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgCrosschainRequest) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *MsgCrosschainRequest) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *MsgCrosschainRequest) GetSrcTxOrigin() string {
	if m != nil {
		return m.SrcTxOrigin
	}
	return ""
}

func (m *MsgCrosschainRequest) GetRouteRecipient() []byte {
	if m != nil {
		return m.RouteRecipient
	}
	return nil
}

func (m *MsgCrosschainRequest) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *MsgCrosschainRequest) GetRequestSender() []byte {
	if m != nil {
		return m.RequestSender
	}
	return nil
}

func (m *MsgCrosschainRequest) GetRequestMetadata() []byte {
	if m != nil {
		return m.RequestMetadata
	}
	return nil
}

func (m *MsgCrosschainRequest) GetRequestPacket() []byte {
	if m != nil {
		return m.RequestPacket
	}
	return nil
}

func (m *MsgCrosschainRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgCrosschainRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgCrosschainRequestResponse struct {
}

func (m *MsgCrosschainRequestResponse) Reset()         { *m = MsgCrosschainRequestResponse{} }
func (m *MsgCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCrosschainRequestResponse) ProtoMessage()    {}
func (*MsgCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{1}
}
func (m *MsgCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCrosschainRequestResponse.Merge(m, src)
}
func (m *MsgCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCrosschainRequestResponse proto.InternalMessageInfo

type MsgConfirmCrosschainRequest struct {
	Orchestrator  string `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	SourceChainId string `protobuf:"bytes,2,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestNonce  uint64 `protobuf:"varint,3,opt,name=requestNonce,proto3" json:"requestNonce,omitempty"`
	ClaimHash     []byte `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner     string `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature     string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgConfirmCrosschainRequest) Reset()         { *m = MsgConfirmCrosschainRequest{} }
func (m *MsgConfirmCrosschainRequest) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCrosschainRequest) ProtoMessage()    {}
func (*MsgConfirmCrosschainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{2}
}
func (m *MsgConfirmCrosschainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCrosschainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCrosschainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCrosschainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCrosschainRequest.Merge(m, src)
}
func (m *MsgConfirmCrosschainRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCrosschainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCrosschainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCrosschainRequest proto.InternalMessageInfo

func (m *MsgConfirmCrosschainRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *MsgConfirmCrosschainRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *MsgConfirmCrosschainRequest) GetRequestNonce() uint64 {
	if m != nil {
		return m.RequestNonce
	}
	return 0
}

func (m *MsgConfirmCrosschainRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *MsgConfirmCrosschainRequest) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *MsgConfirmCrosschainRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgConfirmCrosschainRequestResponse struct {
}

func (m *MsgConfirmCrosschainRequestResponse) Reset()         { *m = MsgConfirmCrosschainRequestResponse{} }
func (m *MsgConfirmCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmCrosschainRequestResponse) ProtoMessage()    {}
func (*MsgConfirmCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef225a639df9939d, []int{3}
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmCrosschainRequestResponse.Merge(m, src)
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmCrosschainRequestResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCrosschainRequest)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainRequest")
	proto.RegisterType((*MsgCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse")
	proto.RegisterType((*MsgConfirmCrosschainRequest)(nil), "routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest")
	proto.RegisterType((*MsgConfirmCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse")
}

func init() { proto.RegisterFile("routerchain/crosschain/tx.proto", fileDescriptor_ef225a639df9939d) }

var fileDescriptor_ef225a639df9939d = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4f, 0x53, 0xd4, 0x3e,
	0x1c, 0xc6, 0xb7, 0xfc, 0xfb, 0xfd, 0xc8, 0x76, 0x17, 0xcd, 0x70, 0xc8, 0xac, 0x4c, 0x77, 0x5d,
	0x40, 0xf1, 0x40, 0x3b, 0xe8, 0x4d, 0x4f, 0xc2, 0x05, 0x9c, 0x01, 0xb5, 0x70, 0xf2, 0xd2, 0xc9,
	0x66, 0x63, 0x9b, 0x81, 0x26, 0x6b, 0x92, 0x65, 0xd6, 0x77, 0xe1, 0xc5, 0x37, 0xe1, 0x2b, 0x61,
	0x3c, 0x71, 0x74, 0x3c, 0x30, 0x0e, 0xe8, 0xfb, 0x70, 0x92, 0xb4, 0xec, 0x56, 0x81, 0x51, 0x39,
	0x35, 0xfd, 0xf4, 0xe9, 0x93, 0x6f, 0x9e, 0x7c, 0x13, 0xd0, 0x96, 0x62, 0xa8, 0xa9, 0x24, 0x19,
	0x66, 0x3c, 0x22, 0x52, 0x28, 0xe5, 0x86, 0x7a, 0x14, 0x0e, 0xa4, 0xd0, 0x02, 0xae, 0x3a, 0x81,
	0x7d, 0x21, 0xe2, 0x28, 0x9c, 0xd0, 0x87, 0x63, 0x7d, 0x2b, 0x20, 0x42, 0xe5, 0x42, 0x45, 0x3d,
	0xac, 0x68, 0x74, 0xbc, 0xd1, 0xa3, 0x1a, 0x6f, 0x44, 0x44, 0x30, 0xee, 0x6c, 0x5a, 0x8b, 0xa9,
	0x48, 0x85, 0x1d, 0x46, 0x66, 0xe4, 0x68, 0xf7, 0xfb, 0x0c, 0x58, 0xdc, 0x55, 0xe9, 0xd6, 0xa5,
	0x4f, 0x4c, 0xdf, 0x0d, 0xa9, 0xd2, 0xb0, 0x0b, 0x7c, 0x21, 0x49, 0x46, 0x95, 0x96, 0x58, 0x0b,
	0x89, 0xbc, 0x8e, 0xb7, 0x36, 0x1f, 0x57, 0x18, 0xec, 0x00, 0x5f, 0x49, 0x92, 0xd8, 0xff, 0x12,
	0xd6, 0x47, 0x53, 0x56, 0x03, 0x94, 0x24, 0x5b, 0x06, 0xed, 0xf4, 0x61, 0x1b, 0xd4, 0xe9, 0x31,
	0xe5, 0x3a, 0xe1, 0x82, 0x13, 0x8a, 0xa6, 0x3b, 0xde, 0xda, 0x4c, 0x0c, 0x2c, 0xda, 0x33, 0x04,
	0xde, 0x07, 0x7e, 0xef, 0x48, 0x90, 0xc3, 0x24, 0xa3, 0x2c, 0xcd, 0x34, 0x9a, 0xb1, 0x8a, 0xba,
	0x65, 0xdb, 0x16, 0xc1, 0x15, 0xd0, 0x54, 0x62, 0x28, 0x09, 0x4d, 0xf4, 0x28, 0xc9, 0xb0, 0xca,
	0xd0, 0xac, 0xab, 0xc5, 0xd1, 0x83, 0xd1, 0x36, 0x56, 0x19, 0x5c, 0x06, 0x0d, 0x53, 0x8b, 0x66,
	0x39, 0x55, 0x1a, 0xe7, 0x03, 0x34, 0x67, 0x9d, 0x4c, 0x81, 0x07, 0x25, 0x83, 0xdd, 0x42, 0x34,
	0x4a, 0x84, 0x64, 0x29, 0xe3, 0xe8, 0x3f, 0xeb, 0x54, 0x37, 0xa2, 0xd1, 0x4b, 0x8b, 0xe0, 0x6b,
	0xe0, 0xdb, 0x84, 0x13, 0x9c, 0x8b, 0x21, 0xd7, 0xe8, 0x7f, 0x23, 0xd9, 0x0c, 0x4f, 0xce, 0xda,
	0xb5, 0xaf, 0x67, 0xed, 0x07, 0x29, 0xd3, 0xd9, 0xb0, 0x17, 0x12, 0x91, 0x47, 0x45, 0xe0, 0xee,
	0xb1, 0xae, 0xfa, 0x87, 0x91, 0x7e, 0x3f, 0xa0, 0x2a, 0xdc, 0xe1, 0x3a, 0xae, 0x5b, 0x8f, 0xe7,
	0xd6, 0x02, 0x3e, 0x04, 0x0b, 0xce, 0x52, 0x52, 0xc2, 0x06, 0x8c, 0x72, 0x8d, 0xe6, 0x3b, 0xde,
	0x9a, 0x1f, 0x37, 0x2d, 0x8e, 0x4b, 0x6a, 0xea, 0xeb, 0x53, 0xa5, 0xc7, 0x89, 0x02, 0x57, 0x9f,
	0x81, 0x65, 0xa4, 0xab, 0xa0, 0x29, 0xdd, 0x1e, 0x25, 0x8a, 0xf2, 0x3e, 0x95, 0xa8, 0x6e, 0xbd,
	0x1a, 0x05, 0xdd, 0xb7, 0x10, 0x3e, 0x02, 0x77, 0x4a, 0x59, 0x4e, 0x35, 0xee, 0x63, 0x8d, 0x91,
	0x6f, 0x85, 0x0b, 0x05, 0xdf, 0x2d, 0xf0, 0xa4, 0xe3, 0x00, 0x93, 0x43, 0xaa, 0x51, 0xa3, 0xe2,
	0xf8, 0xca, 0x42, 0xb8, 0x04, 0xe6, 0xa9, 0xce, 0xf6, 0x59, 0xca, 0xa9, 0x44, 0x4d, 0x5b, 0xd8,
	0x18, 0x98, 0xaf, 0x8a, 0xa5, 0x1c, 0xeb, 0xa1, 0xa4, 0x68, 0xc1, 0x7d, 0xbd, 0x04, 0xdd, 0x00,
	0x2c, 0x5d, 0xd5, 0x65, 0x31, 0x55, 0x03, 0xc1, 0x15, 0xed, 0xfe, 0xf0, 0xc0, 0x3d, 0x23, 0x10,
	0xfc, 0x2d, 0x93, 0xf9, 0xbf, 0x75, 0xe3, 0x0a, 0x68, 0xb8, 0x8e, 0x28, 0x92, 0x2a, 0xda, 0xb1,
	0x0a, 0x8d, 0x53, 0xb1, 0xac, 0xbd, 0x89, 0x96, 0xac, 0x30, 0xb3, 0x16, 0x72, 0x84, 0x59, 0x6e,
	0x1a, 0xcb, 0x76, 0xa4, 0x1f, 0x8f, 0x41, 0x35, 0x87, 0xd9, 0x1b, 0x73, 0x98, 0xfb, 0x35, 0x87,
	0x55, 0xb0, 0x7c, 0xc3, 0x32, 0xcb, 0x38, 0x1e, 0x7f, 0x9e, 0x02, 0xd3, 0xbb, 0x2a, 0x85, 0x1f,
	0x3d, 0x70, 0xf7, 0xf7, 0x30, 0x9e, 0x85, 0x7f, 0x74, 0x23, 0x84, 0x57, 0x25, 0xde, 0xda, 0xba,
	0xc5, 0xcf, 0x65, 0x7d, 0xf0, 0x93, 0x07, 0xd0, 0xb5, 0x7b, 0xb5, 0xf9, 0x17, 0x33, 0x5c, 0xe3,
	0xd1, 0x7a, 0x71, 0x7b, 0x8f, 0xb2, 0xd8, 0xcd, 0x83, 0x93, 0xf3, 0xc0, 0x3b, 0x3d, 0x0f, 0xbc,
	0x6f, 0xe7, 0x81, 0xf7, 0xe1, 0x22, 0xa8, 0x9d, 0x5e, 0x04, 0xb5, 0x2f, 0x17, 0x41, 0xed, 0xcd,
	0xd3, 0x89, 0xc3, 0xec, 0x26, 0x58, 0x2f, 0x27, 0x2c, 0xdf, 0xdd, 0x5d, 0x3c, 0xaa, 0x5c, 0xcc,
	0xe6, 0x90, 0xf7, 0xe6, 0xac, 0xf2, 0xc9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x21, 0x0b,
	0xdb, 0xbf, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CrosschainRequest(ctx context.Context, in *MsgCrosschainRequest, opts ...grpc.CallOption) (*MsgCrosschainRequestResponse, error)
	ConfirmCrosschainRequest(ctx context.Context, in *MsgConfirmCrosschainRequest, opts ...grpc.CallOption) (*MsgConfirmCrosschainRequestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CrosschainRequest(ctx context.Context, in *MsgCrosschainRequest, opts ...grpc.CallOption) (*MsgCrosschainRequestResponse, error) {
	out := new(MsgCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/CrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmCrosschainRequest(ctx context.Context, in *MsgConfirmCrosschainRequest, opts ...grpc.CallOption) (*MsgConfirmCrosschainRequestResponse, error) {
	out := new(MsgConfirmCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Msg/ConfirmCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CrosschainRequest(context.Context, *MsgCrosschainRequest) (*MsgCrosschainRequestResponse, error)
	ConfirmCrosschainRequest(context.Context, *MsgConfirmCrosschainRequest) (*MsgConfirmCrosschainRequestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CrosschainRequest(ctx context.Context, req *MsgCrosschainRequest) (*MsgCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequest not implemented")
}
func (*UnimplementedMsgServer) ConfirmCrosschainRequest(ctx context.Context, req *MsgConfirmCrosschainRequest) (*MsgConfirmCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCrosschainRequest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCrosschainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/CrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CrosschainRequest(ctx, req.(*MsgCrosschainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmCrosschainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Msg/ConfirmCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmCrosschainRequest(ctx, req.(*MsgConfirmCrosschainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.crosschain.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrosschainRequest",
			Handler:    _Msg_CrosschainRequest_Handler,
		},
		{
			MethodName: "ConfirmCrosschainRequest",
			Handler:    _Msg_ConfirmCrosschainRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerchain/crosschain/tx.proto",
}

func (m *MsgCrosschainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RequestPacket) > 0 {
		i -= len(m.RequestPacket)
		copy(dAtA[i:], m.RequestPacket)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestPacket)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RequestMetadata) > 0 {
		i -= len(m.RequestMetadata)
		copy(dAtA[i:], m.RequestMetadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestMetadata)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.SrcTxOrigin) > 0 {
		i -= len(m.SrcTxOrigin)
		copy(dAtA[i:], m.SrcTxOrigin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcTxOrigin)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.EventNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCrosschainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCrosschainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCrosschainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequestNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCrosschainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovTx(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovTx(uint64(m.SrcTimestamp))
	}
	l = len(m.SrcTxOrigin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestMetadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequestPacket)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmCrosschainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestNonce != 0 {
		n += 1 + sovTx(uint64(m.RequestNonce))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfirmCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCrosschainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = append(m.RouteRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteRecipient == nil {
				m.RouteRecipient = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = append(m.RequestSender[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestSender == nil {
				m.RequestSender = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestMetadata = append(m.RequestMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestMetadata == nil {
				m.RequestMetadata = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPacket = append(m.RequestPacket[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestPacket == nil {
				m.RequestPacket = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCrosschainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNonce", wireType)
			}
			m.RequestNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
