// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetCrosschainRequestRequest) Reset()         { *m = QueryGetCrosschainRequestRequest{} }
func (m *QueryGetCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{2}
}
func (m *QueryGetCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetCrosschainRequestResponse struct {
	CrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=crosschainRequest,proto3" json:"crosschainRequest"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCrosschainRequestResponse) Reset()         { *m = QueryGetCrosschainRequestResponse{} }
func (m *QueryGetCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryGetCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{3}
}
func (m *QueryGetCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestResponse) GetCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.CrosschainRequest
	}
	return nil
}

func (m *QueryGetCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestRequest) Reset()         { *m = QueryAllCrosschainRequestRequest{} }
func (m *QueryAllCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{4}
}
func (m *QueryAllCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainRequestResponse struct {
	CrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=crosschainRequest,proto3" json:"crosschainRequest"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestResponse) Reset()         { *m = QueryAllCrosschainRequestResponse{} }
func (m *QueryAllCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryAllCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{5}
}
func (m *QueryAllCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestResponse) GetCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.CrosschainRequest
	}
	return nil
}

func (m *QueryAllCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainRequestConfirmRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	ClaimHash         []byte `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Orchestrator      string `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *QueryGetCrosschainRequestConfirmRequest) Reset() {
	*m = QueryGetCrosschainRequestConfirmRequest{}
}
func (m *QueryGetCrosschainRequestConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestConfirmRequest) ProtoMessage()    {}
func (*QueryGetCrosschainRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{6}
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest.Merge(m, src)
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestConfirmRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetCrosschainRequestConfirmRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *QueryGetCrosschainRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryGetCrosschainRequestConfirmRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type QueryGetCrosschainRequestConfirmResponse struct {
	CrosschainRequestConfirm CrosschainRequestConfirm `protobuf:"bytes,1,opt,name=crosschainRequestConfirm,proto3" json:"crosschainRequestConfirm"`
}

func (m *QueryGetCrosschainRequestConfirmResponse) Reset() {
	*m = QueryGetCrosschainRequestConfirmResponse{}
}
func (m *QueryGetCrosschainRequestConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestConfirmResponse) ProtoMessage()    {}
func (*QueryGetCrosschainRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{7}
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse.Merge(m, src)
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestConfirmResponse) GetCrosschainRequestConfirm() CrosschainRequestConfirm {
	if m != nil {
		return m.CrosschainRequestConfirm
	}
	return CrosschainRequestConfirm{}
}

type QueryAllCrosschainRequestConfirmRequest struct {
	SourceChainId     string             `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64             `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	ClaimHash         []byte             `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Pagination        *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestConfirmRequest) Reset() {
	*m = QueryAllCrosschainRequestConfirmRequest{}
}
func (m *QueryAllCrosschainRequestConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestConfirmRequest) ProtoMessage()    {}
func (*QueryAllCrosschainRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{8}
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest.Merge(m, src)
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestConfirmRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryAllCrosschainRequestConfirmRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *QueryAllCrosschainRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryAllCrosschainRequestConfirmRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainRequestConfirmResponse struct {
	CrosschainRequestConfirm []CrosschainRequestConfirm `protobuf:"bytes,1,rep,name=crosschainRequestConfirm,proto3" json:"crosschainRequestConfirm"`
	Pagination               *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestConfirmResponse) Reset() {
	*m = QueryAllCrosschainRequestConfirmResponse{}
}
func (m *QueryAllCrosschainRequestConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestConfirmResponse) ProtoMessage()    {}
func (*QueryAllCrosschainRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{9}
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse.Merge(m, src)
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestConfirmResponse) GetCrosschainRequestConfirm() []CrosschainRequestConfirm {
	if m != nil {
		return m.CrosschainRequestConfirm
	}
	return nil
}

func (m *QueryAllCrosschainRequestConfirmResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetCrosschainAckRequestRequest) Reset()         { *m = QueryGetCrosschainAckRequestRequest{} }
func (m *QueryGetCrosschainAckRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckRequestRequest) ProtoMessage()    {}
func (*QueryGetCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{10}
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetCrosschainAckRequestResponse struct {
	CrosschainAckRequest []CrosschainAckRequest `protobuf:"bytes,1,rep,name=crosschainAckRequest,proto3" json:"crosschainAckRequest"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCrosschainAckRequestResponse) Reset()         { *m = QueryGetCrosschainAckRequestResponse{} }
func (m *QueryGetCrosschainAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckRequestResponse) ProtoMessage()    {}
func (*QueryGetCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{11}
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestResponse) GetCrosschainAckRequest() []CrosschainAckRequest {
	if m != nil {
		return m.CrosschainAckRequest
	}
	return nil
}

func (m *QueryGetCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestRequest) Reset()         { *m = QueryAllCrosschainAckRequestRequest{} }
func (m *QueryAllCrosschainAckRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckRequestRequest) ProtoMessage()    {}
func (*QueryAllCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{12}
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckRequestResponse struct {
	CrosschainAckRequest []CrosschainAckRequest `protobuf:"bytes,1,rep,name=crosschainAckRequest,proto3" json:"crosschainAckRequest"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestResponse) Reset()         { *m = QueryAllCrosschainAckRequestResponse{} }
func (m *QueryAllCrosschainAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckRequestResponse) ProtoMessage()    {}
func (*QueryAllCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{13}
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestResponse) GetCrosschainAckRequest() []CrosschainAckRequest {
	if m != nil {
		return m.CrosschainAckRequest
	}
	return nil
}

func (m *QueryAllCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainAckRequestConfirmRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Orchestrator         string `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) Reset() {
	*m = QueryGetCrosschainAckRequestConfirmRequest{}
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCrosschainAckRequestConfirmRequest) ProtoMessage() {}
func (*QueryGetCrosschainAckRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{14}
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type QueryGetCrosschainAckRequestConfirmResponse struct {
	CrosschainAckRequestConfirm CrosschainAckRequestConfirm `protobuf:"bytes,1,opt,name=crosschainAckRequestConfirm,proto3" json:"crosschainAckRequestConfirm"`
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) Reset() {
	*m = QueryGetCrosschainAckRequestConfirmResponse{}
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCrosschainAckRequestConfirmResponse) ProtoMessage() {}
func (*QueryGetCrosschainAckRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{15}
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestConfirmResponse) GetCrosschainAckRequestConfirm() CrosschainAckRequestConfirm {
	if m != nil {
		return m.CrosschainAckRequestConfirm
	}
	return CrosschainAckRequestConfirm{}
}

type QueryAllCrosschainAckRequestConfirmRequest struct {
	AckSrcChainId        string             `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64             `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	ClaimHash            []byte             `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Pagination           *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) Reset() {
	*m = QueryAllCrosschainAckRequestConfirmRequest{}
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCrosschainAckRequestConfirmRequest) ProtoMessage() {}
func (*QueryAllCrosschainAckRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{16}
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckRequestConfirmResponse struct {
	CrosschainAckRequestConfirm []CrosschainAckRequestConfirm `protobuf:"bytes,1,rep,name=crosschainAckRequestConfirm,proto3" json:"crosschainAckRequestConfirm"`
	Pagination                  *query.PageResponse           `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) Reset() {
	*m = QueryAllCrosschainAckRequestConfirmResponse{}
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCrosschainAckRequestConfirmResponse) ProtoMessage() {}
func (*QueryAllCrosschainAckRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{17}
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestConfirmResponse) GetCrosschainAckRequestConfirm() []CrosschainAckRequestConfirm {
	if m != nil {
		return m.CrosschainAckRequestConfirm
	}
	return nil
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainAckReceiptRequest struct {
	AckReceiptSrcChainId string `protobuf:"bytes,1,opt,name=ackReceiptSrcChainId,proto3" json:"ackReceiptSrcChainId,omitempty"`
	AckReceiptIdentifier uint64 `protobuf:"varint,2,opt,name=ackReceiptIdentifier,proto3" json:"ackReceiptIdentifier,omitempty"`
}

func (m *QueryGetCrosschainAckReceiptRequest) Reset()         { *m = QueryGetCrosschainAckReceiptRequest{} }
func (m *QueryGetCrosschainAckReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckReceiptRequest) ProtoMessage()    {}
func (*QueryGetCrosschainAckReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{18}
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckReceiptRequest.Merge(m, src)
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckReceiptRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainAckReceiptRequest) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *QueryGetCrosschainAckReceiptRequest) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

type QueryGetCrosschainAckReceiptResponse struct {
	CrosschainAckReceipt []CrosschainAckReceipt `protobuf:"bytes,1,rep,name=crosschainAckReceipt,proto3" json:"crosschainAckReceipt"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCrosschainAckReceiptResponse) Reset()         { *m = QueryGetCrosschainAckReceiptResponse{} }
func (m *QueryGetCrosschainAckReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckReceiptResponse) ProtoMessage()    {}
func (*QueryGetCrosschainAckReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{19}
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckReceiptResponse.Merge(m, src)
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckReceiptResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainAckReceiptResponse) GetCrosschainAckReceipt() []CrosschainAckReceipt {
	if m != nil {
		return m.CrosschainAckReceipt
	}
	return nil
}

func (m *QueryGetCrosschainAckReceiptResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckReceiptRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckReceiptRequest) Reset()         { *m = QueryAllCrosschainAckReceiptRequest{} }
func (m *QueryAllCrosschainAckReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckReceiptRequest) ProtoMessage()    {}
func (*QueryAllCrosschainAckReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{20}
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckReceiptRequest.Merge(m, src)
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckReceiptRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainAckReceiptRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckReceiptResponse struct {
	CrosschainAckReceipt []CrosschainAckReceipt `protobuf:"bytes,1,rep,name=crosschainAckReceipt,proto3" json:"crosschainAckReceipt"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckReceiptResponse) Reset()         { *m = QueryAllCrosschainAckReceiptResponse{} }
func (m *QueryAllCrosschainAckReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckReceiptResponse) ProtoMessage()    {}
func (*QueryAllCrosschainAckReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{21}
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckReceiptResponse.Merge(m, src)
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckReceiptResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainAckReceiptResponse) GetCrosschainAckReceipt() []CrosschainAckReceipt {
	if m != nil {
		return m.CrosschainAckReceipt
	}
	return nil
}

func (m *QueryAllCrosschainAckReceiptResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRelayerConfigRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryGetRelayerConfigRequest) Reset()         { *m = QueryGetRelayerConfigRequest{} }
func (m *QueryGetRelayerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelayerConfigRequest) ProtoMessage()    {}
func (*QueryGetRelayerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{22}
}
func (m *QueryGetRelayerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelayerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelayerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelayerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelayerConfigRequest.Merge(m, src)
}
func (m *QueryGetRelayerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelayerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelayerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelayerConfigRequest proto.InternalMessageInfo

func (m *QueryGetRelayerConfigRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetRelayerConfigResponse struct {
	RelayerConfig RelayerConfig `protobuf:"bytes,1,opt,name=relayerConfig,proto3" json:"relayerConfig"`
}

func (m *QueryGetRelayerConfigResponse) Reset()         { *m = QueryGetRelayerConfigResponse{} }
func (m *QueryGetRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelayerConfigResponse) ProtoMessage()    {}
func (*QueryGetRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{23}
}
func (m *QueryGetRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelayerConfigResponse.Merge(m, src)
}
func (m *QueryGetRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelayerConfigResponse proto.InternalMessageInfo

func (m *QueryGetRelayerConfigResponse) GetRelayerConfig() RelayerConfig {
	if m != nil {
		return m.RelayerConfig
	}
	return RelayerConfig{}
}

type QueryAllRelayerConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelayerConfigRequest) Reset()         { *m = QueryAllRelayerConfigRequest{} }
func (m *QueryAllRelayerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelayerConfigRequest) ProtoMessage()    {}
func (*QueryAllRelayerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{24}
}
func (m *QueryAllRelayerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelayerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelayerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelayerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelayerConfigRequest.Merge(m, src)
}
func (m *QueryAllRelayerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelayerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelayerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelayerConfigRequest proto.InternalMessageInfo

func (m *QueryAllRelayerConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRelayerConfigResponse struct {
	RelayerConfig []RelayerConfig     `protobuf:"bytes,1,rep,name=relayerConfig,proto3" json:"relayerConfig"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelayerConfigResponse) Reset()         { *m = QueryAllRelayerConfigResponse{} }
func (m *QueryAllRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelayerConfigResponse) ProtoMessage()    {}
func (*QueryAllRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{25}
}
func (m *QueryAllRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelayerConfigResponse.Merge(m, src)
}
func (m *QueryAllRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelayerConfigResponse proto.InternalMessageInfo

func (m *QueryAllRelayerConfigResponse) GetRelayerConfig() []RelayerConfig {
	if m != nil {
		return m.RelayerConfig
	}
	return nil
}

func (m *QueryAllRelayerConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBlockedCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetBlockedCrosschainRequestRequest) Reset() {
	*m = QueryGetBlockedCrosschainRequestRequest{}
}
func (m *QueryGetBlockedCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockedCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetBlockedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{26}
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetBlockedCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetBlockedCrosschainRequestResponse struct {
	BlockedCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=blockedCrosschainRequest,proto3" json:"blockedCrosschainRequest"`
}

func (m *QueryGetBlockedCrosschainRequestResponse) Reset() {
	*m = QueryGetBlockedCrosschainRequestResponse{}
}
func (m *QueryGetBlockedCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockedCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryGetBlockedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{27}
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainRequestResponse) GetBlockedCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.BlockedCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllBlockedCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainRequestRequest) Reset() {
	*m = QueryAllBlockedCrosschainRequestRequest{}
}
func (m *QueryAllBlockedCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlockedCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllBlockedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{28}
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlockedCrosschainRequestResponse struct {
	BlockedCrosschainRequests []CrosschainRequest `protobuf:"bytes,1,rep,name=blockedCrosschainRequests,proto3" json:"blockedCrosschainRequests"`
	Pagination                *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainRequestResponse) Reset() {
	*m = QueryAllBlockedCrosschainRequestResponse{}
}
func (m *QueryAllBlockedCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlockedCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryAllBlockedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{29}
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainRequestResponse) GetBlockedCrosschainRequests() []CrosschainRequest {
	if m != nil {
		return m.BlockedCrosschainRequests
	}
	return nil
}

func (m *QueryAllBlockedCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBlockedCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) Reset() {
	*m = QueryGetBlockedCrosschainAckRequestRequest{}
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetBlockedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetBlockedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{30}
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetBlockedCrosschainAckRequestResponse struct {
	BlockedCrosschainAckRequest CrosschainAckRequest `protobuf:"bytes,1,opt,name=blockedCrosschainAckRequest,proto3" json:"blockedCrosschainAckRequest"`
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) Reset() {
	*m = QueryGetBlockedCrosschainAckRequestResponse{}
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetBlockedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetBlockedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{31}
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainAckRequestResponse) GetBlockedCrosschainAckRequest() CrosschainAckRequest {
	if m != nil {
		return m.BlockedCrosschainAckRequest
	}
	return CrosschainAckRequest{}
}

type QueryAllBlockedCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) Reset() {
	*m = QueryAllBlockedCrosschainAckRequestRequest{}
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllBlockedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllBlockedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{32}
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlockedCrosschainAckRequestResponse struct {
	BlockedCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=blockedCrosschainAckRequests,proto3" json:"blockedCrosschainAckRequests"`
	Pagination                   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) Reset() {
	*m = QueryAllBlockedCrosschainAckRequestResponse{}
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllBlockedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllBlockedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{33}
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainAckRequestResponse) GetBlockedCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.BlockedCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIBCConfigRequest struct {
}

func (m *QueryGetIBCConfigRequest) Reset()         { *m = QueryGetIBCConfigRequest{} }
func (m *QueryGetIBCConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIBCConfigRequest) ProtoMessage()    {}
func (*QueryGetIBCConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{34}
}
func (m *QueryGetIBCConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIBCConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIBCConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIBCConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIBCConfigRequest.Merge(m, src)
}
func (m *QueryGetIBCConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIBCConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIBCConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIBCConfigRequest proto.InternalMessageInfo

type QueryGetIBCConfigResponse struct {
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *QueryGetIBCConfigResponse) Reset()         { *m = QueryGetIBCConfigResponse{} }
func (m *QueryGetIBCConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIBCConfigResponse) ProtoMessage()    {}
func (*QueryGetIBCConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{35}
}
func (m *QueryGetIBCConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIBCConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIBCConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIBCConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIBCConfigResponse.Merge(m, src)
}
func (m *QueryGetIBCConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIBCConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIBCConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIBCConfigResponse proto.InternalMessageInfo

func (m *QueryGetIBCConfigResponse) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

type QueryGetExpiredCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetExpiredCrosschainRequestRequest) Reset() {
	*m = QueryGetExpiredCrosschainRequestRequest{}
}
func (m *QueryGetExpiredCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetExpiredCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{36}
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetExpiredCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetExpiredCrosschainRequestResponse struct {
	ExpiredCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=expiredCrosschainRequest,proto3" json:"expiredCrosschainRequest"`
}

func (m *QueryGetExpiredCrosschainRequestResponse) Reset() {
	*m = QueryGetExpiredCrosschainRequestResponse{}
}
func (m *QueryGetExpiredCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryGetExpiredCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{37}
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainRequestResponse) GetExpiredCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.ExpiredCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllExpiredCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainRequestRequest) Reset() {
	*m = QueryAllExpiredCrosschainRequestRequest{}
}
func (m *QueryAllExpiredCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllExpiredCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{38}
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredCrosschainRequestResponse struct {
	ExpiredCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=expiredCrosschainRequest,proto3" json:"expiredCrosschainRequest"`
	Pagination               *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainRequestResponse) Reset() {
	*m = QueryAllExpiredCrosschainRequestResponse{}
}
func (m *QueryAllExpiredCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryAllExpiredCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{39}
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainRequestResponse) GetExpiredCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.ExpiredCrosschainRequest
	}
	return nil
}

func (m *QueryAllExpiredCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExpiredCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) Reset() {
	*m = QueryGetExpiredCrosschainAckRequestRequest{}
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetExpiredCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetExpiredCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{40}
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetExpiredCrosschainAckRequestResponse struct {
	ExpiredCrosschainAckRequest CrosschainAckRequest `protobuf:"bytes,1,opt,name=expiredCrosschainAckRequest,proto3" json:"expiredCrosschainAckRequest"`
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) Reset() {
	*m = QueryGetExpiredCrosschainAckRequestResponse{}
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetExpiredCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetExpiredCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{41}
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainAckRequestResponse) GetExpiredCrosschainAckRequest() CrosschainAckRequest {
	if m != nil {
		return m.ExpiredCrosschainAckRequest
	}
	return CrosschainAckRequest{}
}

type QueryAllExpiredCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) Reset() {
	*m = QueryAllExpiredCrosschainAckRequestRequest{}
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllExpiredCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllExpiredCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{42}
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredCrosschainAckRequestResponse struct {
	ExpiredCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=expiredCrosschainAckRequests,proto3" json:"expiredCrosschainAckRequests"`
	Pagination                   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) Reset() {
	*m = QueryAllExpiredCrosschainAckRequestResponse{}
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllExpiredCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllExpiredCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{43}
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainAckRequestResponse) GetExpiredCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.ExpiredCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValidCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetValidCrosschainRequestRequest) Reset()         { *m = QueryGetValidCrosschainRequestRequest{} }
func (m *QueryGetValidCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetValidCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{44}
}
func (m *QueryGetValidCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetValidCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetValidCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetValidCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetValidCrosschainRequestResponse struct {
	ValidCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=validCrosschainRequest,proto3" json:"validCrosschainRequest"`
}

func (m *QueryGetValidCrosschainRequestResponse) Reset() {
	*m = QueryGetValidCrosschainRequestResponse{}
}
func (m *QueryGetValidCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryGetValidCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{45}
}
func (m *QueryGetValidCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetValidCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetValidCrosschainRequestResponse) GetValidCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.ValidCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllValidCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidCrosschainRequestRequest) Reset()         { *m = QueryAllValidCrosschainRequestRequest{} }
func (m *QueryAllValidCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllValidCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{46}
}
func (m *QueryAllValidCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllValidCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllValidCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidCrosschainRequestResponse struct {
	ValidCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=validCrosschainRequest,proto3" json:"validCrosschainRequest"`
	Pagination             *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidCrosschainRequestResponse) Reset() {
	*m = QueryAllValidCrosschainRequestResponse{}
}
func (m *QueryAllValidCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryAllValidCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{47}
}
func (m *QueryAllValidCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllValidCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllValidCrosschainRequestResponse) GetValidCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.ValidCrosschainRequest
	}
	return nil
}

func (m *QueryAllValidCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNativeTransferedCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetNativeTransferedCrosschainRequestRequest) Reset() {
	*m = QueryGetNativeTransferedCrosschainRequestRequest{}
}
func (m *QueryGetNativeTransferedCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetNativeTransferedCrosschainRequestRequest) ProtoMessage() {}
func (*QueryGetNativeTransferedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{48}
}
func (m *QueryGetNativeTransferedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNativeTransferedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNativeTransferedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetNativeTransferedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNativeTransferedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetNativeTransferedCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetNativeTransferedCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetNativeTransferedCrosschainRequestResponse struct {
	NativeTransferedCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=nativeTransferedCrosschainRequest,proto3" json:"nativeTransferedCrosschainRequest"`
}

func (m *QueryGetNativeTransferedCrosschainRequestResponse) Reset() {
	*m = QueryGetNativeTransferedCrosschainRequestResponse{}
}
func (m *QueryGetNativeTransferedCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetNativeTransferedCrosschainRequestResponse) ProtoMessage() {}
func (*QueryGetNativeTransferedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{49}
}
func (m *QueryGetNativeTransferedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNativeTransferedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNativeTransferedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetNativeTransferedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNativeTransferedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNativeTransferedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetNativeTransferedCrosschainRequestResponse) GetNativeTransferedCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.NativeTransferedCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllNativeTransferedCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNativeTransferedCrosschainRequestRequest) Reset() {
	*m = QueryAllNativeTransferedCrosschainRequestRequest{}
}
func (m *QueryAllNativeTransferedCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllNativeTransferedCrosschainRequestRequest) ProtoMessage() {}
func (*QueryAllNativeTransferedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{50}
}
func (m *QueryAllNativeTransferedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNativeTransferedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNativeTransferedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllNativeTransferedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNativeTransferedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllNativeTransferedCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNativeTransferedCrosschainRequestResponse struct {
	NativeTransferedCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=nativeTransferedCrosschainRequest,proto3" json:"nativeTransferedCrosschainRequest"`
	Pagination                        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNativeTransferedCrosschainRequestResponse) Reset() {
	*m = QueryAllNativeTransferedCrosschainRequestResponse{}
}
func (m *QueryAllNativeTransferedCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllNativeTransferedCrosschainRequestResponse) ProtoMessage() {}
func (*QueryAllNativeTransferedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{51}
}
func (m *QueryAllNativeTransferedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNativeTransferedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNativeTransferedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllNativeTransferedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNativeTransferedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNativeTransferedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllNativeTransferedCrosschainRequestResponse) GetNativeTransferedCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.NativeTransferedCrosschainRequest
	}
	return nil
}

func (m *QueryAllNativeTransferedCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReadyToExecuteCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetReadyToExecuteCrosschainRequestRequest) Reset() {
	*m = QueryGetReadyToExecuteCrosschainRequestRequest{}
}
func (m *QueryGetReadyToExecuteCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetReadyToExecuteCrosschainRequestRequest) ProtoMessage() {}
func (*QueryGetReadyToExecuteCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{52}
}
func (m *QueryGetReadyToExecuteCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReadyToExecuteCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReadyToExecuteCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetReadyToExecuteCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReadyToExecuteCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetReadyToExecuteCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetReadyToExecuteCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetReadyToExecuteCrosschainRequestResponse struct {
	ReadyToExecuteCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=readyToExecuteCrosschainRequest,proto3" json:"readyToExecuteCrosschainRequest"`
}

func (m *QueryGetReadyToExecuteCrosschainRequestResponse) Reset() {
	*m = QueryGetReadyToExecuteCrosschainRequestResponse{}
}
func (m *QueryGetReadyToExecuteCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetReadyToExecuteCrosschainRequestResponse) ProtoMessage() {}
func (*QueryGetReadyToExecuteCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{53}
}
func (m *QueryGetReadyToExecuteCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReadyToExecuteCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReadyToExecuteCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetReadyToExecuteCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReadyToExecuteCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReadyToExecuteCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetReadyToExecuteCrosschainRequestResponse) GetReadyToExecuteCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.ReadyToExecuteCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllReadyToExecuteCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReadyToExecuteCrosschainRequestRequest) Reset() {
	*m = QueryAllReadyToExecuteCrosschainRequestRequest{}
}
func (m *QueryAllReadyToExecuteCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllReadyToExecuteCrosschainRequestRequest) ProtoMessage() {}
func (*QueryAllReadyToExecuteCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{54}
}
func (m *QueryAllReadyToExecuteCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReadyToExecuteCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReadyToExecuteCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllReadyToExecuteCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReadyToExecuteCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllReadyToExecuteCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReadyToExecuteCrosschainRequestResponse struct {
	ReadyToExecuteCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=readyToExecuteCrosschainRequest,proto3" json:"readyToExecuteCrosschainRequest"`
	Pagination                      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReadyToExecuteCrosschainRequestResponse) Reset() {
	*m = QueryAllReadyToExecuteCrosschainRequestResponse{}
}
func (m *QueryAllReadyToExecuteCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllReadyToExecuteCrosschainRequestResponse) ProtoMessage() {}
func (*QueryAllReadyToExecuteCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{55}
}
func (m *QueryAllReadyToExecuteCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReadyToExecuteCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReadyToExecuteCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllReadyToExecuteCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReadyToExecuteCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReadyToExecuteCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllReadyToExecuteCrosschainRequestResponse) GetReadyToExecuteCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.ReadyToExecuteCrosschainRequest
	}
	return nil
}

func (m *QueryAllReadyToExecuteCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExecutedCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetExecutedCrosschainRequestRequest) Reset() {
	*m = QueryGetExecutedCrosschainRequestRequest{}
}
func (m *QueryGetExecutedCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutedCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetExecutedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{56}
}
func (m *QueryGetExecutedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetExecutedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetExecutedCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetExecutedCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetExecutedCrosschainRequestResponse struct {
	ExecutedCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=executedCrosschainRequest,proto3" json:"executedCrosschainRequest"`
}

func (m *QueryGetExecutedCrosschainRequestResponse) Reset() {
	*m = QueryGetExecutedCrosschainRequestResponse{}
}
func (m *QueryGetExecutedCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetExecutedCrosschainRequestResponse) ProtoMessage() {}
func (*QueryGetExecutedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{57}
}
func (m *QueryGetExecutedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetExecutedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetExecutedCrosschainRequestResponse) GetExecutedCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.ExecutedCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllExecutedCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutedCrosschainRequestRequest) Reset() {
	*m = QueryAllExecutedCrosschainRequestRequest{}
}
func (m *QueryAllExecutedCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExecutedCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllExecutedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{58}
}
func (m *QueryAllExecutedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllExecutedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllExecutedCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExecutedCrosschainRequestResponse struct {
	ExecutedCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=executedCrosschainRequest,proto3" json:"executedCrosschainRequest"`
	Pagination                *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutedCrosschainRequestResponse) Reset() {
	*m = QueryAllExecutedCrosschainRequestResponse{}
}
func (m *QueryAllExecutedCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllExecutedCrosschainRequestResponse) ProtoMessage() {}
func (*QueryAllExecutedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{59}
}
func (m *QueryAllExecutedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllExecutedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllExecutedCrosschainRequestResponse) GetExecutedCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.ExecutedCrosschainRequest
	}
	return nil
}

func (m *QueryAllExecutedCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFeesSettledCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetFeesSettledCrosschainRequestRequest) Reset() {
	*m = QueryGetFeesSettledCrosschainRequestRequest{}
}
func (m *QueryGetFeesSettledCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetFeesSettledCrosschainRequestRequest) ProtoMessage() {}
func (*QueryGetFeesSettledCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{60}
}
func (m *QueryGetFeesSettledCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeesSettledCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeesSettledCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeesSettledCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeesSettledCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetFeesSettledCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeesSettledCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeesSettledCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeesSettledCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetFeesSettledCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetFeesSettledCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetFeesSettledCrosschainRequestResponse struct {
	FeesSettledCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=feesSettledCrosschainRequest,proto3" json:"feesSettledCrosschainRequest"`
}

func (m *QueryGetFeesSettledCrosschainRequestResponse) Reset() {
	*m = QueryGetFeesSettledCrosschainRequestResponse{}
}
func (m *QueryGetFeesSettledCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetFeesSettledCrosschainRequestResponse) ProtoMessage() {}
func (*QueryGetFeesSettledCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{61}
}
func (m *QueryGetFeesSettledCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeesSettledCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeesSettledCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeesSettledCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeesSettledCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetFeesSettledCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeesSettledCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeesSettledCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeesSettledCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetFeesSettledCrosschainRequestResponse) GetFeesSettledCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.FeesSettledCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllFeesSettledCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeesSettledCrosschainRequestRequest) Reset() {
	*m = QueryAllFeesSettledCrosschainRequestRequest{}
}
func (m *QueryAllFeesSettledCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllFeesSettledCrosschainRequestRequest) ProtoMessage() {}
func (*QueryAllFeesSettledCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{62}
}
func (m *QueryAllFeesSettledCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeesSettledCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeesSettledCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeesSettledCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeesSettledCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllFeesSettledCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeesSettledCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeesSettledCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeesSettledCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllFeesSettledCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFeesSettledCrosschainRequestResponse struct {
	FeesSettledCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=feesSettledCrosschainRequest,proto3" json:"feesSettledCrosschainRequest"`
	Pagination                   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeesSettledCrosschainRequestResponse) Reset() {
	*m = QueryAllFeesSettledCrosschainRequestResponse{}
}
func (m *QueryAllFeesSettledCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllFeesSettledCrosschainRequestResponse) ProtoMessage() {}
func (*QueryAllFeesSettledCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{63}
}
func (m *QueryAllFeesSettledCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeesSettledCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeesSettledCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeesSettledCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeesSettledCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllFeesSettledCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeesSettledCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeesSettledCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeesSettledCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllFeesSettledCrosschainRequestResponse) GetFeesSettledCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.FeesSettledCrosschainRequest
	}
	return nil
}

func (m *QueryAllFeesSettledCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCompletedCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetCompletedCrosschainRequestRequest) Reset() {
	*m = QueryGetCompletedCrosschainRequestRequest{}
}
func (m *QueryGetCompletedCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCompletedCrosschainRequestRequest) ProtoMessage() {}
func (*QueryGetCompletedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{64}
}
func (m *QueryGetCompletedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCompletedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCompletedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCompletedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCompletedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetCompletedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCompletedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCompletedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCompletedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetCompletedCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetCompletedCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetCompletedCrosschainRequestResponse struct {
	CompletedCrosschainRequest CrosschainRequest `protobuf:"bytes,1,opt,name=completedCrosschainRequest,proto3" json:"completedCrosschainRequest"`
}

func (m *QueryGetCompletedCrosschainRequestResponse) Reset() {
	*m = QueryGetCompletedCrosschainRequestResponse{}
}
func (m *QueryGetCompletedCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCompletedCrosschainRequestResponse) ProtoMessage() {}
func (*QueryGetCompletedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{65}
}
func (m *QueryGetCompletedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCompletedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCompletedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCompletedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCompletedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetCompletedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCompletedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCompletedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCompletedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetCompletedCrosschainRequestResponse) GetCompletedCrosschainRequest() CrosschainRequest {
	if m != nil {
		return m.CompletedCrosschainRequest
	}
	return CrosschainRequest{}
}

type QueryAllCompletedCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCompletedCrosschainRequestRequest) Reset() {
	*m = QueryAllCompletedCrosschainRequestRequest{}
}
func (m *QueryAllCompletedCrosschainRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCompletedCrosschainRequestRequest) ProtoMessage() {}
func (*QueryAllCompletedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{66}
}
func (m *QueryAllCompletedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCompletedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCompletedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCompletedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCompletedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllCompletedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCompletedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCompletedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCompletedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllCompletedCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCompletedCrosschainRequestResponse struct {
	CompletedCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=completedCrosschainRequest,proto3" json:"completedCrosschainRequest"`
	Pagination                 *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCompletedCrosschainRequestResponse) Reset() {
	*m = QueryAllCompletedCrosschainRequestResponse{}
}
func (m *QueryAllCompletedCrosschainRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCompletedCrosschainRequestResponse) ProtoMessage() {}
func (*QueryAllCompletedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{67}
}
func (m *QueryAllCompletedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCompletedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCompletedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCompletedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCompletedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllCompletedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCompletedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCompletedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCompletedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllCompletedCrosschainRequestResponse) GetCompletedCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.CompletedCrosschainRequest
	}
	return nil
}

func (m *QueryAllCompletedCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValidCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetValidCrosschainAckRequestRequest) Reset() {
	*m = QueryGetValidCrosschainAckRequestRequest{}
}
func (m *QueryGetValidCrosschainAckRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidCrosschainAckRequestRequest) ProtoMessage()    {}
func (*QueryGetValidCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{68}
}
func (m *QueryGetValidCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetValidCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetValidCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetValidCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetValidCrosschainAckRequestResponse struct {
	ValidCrosschainAckRequest CrosschainAckRequest `protobuf:"bytes,1,opt,name=validCrosschainAckRequest,proto3" json:"validCrosschainAckRequest"`
}

func (m *QueryGetValidCrosschainAckRequestResponse) Reset() {
	*m = QueryGetValidCrosschainAckRequestResponse{}
}
func (m *QueryGetValidCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetValidCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetValidCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{69}
}
func (m *QueryGetValidCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetValidCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetValidCrosschainAckRequestResponse) GetValidCrosschainAckRequest() CrosschainAckRequest {
	if m != nil {
		return m.ValidCrosschainAckRequest
	}
	return CrosschainAckRequest{}
}

type QueryAllValidCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidCrosschainAckRequestRequest) Reset() {
	*m = QueryAllValidCrosschainAckRequestRequest{}
}
func (m *QueryAllValidCrosschainAckRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidCrosschainAckRequestRequest) ProtoMessage()    {}
func (*QueryAllValidCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{70}
}
func (m *QueryAllValidCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllValidCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllValidCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidCrosschainAckRequestResponse struct {
	ValidCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=validCrosschainAckRequests,proto3" json:"validCrosschainAckRequests"`
	Pagination                 *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidCrosschainAckRequestResponse) Reset() {
	*m = QueryAllValidCrosschainAckRequestResponse{}
}
func (m *QueryAllValidCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllValidCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllValidCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{71}
}
func (m *QueryAllValidCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllValidCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllValidCrosschainAckRequestResponse) GetValidCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.ValidCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllValidCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReadyToExecuteCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) Reset() {
	*m = QueryGetReadyToExecuteCrosschainAckRequestRequest{}
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetReadyToExecuteCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetReadyToExecuteCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{72}
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetReadyToExecuteCrosschainAckRequestResponse struct {
	ReadyToExecuteCrosschainAckRequest CrosschainAckRequest `protobuf:"bytes,1,opt,name=readyToExecuteCrosschainAckRequest,proto3" json:"readyToExecuteCrosschainAckRequest"`
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) Reset() {
	*m = QueryGetReadyToExecuteCrosschainAckRequestResponse{}
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetReadyToExecuteCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetReadyToExecuteCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{73}
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReadyToExecuteCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) GetReadyToExecuteCrosschainAckRequest() CrosschainAckRequest {
	if m != nil {
		return m.ReadyToExecuteCrosschainAckRequest
	}
	return CrosschainAckRequest{}
}

type QueryAllReadyToExecuteCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) Reset() {
	*m = QueryAllReadyToExecuteCrosschainAckRequestRequest{}
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllReadyToExecuteCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllReadyToExecuteCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{74}
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReadyToExecuteCrosschainAckRequestResponse struct {
	ReadyToExecuteCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=readyToExecuteCrosschainAckRequests,proto3" json:"readyToExecuteCrosschainAckRequests"`
	Pagination                          *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) Reset() {
	*m = QueryAllReadyToExecuteCrosschainAckRequestResponse{}
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllReadyToExecuteCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllReadyToExecuteCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{75}
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReadyToExecuteCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) GetReadyToExecuteCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.ReadyToExecuteCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExecutedCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetExecutedCrosschainAckRequestRequest) Reset() {
	*m = QueryGetExecutedCrosschainAckRequestRequest{}
}
func (m *QueryGetExecutedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetExecutedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetExecutedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{76}
}
func (m *QueryGetExecutedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetExecutedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetExecutedCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetExecutedCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetExecutedCrosschainAckRequestResponse struct {
	ExecutedCrosschainAckRequest CrosschainAckRequest `protobuf:"bytes,1,opt,name=executedCrosschainAckRequest,proto3" json:"executedCrosschainAckRequest"`
}

func (m *QueryGetExecutedCrosschainAckRequestResponse) Reset() {
	*m = QueryGetExecutedCrosschainAckRequestResponse{}
}
func (m *QueryGetExecutedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetExecutedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetExecutedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{77}
}
func (m *QueryGetExecutedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetExecutedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetExecutedCrosschainAckRequestResponse) GetExecutedCrosschainAckRequest() CrosschainAckRequest {
	if m != nil {
		return m.ExecutedCrosschainAckRequest
	}
	return CrosschainAckRequest{}
}

type QueryAllExecutedCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutedCrosschainAckRequestRequest) Reset() {
	*m = QueryAllExecutedCrosschainAckRequestRequest{}
}
func (m *QueryAllExecutedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllExecutedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllExecutedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{78}
}
func (m *QueryAllExecutedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllExecutedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllExecutedCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExecutedCrosschainAckRequestResponse struct {
	ExecutedCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=executedCrosschainAckRequests,proto3" json:"executedCrosschainAckRequests"`
	Pagination                    *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutedCrosschainAckRequestResponse) Reset() {
	*m = QueryAllExecutedCrosschainAckRequestResponse{}
}
func (m *QueryAllExecutedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllExecutedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllExecutedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{79}
}
func (m *QueryAllExecutedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllExecutedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllExecutedCrosschainAckRequestResponse) GetExecutedCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.ExecutedCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllExecutedCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFeesSettledCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetFeesSettledCrosschainAckRequestRequest) Reset() {
	*m = QueryGetFeesSettledCrosschainAckRequestRequest{}
}
func (m *QueryGetFeesSettledCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetFeesSettledCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetFeesSettledCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{80}
}
func (m *QueryGetFeesSettledCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeesSettledCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeesSettledCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetFeesSettledCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeesSettledCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetFeesSettledCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetFeesSettledCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetFeesSettledCrosschainAckRequestResponse struct {
	FeesSettledCrosschainAckRequest CrosschainAckRequest `protobuf:"bytes,1,opt,name=feesSettledCrosschainAckRequest,proto3" json:"feesSettledCrosschainAckRequest"`
}

func (m *QueryGetFeesSettledCrosschainAckRequestResponse) Reset() {
	*m = QueryGetFeesSettledCrosschainAckRequestResponse{}
}
func (m *QueryGetFeesSettledCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetFeesSettledCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetFeesSettledCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{81}
}
func (m *QueryGetFeesSettledCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeesSettledCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeesSettledCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetFeesSettledCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeesSettledCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeesSettledCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetFeesSettledCrosschainAckRequestResponse) GetFeesSettledCrosschainAckRequest() CrosschainAckRequest {
	if m != nil {
		return m.FeesSettledCrosschainAckRequest
	}
	return CrosschainAckRequest{}
}

type QueryAllFeesSettledCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeesSettledCrosschainAckRequestRequest) Reset() {
	*m = QueryAllFeesSettledCrosschainAckRequestRequest{}
}
func (m *QueryAllFeesSettledCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllFeesSettledCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllFeesSettledCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{82}
}
func (m *QueryAllFeesSettledCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeesSettledCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeesSettledCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllFeesSettledCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeesSettledCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllFeesSettledCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFeesSettledCrosschainAckRequestResponse struct {
	FeesSettledCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=feesSettledCrosschainAckRequests,proto3" json:"feesSettledCrosschainAckRequests"`
	Pagination                       *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeesSettledCrosschainAckRequestResponse) Reset() {
	*m = QueryAllFeesSettledCrosschainAckRequestResponse{}
}
func (m *QueryAllFeesSettledCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllFeesSettledCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllFeesSettledCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{83}
}
func (m *QueryAllFeesSettledCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeesSettledCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeesSettledCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllFeesSettledCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeesSettledCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeesSettledCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllFeesSettledCrosschainAckRequestResponse) GetFeesSettledCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.FeesSettledCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllFeesSettledCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCompletedCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetCompletedCrosschainAckRequestRequest) Reset() {
	*m = QueryGetCompletedCrosschainAckRequestRequest{}
}
func (m *QueryGetCompletedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCompletedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetCompletedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{84}
}
func (m *QueryGetCompletedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCompletedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCompletedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCompletedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCompletedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetCompletedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCompletedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCompletedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCompletedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetCompletedCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetCompletedCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetCompletedCrosschainAckRequestResponse struct {
	CompletedCrosschainAckRequest CrosschainAckRequest `protobuf:"bytes,1,opt,name=completedCrosschainAckRequest,proto3" json:"completedCrosschainAckRequest"`
}

func (m *QueryGetCompletedCrosschainAckRequestResponse) Reset() {
	*m = QueryGetCompletedCrosschainAckRequestResponse{}
}
func (m *QueryGetCompletedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCompletedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetCompletedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{85}
}
func (m *QueryGetCompletedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCompletedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCompletedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCompletedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCompletedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetCompletedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCompletedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCompletedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCompletedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetCompletedCrosschainAckRequestResponse) GetCompletedCrosschainAckRequest() CrosschainAckRequest {
	if m != nil {
		return m.CompletedCrosschainAckRequest
	}
	return CrosschainAckRequest{}
}

type QueryAllCompletedCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCompletedCrosschainAckRequestRequest) Reset() {
	*m = QueryAllCompletedCrosschainAckRequestRequest{}
}
func (m *QueryAllCompletedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCompletedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllCompletedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{86}
}
func (m *QueryAllCompletedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCompletedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCompletedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCompletedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCompletedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllCompletedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCompletedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCompletedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCompletedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllCompletedCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCompletedCrosschainAckRequestResponse struct {
	CompletedCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=completedCrosschainAckRequests,proto3" json:"completedCrosschainAckRequests"`
	Pagination                     *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCompletedCrosschainAckRequestResponse) Reset() {
	*m = QueryAllCompletedCrosschainAckRequestResponse{}
}
func (m *QueryAllCompletedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCompletedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllCompletedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{87}
}
func (m *QueryAllCompletedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCompletedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCompletedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCompletedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCompletedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllCompletedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCompletedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCompletedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCompletedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllCompletedCrosschainAckRequestResponse) GetCompletedCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.CompletedCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllCompletedCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.crosschain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.crosschain.QueryParamsResponse")
	proto.RegisterType((*QueryGetCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestRequest")
	proto.RegisterType((*QueryGetCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestResponse")
	proto.RegisterType((*QueryAllCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestRequest")
	proto.RegisterType((*QueryAllCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestResponse")
	proto.RegisterType((*QueryGetCrosschainRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestConfirmRequest")
	proto.RegisterType((*QueryGetCrosschainRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestConfirmResponse")
	proto.RegisterType((*QueryAllCrosschainRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestConfirmRequest")
	proto.RegisterType((*QueryAllCrosschainRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestConfirmResponse")
	proto.RegisterType((*QueryGetCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetCrosschainAckRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestConfirmRequest")
	proto.RegisterType((*QueryGetCrosschainAckRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestConfirmResponse")
	proto.RegisterType((*QueryAllCrosschainAckRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestConfirmRequest")
	proto.RegisterType((*QueryAllCrosschainAckRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestConfirmResponse")
	proto.RegisterType((*QueryGetCrosschainAckReceiptRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckReceiptRequest")
	proto.RegisterType((*QueryGetCrosschainAckReceiptResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckReceiptResponse")
	proto.RegisterType((*QueryAllCrosschainAckReceiptRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckReceiptRequest")
	proto.RegisterType((*QueryAllCrosschainAckReceiptResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckReceiptResponse")
	proto.RegisterType((*QueryGetRelayerConfigRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetRelayerConfigRequest")
	proto.RegisterType((*QueryGetRelayerConfigResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetRelayerConfigResponse")
	proto.RegisterType((*QueryAllRelayerConfigRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllRelayerConfigRequest")
	proto.RegisterType((*QueryAllRelayerConfigResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllRelayerConfigResponse")
	proto.RegisterType((*QueryGetBlockedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainRequestRequest")
	proto.RegisterType((*QueryGetBlockedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainRequestResponse")
	proto.RegisterType((*QueryAllBlockedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainRequestRequest")
	proto.RegisterType((*QueryAllBlockedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainRequestResponse")
	proto.RegisterType((*QueryGetBlockedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetBlockedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllBlockedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllBlockedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetIBCConfigRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetIBCConfigRequest")
	proto.RegisterType((*QueryGetIBCConfigResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetIBCConfigResponse")
	proto.RegisterType((*QueryGetExpiredCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainRequestRequest")
	proto.RegisterType((*QueryGetExpiredCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainRequestResponse")
	proto.RegisterType((*QueryAllExpiredCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainRequestRequest")
	proto.RegisterType((*QueryAllExpiredCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainRequestResponse")
	proto.RegisterType((*QueryGetExpiredCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetExpiredCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllExpiredCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllExpiredCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetValidCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetValidCrosschainRequestRequest")
	proto.RegisterType((*QueryGetValidCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetValidCrosschainRequestResponse")
	proto.RegisterType((*QueryAllValidCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllValidCrosschainRequestRequest")
	proto.RegisterType((*QueryAllValidCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllValidCrosschainRequestResponse")
	proto.RegisterType((*QueryGetNativeTransferedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetNativeTransferedCrosschainRequestRequest")
	proto.RegisterType((*QueryGetNativeTransferedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetNativeTransferedCrosschainRequestResponse")
	proto.RegisterType((*QueryAllNativeTransferedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllNativeTransferedCrosschainRequestRequest")
	proto.RegisterType((*QueryAllNativeTransferedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllNativeTransferedCrosschainRequestResponse")
	proto.RegisterType((*QueryGetReadyToExecuteCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetReadyToExecuteCrosschainRequestRequest")
	proto.RegisterType((*QueryGetReadyToExecuteCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetReadyToExecuteCrosschainRequestResponse")
	proto.RegisterType((*QueryAllReadyToExecuteCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllReadyToExecuteCrosschainRequestRequest")
	proto.RegisterType((*QueryAllReadyToExecuteCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllReadyToExecuteCrosschainRequestResponse")
	proto.RegisterType((*QueryGetExecutedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetExecutedCrosschainRequestRequest")
	proto.RegisterType((*QueryGetExecutedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetExecutedCrosschainRequestResponse")
	proto.RegisterType((*QueryAllExecutedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllExecutedCrosschainRequestRequest")
	proto.RegisterType((*QueryAllExecutedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllExecutedCrosschainRequestResponse")
	proto.RegisterType((*QueryGetFeesSettledCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetFeesSettledCrosschainRequestRequest")
	proto.RegisterType((*QueryGetFeesSettledCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetFeesSettledCrosschainRequestResponse")
	proto.RegisterType((*QueryAllFeesSettledCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllFeesSettledCrosschainRequestRequest")
	proto.RegisterType((*QueryAllFeesSettledCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllFeesSettledCrosschainRequestResponse")
	proto.RegisterType((*QueryGetCompletedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCompletedCrosschainRequestRequest")
	proto.RegisterType((*QueryGetCompletedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCompletedCrosschainRequestResponse")
	proto.RegisterType((*QueryAllCompletedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCompletedCrosschainRequestRequest")
	proto.RegisterType((*QueryAllCompletedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCompletedCrosschainRequestResponse")
	proto.RegisterType((*QueryGetValidCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetValidCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetValidCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetValidCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllValidCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllValidCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllValidCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllValidCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetReadyToExecuteCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetReadyToExecuteCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetReadyToExecuteCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetReadyToExecuteCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllReadyToExecuteCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllReadyToExecuteCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllReadyToExecuteCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllReadyToExecuteCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetExecutedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetExecutedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetExecutedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetExecutedCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllExecutedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllExecutedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllExecutedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllExecutedCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetFeesSettledCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetFeesSettledCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetFeesSettledCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetFeesSettledCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllFeesSettledCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllFeesSettledCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllFeesSettledCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllFeesSettledCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetCompletedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCompletedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetCompletedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCompletedCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllCompletedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCompletedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllCompletedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCompletedCrosschainAckRequestResponse")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/query.proto", fileDescriptor_c4da7a5ae2a512a6)
}

var fileDescriptor_c4da7a5ae2a512a6 = []byte{
	// 3035 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x9c, 0x5d, 0x6c, 0x14, 0xd7,
	0x15, 0xc7, 0xb9, 0xb3, 0x94, 0x88, 0x4b, 0x90, 0xca, 0x2d, 0x4a, 0xec, 0xc5, 0x18, 0x73, 0x81,
	0xc4, 0x4d, 0xc2, 0x6e, 0x31, 0xa9, 0x48, 0x82, 0x2a, 0x6a, 0x1c, 0x3e, 0xcc, 0xb7, 0xd7, 0x40,
	0x68, 0x5f, 0xdc, 0xf1, 0x78, 0xbc, 0xde, 0xb0, 0xde, 0x59, 0xcf, 0xae, 0x1d, 0x8c, 0xe3, 0x20,
	0x20, 0x34, 0x09, 0x10, 0x25, 0x15, 0x2f, 0x7d, 0xa8, 0xd4, 0x3c, 0x54, 0x91, 0x90, 0x50, 0x55,
	0x29, 0x55, 0xd4, 0x8f, 0x54, 0xa9, 0xaa, 0x3e, 0x20, 0xfa, 0xa1, 0x54, 0x7d, 0xa9, 0x78, 0x88,
	0x2a, 0x68, 0x2b, 0x55, 0xaa, 0x5a, 0xb5, 0x52, 0xd5, 0x4a, 0xad, 0xaa, 0x6a, 0xef, 0xdc, 0xf1,
	0xce, 0x78, 0xf6, 0x7e, 0xcc, 0xcc, 0xd9, 0xa5, 0xcd, 0x53, 0xbc, 0x3b, 0x77, 0xee, 0x39, 0xf7,
	0x77, 0xfe, 0x73, 0xe6, 0xdc, 0x9b, 0x3d, 0x60, 0xea, 0x3a, 0xb3, 0x75, 0xdb, 0xb5, 0xa6, 0xcc,
	0x52, 0x25, 0x6f, 0xb9, 0x4e, 0xad, 0xe6, 0xfd, 0x39, 0x33, 0x6b, 0xbb, 0xf3, 0xb9, 0xaa, 0xeb,
	0xd4, 0x1d, 0xb2, 0xcd, 0x1b, 0xc3, 0x3e, 0x58, 0x4e, 0x39, 0x17, 0xb8, 0x25, 0xd7, 0xbc, 0x25,
	0xbb, 0xbe, 0xe8, 0x14, 0x1d, 0x36, 0x28, 0xdf, 0xf8, 0xcb, 0xbb, 0x39, 0xdb, 0x53, 0x74, 0x9c,
	0x62, 0xd9, 0xce, 0x9b, 0xd5, 0x52, 0xde, 0xac, 0x54, 0x9c, 0xba, 0x59, 0x2f, 0x39, 0x95, 0x1a,
	0xbf, 0xfa, 0x84, 0xe5, 0xd4, 0xa6, 0x9d, 0x5a, 0x7e, 0xdc, 0xac, 0xd9, 0x9e, 0xcd, 0xfc, 0xdc,
	0x8e, 0x71, 0xbb, 0x6e, 0xee, 0xc8, 0x57, 0xcd, 0x62, 0xa9, 0xc2, 0x06, 0xf3, 0xb1, 0x5b, 0x04,
	0xae, 0x56, 0x4d, 0xd7, 0x9c, 0xf6, 0x27, 0xcc, 0x0b, 0x06, 0x35, 0xff, 0x1c, 0x73, 0xed, 0x99,
	0x59, 0xbb, 0x56, 0xe7, 0x37, 0xec, 0xd2, 0xbe, 0x61, 0xcc, 0x72, 0x2a, 0x93, 0x25, 0x77, 0x9a,
	0xdf, 0xb8, 0x53, 0x7d, 0xa3, 0x69, 0x9d, 0x5d, 0x66, 0x6d, 0x77, 0xac, 0x9b, 0x92, 0x5a, 0xb4,
	0xec, 0x52, 0xd5, 0xb7, 0xf8, 0xa4, 0xe0, 0x26, 0xd7, 0x2e, 0x9b, 0xf3, 0xb6, 0xeb, 0x99, 0x28,
	0x7a, 0x83, 0xe9, 0x7a, 0x4c, 0x46, 0x1a, 0x41, 0x38, 0xc1, 0x90, 0x16, 0x3c, 0x2f, 0xe8, 0x38,
	0xfe, 0x4c, 0xe8, 0xdb, 0x5a, 0xd5, 0xa9, 0xd4, 0x6c, 0x72, 0x18, 0xaf, 0xf2, 0xd0, 0x77, 0xa1,
	0x3e, 0xd4, 0xbf, 0x66, 0x60, 0x7b, 0x4e, 0x4b, 0x27, 0x39, 0x6f, 0x9a, 0xbd, 0x2b, 0x6f, 0x7f,
	0xbc, 0x69, 0x45, 0x81, 0x4f, 0x41, 0xe7, 0x70, 0x1f, 0xb3, 0x71, 0xc0, 0xae, 0x0f, 0x2d, 0x0d,
	0xe5, 0x0e, 0xf0, 0xff, 0x90, 0xad, 0x78, 0x6d, 0xcd, 0x99, 0x75, 0x2d, 0x7b, 0xa8, 0x71, 0x71,
	0x78, 0x82, 0xd9, 0x5d, 0x5d, 0x08, 0x7f, 0x49, 0x9e, 0xc2, 0xeb, 0x38, 0xbe, 0xe1, 0x09, 0xbb,
	0x52, 0x2f, 0x4d, 0x96, 0x6c, 0xb7, 0xcb, 0xe8, 0x43, 0xfd, 0x2b, 0x0b, 0xd1, 0x0b, 0xf4, 0x2e,
	0xc2, 0x9b, 0x25, 0x86, 0xf9, 0x52, 0xcb, 0x78, 0x9d, 0xb5, 0xfc, 0x62, 0x17, 0xea, 0xcb, 0xf4,
	0xaf, 0x19, 0x78, 0x46, 0x73, 0xd5, 0x91, 0xc9, 0x39, 0x80, 0xe8, 0xc4, 0xe4, 0x00, 0xc6, 0x4d,
	0xf1, 0x33, 0xd7, 0xd7, 0x0c, 0x3c, 0x9e, 0xf3, 0x9e, 0x94, 0x5c, 0xe3, 0x49, 0xc9, 0x79, 0x4f,
	0x27, 0x7f, 0x52, 0x72, 0x27, 0xcc, 0xa2, 0xed, 0xbb, 0x5a, 0x08, 0xdc, 0x4a, 0x5f, 0xe4, 0x50,
	0x07, 0xcb, 0x65, 0x21, 0xd4, 0xfd, 0x21, 0x63, 0x5e, 0x24, 0x1f, 0x53, 0x1a, 0xf3, 0xa6, 0x08,
	0xda, 0x5a, 0x02, 0xd9, 0xda, 0xd8, 0xff, 0x37, 0xc8, 0x0f, 0x11, 0x7e, 0x5c, 0xa8, 0x92, 0x21,
	0xef, 0x21, 0x6d, 0xa3, 0x4a, 0x49, 0x0f, 0x5e, 0x6d, 0x95, 0xcd, 0xd2, 0xf4, 0x41, 0xb3, 0x36,
	0xd5, 0x95, 0xe9, 0x43, 0xfd, 0x0f, 0x17, 0x9a, 0x5f, 0x10, 0x8a, 0x1f, 0x76, 0x5c, 0x6b, 0xca,
	0xae, 0xd5, 0x5d, 0xb3, 0xee, 0xb8, 0x5d, 0x2b, 0x99, 0xc1, 0xd0, 0x77, 0xf4, 0xdb, 0x08, 0xf7,
	0xab, 0x57, 0xc0, 0xa3, 0x74, 0x11, 0xe1, 0x2e, 0x4b, 0x30, 0x88, 0x4b, 0x64, 0x4f, 0xd2, 0x68,
	0xf1, 0x69, 0x78, 0xd0, 0x84, 0x66, 0xe8, 0x7d, 0x1f, 0x79, 0x2b, 0x3d, 0x3d, 0x70, 0xe4, 0xe1,
	0xa7, 0x66, 0x65, 0xe2, 0xa7, 0xe6, 0x1f, 0x7e, 0x58, 0xa4, 0xab, 0xd4, 0x0b, 0x4b, 0xa6, 0x03,
	0x61, 0x81, 0x7b, 0xa4, 0x2e, 0xe0, 0x2d, 0x51, 0x3d, 0x0e, 0x5a, 0x67, 0xa3, 0x39, 0xdf, 0xb4,
	0xce, 0x8e, 0xba, 0xd6, 0xb2, 0xd0, 0x86, 0xbe, 0x24, 0x03, 0x78, 0xbd, 0xb9, 0x74, 0x6b, 0x24,
	0xba, 0x2d, 0xaf, 0xd1, 0x3f, 0x20, 0xbc, 0x55, 0xee, 0x01, 0xc7, 0x3e, 0x8b, 0xd7, 0x5b, 0x2d,
	0xae, 0x73, 0xe2, 0xbb, 0x63, 0x13, 0x6f, 0x4e, 0xc1, 0x69, 0xb7, 0x9c, 0x1e, 0x8e, 0xf4, 0x34,
	0x27, 0x1d, 0x92, 0x58, 0x94, 0x34, 0xd4, 0x8b, 0x60, 0x89, 0xab, 0xd0, 0xde, 0x27, 0x84, 0xeb,
	0x6d, 0x84, 0x9f, 0x90, 0x09, 0x28, 0x9a, 0xa4, 0xda, 0xa3, 0x64, 0x80, 0xb7, 0xc3, 0x0f, 0x10,
	0x7e, 0x52, 0x6b, 0x29, 0x3c, 0x74, 0x57, 0x11, 0xde, 0x60, 0x89, 0xc7, 0x71, 0xf5, 0xec, 0x4d,
	0x11, 0xc2, 0x70, 0x3e, 0x92, 0x19, 0xa3, 0x7f, 0xf2, 0xe3, 0x20, 0x10, 0xdc, 0xff, 0x48, 0x1c,
	0xa0, 0x5e, 0x19, 0x97, 0x0d, 0x1e, 0x2b, 0xd5, 0x72, 0xb5, 0x63, 0x95, 0xe9, 0x58, 0xac, 0xe0,
	0x1e, 0xbe, 0x37, 0x91, 0xf0, 0xfd, 0xc1, 0x76, 0x3f, 0x7e, 0xb4, 0xfd, 0x38, 0xb2, 0x2f, 0x23,
	0x41, 0x6f, 0x79, 0x2d, 0x7c, 0x8f, 0x20, 0xf6, 0xcb, 0xae, 0xc9, 0xde, 0x26, 0xdc, 0x1f, 0x61,
	0xd6, 0x63, 0xd7, 0xd3, 0x65, 0x3d, 0x36, 0x85, 0x20, 0xeb, 0xb1, 0x6b, 0x9d, 0x78, 0x9b, 0x84,
	0xb8, 0x77, 0xe0, 0x6d, 0xf2, 0xc9, 0xe2, 0xfa, 0x0c, 0xee, 0xf1, 0xf5, 0x53, 0xf0, 0xb6, 0xe6,
	0xec, 0x99, 0x29, 0xfa, 0x40, 0xbb, 0xf0, 0x43, 0x56, 0x48, 0xbb, 0xfe, 0x47, 0x7a, 0x11, 0xe1,
	0x8d, 0x82, 0x5b, 0x39, 0x9b, 0xaf, 0xe0, 0xb5, 0x6e, 0xf0, 0x02, 0x8f, 0xc7, 0xd3, 0x9a, 0x50,
	0x42, 0x93, 0x72, 0x1a, 0xe1, 0x09, 0xe9, 0x24, 0xf7, 0x7e, 0xb0, 0x5c, 0x6e, 0xe9, 0x3d, 0x94,
	0x1c, 0xee, 0xf8, 0x6b, 0x8d, 0x1a, 0x12, 0xaf, 0x35, 0x03, 0xba, 0x56, 0xb8, 0x90, 0x2f, 0x36,
	0x37, 0x95, 0x7b, 0xcb, 0x8e, 0x75, 0xd6, 0x9e, 0xe8, 0xe8, 0xd1, 0xc7, 0xbb, 0x81, 0x2d, 0xa1,
	0xd8, 0x3e, 0xc7, 0x7a, 0x1e, 0x77, 0x8d, 0x0b, 0xc6, 0xf0, 0x70, 0xa6, 0xdd, 0xbf, 0x0b, 0xe7,
	0xa7, 0x33, 0xcd, 0x9d, 0xa0, 0x8a, 0x13, 0x94, 0xce, 0xfe, 0x1a, 0xd8, 0x97, 0x29, 0xd9, 0xbc,
	0x8c, 0xbb, 0x45, 0xbe, 0xd7, 0x80, 0x0e, 0x37, 0xc4, 0x06, 0xe0, 0xe4, 0xf8, 0xd5, 0x40, 0x3d,
	0x1b, 0x59, 0x73, 0x27, 0x77, 0x66, 0xef, 0x05, 0xaa, 0x51, 0xa9, 0x23, 0x9c, 0xff, 0x65, 0x84,
	0x37, 0x8c, 0x8b, 0xc7, 0x71, 0x19, 0x00, 0x6c, 0x28, 0x64, 0x56, 0x68, 0xbd, 0x59, 0x85, 0x6a,
	0xd0, 0x83, 0x12, 0xea, 0x7f, 0x50, 0xb3, 0x1a, 0xd4, 0x61, 0x75, 0x05, 0xe1, 0x1e, 0xc9, 0x2a,
	0x6a, 0x70, 0xbb, 0x2f, 0xa9, 0x19, 0x38, 0xd5, 0x66, 0x71, 0x97, 0xaf, 0x95, 0xe1, 0xbd, 0x43,
	0xa1, 0xb7, 0x0e, 0x7d, 0x1a, 0x77, 0xb7, 0xb8, 0xc6, 0x49, 0x3c, 0x8a, 0x1f, 0xaa, 0x3a, 0x6e,
	0x7d, 0xac, 0xe4, 0x2b, 0x77, 0x55, 0xe3, 0xe3, 0xf0, 0x44, 0x30, 0x2d, 0xef, 0x3b, 0x57, 0x2d,
	0xb9, 0x0f, 0x30, 0x2d, 0x8b, 0xed, 0x37, 0xd3, 0xb2, 0x2d, 0x18, 0x03, 0x95, 0x96, 0x45, 0xf3,
	0x07, 0xd3, 0xb2, 0x8a, 0x13, 0x94, 0xda, 0xff, 0x12, 0x48, 0xcb, 0x29, 0xd9, 0x64, 0xda, 0xc9,
	0xa6, 0x3d, 0x49, 0x39, 0xb2, 0xe2, 0x07, 0x95, 0x94, 0xa5, 0x8e, 0x04, 0x92, 0xb2, 0x2d, 0x1e,
	0x07, 0x98, 0x94, 0x25, 0x56, 0x82, 0x49, 0x59, 0x83, 0x5e, 0x3b, 0x92, 0xb2, 0x0e, 0xab, 0x46,
	0x52, 0x96, 0xac, 0x02, 0x32, 0x29, 0xcb, 0xcc, 0xc0, 0xa9, 0x76, 0x01, 0x6f, 0xf3, 0xb5, 0x72,
	0xda, 0x2c, 0x97, 0x3a, 0x9b, 0x40, 0xdf, 0x41, 0xf8, 0x31, 0x95, 0x75, 0x0e, 0x7e, 0x0e, 0x3f,
	0x32, 0xd7, 0x72, 0x04, 0x50, 0xf2, 0x14, 0xcc, 0x4e, 0x1d, 0xce, 0x67, 0xb0, 0x5c, 0x96, 0xf3,
	0x81, 0x52, 0xe4, 0x1f, 0x7d, 0x26, 0x12, 0x8b, 0x1a, 0x4c, 0x32, 0xed, 0x63, 0x02, 0x9a, 0x32,
	0x3f, 0xe7, 0xc7, 0xff, 0x98, 0x59, 0x2f, 0xcd, 0xd9, 0x27, 0x5d, 0xb3, 0x52, 0x9b, 0xb4, 0x3b,
	0xfd, 0x26, 0xff, 0x09, 0xc2, 0x3b, 0x62, 0x38, 0xc2, 0xf9, 0x5f, 0x47, 0x78, 0x73, 0x45, 0x35,
	0x1a, 0x48, 0x9f, 0x6a, 0x43, 0xf4, 0x3c, 0x87, 0x39, 0x58, 0x2e, 0x6b, 0xc3, 0x84, 0x52, 0xed,
	0x35, 0x83, 0x03, 0xd4, 0x33, 0x1e, 0x13, 0x60, 0xa6, 0x23, 0x00, 0xe1, 0x74, 0xfd, 0x2a, 0xc2,
	0xb9, 0xe6, 0x39, 0x8f, 0x39, 0x31, 0x7f, 0xd2, 0xd9, 0x77, 0xce, 0xb6, 0x66, 0xeb, 0x76, 0x47,
	0x55, 0xfd, 0x01, 0xc2, 0x79, 0x6d, 0x37, 0x78, 0x48, 0x5e, 0x47, 0x78, 0x93, 0x2b, 0x1f, 0x0b,
	0xa4, 0x68, 0x95, 0x19, 0x7a, 0x8e, 0x43, 0x64, 0x07, 0x48, 0x5a, 0x10, 0xa1, 0xd4, 0x7c, 0xc5,
	0xe0, 0xe0, 0x74, 0x4c, 0xc7, 0x02, 0x97, 0xe9, 0x00, 0x38, 0x38, 0x1d, 0xbf, 0x12, 0xdc, 0xdf,
	0x30, 0x63, 0x9d, 0x4d, 0xcb, 0x37, 0x11, 0xfe, 0xac, 0x86, 0x03, 0xcd, 0xc3, 0x1d, 0x5b, 0x34,
	0x08, 0x48, 0xb3, 0x62, 0x03, 0xd4, 0x0d, 0xee, 0x77, 0x14, 0xac, 0xa0, 0x74, 0xfa, 0x37, 0x9f,
	0x8f, 0xdc, 0xa8, 0x1e, 0x9f, 0x4c, 0x5b, 0xf9, 0xc0, 0x89, 0xf2, 0x62, 0x60, 0x7b, 0xb3, 0xdf,
	0xb6, 0x6b, 0xa3, 0x76, 0xbd, 0x5e, 0xee, 0xb0, 0x30, 0xdf, 0x43, 0xf8, 0x29, 0x3d, 0x1f, 0x38,
	0xfb, 0x4b, 0x08, 0xf7, 0x4c, 0x4a, 0x06, 0x02, 0xe9, 0x53, 0x6a, 0x83, 0xce, 0x36, 0xf7, 0x3a,
	0x3a, 0xe0, 0xa0, 0x54, 0xfa, 0x6f, 0x1f, 0x96, 0xd2, 0xae, 0x3e, 0xac, 0x4c, 0xbb, 0x61, 0x41,
	0xfe, 0x7c, 0x66, 0x29, 0x87, 0x0d, 0x39, 0xd3, 0xd5, 0xb2, 0xdd, 0xe9, 0x2c, 0x7a, 0x2b, 0xf8,
	0xeb, 0x07, 0x89, 0x07, 0x9c, 0xfe, 0x2b, 0x38, 0x6b, 0x09, 0x47, 0x01, 0xe9, 0x54, 0x62, 0x81,
	0xd6, 0x9a, 0x39, 0x4d, 0xcd, 0x0b, 0x4a, 0xa3, 0x7f, 0x0f, 0xfe, 0x32, 0x21, 0x3d, 0xa3, 0x4c,
	0x7b, 0x19, 0x81, 0x56, 0xaa, 0xfd, 0x82, 0x1d, 0x78, 0x27, 0x8f, 0xac, 0x6e, 0x05, 0x5e, 0xf4,
	0x12, 0x37, 0x38, 0xfd, 0x0b, 0xb8, 0x7b, 0x4e, 0x34, 0x08, 0xee, 0xb4, 0x4a, 0x6c, 0x23, 0xf8,
	0xae, 0x57, 0x42, 0x83, 0x52, 0xe8, 0x3f, 0x03, 0xef, 0x7a, 0x35, 0xa2, 0x8b, 0x08, 0x67, 0x85,
	0xfe, 0x03, 0x9e, 0x52, 0x49, 0x8c, 0x80, 0xfe, 0x82, 0x64, 0x87, 0x6a, 0x1f, 0xd3, 0x49, 0xb5,
	0xde, 0x46, 0x78, 0x20, 0x8e, 0x3f, 0x3c, 0x26, 0x5f, 0x43, 0x98, 0xba, 0xca, 0xe1, 0x70, 0x02,
	0xd6, 0x30, 0x46, 0x17, 0x9a, 0xdb, 0x76, 0x7d, 0xb2, 0x50, 0x92, 0xbe, 0x61, 0x70, 0x8e, 0x9a,
	0xd6, 0x39, 0xc7, 0x1b, 0x08, 0x6f, 0x51, 0x2f, 0x0d, 0x50, 0xe4, 0x3a, 0xd6, 0xe0, 0xd4, 0xfe,
	0x5a, 0xe8, 0xf8, 0x7e, 0x79, 0x39, 0xdd, 0x49, 0x9d, 0xbf, 0x1f, 0xa8, 0x72, 0xe5, 0x9e, 0x84,
	0x4e, 0xc7, 0xc5, 0x03, 0xe1, 0xb4, 0x2d, 0x35, 0x13, 0x2c, 0x74, 0x75, 0x08, 0x42, 0xe9, 0xf9,
	0xa2, 0xd1, 0x2c, 0x74, 0xb5, 0x78, 0xbd, 0x86, 0xf0, 0x46, 0xd9, 0x42, 0x00, 0x35, 0x2c, 0xb7,
	0x03, 0xa7, 0xde, 0xab, 0x81, 0xa3, 0xaf, 0x96, 0xc5, 0x7e, 0x27, 0x05, 0xfc, 0x61, 0xe0, 0x00,
	0x4c, 0xe9, 0x0c, 0x8f, 0xc9, 0x35, 0x84, 0x37, 0x4d, 0xca, 0xc7, 0xc2, 0xc9, 0x58, 0x65, 0x29,
	0x78, 0x06, 0xa6, 0x49, 0x13, 0x4a, 0xcc, 0x57, 0x03, 0x67, 0x60, 0xba, 0xec, 0xde, 0x44, 0xb8,
	0x4f, 0xb1, 0x22, 0x40, 0x49, 0x2b, 0x4d, 0xc1, 0xa9, 0xfa, 0xf5, 0x40, 0x26, 0x6c, 0xb1, 0x3d,
	0xe8, 0xa4, 0xa6, 0xbf, 0x8f, 0xf0, 0x76, 0x4d, 0x57, 0x02, 0x59, 0xc6, 0x92, 0x8d, 0x84, 0xd3,
	0xb3, 0xdc, 0x0e, 0x9d, 0x6b, 0xe6, 0x47, 0x2d, 0x8a, 0x50, 0x5a, 0x7e, 0xd5, 0xe0, 0xcc, 0xd4,
	0x86, 0x39, 0xb3, 0x37, 0x10, 0xee, 0x95, 0xae, 0x05, 0x50, 0xc7, 0x0a, 0x43, 0x60, 0x2a, 0x1e,
	0xf8, 0xe5, 0x04, 0xfe, 0x14, 0xc3, 0x40, 0xbe, 0x87, 0xf0, 0x2a, 0xaf, 0xb9, 0x93, 0x3c, 0xab,
	0xb9, 0x80, 0x68, 0xb7, 0x69, 0xf6, 0xb9, 0x24, 0xb7, 0x7a, 0x7e, 0xd1, 0x5d, 0x97, 0x7e, 0xfd,
	0xbb, 0x1b, 0xc6, 0x0e, 0x92, 0xe7, 0x6d, 0xc0, 0xdb, 0xfd, 0x49, 0xfc, 0xcf, 0x82, 0xe6, 0x61,
	0xf2, 0x96, 0x81, 0xd7, 0xb5, 0xd8, 0x10, 0xc7, 0x71, 0x45, 0xd2, 0xb9, 0x9a, 0x3d, 0x98, 0x7e,
	0x22, 0xbe, 0xc2, 0x22, 0x5b, 0xa1, 0x49, 0xc6, 0xb4, 0x57, 0x18, 0x6d, 0x64, 0xce, 0x2f, 0x84,
	0x0e, 0x7e, 0x16, 0xf3, 0x0b, 0x91, 0xe3, 0x9d, 0x45, 0xf2, 0x67, 0x84, 0xd7, 0x47, 0xdc, 0x18,
	0x2c, 0x97, 0xe3, 0x41, 0x91, 0x74, 0x9e, 0xc6, 0x83, 0x22, 0xeb, 0x2a, 0xa5, 0x43, 0x0c, 0xca,
	0x17, 0xc8, 0xee, 0x14, 0x50, 0xc8, 0x1d, 0x03, 0x77, 0x89, 0xda, 0xe2, 0xc8, 0xb1, 0xb4, 0x01,
	0x0c, 0x37, 0xa1, 0x64, 0x8f, 0x83, 0xcd, 0xc7, 0x11, 0x5c, 0x47, 0x8c, 0xc1, 0x15, 0x44, 0x2e,
	0xa1, 0x14, 0x14, 0xfc, 0x8e, 0x73, 0x1d, 0x89, 0xe4, 0x17, 0x96, 0x9a, 0x5b, 0x16, 0xf3, 0x0b,
	0xc1, 0x7e, 0xa2, 0x45, 0xf2, 0x43, 0x03, 0x6f, 0x10, 0xf9, 0xdc, 0x10, 0xd1, 0xb1, 0xb4, 0xb1,
	0x4f, 0xc3, 0x53, 0xa3, 0xd7, 0x92, 0x2e, 0x30, 0x9c, 0xb3, 0xa4, 0xf6, 0x00, 0x60, 0x92, 0x6f,
	0x1a, 0xc1, 0x67, 0x2f, 0xd0, 0xbb, 0x76, 0x28, 0xb1, 0x6c, 0x22, 0xaf, 0xc1, 0xec, 0x61, 0x90,
	0xb9, 0x38, 0xae, 0x0a, 0xc3, 0x35, 0x45, 0x26, 0x93, 0xe0, 0x0a, 0xfc, 0x8b, 0x07, 0xf9, 0x85,
	0x50, 0x2d, 0xb3, 0xc8, 0x3e, 0x17, 0xa2, 0xd9, 0xe9, 0x5f, 0x08, 0x3f, 0xda, 0xca, 0xa1, 0x86,
	0xb6, 0x0e, 0x25, 0xd6, 0x42, 0x4a, 0x48, 0x8a, 0x86, 0x47, 0x7a, 0x80, 0x41, 0x1a, 0x24, 0x7b,
	0x52, 0x42, 0x22, 0x77, 0x43, 0x4f, 0x57, 0xb4, 0xcb, 0x6a, 0x04, 0x20, 0xb4, 0xcb, 0x1e, 0xb0,
	0x02, 0xe4, 0x94, 0x9c, 0xc7, 0x0d, 0x2f, 0x67, 0x5d, 0x47, 0xe4, 0x0d, 0x94, 0x12, 0x49, 0xf3,
	0x51, 0xd3, 0xd2, 0x8f, 0x2c, 0x75, 0xfd, 0xdc, 0xc0, 0xbd, 0x12, 0xef, 0x1b, 0x0a, 0x1b, 0x01,
	0x50, 0x45, 0x1a, 0xbe, 0x7a, 0x9d, 0x7f, 0xf4, 0x92, 0xc7, 0xf7, 0x65, 0x72, 0xfe, 0xc1, 0xd1,
	0x25, 0xef, 0x46, 0x73, 0x99, 0xd7, 0x39, 0x95, 0x32, 0x97, 0x05, 0xbb, 0xcd, 0xd2, 0xe6, 0xb2,
	0x50, 0x27, 0x19, 0x9d, 0x65, 0xd4, 0x1c, 0x32, 0x9d, 0x9c, 0x1a, 0x9b, 0x90, 0xd3, 0x59, 0xd6,
	0x5d, 0xb8, 0x18, 0xfc, 0x5a, 0x91, 0xd2, 0xd8, 0x18, 0x80, 0x94, 0x96, 0x9c, 0x95, 0xa2, 0xeb,
	0x0e, 0x22, 0xa5, 0x79, 0x6a, 0xf8, 0x3d, 0xc2, 0x6b, 0x43, 0xbd, 0x57, 0x64, 0x28, 0x66, 0x4c,
	0x5b, 0xf5, 0x9d, 0x65, 0x9f, 0x4f, 0x37, 0x09, 0x5f, 0xe5, 0x30, 0x5b, 0xe5, 0x10, 0x19, 0xd4,
	0x5e, 0x65, 0xf8, 0x5f, 0xd7, 0xc9, 0x2f, 0xf0, 0x5e, 0xbd, 0x45, 0xf2, 0x31, 0xc2, 0x9f, 0x0e,
	0x19, 0x69, 0x84, 0x77, 0x28, 0x66, 0x48, 0xd2, 0x2f, 0x55, 0xd4, 0x3e, 0x47, 0xf7, 0xb0, 0xa5,
	0x3e, 0x4b, 0x76, 0x25, 0x5c, 0x2a, 0xb9, 0x65, 0xe0, 0x2e, 0x51, 0xc7, 0x54, 0xec, 0x32, 0x5a,
	0xd1, 0xee, 0x15, 0xbb, 0x8c, 0x56, 0xb5, 0x72, 0x51, 0x87, 0x2d, 0xbf, 0x44, 0x8a, 0xda, 0xcb,
	0xe7, 0x5d, 0x2e, 0x63, 0x09, 0xb7, 0x59, 0xd7, 0x0c, 0xbc, 0x41, 0xe4, 0x55, 0x92, 0x42, 0x19,
	0x94, 0x98, 0x46, 0xf3, 0x1b, 0x3d, 0xcc, 0x88, 0xed, 0x23, 0x43, 0x00, 0xc4, 0xc8, 0x07, 0xad,
	0x68, 0x04, 0xea, 0xdf, 0x91, 0xb4, 0xf1, 0x8e, 0x56, 0x78, 0x05, 0xc8, 0x29, 0x39, 0x93, 0x39,
	0xc6, 0xa4, 0x4a, 0x2a, 0x69, 0x98, 0x24, 0xa8, 0x8a, 0xbf, 0x6e, 0xe0, 0x5e, 0x89, 0x7f, 0x49,
	0x4a, 0x17, 0x68, 0x82, 0x7a, 0x6d, 0x6a, 0xf4, 0x38, 0x23, 0x38, 0x4c, 0x0e, 0x00, 0x11, 0x24,
	0x3f, 0x43, 0x78, 0xf5, 0x52, 0x0f, 0x18, 0xd9, 0x13, 0x33, 0xe8, 0xcb, 0x3b, 0xcb, 0xb2, 0x5f,
	0x4c, 0x3e, 0x01, 0x5f, 0xe1, 0x6e, 0xb6, 0xc2, 0xcf, 0x93, 0x9d, 0xda, 0x2b, 0x2c, 0x8d, 0x5b,
	0xc1, 0x24, 0x2b, 0xea, 0x7f, 0x8a, 0x9d, 0x64, 0x15, 0xcd, 0x5b, 0xb1, 0x93, 0xac, 0xaa, 0x31,
	0x2b, 0x41, 0x92, 0xe5, 0x5d, 0x2b, 0x69, 0x92, 0xac, 0xc8, 0xab, 0x24, 0x49, 0x16, 0x94, 0x98,
	0x46, 0x2b, 0x5b, 0x82, 0x24, 0x2b, 0x26, 0xc6, 0x92, 0xac, 0xa4, 0x2b, 0x29, 0x76, 0x92, 0x55,
	0x37, 0x56, 0xc5, 0x4e, 0xb2, 0x1a, 0x4d, 0x53, 0x09, 0x92, 0x6c, 0x0b, 0x26, 0x09, 0x93, 0xac,
	0xc4, 0xbf, 0x24, 0x49, 0x16, 0x9a, 0xa0, 0x5e, 0xdb, 0x59, 0x82, 0x24, 0x2b, 0x27, 0x48, 0xbe,
	0x65, 0xe0, 0x47, 0x5a, 0x77, 0x17, 0x91, 0x23, 0x31, 0x15, 0x20, 0x6d, 0x8b, 0xca, 0x1e, 0x05,
	0x9a, 0x8d, 0x83, 0x98, 0x66, 0x20, 0x8a, 0xc4, 0xd6, 0x06, 0xc1, 0x7e, 0xa0, 0x94, 0x34, 0x1d,
	0x5d, 0x36, 0x70, 0x77, 0x6b, 0x8f, 0x1a, 0xe2, 0x39, 0x12, 0x33, 0xd2, 0x80, 0xa4, 0x94, 0xcd,
	0x61, 0x09, 0x76, 0x42, 0x22, 0x52, 0xe4, 0x57, 0x06, 0xde, 0xac, 0x6c, 0xea, 0x21, 0x2f, 0xc4,
	0x8c, 0xb4, 0x6e, 0x8f, 0x52, 0xf6, 0x0c, 0xfc, 0xc4, 0x9c, 0xd1, 0x3c, 0x63, 0x54, 0x23, 0x33,
	0xda, 0x8c, 0xbc, 0x26, 0xa2, 0xb1, 0xfa, 0xd2, 0xe4, 0x49, 0x95, 0xf5, 0x1d, 0x03, 0x6f, 0x55,
	0x3a, 0xda, 0x10, 0xd9, 0x0b, 0x31, 0x65, 0xd1, 0x1e, 0xac, 0x71, 0xda, 0xba, 0xe8, 0x29, 0x86,
	0xf5, 0x38, 0x39, 0x0a, 0x8a, 0x95, 0xdc, 0x31, 0xf0, 0x26, 0x45, 0x37, 0x0e, 0x39, 0x15, 0xfb,
	0x14, 0x41, 0xa7, 0xb1, 0x28, 0x7b, 0x1a, 0x7a, 0x5a, 0x4e, 0xea, 0x1c, 0x23, 0xe5, 0x92, 0x6a,
	0x8c, 0x3d, 0xbc, 0x39, 0x31, 0x3f, 0x56, 0x77, 0xc6, 0xf8, 0xef, 0x79, 0x92, 0xea, 0xef, 0xa6,
	0x81, 0xa9, 0xc2, 0xcb, 0x86, 0xfa, 0x4e, 0xc5, 0x3e, 0xaa, 0x80, 0xe7, 0xa9, 0xdf, 0x84, 0x45,
	0x4f, 0x32, 0x9e, 0xc7, 0xc8, 0x11, 0x48, 0x9e, 0x8d, 0x67, 0xb5, 0x5b, 0xd8, 0x5e, 0x43, 0xe2,
	0x17, 0xdd, 0xf2, 0xee, 0xa0, 0xec, 0x09, 0xb8, 0x09, 0x39, 0x96, 0x2a, 0xc3, 0xf2, 0x22, 0x99,
	0x8a, 0x51, 0x3e, 0x78, 0x73, 0x26, 0x95, 0xd7, 0x5b, 0x06, 0xee, 0x11, 0xfa, 0xd5, 0x10, 0x56,
	0xfc, 0xc2, 0x1b, 0x92, 0x9a, 0x4e, 0xbf, 0x14, 0x3d, 0xc2, 0xa8, 0xed, 0x27, 0xcf, 0x43, 0x50,
	0x23, 0x3f, 0x32, 0x70, 0x8f, 0xac, 0xfb, 0x85, 0xc4, 0xad, 0xbc, 0x35, 0x5a, 0x78, 0xb2, 0xa3,
	0xa0, 0x73, 0x72, 0x2e, 0x75, 0xc6, 0xa5, 0x42, 0xca, 0xda, 0x5c, 0x26, 0x6d, 0xbb, 0x36, 0x56,
	0xf3, 0xe6, 0x4d, 0xaa, 0xa8, 0x6f, 0x18, 0x78, 0x93, 0xcc, 0xbd, 0x86, 0xa8, 0xe2, 0x96, 0xde,
	0xe0, 0x08, 0x35, 0x3b, 0x9c, 0xe8, 0x09, 0x86, 0xf0, 0x10, 0x39, 0x08, 0x85, 0x90, 0x7c, 0xd7,
	0xc0, 0x59, 0x71, 0xe3, 0x0a, 0x89, 0x9b, 0x53, 0x94, 0x9d, 0x37, 0xd9, 0x11, 0xc0, 0x19, 0x39,
	0x95, 0x19, 0x46, 0xe5, 0x2c, 0x29, 0xe9, 0xff, 0x2f, 0x0a, 0x7f, 0xd2, 0xa4, 0xaa, 0xba, 0x61,
	0xe0, 0x8d, 0x62, 0xcf, 0x1a, 0x9a, 0x8a, 0x9b, 0x57, 0x80, 0xc9, 0x69, 0xf5, 0x23, 0xd1, 0xa3,
	0x8c, 0xdc, 0x01, 0xb2, 0x0f, 0x84, 0x5c, 0x43, 0x4c, 0xdd, 0xc2, 0x1e, 0x93, 0xd8, 0x2f, 0x3c,
	0x55, 0x8b, 0x4c, 0xec, 0x17, 0x9e, 0xb2, 0xfd, 0x25, 0x41, 0x8a, 0x8a, 0x6c, 0x7e, 0x12, 0x9c,
	0x37, 0xbc, 0x6d, 0xe0, 0x1e, 0xa1, 0x6f, 0x49, 0x5e, 0x7a, 0xb0, 0xe4, 0x74, 0x1a, 0x87, 0x12,
	0x28, 0x49, 0x46, 0x8e, 0xdc, 0x95, 0x94, 0x99, 0x01, 0x49, 0x9d, 0x01, 0xaa, 0xaf, 0xa3, 0x84,
	0xbe, 0xd4, 0x86, 0x99, 0x39, 0xaa, 0x0b, 0x0c, 0xd5, 0x3c, 0x79, 0x09, 0xa4, 0xd8, 0x4c, 0xa0,
	0xb7, 0xf7, 0x0d, 0xbc, 0x4d, 0xed, 0x6f, 0x43, 0x78, 0x67, 0x80, 0xea, 0xed, 0x94, 0x7c, 0x63,
	0xf5, 0xf9, 0xd0, 0x33, 0x8c, 0x6f, 0x81, 0x9c, 0x80, 0xe6, 0x4b, 0x7e, 0xdc, 0xb2, 0x3a, 0x0d,
	0xe8, 0xb1, 0x90, 0xba, 0x04, 0x8f, 0x92, 0x1a, 0x05, 0x9d, 0x93, 0x33, 0x7a, 0x89, 0x31, 0x9a,
	0x21, 0x4e, 0xaa, 0x1a, 0x35, 0x81, 0xf6, 0x1a, 0xe5, 0x98, 0xcc, 0xc3, 0x24, 0xe5, 0x18, 0x38,
	0x45, 0xcd, 0x3e, 0x9c, 0x04, 0xe5, 0x98, 0x82, 0x22, 0xf9, 0x85, 0xa8, 0x5a, 0x0d, 0x88, 0xec,
	0x14, 0x44, 0x71, 0x1e, 0x25, 0x74, 0x1a, 0x7a, 0xda, 0xc4, 0xbf, 0xb3, 0x14, 0xd5, 0xac, 0x09,
	0xe4, 0x76, 0xd3, 0xc0, 0x54, 0xe1, 0x68, 0x92, 0xe3, 0x8a, 0x76, 0x20, 0xd5, 0xef, 0x97, 0x49,
	0x70, 0x5c, 0xa1, 0x81, 0x94, 0xfc, 0xb4, 0x75, 0x4d, 0x1b, 0x50, 0xde, 0x68, 0xfa, 0xda, 0x3d,
	0x0a, 0xe9, 0x24, 0xec, 0xa4, 0x89, 0x4f, 0xc8, 0x5a, 0x56, 0xb6, 0x09, 0x24, 0xf7, 0x8e, 0x81,
	0xfb, 0xa4, 0x3e, 0x36, 0x04, 0x37, 0x9a, 0xbe, 0x96, 0x4f, 0x49, 0x52, 0xb7, 0xa5, 0x85, 0x8e,
	0x30, 0x92, 0x87, 0xc9, 0x30, 0x18, 0xc9, 0xbd, 0x27, 0x6f, 0xdf, 0xeb, 0x45, 0x1f, 0xdd, 0xeb,
	0x45, 0xbf, 0xbd, 0xd7, 0x8b, 0xde, 0xbe, 0xdf, 0xbb, 0xe2, 0xa3, 0xfb, 0xbd, 0x2b, 0x7e, 0x73,
	0xbf, 0x77, 0xc5, 0x97, 0x9f, 0x2b, 0x96, 0xea, 0x53, 0xb3, 0xe3, 0x39, 0xcb, 0x51, 0xfc, 0x36,
	0xef, 0x5c, 0xd0, 0x60, 0x7d, 0xbe, 0x6a, 0xd7, 0xc6, 0x57, 0xb1, 0x91, 0x3b, 0xff, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x0b, 0xde, 0x06, 0xf7, 0xf1, 0x6e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of CrosschainRequest items.
	CrosschainRequest(ctx context.Context, in *QueryGetCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestResponse, error)
	CrosschainRequestAll(ctx context.Context, in *QueryAllCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestResponse, error)
	// Queries a list of CrosschainRequestConfirm items.
	CrosschainRequestConfirm(ctx context.Context, in *QueryGetCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestConfirmResponse, error)
	CrosschainRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestConfirmResponse, error)
	// Queries a list of CrosschainAckRequest items.
	CrosschainAckRequest(ctx context.Context, in *QueryGetCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestResponse, error)
	CrosschainAckRequestAll(ctx context.Context, in *QueryAllCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestResponse, error)
	// Queries a list of CrosschainAckRequestConfirm items.
	CrosschainAckRequestConfirm(ctx context.Context, in *QueryGetCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestConfirmResponse, error)
	CrosschainAckRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestConfirmResponse, error)
	// Queries a list of CrosschainAckReceipt items.
	CrosschainAckReceipt(ctx context.Context, in *QueryGetCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckReceiptResponse, error)
	CrosschainAckReceiptAll(ctx context.Context, in *QueryAllCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckReceiptResponse, error)
	// Queries a list of RelayerConfig items.
	RelayerConfig(ctx context.Context, in *QueryGetRelayerConfigRequest, opts ...grpc.CallOption) (*QueryGetRelayerConfigResponse, error)
	RelayerConfigAll(ctx context.Context, in *QueryAllRelayerConfigRequest, opts ...grpc.CallOption) (*QueryAllRelayerConfigResponse, error)
	// Queries a list of BlockedCrosschainRequest items.
	BlockedCrosschainRequest(ctx context.Context, in *QueryGetBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainRequestResponse, error)
	BlockedCrosschainRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainRequestResponse, error)
	// Queries a list of BlockedCrosschainAckRequest items.
	BlockedCrosschainAckRequest(ctx context.Context, in *QueryGetBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainAckRequestResponse, error)
	BlockedCrosschainAckRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainAckRequestResponse, error)
	IBCConfig(ctx context.Context, in *QueryGetIBCConfigRequest, opts ...grpc.CallOption) (*QueryGetIBCConfigResponse, error)
	// Queries a list of ExpiredCrosschainRequest items.
	ExpiredCrosschainRequest(ctx context.Context, in *QueryGetExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainRequestResponse, error)
	ExpiredCrosschainRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainRequestResponse, error)
	// Queries a list of ExpiredCrosschainAckRequest items.
	ExpiredCrosschainAckRequest(ctx context.Context, in *QueryGetExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainAckRequestResponse, error)
	ExpiredCrosschainAckRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainAckRequestResponse, error)
	// Queries a list of ValidCrosschainRequest items.
	ValidCrosschainRequest(ctx context.Context, in *QueryGetValidCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetValidCrosschainRequestResponse, error)
	ValidCrosschainRequestAll(ctx context.Context, in *QueryAllValidCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllValidCrosschainRequestResponse, error)
	// Queries a list of NativeTransferedCrosschainRequest items.
	NativeTransferedCrosschainRequest(ctx context.Context, in *QueryGetNativeTransferedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetNativeTransferedCrosschainRequestResponse, error)
	NativeTransferedCrosschainRequestAll(ctx context.Context, in *QueryAllNativeTransferedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllNativeTransferedCrosschainRequestResponse, error)
	// Queries a list of ReadyToExecuteCrosschainRequest items.
	ReadyToExecuteCrosschainRequest(ctx context.Context, in *QueryGetReadyToExecuteCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetReadyToExecuteCrosschainRequestResponse, error)
	ReadyToExecuteCrosschainRequestAll(ctx context.Context, in *QueryAllReadyToExecuteCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllReadyToExecuteCrosschainRequestResponse, error)
	// Queries a list of ExecutedCrosschainRequest items.
	ExecutedCrosschainRequest(ctx context.Context, in *QueryGetExecutedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetExecutedCrosschainRequestResponse, error)
	ExecutedCrosschainRequestAll(ctx context.Context, in *QueryAllExecutedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllExecutedCrosschainRequestResponse, error)
	// Queries a list of FeesSettledCrosschainRequest items.
	FeesSettledCrosschainRequest(ctx context.Context, in *QueryGetFeesSettledCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetFeesSettledCrosschainRequestResponse, error)
	FeesSettledCrosschainRequestAll(ctx context.Context, in *QueryAllFeesSettledCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllFeesSettledCrosschainRequestResponse, error)
	// Queries a list of CompletedCrosschainRequest items.
	CompletedCrosschainRequest(ctx context.Context, in *QueryGetCompletedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetCompletedCrosschainRequestResponse, error)
	CompletedCrosschainRequestAll(ctx context.Context, in *QueryAllCompletedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllCompletedCrosschainRequestResponse, error)
	// Queries a list of ValidCrosschainAckRequest items.
	ValidCrosschainAckRequest(ctx context.Context, in *QueryGetValidCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetValidCrosschainAckRequestResponse, error)
	ValidCrosschainAckRequestAll(ctx context.Context, in *QueryAllValidCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllValidCrosschainAckRequestResponse, error)
	// Queries a list of ReadyToExecuteCrosschainAckRequest items.
	ReadyToExecuteCrosschainAckRequest(ctx context.Context, in *QueryGetReadyToExecuteCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetReadyToExecuteCrosschainAckRequestResponse, error)
	ReadyToExecuteCrosschainAckRequestAll(ctx context.Context, in *QueryAllReadyToExecuteCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllReadyToExecuteCrosschainAckRequestResponse, error)
	// Queries a list of ExecutedCrosschainAckRequest items.
	ExecutedCrosschainAckRequest(ctx context.Context, in *QueryGetExecutedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetExecutedCrosschainAckRequestResponse, error)
	ExecutedCrosschainAckRequestAll(ctx context.Context, in *QueryAllExecutedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllExecutedCrosschainAckRequestResponse, error)
	// Queries a list of FeesSettledCrosschainAckRequest items.
	FeesSettledCrosschainAckRequest(ctx context.Context, in *QueryGetFeesSettledCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetFeesSettledCrosschainAckRequestResponse, error)
	FeesSettledCrosschainAckRequestAll(ctx context.Context, in *QueryAllFeesSettledCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllFeesSettledCrosschainAckRequestResponse, error)
	// Queries a list of CompletedCrosschainAckRequest items.
	CompletedCrosschainAckRequest(ctx context.Context, in *QueryGetCompletedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetCompletedCrosschainAckRequestResponse, error)
	CompletedCrosschainAckRequestAll(ctx context.Context, in *QueryAllCompletedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllCompletedCrosschainAckRequestResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequest(ctx context.Context, in *QueryGetCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestResponse, error) {
	out := new(QueryGetCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequestAll(ctx context.Context, in *QueryAllCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestResponse, error) {
	out := new(QueryAllCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequestConfirm(ctx context.Context, in *QueryGetCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestConfirmResponse, error) {
	out := new(QueryGetCrosschainRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestConfirmResponse, error) {
	out := new(QueryAllCrosschainRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirmAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequest(ctx context.Context, in *QueryGetCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestResponse, error) {
	out := new(QueryGetCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequestAll(ctx context.Context, in *QueryAllCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestResponse, error) {
	out := new(QueryAllCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequestConfirm(ctx context.Context, in *QueryGetCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestConfirmResponse, error) {
	out := new(QueryGetCrosschainAckRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestConfirmResponse, error) {
	out := new(QueryAllCrosschainAckRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirmAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckReceipt(ctx context.Context, in *QueryGetCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckReceiptResponse, error) {
	out := new(QueryGetCrosschainAckReceiptResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckReceiptAll(ctx context.Context, in *QueryAllCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckReceiptResponse, error) {
	out := new(QueryAllCrosschainAckReceiptResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceiptAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayerConfig(ctx context.Context, in *QueryGetRelayerConfigRequest, opts ...grpc.CallOption) (*QueryGetRelayerConfigResponse, error) {
	out := new(QueryGetRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/RelayerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayerConfigAll(ctx context.Context, in *QueryAllRelayerConfigRequest, opts ...grpc.CallOption) (*QueryAllRelayerConfigResponse, error) {
	out := new(QueryAllRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/RelayerConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainRequest(ctx context.Context, in *QueryGetBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainRequestResponse, error) {
	out := new(QueryGetBlockedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainRequestResponse, error) {
	out := new(QueryAllBlockedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainAckRequest(ctx context.Context, in *QueryGetBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainAckRequestResponse, error) {
	out := new(QueryGetBlockedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainAckRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainAckRequestResponse, error) {
	out := new(QueryAllBlockedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCConfig(ctx context.Context, in *QueryGetIBCConfigRequest, opts ...grpc.CallOption) (*QueryGetIBCConfigResponse, error) {
	out := new(QueryGetIBCConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/IBCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainRequest(ctx context.Context, in *QueryGetExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainRequestResponse, error) {
	out := new(QueryGetExpiredCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainRequestResponse, error) {
	out := new(QueryAllExpiredCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainAckRequest(ctx context.Context, in *QueryGetExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainAckRequestResponse, error) {
	out := new(QueryGetExpiredCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainAckRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainAckRequestResponse, error) {
	out := new(QueryAllExpiredCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidCrosschainRequest(ctx context.Context, in *QueryGetValidCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetValidCrosschainRequestResponse, error) {
	out := new(QueryGetValidCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidCrosschainRequestAll(ctx context.Context, in *QueryAllValidCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllValidCrosschainRequestResponse, error) {
	out := new(QueryAllValidCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NativeTransferedCrosschainRequest(ctx context.Context, in *QueryGetNativeTransferedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetNativeTransferedCrosschainRequestResponse, error) {
	out := new(QueryGetNativeTransferedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/NativeTransferedCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NativeTransferedCrosschainRequestAll(ctx context.Context, in *QueryAllNativeTransferedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllNativeTransferedCrosschainRequestResponse, error) {
	out := new(QueryAllNativeTransferedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/NativeTransferedCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReadyToExecuteCrosschainRequest(ctx context.Context, in *QueryGetReadyToExecuteCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetReadyToExecuteCrosschainRequestResponse, error) {
	out := new(QueryGetReadyToExecuteCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReadyToExecuteCrosschainRequestAll(ctx context.Context, in *QueryAllReadyToExecuteCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllReadyToExecuteCrosschainRequestResponse, error) {
	out := new(QueryAllReadyToExecuteCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutedCrosschainRequest(ctx context.Context, in *QueryGetExecutedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetExecutedCrosschainRequestResponse, error) {
	out := new(QueryGetExecutedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutedCrosschainRequestAll(ctx context.Context, in *QueryAllExecutedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllExecutedCrosschainRequestResponse, error) {
	out := new(QueryAllExecutedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeesSettledCrosschainRequest(ctx context.Context, in *QueryGetFeesSettledCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetFeesSettledCrosschainRequestResponse, error) {
	out := new(QueryGetFeesSettledCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeesSettledCrosschainRequestAll(ctx context.Context, in *QueryAllFeesSettledCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllFeesSettledCrosschainRequestResponse, error) {
	out := new(QueryAllFeesSettledCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedCrosschainRequest(ctx context.Context, in *QueryGetCompletedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetCompletedCrosschainRequestResponse, error) {
	out := new(QueryGetCompletedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedCrosschainRequestAll(ctx context.Context, in *QueryAllCompletedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllCompletedCrosschainRequestResponse, error) {
	out := new(QueryAllCompletedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidCrosschainAckRequest(ctx context.Context, in *QueryGetValidCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetValidCrosschainAckRequestResponse, error) {
	out := new(QueryGetValidCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidCrosschainAckRequestAll(ctx context.Context, in *QueryAllValidCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllValidCrosschainAckRequestResponse, error) {
	out := new(QueryAllValidCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReadyToExecuteCrosschainAckRequest(ctx context.Context, in *QueryGetReadyToExecuteCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetReadyToExecuteCrosschainAckRequestResponse, error) {
	out := new(QueryGetReadyToExecuteCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReadyToExecuteCrosschainAckRequestAll(ctx context.Context, in *QueryAllReadyToExecuteCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllReadyToExecuteCrosschainAckRequestResponse, error) {
	out := new(QueryAllReadyToExecuteCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutedCrosschainAckRequest(ctx context.Context, in *QueryGetExecutedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetExecutedCrosschainAckRequestResponse, error) {
	out := new(QueryGetExecutedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutedCrosschainAckRequestAll(ctx context.Context, in *QueryAllExecutedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllExecutedCrosschainAckRequestResponse, error) {
	out := new(QueryAllExecutedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeesSettledCrosschainAckRequest(ctx context.Context, in *QueryGetFeesSettledCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetFeesSettledCrosschainAckRequestResponse, error) {
	out := new(QueryGetFeesSettledCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeesSettledCrosschainAckRequestAll(ctx context.Context, in *QueryAllFeesSettledCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllFeesSettledCrosschainAckRequestResponse, error) {
	out := new(QueryAllFeesSettledCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedCrosschainAckRequest(ctx context.Context, in *QueryGetCompletedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetCompletedCrosschainAckRequestResponse, error) {
	out := new(QueryGetCompletedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CompletedCrosschainAckRequestAll(ctx context.Context, in *QueryAllCompletedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllCompletedCrosschainAckRequestResponse, error) {
	out := new(QueryAllCompletedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of CrosschainRequest items.
	CrosschainRequest(context.Context, *QueryGetCrosschainRequestRequest) (*QueryGetCrosschainRequestResponse, error)
	CrosschainRequestAll(context.Context, *QueryAllCrosschainRequestRequest) (*QueryAllCrosschainRequestResponse, error)
	// Queries a list of CrosschainRequestConfirm items.
	CrosschainRequestConfirm(context.Context, *QueryGetCrosschainRequestConfirmRequest) (*QueryGetCrosschainRequestConfirmResponse, error)
	CrosschainRequestConfirmAll(context.Context, *QueryAllCrosschainRequestConfirmRequest) (*QueryAllCrosschainRequestConfirmResponse, error)
	// Queries a list of CrosschainAckRequest items.
	CrosschainAckRequest(context.Context, *QueryGetCrosschainAckRequestRequest) (*QueryGetCrosschainAckRequestResponse, error)
	CrosschainAckRequestAll(context.Context, *QueryAllCrosschainAckRequestRequest) (*QueryAllCrosschainAckRequestResponse, error)
	// Queries a list of CrosschainAckRequestConfirm items.
	CrosschainAckRequestConfirm(context.Context, *QueryGetCrosschainAckRequestConfirmRequest) (*QueryGetCrosschainAckRequestConfirmResponse, error)
	CrosschainAckRequestConfirmAll(context.Context, *QueryAllCrosschainAckRequestConfirmRequest) (*QueryAllCrosschainAckRequestConfirmResponse, error)
	// Queries a list of CrosschainAckReceipt items.
	CrosschainAckReceipt(context.Context, *QueryGetCrosschainAckReceiptRequest) (*QueryGetCrosschainAckReceiptResponse, error)
	CrosschainAckReceiptAll(context.Context, *QueryAllCrosschainAckReceiptRequest) (*QueryAllCrosschainAckReceiptResponse, error)
	// Queries a list of RelayerConfig items.
	RelayerConfig(context.Context, *QueryGetRelayerConfigRequest) (*QueryGetRelayerConfigResponse, error)
	RelayerConfigAll(context.Context, *QueryAllRelayerConfigRequest) (*QueryAllRelayerConfigResponse, error)
	// Queries a list of BlockedCrosschainRequest items.
	BlockedCrosschainRequest(context.Context, *QueryGetBlockedCrosschainRequestRequest) (*QueryGetBlockedCrosschainRequestResponse, error)
	BlockedCrosschainRequestAll(context.Context, *QueryAllBlockedCrosschainRequestRequest) (*QueryAllBlockedCrosschainRequestResponse, error)
	// Queries a list of BlockedCrosschainAckRequest items.
	BlockedCrosschainAckRequest(context.Context, *QueryGetBlockedCrosschainAckRequestRequest) (*QueryGetBlockedCrosschainAckRequestResponse, error)
	BlockedCrosschainAckRequestAll(context.Context, *QueryAllBlockedCrosschainAckRequestRequest) (*QueryAllBlockedCrosschainAckRequestResponse, error)
	IBCConfig(context.Context, *QueryGetIBCConfigRequest) (*QueryGetIBCConfigResponse, error)
	// Queries a list of ExpiredCrosschainRequest items.
	ExpiredCrosschainRequest(context.Context, *QueryGetExpiredCrosschainRequestRequest) (*QueryGetExpiredCrosschainRequestResponse, error)
	ExpiredCrosschainRequestAll(context.Context, *QueryAllExpiredCrosschainRequestRequest) (*QueryAllExpiredCrosschainRequestResponse, error)
	// Queries a list of ExpiredCrosschainAckRequest items.
	ExpiredCrosschainAckRequest(context.Context, *QueryGetExpiredCrosschainAckRequestRequest) (*QueryGetExpiredCrosschainAckRequestResponse, error)
	ExpiredCrosschainAckRequestAll(context.Context, *QueryAllExpiredCrosschainAckRequestRequest) (*QueryAllExpiredCrosschainAckRequestResponse, error)
	// Queries a list of ValidCrosschainRequest items.
	ValidCrosschainRequest(context.Context, *QueryGetValidCrosschainRequestRequest) (*QueryGetValidCrosschainRequestResponse, error)
	ValidCrosschainRequestAll(context.Context, *QueryAllValidCrosschainRequestRequest) (*QueryAllValidCrosschainRequestResponse, error)
	// Queries a list of NativeTransferedCrosschainRequest items.
	NativeTransferedCrosschainRequest(context.Context, *QueryGetNativeTransferedCrosschainRequestRequest) (*QueryGetNativeTransferedCrosschainRequestResponse, error)
	NativeTransferedCrosschainRequestAll(context.Context, *QueryAllNativeTransferedCrosschainRequestRequest) (*QueryAllNativeTransferedCrosschainRequestResponse, error)
	// Queries a list of ReadyToExecuteCrosschainRequest items.
	ReadyToExecuteCrosschainRequest(context.Context, *QueryGetReadyToExecuteCrosschainRequestRequest) (*QueryGetReadyToExecuteCrosschainRequestResponse, error)
	ReadyToExecuteCrosschainRequestAll(context.Context, *QueryAllReadyToExecuteCrosschainRequestRequest) (*QueryAllReadyToExecuteCrosschainRequestResponse, error)
	// Queries a list of ExecutedCrosschainRequest items.
	ExecutedCrosschainRequest(context.Context, *QueryGetExecutedCrosschainRequestRequest) (*QueryGetExecutedCrosschainRequestResponse, error)
	ExecutedCrosschainRequestAll(context.Context, *QueryAllExecutedCrosschainRequestRequest) (*QueryAllExecutedCrosschainRequestResponse, error)
	// Queries a list of FeesSettledCrosschainRequest items.
	FeesSettledCrosschainRequest(context.Context, *QueryGetFeesSettledCrosschainRequestRequest) (*QueryGetFeesSettledCrosschainRequestResponse, error)
	FeesSettledCrosschainRequestAll(context.Context, *QueryAllFeesSettledCrosschainRequestRequest) (*QueryAllFeesSettledCrosschainRequestResponse, error)
	// Queries a list of CompletedCrosschainRequest items.
	CompletedCrosschainRequest(context.Context, *QueryGetCompletedCrosschainRequestRequest) (*QueryGetCompletedCrosschainRequestResponse, error)
	CompletedCrosschainRequestAll(context.Context, *QueryAllCompletedCrosschainRequestRequest) (*QueryAllCompletedCrosschainRequestResponse, error)
	// Queries a list of ValidCrosschainAckRequest items.
	ValidCrosschainAckRequest(context.Context, *QueryGetValidCrosschainAckRequestRequest) (*QueryGetValidCrosschainAckRequestResponse, error)
	ValidCrosschainAckRequestAll(context.Context, *QueryAllValidCrosschainAckRequestRequest) (*QueryAllValidCrosschainAckRequestResponse, error)
	// Queries a list of ReadyToExecuteCrosschainAckRequest items.
	ReadyToExecuteCrosschainAckRequest(context.Context, *QueryGetReadyToExecuteCrosschainAckRequestRequest) (*QueryGetReadyToExecuteCrosschainAckRequestResponse, error)
	ReadyToExecuteCrosschainAckRequestAll(context.Context, *QueryAllReadyToExecuteCrosschainAckRequestRequest) (*QueryAllReadyToExecuteCrosschainAckRequestResponse, error)
	// Queries a list of ExecutedCrosschainAckRequest items.
	ExecutedCrosschainAckRequest(context.Context, *QueryGetExecutedCrosschainAckRequestRequest) (*QueryGetExecutedCrosschainAckRequestResponse, error)
	ExecutedCrosschainAckRequestAll(context.Context, *QueryAllExecutedCrosschainAckRequestRequest) (*QueryAllExecutedCrosschainAckRequestResponse, error)
	// Queries a list of FeesSettledCrosschainAckRequest items.
	FeesSettledCrosschainAckRequest(context.Context, *QueryGetFeesSettledCrosschainAckRequestRequest) (*QueryGetFeesSettledCrosschainAckRequestResponse, error)
	FeesSettledCrosschainAckRequestAll(context.Context, *QueryAllFeesSettledCrosschainAckRequestRequest) (*QueryAllFeesSettledCrosschainAckRequestResponse, error)
	// Queries a list of CompletedCrosschainAckRequest items.
	CompletedCrosschainAckRequest(context.Context, *QueryGetCompletedCrosschainAckRequestRequest) (*QueryGetCompletedCrosschainAckRequestResponse, error)
	CompletedCrosschainAckRequestAll(context.Context, *QueryAllCompletedCrosschainAckRequestRequest) (*QueryAllCompletedCrosschainAckRequestResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequest(ctx context.Context, req *QueryGetCrosschainRequestRequest) (*QueryGetCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequestAll(ctx context.Context, req *QueryAllCrosschainRequestRequest) (*QueryAllCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequestConfirm(ctx context.Context, req *QueryGetCrosschainRequestConfirmRequest) (*QueryGetCrosschainRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequestConfirm not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequestConfirmAll(ctx context.Context, req *QueryAllCrosschainRequestConfirmRequest) (*QueryAllCrosschainRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequestConfirmAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequest(ctx context.Context, req *QueryGetCrosschainAckRequestRequest) (*QueryGetCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequestAll(ctx context.Context, req *QueryAllCrosschainAckRequestRequest) (*QueryAllCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequestConfirm(ctx context.Context, req *QueryGetCrosschainAckRequestConfirmRequest) (*QueryGetCrosschainAckRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequestConfirm not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequestConfirmAll(ctx context.Context, req *QueryAllCrosschainAckRequestConfirmRequest) (*QueryAllCrosschainAckRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequestConfirmAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckReceipt(ctx context.Context, req *QueryGetCrosschainAckReceiptRequest) (*QueryGetCrosschainAckReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckReceipt not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckReceiptAll(ctx context.Context, req *QueryAllCrosschainAckReceiptRequest) (*QueryAllCrosschainAckReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckReceiptAll not implemented")
}
func (*UnimplementedQueryServer) RelayerConfig(ctx context.Context, req *QueryGetRelayerConfigRequest) (*QueryGetRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerConfig not implemented")
}
func (*UnimplementedQueryServer) RelayerConfigAll(ctx context.Context, req *QueryAllRelayerConfigRequest) (*QueryAllRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerConfigAll not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainRequest(ctx context.Context, req *QueryGetBlockedCrosschainRequestRequest) (*QueryGetBlockedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainRequestAll(ctx context.Context, req *QueryAllBlockedCrosschainRequestRequest) (*QueryAllBlockedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainAckRequest(ctx context.Context, req *QueryGetBlockedCrosschainAckRequestRequest) (*QueryGetBlockedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainAckRequestAll(ctx context.Context, req *QueryAllBlockedCrosschainAckRequestRequest) (*QueryAllBlockedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) IBCConfig(ctx context.Context, req *QueryGetIBCConfigRequest) (*QueryGetIBCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCConfig not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainRequest(ctx context.Context, req *QueryGetExpiredCrosschainRequestRequest) (*QueryGetExpiredCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainRequestAll(ctx context.Context, req *QueryAllExpiredCrosschainRequestRequest) (*QueryAllExpiredCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainAckRequest(ctx context.Context, req *QueryGetExpiredCrosschainAckRequestRequest) (*QueryGetExpiredCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainAckRequestAll(ctx context.Context, req *QueryAllExpiredCrosschainAckRequestRequest) (*QueryAllExpiredCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) ValidCrosschainRequest(ctx context.Context, req *QueryGetValidCrosschainRequestRequest) (*QueryGetValidCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) ValidCrosschainRequestAll(ctx context.Context, req *QueryAllValidCrosschainRequestRequest) (*QueryAllValidCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) NativeTransferedCrosschainRequest(ctx context.Context, req *QueryGetNativeTransferedCrosschainRequestRequest) (*QueryGetNativeTransferedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeTransferedCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) NativeTransferedCrosschainRequestAll(ctx context.Context, req *QueryAllNativeTransferedCrosschainRequestRequest) (*QueryAllNativeTransferedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NativeTransferedCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) ReadyToExecuteCrosschainRequest(ctx context.Context, req *QueryGetReadyToExecuteCrosschainRequestRequest) (*QueryGetReadyToExecuteCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyToExecuteCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) ReadyToExecuteCrosschainRequestAll(ctx context.Context, req *QueryAllReadyToExecuteCrosschainRequestRequest) (*QueryAllReadyToExecuteCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyToExecuteCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) ExecutedCrosschainRequest(ctx context.Context, req *QueryGetExecutedCrosschainRequestRequest) (*QueryGetExecutedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutedCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) ExecutedCrosschainRequestAll(ctx context.Context, req *QueryAllExecutedCrosschainRequestRequest) (*QueryAllExecutedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutedCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) FeesSettledCrosschainRequest(ctx context.Context, req *QueryGetFeesSettledCrosschainRequestRequest) (*QueryGetFeesSettledCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesSettledCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) FeesSettledCrosschainRequestAll(ctx context.Context, req *QueryAllFeesSettledCrosschainRequestRequest) (*QueryAllFeesSettledCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesSettledCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) CompletedCrosschainRequest(ctx context.Context, req *QueryGetCompletedCrosschainRequestRequest) (*QueryGetCompletedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) CompletedCrosschainRequestAll(ctx context.Context, req *QueryAllCompletedCrosschainRequestRequest) (*QueryAllCompletedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) ValidCrosschainAckRequest(ctx context.Context, req *QueryGetValidCrosschainAckRequestRequest) (*QueryGetValidCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) ValidCrosschainAckRequestAll(ctx context.Context, req *QueryAllValidCrosschainAckRequestRequest) (*QueryAllValidCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidCrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) ReadyToExecuteCrosschainAckRequest(ctx context.Context, req *QueryGetReadyToExecuteCrosschainAckRequestRequest) (*QueryGetReadyToExecuteCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyToExecuteCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) ReadyToExecuteCrosschainAckRequestAll(ctx context.Context, req *QueryAllReadyToExecuteCrosschainAckRequestRequest) (*QueryAllReadyToExecuteCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyToExecuteCrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) ExecutedCrosschainAckRequest(ctx context.Context, req *QueryGetExecutedCrosschainAckRequestRequest) (*QueryGetExecutedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutedCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) ExecutedCrosschainAckRequestAll(ctx context.Context, req *QueryAllExecutedCrosschainAckRequestRequest) (*QueryAllExecutedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutedCrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) FeesSettledCrosschainAckRequest(ctx context.Context, req *QueryGetFeesSettledCrosschainAckRequestRequest) (*QueryGetFeesSettledCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesSettledCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) FeesSettledCrosschainAckRequestAll(ctx context.Context, req *QueryAllFeesSettledCrosschainAckRequestRequest) (*QueryAllFeesSettledCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesSettledCrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) CompletedCrosschainAckRequest(ctx context.Context, req *QueryGetCompletedCrosschainAckRequestRequest) (*QueryGetCompletedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) CompletedCrosschainAckRequestAll(ctx context.Context, req *QueryAllCompletedCrosschainAckRequestRequest) (*QueryAllCompletedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletedCrosschainAckRequestAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequest(ctx, req.(*QueryGetCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequestAll(ctx, req.(*QueryAllCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequestConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequestConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequestConfirm(ctx, req.(*QueryGetCrosschainRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequestConfirmAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequestConfirmAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirmAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequestConfirmAll(ctx, req.(*QueryAllCrosschainRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequest(ctx, req.(*QueryGetCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequestAll(ctx, req.(*QueryAllCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequestConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainAckRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequestConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequestConfirm(ctx, req.(*QueryGetCrosschainAckRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequestConfirmAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainAckRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequestConfirmAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirmAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequestConfirmAll(ctx, req.(*QueryAllCrosschainAckRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainAckReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckReceipt(ctx, req.(*QueryGetCrosschainAckReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckReceiptAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainAckReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckReceiptAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceiptAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckReceiptAll(ctx, req.(*QueryAllCrosschainAckReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRelayerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/RelayerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayerConfig(ctx, req.(*QueryGetRelayerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayerConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRelayerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayerConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/RelayerConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayerConfigAll(ctx, req.(*QueryAllRelayerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainRequest(ctx, req.(*QueryGetBlockedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlockedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainRequestAll(ctx, req.(*QueryAllBlockedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainAckRequest(ctx, req.(*QueryGetBlockedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlockedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainAckRequestAll(ctx, req.(*QueryAllBlockedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIBCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/IBCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCConfig(ctx, req.(*QueryGetIBCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExpiredCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainRequest(ctx, req.(*QueryGetExpiredCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainRequestAll(ctx, req.(*QueryAllExpiredCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExpiredCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainAckRequest(ctx, req.(*QueryGetExpiredCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainAckRequestAll(ctx, req.(*QueryAllExpiredCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidCrosschainRequest(ctx, req.(*QueryGetValidCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidCrosschainRequestAll(ctx, req.(*QueryAllValidCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NativeTransferedCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNativeTransferedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NativeTransferedCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/NativeTransferedCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NativeTransferedCrosschainRequest(ctx, req.(*QueryGetNativeTransferedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NativeTransferedCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNativeTransferedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NativeTransferedCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/NativeTransferedCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NativeTransferedCrosschainRequestAll(ctx, req.(*QueryAllNativeTransferedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReadyToExecuteCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReadyToExecuteCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReadyToExecuteCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReadyToExecuteCrosschainRequest(ctx, req.(*QueryGetReadyToExecuteCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReadyToExecuteCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReadyToExecuteCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReadyToExecuteCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReadyToExecuteCrosschainRequestAll(ctx, req.(*QueryAllReadyToExecuteCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutedCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExecutedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutedCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutedCrosschainRequest(ctx, req.(*QueryGetExecutedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutedCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExecutedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutedCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutedCrosschainRequestAll(ctx, req.(*QueryAllExecutedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeesSettledCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeesSettledCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesSettledCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesSettledCrosschainRequest(ctx, req.(*QueryGetFeesSettledCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeesSettledCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeesSettledCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesSettledCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesSettledCrosschainRequestAll(ctx, req.(*QueryAllFeesSettledCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCompletedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedCrosschainRequest(ctx, req.(*QueryGetCompletedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCompletedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedCrosschainRequestAll(ctx, req.(*QueryAllCompletedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidCrosschainAckRequest(ctx, req.(*QueryGetValidCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ValidCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidCrosschainAckRequestAll(ctx, req.(*QueryAllValidCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReadyToExecuteCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReadyToExecuteCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReadyToExecuteCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReadyToExecuteCrosschainAckRequest(ctx, req.(*QueryGetReadyToExecuteCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReadyToExecuteCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReadyToExecuteCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReadyToExecuteCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ReadyToExecuteCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReadyToExecuteCrosschainAckRequestAll(ctx, req.(*QueryAllReadyToExecuteCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutedCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExecutedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutedCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutedCrosschainAckRequest(ctx, req.(*QueryGetExecutedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutedCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExecutedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutedCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExecutedCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutedCrosschainAckRequestAll(ctx, req.(*QueryAllExecutedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeesSettledCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeesSettledCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesSettledCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesSettledCrosschainAckRequest(ctx, req.(*QueryGetFeesSettledCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeesSettledCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeesSettledCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesSettledCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/FeesSettledCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesSettledCrosschainAckRequestAll(ctx, req.(*QueryAllFeesSettledCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCompletedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedCrosschainAckRequest(ctx, req.(*QueryGetCompletedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CompletedCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCompletedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CompletedCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CompletedCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CompletedCrosschainAckRequestAll(ctx, req.(*QueryAllCompletedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.crosschain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CrosschainRequest",
			Handler:    _Query_CrosschainRequest_Handler,
		},
		{
			MethodName: "CrosschainRequestAll",
			Handler:    _Query_CrosschainRequestAll_Handler,
		},
		{
			MethodName: "CrosschainRequestConfirm",
			Handler:    _Query_CrosschainRequestConfirm_Handler,
		},
		{
			MethodName: "CrosschainRequestConfirmAll",
			Handler:    _Query_CrosschainRequestConfirmAll_Handler,
		},
		{
			MethodName: "CrosschainAckRequest",
			Handler:    _Query_CrosschainAckRequest_Handler,
		},
		{
			MethodName: "CrosschainAckRequestAll",
			Handler:    _Query_CrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "CrosschainAckRequestConfirm",
			Handler:    _Query_CrosschainAckRequestConfirm_Handler,
		},
		{
			MethodName: "CrosschainAckRequestConfirmAll",
			Handler:    _Query_CrosschainAckRequestConfirmAll_Handler,
		},
		{
			MethodName: "CrosschainAckReceipt",
			Handler:    _Query_CrosschainAckReceipt_Handler,
		},
		{
			MethodName: "CrosschainAckReceiptAll",
			Handler:    _Query_CrosschainAckReceiptAll_Handler,
		},
		{
			MethodName: "RelayerConfig",
			Handler:    _Query_RelayerConfig_Handler,
		},
		{
			MethodName: "RelayerConfigAll",
			Handler:    _Query_RelayerConfigAll_Handler,
		},
		{
			MethodName: "BlockedCrosschainRequest",
			Handler:    _Query_BlockedCrosschainRequest_Handler,
		},
		{
			MethodName: "BlockedCrosschainRequestAll",
			Handler:    _Query_BlockedCrosschainRequestAll_Handler,
		},
		{
			MethodName: "BlockedCrosschainAckRequest",
			Handler:    _Query_BlockedCrosschainAckRequest_Handler,
		},
		{
			MethodName: "BlockedCrosschainAckRequestAll",
			Handler:    _Query_BlockedCrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "IBCConfig",
			Handler:    _Query_IBCConfig_Handler,
		},
		{
			MethodName: "ExpiredCrosschainRequest",
			Handler:    _Query_ExpiredCrosschainRequest_Handler,
		},
		{
			MethodName: "ExpiredCrosschainRequestAll",
			Handler:    _Query_ExpiredCrosschainRequestAll_Handler,
		},
		{
			MethodName: "ExpiredCrosschainAckRequest",
			Handler:    _Query_ExpiredCrosschainAckRequest_Handler,
		},
		{
			MethodName: "ExpiredCrosschainAckRequestAll",
			Handler:    _Query_ExpiredCrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "ValidCrosschainRequest",
			Handler:    _Query_ValidCrosschainRequest_Handler,
		},
		{
			MethodName: "ValidCrosschainRequestAll",
			Handler:    _Query_ValidCrosschainRequestAll_Handler,
		},
		{
			MethodName: "NativeTransferedCrosschainRequest",
			Handler:    _Query_NativeTransferedCrosschainRequest_Handler,
		},
		{
			MethodName: "NativeTransferedCrosschainRequestAll",
			Handler:    _Query_NativeTransferedCrosschainRequestAll_Handler,
		},
		{
			MethodName: "ReadyToExecuteCrosschainRequest",
			Handler:    _Query_ReadyToExecuteCrosschainRequest_Handler,
		},
		{
			MethodName: "ReadyToExecuteCrosschainRequestAll",
			Handler:    _Query_ReadyToExecuteCrosschainRequestAll_Handler,
		},
		{
			MethodName: "ExecutedCrosschainRequest",
			Handler:    _Query_ExecutedCrosschainRequest_Handler,
		},
		{
			MethodName: "ExecutedCrosschainRequestAll",
			Handler:    _Query_ExecutedCrosschainRequestAll_Handler,
		},
		{
			MethodName: "FeesSettledCrosschainRequest",
			Handler:    _Query_FeesSettledCrosschainRequest_Handler,
		},
		{
			MethodName: "FeesSettledCrosschainRequestAll",
			Handler:    _Query_FeesSettledCrosschainRequestAll_Handler,
		},
		{
			MethodName: "CompletedCrosschainRequest",
			Handler:    _Query_CompletedCrosschainRequest_Handler,
		},
		{
			MethodName: "CompletedCrosschainRequestAll",
			Handler:    _Query_CompletedCrosschainRequestAll_Handler,
		},
		{
			MethodName: "ValidCrosschainAckRequest",
			Handler:    _Query_ValidCrosschainAckRequest_Handler,
		},
		{
			MethodName: "ValidCrosschainAckRequestAll",
			Handler:    _Query_ValidCrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "ReadyToExecuteCrosschainAckRequest",
			Handler:    _Query_ReadyToExecuteCrosschainAckRequest_Handler,
		},
		{
			MethodName: "ReadyToExecuteCrosschainAckRequestAll",
			Handler:    _Query_ReadyToExecuteCrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "ExecutedCrosschainAckRequest",
			Handler:    _Query_ExecutedCrosschainAckRequest_Handler,
		},
		{
			MethodName: "ExecutedCrosschainAckRequestAll",
			Handler:    _Query_ExecutedCrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "FeesSettledCrosschainAckRequest",
			Handler:    _Query_FeesSettledCrosschainAckRequest_Handler,
		},
		{
			MethodName: "FeesSettledCrosschainAckRequestAll",
			Handler:    _Query_FeesSettledCrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "CompletedCrosschainAckRequest",
			Handler:    _Query_CompletedCrosschainAckRequest_Handler,
		},
		{
			MethodName: "CompletedCrosschainAckRequestAll",
			Handler:    _Query_CompletedCrosschainAckRequestAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerchain/crosschain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainRequest) > 0 {
		for iNdEx := len(m.CrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainRequest) > 0 {
		for iNdEx := len(m.CrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrosschainRequestConfirm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainRequestConfirm) > 0 {
		for iNdEx := len(m.CrosschainRequestConfirm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequestConfirm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckRequest) > 0 {
		for iNdEx := len(m.CrosschainAckRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckRequest) > 0 {
		for iNdEx := len(m.CrosschainAckRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrosschainAckRequestConfirm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckRequestConfirm) > 0 {
		for iNdEx := len(m.CrosschainAckRequestConfirm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequestConfirm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckReceipt) > 0 {
		for iNdEx := len(m.CrosschainAckReceipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckReceipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckReceipt) > 0 {
		for iNdEx := len(m.CrosschainAckReceipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckReceipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelayerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelayerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelayerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RelayerConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRelayerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelayerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelayerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RelayerConfig) > 0 {
		for iNdEx := len(m.RelayerConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelayerConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockedCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockedCrosschainRequests) > 0 {
		for iNdEx := len(m.BlockedCrosschainRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockedCrosschainAckRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockedCrosschainAckRequests) > 0 {
		for iNdEx := len(m.BlockedCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIBCConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIBCConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIBCConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetIBCConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIBCConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIBCConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExpiredCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredCrosschainRequest) > 0 {
		for iNdEx := len(m.ExpiredCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExpiredCrosschainAckRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredCrosschainAckRequests) > 0 {
		for iNdEx := len(m.ExpiredCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValidCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidCrosschainRequest) > 0 {
		for iNdEx := len(m.ValidCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNativeTransferedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNativeTransferedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNativeTransferedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNativeTransferedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNativeTransferedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNativeTransferedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NativeTransferedCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNativeTransferedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNativeTransferedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNativeTransferedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNativeTransferedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNativeTransferedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNativeTransferedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NativeTransferedCrosschainRequest) > 0 {
		for iNdEx := len(m.NativeTransferedCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NativeTransferedCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReadyToExecuteCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReadyToExecuteCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReadyToExecuteCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReadyToExecuteCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReadyToExecuteCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReadyToExecuteCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReadyToExecuteCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReadyToExecuteCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReadyToExecuteCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReadyToExecuteCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReadyToExecuteCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReadyToExecuteCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReadyToExecuteCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReadyToExecuteCrosschainRequest) > 0 {
		for iNdEx := len(m.ReadyToExecuteCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReadyToExecuteCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExecutedCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExecutedCrosschainRequest) > 0 {
		for iNdEx := len(m.ExecutedCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutedCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeesSettledCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeesSettledCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeesSettledCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeesSettledCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeesSettledCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeesSettledCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeesSettledCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFeesSettledCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeesSettledCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeesSettledCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeesSettledCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeesSettledCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeesSettledCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeesSettledCrosschainRequest) > 0 {
		for iNdEx := len(m.FeesSettledCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeesSettledCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCompletedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCompletedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCompletedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCompletedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCompletedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCompletedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CompletedCrosschainRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCompletedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCompletedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCompletedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCompletedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCompletedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCompletedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompletedCrosschainRequest) > 0 {
		for iNdEx := len(m.CompletedCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValidCrosschainAckRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidCrosschainAckRequests) > 0 {
		for iNdEx := len(m.ValidCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReadyToExecuteCrosschainAckRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReadyToExecuteCrosschainAckRequests) > 0 {
		for iNdEx := len(m.ReadyToExecuteCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReadyToExecuteCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExecutedCrosschainAckRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExecutedCrosschainAckRequests) > 0 {
		for iNdEx := len(m.ExecutedCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutedCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeesSettledCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeesSettledCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeesSettledCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeesSettledCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeesSettledCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeesSettledCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeesSettledCrosschainAckRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFeesSettledCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeesSettledCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeesSettledCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeesSettledCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeesSettledCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeesSettledCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeesSettledCrosschainAckRequests) > 0 {
		for iNdEx := len(m.FeesSettledCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeesSettledCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCompletedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCompletedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCompletedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCompletedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCompletedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCompletedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CompletedCrosschainAckRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCompletedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCompletedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCompletedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCompletedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCompletedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCompletedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompletedCrosschainAckRequests) > 0 {
		for iNdEx := len(m.CompletedCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainRequest) > 0 {
		for _, e := range m.CrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainRequest) > 0 {
		for _, e := range m.CrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrosschainRequestConfirm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCrosschainRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainRequestConfirm) > 0 {
		for _, e := range m.CrosschainRequestConfirm {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckRequest) > 0 {
		for _, e := range m.CrosschainAckRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckRequest) > 0 {
		for _, e := range m.CrosschainAckRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrosschainAckRequestConfirm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckRequestConfirm) > 0 {
		for _, e := range m.CrosschainAckRequestConfirm {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckReceiptIdentifier))
	}
	return n
}

func (m *QueryGetCrosschainAckReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckReceipt) > 0 {
		for _, e := range m.CrosschainAckReceipt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckReceipt) > 0 {
		for _, e := range m.CrosschainAckReceipt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelayerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RelayerConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRelayerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RelayerConfig) > 0 {
		for _, e := range m.RelayerConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetBlockedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockedCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBlockedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlockedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockedCrosschainRequests) > 0 {
		for _, e := range m.BlockedCrosschainRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockedCrosschainAckRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockedCrosschainAckRequests) > 0 {
		for _, e := range m.BlockedCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIBCConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetIBCConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExpiredCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetExpiredCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExpiredCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExpiredCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredCrosschainRequest) > 0 {
		for _, e := range m.ExpiredCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExpiredCrosschainAckRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredCrosschainAckRequests) > 0 {
		for _, e := range m.ExpiredCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetValidCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidCrosschainRequest) > 0 {
		for _, e := range m.ValidCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNativeTransferedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetNativeTransferedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NativeTransferedCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNativeTransferedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNativeTransferedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NativeTransferedCrosschainRequest) > 0 {
		for _, e := range m.NativeTransferedCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReadyToExecuteCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetReadyToExecuteCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReadyToExecuteCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReadyToExecuteCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReadyToExecuteCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReadyToExecuteCrosschainRequest) > 0 {
		for _, e := range m.ReadyToExecuteCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetExecutedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExecutedCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExecutedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExecutedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExecutedCrosschainRequest) > 0 {
		for _, e := range m.ExecutedCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeesSettledCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetFeesSettledCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeesSettledCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFeesSettledCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFeesSettledCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeesSettledCrosschainRequest) > 0 {
		for _, e := range m.FeesSettledCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCompletedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetCompletedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CompletedCrosschainRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCompletedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCompletedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedCrosschainRequest) > 0 {
		for _, e := range m.CompletedCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetValidCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidCrosschainAckRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidCrosschainAckRequests) > 0 {
		for _, e := range m.ValidCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReadyToExecuteCrosschainAckRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReadyToExecuteCrosschainAckRequests) > 0 {
		for _, e := range m.ReadyToExecuteCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetExecutedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExecutedCrosschainAckRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExecutedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExecutedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExecutedCrosschainAckRequests) > 0 {
		for _, e := range m.ExecutedCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeesSettledCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetFeesSettledCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeesSettledCrosschainAckRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFeesSettledCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFeesSettledCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeesSettledCrosschainAckRequests) > 0 {
		for _, e := range m.FeesSettledCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCompletedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetCompletedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CompletedCrosschainAckRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCompletedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCompletedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedCrosschainAckRequests) > 0 {
		for _, e := range m.CompletedCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequest = append(m.CrosschainRequest, CrosschainRequest{})
			if err := m.CrosschainRequest[len(m.CrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequest = append(m.CrosschainRequest, CrosschainRequest{})
			if err := m.CrosschainRequest[len(m.CrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainRequestConfirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequestConfirm = append(m.CrosschainRequestConfirm, CrosschainRequestConfirm{})
			if err := m.CrosschainRequestConfirm[len(m.CrosschainRequestConfirm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequest = append(m.CrosschainAckRequest, CrosschainAckRequest{})
			if err := m.CrosschainAckRequest[len(m.CrosschainAckRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequest = append(m.CrosschainAckRequest, CrosschainAckRequest{})
			if err := m.CrosschainAckRequest[len(m.CrosschainAckRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainAckRequestConfirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequestConfirm = append(m.CrosschainAckRequestConfirm, CrosschainAckRequestConfirm{})
			if err := m.CrosschainAckRequestConfirm[len(m.CrosschainAckRequestConfirm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckReceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckReceipt = append(m.CrosschainAckReceipt, CrosschainAckReceipt{})
			if err := m.CrosschainAckReceipt[len(m.CrosschainAckReceipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckReceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckReceipt = append(m.CrosschainAckReceipt, CrosschainAckReceipt{})
			if err := m.CrosschainAckReceipt[len(m.CrosschainAckReceipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelayerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelayerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelayerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelayerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelayerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelayerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerConfig = append(m.RelayerConfig, RelayerConfig{})
			if err := m.RelayerConfig[len(m.RelayerConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockedCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainRequests = append(m.BlockedCrosschainRequests, CrosschainRequest{})
			if err := m.BlockedCrosschainRequests[len(m.BlockedCrosschainRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockedCrosschainAckRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainAckRequests = append(m.BlockedCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.BlockedCrosschainAckRequests[len(m.BlockedCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIBCConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIBCConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIBCConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIBCConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIBCConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIBCConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpiredCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainRequest = append(m.ExpiredCrosschainRequest, CrosschainRequest{})
			if err := m.ExpiredCrosschainRequest[len(m.ExpiredCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpiredCrosschainAckRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainAckRequests = append(m.ExpiredCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.ExpiredCrosschainAckRequests[len(m.ExpiredCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCrosschainRequest = append(m.ValidCrosschainRequest, CrosschainRequest{})
			if err := m.ValidCrosschainRequest[len(m.ValidCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNativeTransferedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNativeTransferedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNativeTransferedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNativeTransferedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNativeTransferedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNativeTransferedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTransferedCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeTransferedCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNativeTransferedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNativeTransferedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNativeTransferedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNativeTransferedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNativeTransferedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNativeTransferedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTransferedCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeTransferedCrosschainRequest = append(m.NativeTransferedCrosschainRequest, CrosschainRequest{})
			if err := m.NativeTransferedCrosschainRequest[len(m.NativeTransferedCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReadyToExecuteCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReadyToExecuteCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyToExecuteCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReadyToExecuteCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReadyToExecuteCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReadyToExecuteCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyToExecuteCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadyToExecuteCrosschainRequest = append(m.ReadyToExecuteCrosschainRequest, CrosschainRequest{})
			if err := m.ReadyToExecuteCrosschainRequest[len(m.ReadyToExecuteCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutedCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutedCrosschainRequest = append(m.ExecutedCrosschainRequest, CrosschainRequest{})
			if err := m.ExecutedCrosschainRequest[len(m.ExecutedCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeesSettledCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeesSettledCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesSettledCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeesSettledCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeesSettledCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeesSettledCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesSettledCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesSettledCrosschainRequest = append(m.FeesSettledCrosschainRequest, CrosschainRequest{})
			if err := m.FeesSettledCrosschainRequest[len(m.FeesSettledCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCompletedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCompletedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CompletedCrosschainRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCompletedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCompletedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedCrosschainRequest = append(m.CompletedCrosschainRequest, CrosschainRequest{})
			if err := m.CompletedCrosschainRequest[len(m.CompletedCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidCrosschainAckRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCrosschainAckRequests = append(m.ValidCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.ValidCrosschainAckRequests[len(m.ValidCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReadyToExecuteCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReadyToExecuteCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyToExecuteCrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReadyToExecuteCrosschainAckRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReadyToExecuteCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReadyToExecuteCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyToExecuteCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadyToExecuteCrosschainAckRequests = append(m.ReadyToExecuteCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.ReadyToExecuteCrosschainAckRequests[len(m.ReadyToExecuteCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedCrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExecutedCrosschainAckRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutedCrosschainAckRequests = append(m.ExecutedCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.ExecutedCrosschainAckRequests[len(m.ExecutedCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeesSettledCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeesSettledCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeesSettledCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesSettledCrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeesSettledCrosschainAckRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeesSettledCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeesSettledCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeesSettledCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesSettledCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesSettledCrosschainAckRequests = append(m.FeesSettledCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.FeesSettledCrosschainAckRequests[len(m.FeesSettledCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCompletedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCompletedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCompletedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedCrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CompletedCrosschainAckRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCompletedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCompletedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCompletedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedCrosschainAckRequests = append(m.CompletedCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.CompletedCrosschainAckRequests[len(m.CompletedCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
