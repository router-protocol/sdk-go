// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetCrosschainRequestRequest) Reset()         { *m = QueryGetCrosschainRequestRequest{} }
func (m *QueryGetCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{2}
}
func (m *QueryGetCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetCrosschainRequestResponse struct {
	CrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=crosschainRequest,proto3" json:"crosschainRequest"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCrosschainRequestResponse) Reset()         { *m = QueryGetCrosschainRequestResponse{} }
func (m *QueryGetCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryGetCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{3}
}
func (m *QueryGetCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestResponse) GetCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.CrosschainRequest
	}
	return nil
}

func (m *QueryGetCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestRequest) Reset()         { *m = QueryAllCrosschainRequestRequest{} }
func (m *QueryAllCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{4}
}
func (m *QueryAllCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainRequestResponse struct {
	CrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=crosschainRequest,proto3" json:"crosschainRequest"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestResponse) Reset()         { *m = QueryAllCrosschainRequestResponse{} }
func (m *QueryAllCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryAllCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{5}
}
func (m *QueryAllCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestResponse) GetCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.CrosschainRequest
	}
	return nil
}

func (m *QueryAllCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainRequestConfirmRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	ClaimHash         []byte `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Orchestrator      string `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *QueryGetCrosschainRequestConfirmRequest) Reset() {
	*m = QueryGetCrosschainRequestConfirmRequest{}
}
func (m *QueryGetCrosschainRequestConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestConfirmRequest) ProtoMessage()    {}
func (*QueryGetCrosschainRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{6}
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest.Merge(m, src)
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestConfirmRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetCrosschainRequestConfirmRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *QueryGetCrosschainRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryGetCrosschainRequestConfirmRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type QueryGetCrosschainRequestConfirmResponse struct {
	CrosschainRequestConfirm CrosschainRequestConfirm `protobuf:"bytes,1,opt,name=crosschainRequestConfirm,proto3" json:"crosschainRequestConfirm"`
}

func (m *QueryGetCrosschainRequestConfirmResponse) Reset() {
	*m = QueryGetCrosschainRequestConfirmResponse{}
}
func (m *QueryGetCrosschainRequestConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainRequestConfirmResponse) ProtoMessage()    {}
func (*QueryGetCrosschainRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{7}
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse.Merge(m, src)
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainRequestConfirmResponse) GetCrosschainRequestConfirm() CrosschainRequestConfirm {
	if m != nil {
		return m.CrosschainRequestConfirm
	}
	return CrosschainRequestConfirm{}
}

type QueryAllCrosschainRequestConfirmRequest struct {
	SourceChainId     string             `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64             `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	ClaimHash         []byte             `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Pagination        *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestConfirmRequest) Reset() {
	*m = QueryAllCrosschainRequestConfirmRequest{}
}
func (m *QueryAllCrosschainRequestConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestConfirmRequest) ProtoMessage()    {}
func (*QueryAllCrosschainRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{8}
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest.Merge(m, src)
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestConfirmRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryAllCrosschainRequestConfirmRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *QueryAllCrosschainRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryAllCrosschainRequestConfirmRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainRequestConfirmResponse struct {
	CrosschainRequestConfirm []CrosschainRequestConfirm `protobuf:"bytes,1,rep,name=crosschainRequestConfirm,proto3" json:"crosschainRequestConfirm"`
	Pagination               *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainRequestConfirmResponse) Reset() {
	*m = QueryAllCrosschainRequestConfirmResponse{}
}
func (m *QueryAllCrosschainRequestConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainRequestConfirmResponse) ProtoMessage()    {}
func (*QueryAllCrosschainRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{9}
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse.Merge(m, src)
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainRequestConfirmResponse) GetCrosschainRequestConfirm() []CrosschainRequestConfirm {
	if m != nil {
		return m.CrosschainRequestConfirm
	}
	return nil
}

func (m *QueryAllCrosschainRequestConfirmResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetCrosschainAckRequestRequest) Reset()         { *m = QueryGetCrosschainAckRequestRequest{} }
func (m *QueryGetCrosschainAckRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckRequestRequest) ProtoMessage()    {}
func (*QueryGetCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{10}
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetCrosschainAckRequestResponse struct {
	CrosschainAckRequest []CrosschainAckRequest `protobuf:"bytes,1,rep,name=crosschainAckRequest,proto3" json:"crosschainAckRequest"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCrosschainAckRequestResponse) Reset()         { *m = QueryGetCrosschainAckRequestResponse{} }
func (m *QueryGetCrosschainAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckRequestResponse) ProtoMessage()    {}
func (*QueryGetCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{11}
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestResponse) GetCrosschainAckRequest() []CrosschainAckRequest {
	if m != nil {
		return m.CrosschainAckRequest
	}
	return nil
}

func (m *QueryGetCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestRequest) Reset()         { *m = QueryAllCrosschainAckRequestRequest{} }
func (m *QueryAllCrosschainAckRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckRequestRequest) ProtoMessage()    {}
func (*QueryAllCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{12}
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckRequestResponse struct {
	CrosschainAckRequest []CrosschainAckRequest `protobuf:"bytes,1,rep,name=crosschainAckRequest,proto3" json:"crosschainAckRequest"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestResponse) Reset()         { *m = QueryAllCrosschainAckRequestResponse{} }
func (m *QueryAllCrosschainAckRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckRequestResponse) ProtoMessage()    {}
func (*QueryAllCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{13}
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestResponse) GetCrosschainAckRequest() []CrosschainAckRequest {
	if m != nil {
		return m.CrosschainAckRequest
	}
	return nil
}

func (m *QueryAllCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainAckRequestConfirmRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Orchestrator         string `protobuf:"bytes,4,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) Reset() {
	*m = QueryGetCrosschainAckRequestConfirmRequest{}
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCrosschainAckRequestConfirmRequest) ProtoMessage() {}
func (*QueryGetCrosschainAckRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{14}
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type QueryGetCrosschainAckRequestConfirmResponse struct {
	CrosschainAckRequestConfirm CrosschainAckRequestConfirm `protobuf:"bytes,1,opt,name=crosschainAckRequestConfirm,proto3" json:"crosschainAckRequestConfirm"`
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) Reset() {
	*m = QueryGetCrosschainAckRequestConfirmResponse{}
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetCrosschainAckRequestConfirmResponse) ProtoMessage() {}
func (*QueryGetCrosschainAckRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{15}
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse.Merge(m, src)
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainAckRequestConfirmResponse) GetCrosschainAckRequestConfirm() CrosschainAckRequestConfirm {
	if m != nil {
		return m.CrosschainAckRequestConfirm
	}
	return CrosschainAckRequestConfirm{}
}

type QueryAllCrosschainAckRequestConfirmRequest struct {
	AckSrcChainId        string             `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64             `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	ClaimHash            []byte             `protobuf:"bytes,3,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	Pagination           *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) Reset() {
	*m = QueryAllCrosschainAckRequestConfirmRequest{}
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCrosschainAckRequestConfirmRequest) ProtoMessage() {}
func (*QueryAllCrosschainAckRequestConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{16}
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestConfirmRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckRequestConfirmResponse struct {
	CrosschainAckRequestConfirm []CrosschainAckRequestConfirm `protobuf:"bytes,1,rep,name=crosschainAckRequestConfirm,proto3" json:"crosschainAckRequestConfirm"`
	Pagination                  *query.PageResponse           `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) Reset() {
	*m = QueryAllCrosschainAckRequestConfirmResponse{}
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllCrosschainAckRequestConfirmResponse) ProtoMessage() {}
func (*QueryAllCrosschainAckRequestConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{17}
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse.Merge(m, src)
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckRequestConfirmResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainAckRequestConfirmResponse) GetCrosschainAckRequestConfirm() []CrosschainAckRequestConfirm {
	if m != nil {
		return m.CrosschainAckRequestConfirm
	}
	return nil
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCrosschainAckReceiptRequest struct {
	AckReceiptSrcChainId string `protobuf:"bytes,1,opt,name=ackReceiptSrcChainId,proto3" json:"ackReceiptSrcChainId,omitempty"`
	AckReceiptIdentifier uint64 `protobuf:"varint,2,opt,name=ackReceiptIdentifier,proto3" json:"ackReceiptIdentifier,omitempty"`
}

func (m *QueryGetCrosschainAckReceiptRequest) Reset()         { *m = QueryGetCrosschainAckReceiptRequest{} }
func (m *QueryGetCrosschainAckReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckReceiptRequest) ProtoMessage()    {}
func (*QueryGetCrosschainAckReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{18}
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckReceiptRequest.Merge(m, src)
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckReceiptRequest proto.InternalMessageInfo

func (m *QueryGetCrosschainAckReceiptRequest) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *QueryGetCrosschainAckReceiptRequest) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

type QueryGetCrosschainAckReceiptResponse struct {
	CrosschainAckReceipt []CrosschainAckReceipt `protobuf:"bytes,1,rep,name=crosschainAckReceipt,proto3" json:"crosschainAckReceipt"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCrosschainAckReceiptResponse) Reset()         { *m = QueryGetCrosschainAckReceiptResponse{} }
func (m *QueryGetCrosschainAckReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCrosschainAckReceiptResponse) ProtoMessage()    {}
func (*QueryGetCrosschainAckReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{19}
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCrosschainAckReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCrosschainAckReceiptResponse.Merge(m, src)
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCrosschainAckReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCrosschainAckReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCrosschainAckReceiptResponse proto.InternalMessageInfo

func (m *QueryGetCrosschainAckReceiptResponse) GetCrosschainAckReceipt() []CrosschainAckReceipt {
	if m != nil {
		return m.CrosschainAckReceipt
	}
	return nil
}

func (m *QueryGetCrosschainAckReceiptResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckReceiptRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckReceiptRequest) Reset()         { *m = QueryAllCrosschainAckReceiptRequest{} }
func (m *QueryAllCrosschainAckReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckReceiptRequest) ProtoMessage()    {}
func (*QueryAllCrosschainAckReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{20}
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckReceiptRequest.Merge(m, src)
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckReceiptRequest proto.InternalMessageInfo

func (m *QueryAllCrosschainAckReceiptRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCrosschainAckReceiptResponse struct {
	CrosschainAckReceipt []CrosschainAckReceipt `protobuf:"bytes,1,rep,name=crosschainAckReceipt,proto3" json:"crosschainAckReceipt"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCrosschainAckReceiptResponse) Reset()         { *m = QueryAllCrosschainAckReceiptResponse{} }
func (m *QueryAllCrosschainAckReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCrosschainAckReceiptResponse) ProtoMessage()    {}
func (*QueryAllCrosschainAckReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{21}
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCrosschainAckReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCrosschainAckReceiptResponse.Merge(m, src)
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCrosschainAckReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCrosschainAckReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCrosschainAckReceiptResponse proto.InternalMessageInfo

func (m *QueryAllCrosschainAckReceiptResponse) GetCrosschainAckReceipt() []CrosschainAckReceipt {
	if m != nil {
		return m.CrosschainAckReceipt
	}
	return nil
}

func (m *QueryAllCrosschainAckReceiptResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRelayerConfigRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *QueryGetRelayerConfigRequest) Reset()         { *m = QueryGetRelayerConfigRequest{} }
func (m *QueryGetRelayerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelayerConfigRequest) ProtoMessage()    {}
func (*QueryGetRelayerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{22}
}
func (m *QueryGetRelayerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelayerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelayerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelayerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelayerConfigRequest.Merge(m, src)
}
func (m *QueryGetRelayerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelayerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelayerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelayerConfigRequest proto.InternalMessageInfo

func (m *QueryGetRelayerConfigRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetRelayerConfigResponse struct {
	RelayerConfig RelayerConfig `protobuf:"bytes,1,opt,name=relayerConfig,proto3" json:"relayerConfig"`
}

func (m *QueryGetRelayerConfigResponse) Reset()         { *m = QueryGetRelayerConfigResponse{} }
func (m *QueryGetRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRelayerConfigResponse) ProtoMessage()    {}
func (*QueryGetRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{23}
}
func (m *QueryGetRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRelayerConfigResponse.Merge(m, src)
}
func (m *QueryGetRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRelayerConfigResponse proto.InternalMessageInfo

func (m *QueryGetRelayerConfigResponse) GetRelayerConfig() RelayerConfig {
	if m != nil {
		return m.RelayerConfig
	}
	return RelayerConfig{}
}

type QueryAllRelayerConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelayerConfigRequest) Reset()         { *m = QueryAllRelayerConfigRequest{} }
func (m *QueryAllRelayerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelayerConfigRequest) ProtoMessage()    {}
func (*QueryAllRelayerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{24}
}
func (m *QueryAllRelayerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelayerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelayerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelayerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelayerConfigRequest.Merge(m, src)
}
func (m *QueryAllRelayerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelayerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelayerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelayerConfigRequest proto.InternalMessageInfo

func (m *QueryAllRelayerConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRelayerConfigResponse struct {
	RelayerConfig []RelayerConfig     `protobuf:"bytes,1,rep,name=relayerConfig,proto3" json:"relayerConfig"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRelayerConfigResponse) Reset()         { *m = QueryAllRelayerConfigResponse{} }
func (m *QueryAllRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRelayerConfigResponse) ProtoMessage()    {}
func (*QueryAllRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{25}
}
func (m *QueryAllRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRelayerConfigResponse.Merge(m, src)
}
func (m *QueryAllRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRelayerConfigResponse proto.InternalMessageInfo

func (m *QueryAllRelayerConfigResponse) GetRelayerConfig() []RelayerConfig {
	if m != nil {
		return m.RelayerConfig
	}
	return nil
}

func (m *QueryAllRelayerConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBlockedCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetBlockedCrosschainRequestRequest) Reset() {
	*m = QueryGetBlockedCrosschainRequestRequest{}
}
func (m *QueryGetBlockedCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockedCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetBlockedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{26}
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetBlockedCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetBlockedCrosschainRequestResponse struct {
	BlockedCrosschainRequests []CrosschainRequest `protobuf:"bytes,1,rep,name=blockedCrosschainRequests,proto3" json:"blockedCrosschainRequests"`
	Pagination                *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetBlockedCrosschainRequestResponse) Reset() {
	*m = QueryGetBlockedCrosschainRequestResponse{}
}
func (m *QueryGetBlockedCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockedCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryGetBlockedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{27}
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainRequestResponse) GetBlockedCrosschainRequests() []CrosschainRequest {
	if m != nil {
		return m.BlockedCrosschainRequests
	}
	return nil
}

func (m *QueryGetBlockedCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlockedCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainRequestRequest) Reset() {
	*m = QueryAllBlockedCrosschainRequestRequest{}
}
func (m *QueryAllBlockedCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlockedCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllBlockedCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{28}
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlockedCrosschainRequestResponse struct {
	BlockedCrosschainRequests []CrosschainRequest `protobuf:"bytes,1,rep,name=blockedCrosschainRequests,proto3" json:"blockedCrosschainRequests"`
	Pagination                *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainRequestResponse) Reset() {
	*m = QueryAllBlockedCrosschainRequestResponse{}
}
func (m *QueryAllBlockedCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlockedCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryAllBlockedCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{29}
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainRequestResponse) GetBlockedCrosschainRequests() []CrosschainRequest {
	if m != nil {
		return m.BlockedCrosschainRequests
	}
	return nil
}

func (m *QueryAllBlockedCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBlockedCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) Reset() {
	*m = QueryGetBlockedCrosschainAckRequestRequest{}
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetBlockedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetBlockedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{30}
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetBlockedCrosschainAckRequestResponse struct {
	BlockedCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=blockedCrosschainAckRequests,proto3" json:"blockedCrosschainAckRequests"`
	Pagination                   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) Reset() {
	*m = QueryGetBlockedCrosschainAckRequestResponse{}
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetBlockedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetBlockedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{31}
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetBlockedCrosschainAckRequestResponse) GetBlockedCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.BlockedCrosschainAckRequests
	}
	return nil
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlockedCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) Reset() {
	*m = QueryAllBlockedCrosschainAckRequestRequest{}
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllBlockedCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllBlockedCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{32}
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlockedCrosschainAckRequestResponse struct {
	BlockedCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=blockedCrosschainAckRequests,proto3" json:"blockedCrosschainAckRequests"`
	Pagination                   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) Reset() {
	*m = QueryAllBlockedCrosschainAckRequestResponse{}
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllBlockedCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllBlockedCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{33}
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockedCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllBlockedCrosschainAckRequestResponse) GetBlockedCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.BlockedCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIBCConfigRequest struct {
}

func (m *QueryGetIBCConfigRequest) Reset()         { *m = QueryGetIBCConfigRequest{} }
func (m *QueryGetIBCConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIBCConfigRequest) ProtoMessage()    {}
func (*QueryGetIBCConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{34}
}
func (m *QueryGetIBCConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIBCConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIBCConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIBCConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIBCConfigRequest.Merge(m, src)
}
func (m *QueryGetIBCConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIBCConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIBCConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIBCConfigRequest proto.InternalMessageInfo

type QueryGetIBCConfigResponse struct {
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *QueryGetIBCConfigResponse) Reset()         { *m = QueryGetIBCConfigResponse{} }
func (m *QueryGetIBCConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIBCConfigResponse) ProtoMessage()    {}
func (*QueryGetIBCConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{35}
}
func (m *QueryGetIBCConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIBCConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIBCConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIBCConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIBCConfigResponse.Merge(m, src)
}
func (m *QueryGetIBCConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIBCConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIBCConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIBCConfigResponse proto.InternalMessageInfo

func (m *QueryGetIBCConfigResponse) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

type QueryGetExpiredCrosschainRequestRequest struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=sourceChainId,proto3" json:"sourceChainId,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *QueryGetExpiredCrosschainRequestRequest) Reset() {
	*m = QueryGetExpiredCrosschainRequestRequest{}
}
func (m *QueryGetExpiredCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryGetExpiredCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{36}
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainRequestRequest) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *QueryGetExpiredCrosschainRequestRequest) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type QueryGetExpiredCrosschainRequestResponse struct {
	ExpiredCrosschainRequests []CrosschainRequest `protobuf:"bytes,1,rep,name=expiredCrosschainRequests,proto3" json:"expiredCrosschainRequests"`
	Pagination                *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetExpiredCrosschainRequestResponse) Reset() {
	*m = QueryGetExpiredCrosschainRequestResponse{}
}
func (m *QueryGetExpiredCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryGetExpiredCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{37}
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainRequestResponse) GetExpiredCrosschainRequests() []CrosschainRequest {
	if m != nil {
		return m.ExpiredCrosschainRequests
	}
	return nil
}

func (m *QueryGetExpiredCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredCrosschainRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainRequestRequest) Reset() {
	*m = QueryAllExpiredCrosschainRequestRequest{}
}
func (m *QueryAllExpiredCrosschainRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredCrosschainRequestRequest) ProtoMessage()    {}
func (*QueryAllExpiredCrosschainRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{38}
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainRequestRequest proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredCrosschainRequestResponse struct {
	ExpiredCrosschainRequest []CrosschainRequest `protobuf:"bytes,1,rep,name=expiredCrosschainRequest,proto3" json:"expiredCrosschainRequest"`
	Pagination               *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainRequestResponse) Reset() {
	*m = QueryAllExpiredCrosschainRequestResponse{}
}
func (m *QueryAllExpiredCrosschainRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredCrosschainRequestResponse) ProtoMessage()    {}
func (*QueryAllExpiredCrosschainRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{39}
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainRequestResponse proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainRequestResponse) GetExpiredCrosschainRequest() []CrosschainRequest {
	if m != nil {
		return m.ExpiredCrosschainRequest
	}
	return nil
}

func (m *QueryAllExpiredCrosschainRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExpiredCrosschainAckRequestRequest struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) Reset() {
	*m = QueryGetExpiredCrosschainAckRequestRequest{}
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetExpiredCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryGetExpiredCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{40}
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainAckRequestRequest) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

type QueryGetExpiredCrosschainAckRequestResponse struct {
	ExpiredCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=expiredCrosschainAckRequests,proto3" json:"expiredCrosschainAckRequests"`
	Pagination                   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) Reset() {
	*m = QueryGetExpiredCrosschainAckRequestResponse{}
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetExpiredCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryGetExpiredCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{41}
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryGetExpiredCrosschainAckRequestResponse) GetExpiredCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.ExpiredCrosschainAckRequests
	}
	return nil
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredCrosschainAckRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) Reset() {
	*m = QueryAllExpiredCrosschainAckRequestRequest{}
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllExpiredCrosschainAckRequestRequest) ProtoMessage() {}
func (*QueryAllExpiredCrosschainAckRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{42}
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainAckRequestRequest proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainAckRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredCrosschainAckRequestResponse struct {
	ExpiredCrosschainAckRequests []CrosschainAckRequest `protobuf:"bytes,1,rep,name=expiredCrosschainAckRequests,proto3" json:"expiredCrosschainAckRequests"`
	Pagination                   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) Reset() {
	*m = QueryAllExpiredCrosschainAckRequestResponse{}
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllExpiredCrosschainAckRequestResponse) ProtoMessage() {}
func (*QueryAllExpiredCrosschainAckRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4da7a5ae2a512a6, []int{43}
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse.Merge(m, src)
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredCrosschainAckRequestResponse proto.InternalMessageInfo

func (m *QueryAllExpiredCrosschainAckRequestResponse) GetExpiredCrosschainAckRequests() []CrosschainAckRequest {
	if m != nil {
		return m.ExpiredCrosschainAckRequests
	}
	return nil
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.crosschain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.crosschain.QueryParamsResponse")
	proto.RegisterType((*QueryGetCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestRequest")
	proto.RegisterType((*QueryGetCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestResponse")
	proto.RegisterType((*QueryAllCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestRequest")
	proto.RegisterType((*QueryAllCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestResponse")
	proto.RegisterType((*QueryGetCrosschainRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestConfirmRequest")
	proto.RegisterType((*QueryGetCrosschainRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainRequestConfirmResponse")
	proto.RegisterType((*QueryAllCrosschainRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestConfirmRequest")
	proto.RegisterType((*QueryAllCrosschainRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainRequestConfirmResponse")
	proto.RegisterType((*QueryGetCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetCrosschainAckRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestConfirmRequest")
	proto.RegisterType((*QueryGetCrosschainAckRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckRequestConfirmResponse")
	proto.RegisterType((*QueryAllCrosschainAckRequestConfirmRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestConfirmRequest")
	proto.RegisterType((*QueryAllCrosschainAckRequestConfirmResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckRequestConfirmResponse")
	proto.RegisterType((*QueryGetCrosschainAckReceiptRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckReceiptRequest")
	proto.RegisterType((*QueryGetCrosschainAckReceiptResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetCrosschainAckReceiptResponse")
	proto.RegisterType((*QueryAllCrosschainAckReceiptRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckReceiptRequest")
	proto.RegisterType((*QueryAllCrosschainAckReceiptResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllCrosschainAckReceiptResponse")
	proto.RegisterType((*QueryGetRelayerConfigRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetRelayerConfigRequest")
	proto.RegisterType((*QueryGetRelayerConfigResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetRelayerConfigResponse")
	proto.RegisterType((*QueryAllRelayerConfigRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllRelayerConfigRequest")
	proto.RegisterType((*QueryAllRelayerConfigResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllRelayerConfigResponse")
	proto.RegisterType((*QueryGetBlockedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainRequestRequest")
	proto.RegisterType((*QueryGetBlockedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainRequestResponse")
	proto.RegisterType((*QueryAllBlockedCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainRequestRequest")
	proto.RegisterType((*QueryAllBlockedCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainRequestResponse")
	proto.RegisterType((*QueryGetBlockedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetBlockedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetBlockedCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllBlockedCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllBlockedCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllBlockedCrosschainAckRequestResponse")
	proto.RegisterType((*QueryGetIBCConfigRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetIBCConfigRequest")
	proto.RegisterType((*QueryGetIBCConfigResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetIBCConfigResponse")
	proto.RegisterType((*QueryGetExpiredCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainRequestRequest")
	proto.RegisterType((*QueryGetExpiredCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainRequestResponse")
	proto.RegisterType((*QueryAllExpiredCrosschainRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainRequestRequest")
	proto.RegisterType((*QueryAllExpiredCrosschainRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainRequestResponse")
	proto.RegisterType((*QueryGetExpiredCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainAckRequestRequest")
	proto.RegisterType((*QueryGetExpiredCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryGetExpiredCrosschainAckRequestResponse")
	proto.RegisterType((*QueryAllExpiredCrosschainAckRequestRequest)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainAckRequestRequest")
	proto.RegisterType((*QueryAllExpiredCrosschainAckRequestResponse)(nil), "routerprotocol.routerchain.crosschain.QueryAllExpiredCrosschainAckRequestResponse")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/query.proto", fileDescriptor_c4da7a5ae2a512a6)
}

var fileDescriptor_c4da7a5ae2a512a6 = []byte{
	// 1767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x9a, 0x4d, 0x6c, 0x1b, 0xc5,
	0x17, 0xc0, 0x33, 0x4e, 0xfe, 0xa9, 0x3a, 0x6d, 0xa5, 0x7f, 0x87, 0x48, 0x75, 0xdd, 0x60, 0xc2,
	0xb4, 0xd0, 0xa8, 0xa5, 0x5e, 0x9a, 0x16, 0xf5, 0x23, 0x42, 0x21, 0x31, 0x25, 0x4d, 0x2b, 0xb5,
	0x8d, 0xe1, 0xc4, 0x25, 0xac, 0x37, 0x1b, 0x67, 0xc9, 0xda, 0xeb, 0xee, 0xae, 0xab, 0xb6, 0xae,
	0x85, 0x5a, 0x54, 0xc4, 0x47, 0x11, 0x48, 0xbd, 0x70, 0xe3, 0xc6, 0x09, 0x71, 0x46, 0x80, 0xc4,
	0xb5, 0x2a, 0x1c, 0x2a, 0x71, 0x41, 0x3d, 0x54, 0xa8, 0x01, 0x4e, 0x08, 0xd4, 0x13, 0x07, 0x24,
	0x84, 0x3c, 0x3b, 0x6b, 0xef, 0x7a, 0x77, 0xf6, 0x73, 0xec, 0x40, 0x7a, 0x4a, 0x76, 0x67, 0xe6,
	0x7d, 0xfc, 0xde, 0x9b, 0x37, 0xbb, 0xfb, 0x0c, 0xb1, 0xae, 0x35, 0x4c, 0x59, 0x97, 0x56, 0x45,
	0xa5, 0x26, 0x48, 0xba, 0x66, 0x18, 0xd6, 0xbf, 0x17, 0x1b, 0xb2, 0x7e, 0xa5, 0x50, 0xd7, 0x35,
	0x53, 0x43, 0xcf, 0x58, 0x73, 0xc8, 0x85, 0xa4, 0xa9, 0x05, 0xc7, 0x92, 0x42, 0x77, 0x49, 0x6e,
	0xac, 0xa2, 0x55, 0x34, 0x32, 0x49, 0x68, 0xff, 0x67, 0x2d, 0xce, 0x8d, 0x57, 0x34, 0xad, 0xa2,
	0xca, 0x82, 0x58, 0x57, 0x04, 0xb1, 0x56, 0xd3, 0x4c, 0xd1, 0x54, 0xb4, 0x9a, 0x41, 0x47, 0x0f,
	0x48, 0x9a, 0x51, 0xd5, 0x0c, 0xa1, 0x2c, 0x1a, 0xb2, 0xa5, 0x53, 0xb8, 0x74, 0xb8, 0x2c, 0x9b,
	0xe2, 0x61, 0xa1, 0x2e, 0x56, 0x94, 0x1a, 0x99, 0x4c, 0xe7, 0xee, 0x65, 0x98, 0x5a, 0x17, 0x75,
	0xb1, 0x6a, 0x0b, 0x14, 0x18, 0x93, 0xba, 0xff, 0x2e, 0xe9, 0xf2, 0xc5, 0x86, 0x6c, 0x98, 0x74,
	0xc1, 0xb1, 0xc8, 0x0b, 0x96, 0x24, 0xad, 0xb6, 0xa2, 0xe8, 0x55, 0xba, 0xf0, 0x48, 0xf8, 0x42,
	0x51, 0x5a, 0xeb, 0xd1, 0x36, 0x1d, 0x6b, 0x51, 0x52, 0x8d, 0x92, 0xac, 0xd4, 0x6d, 0x8d, 0x07,
	0x19, 0x8b, 0x74, 0x59, 0x15, 0xaf, 0xc8, 0xba, 0xa5, 0xa2, 0x62, 0x4d, 0xc6, 0x63, 0x10, 0x2d,
	0xb6, 0x83, 0x70, 0x81, 0x20, 0x2d, 0x59, 0x56, 0xe0, 0x32, 0x7c, 0xc2, 0x75, 0xd7, 0xa8, 0x6b,
	0x35, 0x43, 0x46, 0x67, 0xe1, 0xa8, 0x85, 0x3e, 0x0b, 0x26, 0xc0, 0xe4, 0xb6, 0xa9, 0x43, 0x85,
	0x48, 0x79, 0x52, 0xb0, 0xc4, 0xcc, 0x8d, 0xdc, 0x79, 0xf0, 0xd4, 0x50, 0x89, 0x8a, 0xc0, 0x97,
	0xe0, 0x04, 0xd1, 0x31, 0x2f, 0x9b, 0xc5, 0xce, 0x54, 0x6a, 0x00, 0xfd, 0x83, 0xf6, 0xc1, 0x1d,
	0x86, 0xd6, 0xd0, 0x25, 0xb9, 0xd8, 0x1e, 0x5c, 0x58, 0x26, 0x7a, 0xb7, 0x96, 0xdc, 0x37, 0xd1,
	0x73, 0x70, 0x27, 0xc5, 0xb7, 0xb0, 0x2c, 0xd7, 0x4c, 0x65, 0x45, 0x91, 0xf5, 0x6c, 0x66, 0x02,
	0x4c, 0x8e, 0x94, 0xbc, 0x03, 0xf8, 0x3e, 0x80, 0x4f, 0x07, 0x28, 0xa6, 0xae, 0xaa, 0x70, 0xa7,
	0xd4, 0x3b, 0x98, 0x05, 0x13, 0xc3, 0x93, 0xdb, 0xa6, 0x8e, 0x47, 0xf4, 0xda, 0x23, 0x9c, 0x02,
	0xf0, 0x0a, 0x46, 0xf3, 0x10, 0x76, 0x93, 0x9f, 0x98, 0xbe, 0x6d, 0x6a, 0x7f, 0xc1, 0xda, 0x29,
	0x85, 0xf6, 0x4e, 0x29, 0x58, 0xbb, 0x93, 0xee, 0x94, 0xc2, 0x05, 0xb1, 0x22, 0xdb, 0xa6, 0x96,
	0x1c, 0x4b, 0xf1, 0x9b, 0x14, 0xea, 0xac, 0xaa, 0x32, 0xa1, 0xbe, 0xe2, 0x52, 0x66, 0x45, 0xf2,
	0xd9, 0x50, 0x65, 0x96, 0x08, 0xa7, 0xae, 0x0e, 0x48, 0x7f, 0x65, 0xff, 0x6d, 0x90, 0xdf, 0x02,
	0xb8, 0x9f, 0x99, 0x25, 0x45, 0x6b, 0x93, 0xf6, 0x31, 0x4b, 0xd1, 0x38, 0xdc, 0x2a, 0xa9, 0xa2,
	0x52, 0x3d, 0x2d, 0x1a, 0xab, 0xd9, 0xe1, 0x09, 0x30, 0xb9, 0xbd, 0xd4, 0xbd, 0x81, 0x30, 0xdc,
	0xae, 0xe9, 0xd2, 0xaa, 0x6c, 0x98, 0xba, 0x68, 0x6a, 0x7a, 0x76, 0x84, 0x28, 0x74, 0xdd, 0xc3,
	0x5f, 0x00, 0x38, 0x19, 0xee, 0x01, 0x8d, 0xd2, 0x75, 0x00, 0xb3, 0x12, 0x63, 0x12, 0x4d, 0x91,
	0x99, 0xa4, 0xd1, 0xa2, 0x62, 0x68, 0xd0, 0x98, 0x6a, 0xf0, 0xba, 0x8d, 0xdc, 0x2f, 0x9f, 0x36,
	0x1c, 0xb9, 0x7b, 0xd7, 0x8c, 0x24, 0xde, 0x35, 0x7f, 0xda, 0x61, 0x09, 0xf4, 0x32, 0x5a, 0x58,
	0x86, 0x07, 0x10, 0x16, 0x7e, 0x5b, 0xea, 0x2d, 0xb8, 0xd7, 0x9b, 0x8f, 0xb3, 0xd2, 0x9a, 0xb7,
	0xe6, 0x8b, 0xd2, 0xda, 0xab, 0xba, 0xd4, 0x13, 0x5a, 0xd7, 0x4d, 0x34, 0x05, 0xc7, 0xc4, 0xce,
	0x52, 0x4f, 0x74, 0x7d, 0xc7, 0xf0, 0xaf, 0x00, 0xee, 0x0b, 0xb6, 0x80, 0x62, 0x6f, 0xc0, 0x31,
	0xc9, 0x67, 0x9c, 0x12, 0x9f, 0x8e, 0x4d, 0xbc, 0x2b, 0x82, 0xd2, 0xf6, 0x15, 0xcf, 0x8f, 0x74,
	0x95, 0x92, 0x76, 0xa5, 0x98, 0x97, 0x34, 0xaf, 0x83, 0xa0, 0xc3, 0x95, 0xa9, 0x6f, 0x93, 0x70,
	0xbd, 0x03, 0xe0, 0x81, 0xa0, 0x04, 0xf2, 0x16, 0xa9, 0xfe, 0x64, 0x32, 0x87, 0xd3, 0xe1, 0x2b,
	0x00, 0x0f, 0x46, 0x72, 0x85, 0x86, 0xee, 0x7d, 0x00, 0xf7, 0x48, 0xec, 0x79, 0x34, 0x7b, 0xe6,
	0x52, 0x84, 0xd0, 0x5d, 0x8f, 0x82, 0x94, 0xe1, 0xdf, 0xec, 0x38, 0x30, 0x12, 0xee, 0x5f, 0x12,
	0x07, 0x5e, 0x47, 0xc6, 0xdb, 0x19, 0x1a, 0xab, 0x30, 0x77, 0x23, 0xc7, 0x6a, 0x78, 0x60, 0xb1,
	0xe2, 0xb7, 0xf9, 0x3e, 0x04, 0xcc, 0xf3, 0x83, 0xbc, 0xfd, 0xd8, 0xd1, 0xb6, 0xe3, 0x48, 0x6e,
	0x7a, 0x82, 0xee, 0x3b, 0xe6, 0x5e, 0xc3, 0x88, 0x7d, 0xcf, 0x58, 0xd0, 0x69, 0x42, 0xed, 0x61,
	0x56, 0x3d, 0x32, 0x9e, 0xae, 0xea, 0x11, 0x11, 0x8c, 0xaa, 0x47, 0xc6, 0x06, 0x71, 0x9a, 0xb8,
	0xb8, 0x0f, 0xe0, 0x34, 0xd9, 0x5c, 0x5c, 0x8f, 0xc3, 0x71, 0x3b, 0x7f, 0x4a, 0xd6, 0xab, 0x39,
	0xd9, 0x33, 0x15, 0x1b, 0x68, 0x16, 0x6e, 0x91, 0x5c, 0xb9, 0x6b, 0x5f, 0xe2, 0xeb, 0x00, 0x3e,
	0xc9, 0x58, 0x4a, 0xd9, 0xbc, 0x01, 0x77, 0xe8, 0xce, 0x01, 0x1a, 0x8f, 0xa3, 0x11, 0xa1, 0xb8,
	0x84, 0x52, 0x1a, 0x6e, 0x81, 0x78, 0x85, 0x5a, 0x3f, 0xab, 0xaa, 0xbe, 0xd6, 0xf3, 0x4a, 0x87,
	0xbb, 0xb6, 0xaf, 0x5e, 0x45, 0x6c, 0x5f, 0x87, 0xb9, 0xfa, 0xca, 0x2f, 0xe4, 0xad, 0xee, 0x4b,
	0xe5, 0x9c, 0xaa, 0x49, 0x6b, 0xf2, 0xf2, 0x40, 0x3f, 0x7d, 0x3c, 0x72, 0xbc, 0x12, 0xb2, 0xf5,
	0x53, 0xac, 0xd7, 0xe0, 0xee, 0x32, 0x63, 0x8e, 0xc1, 0xe9, 0x05, 0x9e, 0xad, 0x80, 0x1f, 0xf2,
	0x8b, 0xdd, 0x97, 0xca, 0x30, 0xe4, 0xbc, 0x52, 0xf6, 0x91, 0xe3, 0x15, 0xef, 0x71, 0xc1, 0xfc,
	0x8e, 0xe3, 0xd1, 0xd8, 0xe3, 0xf3, 0x20, 0x5f, 0xf2, 0xfe, 0x76, 0x3c, 0xd8, 0x06, 0x1a, 0x42,
	0xf9, 0xdf, 0x04, 0x70, 0xbc, 0xcc, 0x9e, 0x67, 0xf0, 0x7b, 0x39, 0x09, 0x54, 0xc3, 0x2f, 0x12,
	0x66, 0xf7, 0xd9, 0x38, 0x42, 0x20, 0x78, 0xe5, 0x7c, 0x07, 0x7b, 0x98, 0xda, 0xcd, 0x8a, 0x3d,
	0x07, 0xb3, 0x76, 0xda, 0x2d, 0xcc, 0x15, 0x5d, 0x67, 0x21, 0x3e, 0x0a, 0x77, 0xfb, 0x8c, 0x51,
	0x12, 0xbb, 0xe0, 0x96, 0xba, 0xa6, 0x9b, 0x4b, 0x8a, 0xbd, 0x09, 0x46, 0xdb, 0x97, 0x0b, 0xcb,
	0xce, 0xc3, 0xe2, 0xd4, 0xe5, 0xba, 0xa2, 0x6f, 0xe0, 0x61, 0xc1, 0xd6, 0xdf, 0xad, 0x62, 0x32,
	0x63, 0x0e, 0xb7, 0x2a, 0xc6, 0x54, 0xd0, 0x97, 0xc3, 0x22, 0x0c, 0x39, 0xaf, 0x8d, 0xf3, 0x87,
	0xe3, 0xb0, 0x08, 0xc5, 0x7c, 0x15, 0x66, 0x59, 0x14, 0x38, 0x51, 0x66, 0xca, 0xef, 0xcf, 0x51,
	0xe1, 0xf1, 0x78, 0xa3, 0x8e, 0x8a, 0x40, 0x43, 0x1c, 0x35, 0x4b, 0x66, 0xcf, 0xe3, 0x59, 0xb3,
	0x82, 0xd4, 0xf4, 0xe5, 0xa8, 0x88, 0x10, 0x88, 0x7e, 0x1c, 0x15, 0x8f, 0x23, 0xf6, 0xa9, 0x77,
	0x9f, 0x87, 0xff, 0x23, 0x00, 0xd0, 0x97, 0x00, 0x8e, 0x5a, 0xcd, 0x51, 0x74, 0x22, 0xa2, 0xf9,
	0xde, 0x6e, 0x6d, 0xee, 0x64, 0x92, 0xa5, 0x96, 0x5d, 0xf8, 0xd8, 0x8d, 0x1f, 0x7e, 0xbe, 0x9d,
	0x39, 0x8c, 0x04, 0xda, 0x46, 0x3f, 0x64, 0x0b, 0xb1, 0xaf, 0x19, 0xcd, 0x77, 0xf4, 0x51, 0x06,
	0xee, 0xf4, 0x29, 0x12, 0x71, 0x4c, 0x09, 0xe8, 0xfc, 0xe6, 0x4e, 0xa7, 0x17, 0x44, 0x3d, 0xac,
	0x10, 0x0f, 0x45, 0xb4, 0x14, 0xd9, 0x43, 0xef, 0x0f, 0x01, 0x84, 0xa6, 0xeb, 0x24, 0x6d, 0x09,
	0x4d, 0xcf, 0x79, 0xd9, 0x42, 0xbf, 0x03, 0x38, 0xe6, 0x31, 0x63, 0x56, 0x55, 0xe3, 0x41, 0x09,
	0xe8, 0xdc, 0xc6, 0x83, 0x12, 0xd4, 0x95, 0xc5, 0x45, 0x02, 0xe5, 0x45, 0x34, 0x9d, 0x02, 0x0a,
	0xba, 0x9b, 0x81, 0x59, 0x56, 0x5b, 0x09, 0x9d, 0x4b, 0x1b, 0x40, 0xf7, 0x47, 0xdc, 0xdc, 0x79,
	0x6e, 0xf2, 0x28, 0x82, 0x5b, 0x80, 0x30, 0xb8, 0x09, 0xd0, 0x0d, 0x90, 0x82, 0x82, 0xfd, 0x8b,
	0x8d, 0x28, 0x29, 0x22, 0x34, 0x3b, 0x1f, 0x87, 0x5b, 0x42, 0xd3, 0xf9, 0x3d, 0xbe, 0x85, 0xbe,
	0xce, 0xc0, 0x3d, 0x2c, 0x9b, 0xdb, 0x49, 0x74, 0x2e, 0x6d, 0xec, 0xd3, 0xf0, 0x8c, 0xd0, 0xab,
	0xc4, 0x4d, 0x82, 0xb3, 0x81, 0x8c, 0x0d, 0x80, 0x89, 0x3e, 0xcd, 0x38, 0xf7, 0x9e, 0xa3, 0xf7,
	0x73, 0x26, 0x71, 0xda, 0x78, 0x0e, 0xc0, 0xdc, 0x59, 0x2e, 0xb2, 0x28, 0xae, 0x1a, 0xc1, 0xb5,
	0x8a, 0x56, 0x92, 0xe0, 0x72, 0xfc, 0x62, 0x48, 0x68, 0xba, 0x1e, 0x84, 0x5a, 0xe4, 0xba, 0xe4,
	0xad, 0x4e, 0x7f, 0x01, 0xb8, 0xcb, 0xcf, 0xa0, 0x76, 0x6e, 0x9d, 0x49, 0x9c, 0x0b, 0x29, 0x21,
	0x85, 0x34, 0x0c, 0xf1, 0x3c, 0x81, 0x34, 0x8b, 0x66, 0x52, 0x42, 0x42, 0xf7, 0x5d, 0xbb, 0xcb,
	0xdb, 0xa5, 0x58, 0xe4, 0x10, 0xda, 0x9e, 0x0d, 0x56, 0xe2, 0x29, 0x92, 0xf2, 0xb8, 0x6d, 0xd5,
	0xac, 0x5b, 0x00, 0xbd, 0x07, 0x52, 0x22, 0xe9, 0x6e, 0xb5, 0x48, 0xf9, 0x13, 0x54, 0xba, 0xbe,
	0xcf, 0xc0, 0x7c, 0x80, 0xf5, 0xed, 0x0c, 0x5b, 0xe4, 0x90, 0x15, 0x69, 0xf8, 0x46, 0xeb, 0x9c,
	0xe1, 0x1b, 0x16, 0xdf, 0x6b, 0xe8, 0xea, 0xc6, 0xd1, 0x45, 0x9f, 0x79, 0x6b, 0x99, 0xd5, 0x79,
	0x48, 0x59, 0xcb, 0x9c, 0xdd, 0x9a, 0xb4, 0xb5, 0xcc, 0xd5, 0x89, 0xc1, 0x0d, 0x42, 0x4d, 0x43,
	0xd5, 0xe4, 0xd4, 0x88, 0x40, 0x4a, 0xa7, 0xa7, 0x3b, 0xd7, 0x72, 0xde, 0x0e, 0x29, 0x69, 0x64,
	0x0e, 0x87, 0x92, 0x96, 0x9c, 0x55, 0x48, 0xd7, 0x8a, 0x47, 0x49, 0xb3, 0xb2, 0xe1, 0x17, 0x00,
	0x77, 0xb8, 0x7a, 0x17, 0xa8, 0x18, 0x33, 0xa6, 0x7e, 0x7d, 0x9b, 0xdc, 0xcb, 0xe9, 0x84, 0x50,
	0x2f, 0x17, 0x88, 0x97, 0x45, 0x34, 0x1b, 0xd9, 0x4b, 0xf7, 0xaf, 0x53, 0x85, 0x26, 0xed, 0x75,
	0xb5, 0xd0, 0x03, 0x00, 0xff, 0xef, 0x52, 0xd2, 0x0e, 0x6f, 0x31, 0x66, 0x48, 0xd2, 0xbb, 0xca,
	0x6a, 0x3f, 0xe1, 0x19, 0xe2, 0xea, 0x09, 0x74, 0x2c, 0xa1, 0xab, 0xe8, 0xf3, 0x0c, 0xcc, 0xb2,
	0xda, 0x04, 0xb1, 0x1f, 0xa3, 0x43, 0x7a, 0x1c, 0xb1, 0x1f, 0xa3, 0xc3, 0xfa, 0x17, 0x58, 0x23,
	0xee, 0x2b, 0xa8, 0x12, 0xd9, 0x7d, 0xfa, 0x3d, 0x76, 0x29, 0xe1, 0x6b, 0xd6, 0x07, 0x19, 0xb8,
	0x87, 0x65, 0x55, 0x92, 0x07, 0x65, 0xae, 0xc4, 0x22, 0x74, 0x7c, 0xf0, 0x59, 0x42, 0xec, 0x14,
	0x2a, 0x72, 0x20, 0x86, 0xbe, 0xf1, 0xa3, 0xe1, 0x78, 0xfe, 0x5d, 0x4c, 0x1b, 0x6f, 0xef, 0x13,
	0x5e, 0x89, 0xa7, 0x48, 0xca, 0xe4, 0x12, 0x61, 0x52, 0x47, 0xb5, 0x34, 0x4c, 0x12, 0x3c, 0x15,
	0x7f, 0x92, 0x81, 0xf9, 0x00, 0xfb, 0x92, 0x3c, 0xba, 0xf0, 0x26, 0x18, 0xad, 0xa1, 0x82, 0xcf,
	0x13, 0x82, 0x0b, 0x68, 0x9e, 0x13, 0x41, 0xf4, 0x1d, 0x80, 0x5b, 0x3b, 0xdd, 0x0a, 0x34, 0x13,
	0x33, 0xe8, 0xbd, 0x3d, 0x90, 0xdc, 0x4b, 0xc9, 0x05, 0x50, 0x0f, 0xa7, 0x89, 0x87, 0x2f, 0xa0,
	0x23, 0x91, 0x3d, 0x54, 0xca, 0x92, 0xb3, 0xc8, 0xb2, 0x3e, 0xaf, 0xc7, 0x2e, 0xb2, 0x21, 0xbd,
	0x81, 0xd8, 0x45, 0x36, 0xec, 0xbb, 0x7f, 0x82, 0x22, 0x4b, 0xbf, 0x64, 0xa6, 0x29, 0xb2, 0x2c,
	0xab, 0x92, 0x14, 0x59, 0xae, 0xc4, 0x22, 0x74, 0x4a, 0x12, 0x14, 0x59, 0x36, 0x31, 0x52, 0x64,
	0x03, 0xbe, 0x54, 0xc7, 0x2e, 0xb2, 0xe1, 0x1f, 0xdb, 0x63, 0x17, 0xd9, 0x08, 0x1f, 0xd2, 0x13,
	0x14, 0x59, 0x1f, 0x26, 0x09, 0x8b, 0x6c, 0x80, 0x7d, 0x49, 0x8a, 0x2c, 0x6f, 0x82, 0xd1, 0x5a,
	0x11, 0x09, 0x8a, 0x6c, 0x30, 0xc1, 0xb9, 0xd7, 0xee, 0x3c, 0xcc, 0x83, 0x7b, 0x0f, 0xf3, 0xe0,
	0xa7, 0x87, 0x79, 0xf0, 0xf1, 0x7a, 0x7e, 0xe8, 0xde, 0x7a, 0x7e, 0xe8, 0xc7, 0xf5, 0xfc, 0xd0,
	0xeb, 0x27, 0x2b, 0x8a, 0xb9, 0xda, 0x28, 0x17, 0x24, 0x2d, 0xe4, 0xad, 0xea, 0xb2, 0x53, 0x9d,
	0x79, 0xa5, 0x2e, 0x1b, 0xe5, 0x51, 0x32, 0xf3, 0xc8, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92,
	0x2d, 0xa9, 0xac, 0xeb, 0x37, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of CrosschainRequest items.
	CrosschainRequest(ctx context.Context, in *QueryGetCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestResponse, error)
	CrosschainRequestAll(ctx context.Context, in *QueryAllCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestResponse, error)
	// Queries a list of CrosschainRequestConfirm items.
	CrosschainRequestConfirm(ctx context.Context, in *QueryGetCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestConfirmResponse, error)
	CrosschainRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestConfirmResponse, error)
	// Queries a list of CrosschainAckRequest items.
	CrosschainAckRequest(ctx context.Context, in *QueryGetCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestResponse, error)
	CrosschainAckRequestAll(ctx context.Context, in *QueryAllCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestResponse, error)
	// Queries a list of CrosschainAckRequestConfirm items.
	CrosschainAckRequestConfirm(ctx context.Context, in *QueryGetCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestConfirmResponse, error)
	CrosschainAckRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestConfirmResponse, error)
	// Queries a list of CrosschainAckReceipt items.
	CrosschainAckReceipt(ctx context.Context, in *QueryGetCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckReceiptResponse, error)
	CrosschainAckReceiptAll(ctx context.Context, in *QueryAllCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckReceiptResponse, error)
	// Queries a list of RelayerConfig items.
	RelayerConfig(ctx context.Context, in *QueryGetRelayerConfigRequest, opts ...grpc.CallOption) (*QueryGetRelayerConfigResponse, error)
	RelayerConfigAll(ctx context.Context, in *QueryAllRelayerConfigRequest, opts ...grpc.CallOption) (*QueryAllRelayerConfigResponse, error)
	// Queries a list of BlockedCrosschainRequest items.
	BlockedCrosschainRequest(ctx context.Context, in *QueryGetBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainRequestResponse, error)
	BlockedCrosschainRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainRequestResponse, error)
	// Queries a list of BlockedCrosschainAckRequest items.
	BlockedCrosschainAckRequest(ctx context.Context, in *QueryGetBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainAckRequestResponse, error)
	BlockedCrosschainAckRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainAckRequestResponse, error)
	IBCConfig(ctx context.Context, in *QueryGetIBCConfigRequest, opts ...grpc.CallOption) (*QueryGetIBCConfigResponse, error)
	// Queries a list of ExpiredCrosschainRequest items.
	ExpiredCrosschainRequest(ctx context.Context, in *QueryGetExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainRequestResponse, error)
	ExpiredCrosschainRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainRequestResponse, error)
	// Queries a list of ExpiredCrosschainAckRequest items.
	ExpiredCrosschainAckRequest(ctx context.Context, in *QueryGetExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainAckRequestResponse, error)
	ExpiredCrosschainAckRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainAckRequestResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequest(ctx context.Context, in *QueryGetCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestResponse, error) {
	out := new(QueryGetCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequestAll(ctx context.Context, in *QueryAllCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestResponse, error) {
	out := new(QueryAllCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequestConfirm(ctx context.Context, in *QueryGetCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainRequestConfirmResponse, error) {
	out := new(QueryGetCrosschainRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainRequestConfirmResponse, error) {
	out := new(QueryAllCrosschainRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirmAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequest(ctx context.Context, in *QueryGetCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestResponse, error) {
	out := new(QueryGetCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequestAll(ctx context.Context, in *QueryAllCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestResponse, error) {
	out := new(QueryAllCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequestConfirm(ctx context.Context, in *QueryGetCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckRequestConfirmResponse, error) {
	out := new(QueryGetCrosschainAckRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckRequestConfirmAll(ctx context.Context, in *QueryAllCrosschainAckRequestConfirmRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckRequestConfirmResponse, error) {
	out := new(QueryAllCrosschainAckRequestConfirmResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirmAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckReceipt(ctx context.Context, in *QueryGetCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryGetCrosschainAckReceiptResponse, error) {
	out := new(QueryGetCrosschainAckReceiptResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrosschainAckReceiptAll(ctx context.Context, in *QueryAllCrosschainAckReceiptRequest, opts ...grpc.CallOption) (*QueryAllCrosschainAckReceiptResponse, error) {
	out := new(QueryAllCrosschainAckReceiptResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceiptAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayerConfig(ctx context.Context, in *QueryGetRelayerConfigRequest, opts ...grpc.CallOption) (*QueryGetRelayerConfigResponse, error) {
	out := new(QueryGetRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/RelayerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RelayerConfigAll(ctx context.Context, in *QueryAllRelayerConfigRequest, opts ...grpc.CallOption) (*QueryAllRelayerConfigResponse, error) {
	out := new(QueryAllRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/RelayerConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainRequest(ctx context.Context, in *QueryGetBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainRequestResponse, error) {
	out := new(QueryGetBlockedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainRequestResponse, error) {
	out := new(QueryAllBlockedCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainAckRequest(ctx context.Context, in *QueryGetBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetBlockedCrosschainAckRequestResponse, error) {
	out := new(QueryGetBlockedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockedCrosschainAckRequestAll(ctx context.Context, in *QueryAllBlockedCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllBlockedCrosschainAckRequestResponse, error) {
	out := new(QueryAllBlockedCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCConfig(ctx context.Context, in *QueryGetIBCConfigRequest, opts ...grpc.CallOption) (*QueryGetIBCConfigResponse, error) {
	out := new(QueryGetIBCConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/IBCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainRequest(ctx context.Context, in *QueryGetExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainRequestResponse, error) {
	out := new(QueryGetExpiredCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainRequestResponse, error) {
	out := new(QueryAllExpiredCrosschainRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainAckRequest(ctx context.Context, in *QueryGetExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryGetExpiredCrosschainAckRequestResponse, error) {
	out := new(QueryGetExpiredCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredCrosschainAckRequestAll(ctx context.Context, in *QueryAllExpiredCrosschainAckRequestRequest, opts ...grpc.CallOption) (*QueryAllExpiredCrosschainAckRequestResponse, error) {
	out := new(QueryAllExpiredCrosschainAckRequestResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of CrosschainRequest items.
	CrosschainRequest(context.Context, *QueryGetCrosschainRequestRequest) (*QueryGetCrosschainRequestResponse, error)
	CrosschainRequestAll(context.Context, *QueryAllCrosschainRequestRequest) (*QueryAllCrosschainRequestResponse, error)
	// Queries a list of CrosschainRequestConfirm items.
	CrosschainRequestConfirm(context.Context, *QueryGetCrosschainRequestConfirmRequest) (*QueryGetCrosschainRequestConfirmResponse, error)
	CrosschainRequestConfirmAll(context.Context, *QueryAllCrosschainRequestConfirmRequest) (*QueryAllCrosschainRequestConfirmResponse, error)
	// Queries a list of CrosschainAckRequest items.
	CrosschainAckRequest(context.Context, *QueryGetCrosschainAckRequestRequest) (*QueryGetCrosschainAckRequestResponse, error)
	CrosschainAckRequestAll(context.Context, *QueryAllCrosschainAckRequestRequest) (*QueryAllCrosschainAckRequestResponse, error)
	// Queries a list of CrosschainAckRequestConfirm items.
	CrosschainAckRequestConfirm(context.Context, *QueryGetCrosschainAckRequestConfirmRequest) (*QueryGetCrosschainAckRequestConfirmResponse, error)
	CrosschainAckRequestConfirmAll(context.Context, *QueryAllCrosschainAckRequestConfirmRequest) (*QueryAllCrosschainAckRequestConfirmResponse, error)
	// Queries a list of CrosschainAckReceipt items.
	CrosschainAckReceipt(context.Context, *QueryGetCrosschainAckReceiptRequest) (*QueryGetCrosschainAckReceiptResponse, error)
	CrosschainAckReceiptAll(context.Context, *QueryAllCrosschainAckReceiptRequest) (*QueryAllCrosschainAckReceiptResponse, error)
	// Queries a list of RelayerConfig items.
	RelayerConfig(context.Context, *QueryGetRelayerConfigRequest) (*QueryGetRelayerConfigResponse, error)
	RelayerConfigAll(context.Context, *QueryAllRelayerConfigRequest) (*QueryAllRelayerConfigResponse, error)
	// Queries a list of BlockedCrosschainRequest items.
	BlockedCrosschainRequest(context.Context, *QueryGetBlockedCrosschainRequestRequest) (*QueryGetBlockedCrosschainRequestResponse, error)
	BlockedCrosschainRequestAll(context.Context, *QueryAllBlockedCrosschainRequestRequest) (*QueryAllBlockedCrosschainRequestResponse, error)
	// Queries a list of BlockedCrosschainAckRequest items.
	BlockedCrosschainAckRequest(context.Context, *QueryGetBlockedCrosschainAckRequestRequest) (*QueryGetBlockedCrosschainAckRequestResponse, error)
	BlockedCrosschainAckRequestAll(context.Context, *QueryAllBlockedCrosschainAckRequestRequest) (*QueryAllBlockedCrosschainAckRequestResponse, error)
	IBCConfig(context.Context, *QueryGetIBCConfigRequest) (*QueryGetIBCConfigResponse, error)
	// Queries a list of ExpiredCrosschainRequest items.
	ExpiredCrosschainRequest(context.Context, *QueryGetExpiredCrosschainRequestRequest) (*QueryGetExpiredCrosschainRequestResponse, error)
	ExpiredCrosschainRequestAll(context.Context, *QueryAllExpiredCrosschainRequestRequest) (*QueryAllExpiredCrosschainRequestResponse, error)
	// Queries a list of ExpiredCrosschainAckRequest items.
	ExpiredCrosschainAckRequest(context.Context, *QueryGetExpiredCrosschainAckRequestRequest) (*QueryGetExpiredCrosschainAckRequestResponse, error)
	ExpiredCrosschainAckRequestAll(context.Context, *QueryAllExpiredCrosschainAckRequestRequest) (*QueryAllExpiredCrosschainAckRequestResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequest(ctx context.Context, req *QueryGetCrosschainRequestRequest) (*QueryGetCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequestAll(ctx context.Context, req *QueryAllCrosschainRequestRequest) (*QueryAllCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequestConfirm(ctx context.Context, req *QueryGetCrosschainRequestConfirmRequest) (*QueryGetCrosschainRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequestConfirm not implemented")
}
func (*UnimplementedQueryServer) CrosschainRequestConfirmAll(ctx context.Context, req *QueryAllCrosschainRequestConfirmRequest) (*QueryAllCrosschainRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainRequestConfirmAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequest(ctx context.Context, req *QueryGetCrosschainAckRequestRequest) (*QueryGetCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequestAll(ctx context.Context, req *QueryAllCrosschainAckRequestRequest) (*QueryAllCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequestConfirm(ctx context.Context, req *QueryGetCrosschainAckRequestConfirmRequest) (*QueryGetCrosschainAckRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequestConfirm not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckRequestConfirmAll(ctx context.Context, req *QueryAllCrosschainAckRequestConfirmRequest) (*QueryAllCrosschainAckRequestConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckRequestConfirmAll not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckReceipt(ctx context.Context, req *QueryGetCrosschainAckReceiptRequest) (*QueryGetCrosschainAckReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckReceipt not implemented")
}
func (*UnimplementedQueryServer) CrosschainAckReceiptAll(ctx context.Context, req *QueryAllCrosschainAckReceiptRequest) (*QueryAllCrosschainAckReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosschainAckReceiptAll not implemented")
}
func (*UnimplementedQueryServer) RelayerConfig(ctx context.Context, req *QueryGetRelayerConfigRequest) (*QueryGetRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerConfig not implemented")
}
func (*UnimplementedQueryServer) RelayerConfigAll(ctx context.Context, req *QueryAllRelayerConfigRequest) (*QueryAllRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerConfigAll not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainRequest(ctx context.Context, req *QueryGetBlockedCrosschainRequestRequest) (*QueryGetBlockedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainRequestAll(ctx context.Context, req *QueryAllBlockedCrosschainRequestRequest) (*QueryAllBlockedCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainAckRequest(ctx context.Context, req *QueryGetBlockedCrosschainAckRequestRequest) (*QueryGetBlockedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) BlockedCrosschainAckRequestAll(ctx context.Context, req *QueryAllBlockedCrosschainAckRequestRequest) (*QueryAllBlockedCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedCrosschainAckRequestAll not implemented")
}
func (*UnimplementedQueryServer) IBCConfig(ctx context.Context, req *QueryGetIBCConfigRequest) (*QueryGetIBCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCConfig not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainRequest(ctx context.Context, req *QueryGetExpiredCrosschainRequestRequest) (*QueryGetExpiredCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainRequest not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainRequestAll(ctx context.Context, req *QueryAllExpiredCrosschainRequestRequest) (*QueryAllExpiredCrosschainRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainRequestAll not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainAckRequest(ctx context.Context, req *QueryGetExpiredCrosschainAckRequestRequest) (*QueryGetExpiredCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainAckRequest not implemented")
}
func (*UnimplementedQueryServer) ExpiredCrosschainAckRequestAll(ctx context.Context, req *QueryAllExpiredCrosschainAckRequestRequest) (*QueryAllExpiredCrosschainAckRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredCrosschainAckRequestAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequest(ctx, req.(*QueryGetCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequestAll(ctx, req.(*QueryAllCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequestConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequestConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequestConfirm(ctx, req.(*QueryGetCrosschainRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainRequestConfirmAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainRequestConfirmAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainRequestConfirmAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainRequestConfirmAll(ctx, req.(*QueryAllCrosschainRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequest(ctx, req.(*QueryGetCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequestAll(ctx, req.(*QueryAllCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequestConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainAckRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequestConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequestConfirm(ctx, req.(*QueryGetCrosschainAckRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckRequestConfirmAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainAckRequestConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckRequestConfirmAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckRequestConfirmAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckRequestConfirmAll(ctx, req.(*QueryAllCrosschainAckRequestConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCrosschainAckReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckReceipt(ctx, req.(*QueryGetCrosschainAckReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrosschainAckReceiptAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCrosschainAckReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrosschainAckReceiptAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/CrosschainAckReceiptAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrosschainAckReceiptAll(ctx, req.(*QueryAllCrosschainAckReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRelayerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/RelayerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayerConfig(ctx, req.(*QueryGetRelayerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RelayerConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRelayerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RelayerConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/RelayerConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RelayerConfigAll(ctx, req.(*QueryAllRelayerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainRequest(ctx, req.(*QueryGetBlockedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlockedCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainRequestAll(ctx, req.(*QueryAllBlockedCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainAckRequest(ctx, req.(*QueryGetBlockedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockedCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlockedCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockedCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/BlockedCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockedCrosschainAckRequestAll(ctx, req.(*QueryAllBlockedCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIBCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/IBCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCConfig(ctx, req.(*QueryGetIBCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExpiredCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainRequest(ctx, req.(*QueryGetExpiredCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredCrosschainRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainRequestAll(ctx, req.(*QueryAllExpiredCrosschainRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainAckRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExpiredCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainAckRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainAckRequest(ctx, req.(*QueryGetExpiredCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredCrosschainAckRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredCrosschainAckRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredCrosschainAckRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.crosschain.Query/ExpiredCrosschainAckRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredCrosschainAckRequestAll(ctx, req.(*QueryAllExpiredCrosschainAckRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.crosschain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CrosschainRequest",
			Handler:    _Query_CrosschainRequest_Handler,
		},
		{
			MethodName: "CrosschainRequestAll",
			Handler:    _Query_CrosschainRequestAll_Handler,
		},
		{
			MethodName: "CrosschainRequestConfirm",
			Handler:    _Query_CrosschainRequestConfirm_Handler,
		},
		{
			MethodName: "CrosschainRequestConfirmAll",
			Handler:    _Query_CrosschainRequestConfirmAll_Handler,
		},
		{
			MethodName: "CrosschainAckRequest",
			Handler:    _Query_CrosschainAckRequest_Handler,
		},
		{
			MethodName: "CrosschainAckRequestAll",
			Handler:    _Query_CrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "CrosschainAckRequestConfirm",
			Handler:    _Query_CrosschainAckRequestConfirm_Handler,
		},
		{
			MethodName: "CrosschainAckRequestConfirmAll",
			Handler:    _Query_CrosschainAckRequestConfirmAll_Handler,
		},
		{
			MethodName: "CrosschainAckReceipt",
			Handler:    _Query_CrosschainAckReceipt_Handler,
		},
		{
			MethodName: "CrosschainAckReceiptAll",
			Handler:    _Query_CrosschainAckReceiptAll_Handler,
		},
		{
			MethodName: "RelayerConfig",
			Handler:    _Query_RelayerConfig_Handler,
		},
		{
			MethodName: "RelayerConfigAll",
			Handler:    _Query_RelayerConfigAll_Handler,
		},
		{
			MethodName: "BlockedCrosschainRequest",
			Handler:    _Query_BlockedCrosschainRequest_Handler,
		},
		{
			MethodName: "BlockedCrosschainRequestAll",
			Handler:    _Query_BlockedCrosschainRequestAll_Handler,
		},
		{
			MethodName: "BlockedCrosschainAckRequest",
			Handler:    _Query_BlockedCrosschainAckRequest_Handler,
		},
		{
			MethodName: "BlockedCrosschainAckRequestAll",
			Handler:    _Query_BlockedCrosschainAckRequestAll_Handler,
		},
		{
			MethodName: "IBCConfig",
			Handler:    _Query_IBCConfig_Handler,
		},
		{
			MethodName: "ExpiredCrosschainRequest",
			Handler:    _Query_ExpiredCrosschainRequest_Handler,
		},
		{
			MethodName: "ExpiredCrosschainRequestAll",
			Handler:    _Query_ExpiredCrosschainRequestAll_Handler,
		},
		{
			MethodName: "ExpiredCrosschainAckRequest",
			Handler:    _Query_ExpiredCrosschainAckRequest_Handler,
		},
		{
			MethodName: "ExpiredCrosschainAckRequestAll",
			Handler:    _Query_ExpiredCrosschainAckRequestAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerchain/crosschain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainRequest) > 0 {
		for iNdEx := len(m.CrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainRequest) > 0 {
		for iNdEx := len(m.CrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrosschainRequestConfirm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainRequestConfirm) > 0 {
		for iNdEx := len(m.CrosschainRequestConfirm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequestConfirm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckRequest) > 0 {
		for iNdEx := len(m.CrosschainAckRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckRequest) > 0 {
		for iNdEx := len(m.CrosschainAckRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CrosschainAckRequestConfirm.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckRequestConfirm) > 0 {
		for iNdEx := len(m.CrosschainAckRequestConfirm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequestConfirm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCrosschainAckReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCrosschainAckReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCrosschainAckReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckReceipt) > 0 {
		for iNdEx := len(m.CrosschainAckReceipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckReceipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCrosschainAckReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCrosschainAckReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCrosschainAckReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CrosschainAckReceipt) > 0 {
		for iNdEx := len(m.CrosschainAckReceipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckReceipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelayerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelayerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelayerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RelayerConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRelayerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelayerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelayerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RelayerConfig) > 0 {
		for iNdEx := len(m.RelayerConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelayerConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockedCrosschainRequests) > 0 {
		for iNdEx := len(m.BlockedCrosschainRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockedCrosschainRequests) > 0 {
		for iNdEx := len(m.BlockedCrosschainRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockedCrosschainAckRequests) > 0 {
		for iNdEx := len(m.BlockedCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockedCrosschainAckRequests) > 0 {
		for iNdEx := len(m.BlockedCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIBCConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIBCConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIBCConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetIBCConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIBCConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIBCConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredCrosschainRequests) > 0 {
		for iNdEx := len(m.ExpiredCrosschainRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredCrosschainRequest) > 0 {
		for iNdEx := len(m.ExpiredCrosschainRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredCrosschainAckRequests) > 0 {
		for iNdEx := len(m.ExpiredCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredCrosschainAckRequests) > 0 {
		for iNdEx := len(m.ExpiredCrosschainAckRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainAckRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainRequest) > 0 {
		for _, e := range m.CrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainRequest) > 0 {
		for _, e := range m.CrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrosschainRequestConfirm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCrosschainRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainRequestConfirm) > 0 {
		for _, e := range m.CrosschainRequestConfirm {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckRequest) > 0 {
		for _, e := range m.CrosschainAckRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckRequest) > 0 {
		for _, e := range m.CrosschainAckRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CrosschainAckRequestConfirm.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCrosschainAckRequestConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckRequestConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckRequestConfirm) > 0 {
		for _, e := range m.CrosschainAckRequestConfirm {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCrosschainAckReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckReceiptIdentifier))
	}
	return n
}

func (m *QueryGetCrosschainAckReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckReceipt) > 0 {
		for _, e := range m.CrosschainAckReceipt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCrosschainAckReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CrosschainAckReceipt) > 0 {
		for _, e := range m.CrosschainAckReceipt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelayerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RelayerConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRelayerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RelayerConfig) > 0 {
		for _, e := range m.RelayerConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetBlockedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockedCrosschainRequests) > 0 {
		for _, e := range m.BlockedCrosschainRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlockedCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlockedCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockedCrosschainRequests) > 0 {
		for _, e := range m.BlockedCrosschainRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetBlockedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockedCrosschainAckRequests) > 0 {
		for _, e := range m.BlockedCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlockedCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlockedCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockedCrosschainAckRequests) > 0 {
		for _, e := range m.BlockedCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIBCConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetIBCConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExpiredCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *QueryGetExpiredCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredCrosschainRequests) > 0 {
		for _, e := range m.ExpiredCrosschainRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredCrosschainRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredCrosschainRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredCrosschainRequest) > 0 {
		for _, e := range m.ExpiredCrosschainRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExpiredCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovQuery(uint64(m.AckRequestIdentifier))
	}
	return n
}

func (m *QueryGetExpiredCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredCrosschainAckRequests) > 0 {
		for _, e := range m.ExpiredCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredCrosschainAckRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredCrosschainAckRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredCrosschainAckRequests) > 0 {
		for _, e := range m.ExpiredCrosschainAckRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequest = append(m.CrosschainRequest, CrosschainRequest{})
			if err := m.CrosschainRequest[len(m.CrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequest = append(m.CrosschainRequest, CrosschainRequest{})
			if err := m.CrosschainRequest[len(m.CrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainRequestConfirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequestConfirm = append(m.CrosschainRequestConfirm, CrosschainRequestConfirm{})
			if err := m.CrosschainRequestConfirm[len(m.CrosschainRequestConfirm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequest = append(m.CrosschainAckRequest, CrosschainAckRequest{})
			if err := m.CrosschainAckRequest[len(m.CrosschainAckRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequest = append(m.CrosschainAckRequest, CrosschainAckRequest{})
			if err := m.CrosschainAckRequest[len(m.CrosschainAckRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrosschainAckRequestConfirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckRequestConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckRequestConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequestConfirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequestConfirm = append(m.CrosschainAckRequestConfirm, CrosschainAckRequestConfirm{})
			if err := m.CrosschainAckRequestConfirm[len(m.CrosschainAckRequestConfirm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCrosschainAckReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCrosschainAckReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckReceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckReceipt = append(m.CrosschainAckReceipt, CrosschainAckReceipt{})
			if err := m.CrosschainAckReceipt[len(m.CrosschainAckReceipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCrosschainAckReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCrosschainAckReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckReceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckReceipt = append(m.CrosschainAckReceipt, CrosschainAckReceipt{})
			if err := m.CrosschainAckReceipt[len(m.CrosschainAckReceipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelayerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelayerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelayerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelayerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelayerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelayerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerConfig = append(m.RelayerConfig, RelayerConfig{})
			if err := m.RelayerConfig[len(m.RelayerConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainRequests = append(m.BlockedCrosschainRequests, CrosschainRequest{})
			if err := m.BlockedCrosschainRequests[len(m.BlockedCrosschainRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainRequests = append(m.BlockedCrosschainRequests, CrosschainRequest{})
			if err := m.BlockedCrosschainRequests[len(m.BlockedCrosschainRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainAckRequests = append(m.BlockedCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.BlockedCrosschainAckRequests[len(m.BlockedCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockedCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockedCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainAckRequests = append(m.BlockedCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.BlockedCrosschainAckRequests[len(m.BlockedCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIBCConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIBCConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIBCConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIBCConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIBCConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIBCConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainRequests = append(m.ExpiredCrosschainRequests, CrosschainRequest{})
			if err := m.ExpiredCrosschainRequests[len(m.ExpiredCrosschainRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainRequest = append(m.ExpiredCrosschainRequest, CrosschainRequest{})
			if err := m.ExpiredCrosschainRequest[len(m.ExpiredCrosschainRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainAckRequests = append(m.ExpiredCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.ExpiredCrosschainAckRequests[len(m.ExpiredCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainAckRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredCrosschainAckRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredCrosschainAckRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainAckRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainAckRequests = append(m.ExpiredCrosschainAckRequests, CrosschainAckRequest{})
			if err := m.ExpiredCrosschainAckRequests[len(m.ExpiredCrosschainAckRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
