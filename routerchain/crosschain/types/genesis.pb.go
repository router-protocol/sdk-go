// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the crosschain module's genesis state.
type GenesisState struct {
	Params                                 Params                        `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	PortId                                 string                        `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	CrosschainRequestList                  []CrosschainRequest           `protobuf:"bytes,3,rep,name=crosschainRequestList,proto3" json:"crosschainRequestList"`
	CrosschainRequestConfirmList           []CrosschainRequestConfirm    `protobuf:"bytes,4,rep,name=crosschainRequestConfirmList,proto3" json:"crosschainRequestConfirmList"`
	CrosschainAckRequestList               []CrosschainAckRequest        `protobuf:"bytes,5,rep,name=crosschainAckRequestList,proto3" json:"crosschainAckRequestList"`
	CrosschainAckRequestConfirmList        []CrosschainAckRequestConfirm `protobuf:"bytes,6,rep,name=crosschainAckRequestConfirmList,proto3" json:"crosschainAckRequestConfirmList"`
	CrosschainAckReceiptList               []CrosschainAckReceipt        `protobuf:"bytes,7,rep,name=crosschainAckReceiptList,proto3" json:"crosschainAckReceiptList"`
	RelayerConfigList                      []RelayerConfig               `protobuf:"bytes,8,rep,name=relayerConfigList,proto3" json:"relayerConfigList"`
	BlockedCrosschainRequestList           []CrosschainRequest           `protobuf:"bytes,9,rep,name=blockedCrosschainRequestList,proto3" json:"blockedCrosschainRequestList"`
	BlockedCrosschainAckRequestList        []CrosschainAckRequest        `protobuf:"bytes,10,rep,name=blockedCrosschainAckRequestList,proto3" json:"blockedCrosschainAckRequestList"`
	ExpiredCrosschainRequestList           []CrosschainRequest           `protobuf:"bytes,11,rep,name=expiredCrosschainRequestList,proto3" json:"expiredCrosschainRequestList"`
	ExpiredCrosschainAckRequestList        []CrosschainAckRequest        `protobuf:"bytes,12,rep,name=expiredCrosschainAckRequestList,proto3" json:"expiredCrosschainAckRequestList"`
	ValidCrosschainRequestList             []CrosschainRequest           `protobuf:"bytes,13,rep,name=validCrosschainRequestList,proto3" json:"validCrosschainRequestList"`
	NativeTransferedCrosschainRequestList  []CrosschainRequest           `protobuf:"bytes,14,rep,name=nativeTransferedCrosschainRequestList,proto3" json:"nativeTransferedCrosschainRequestList"`
	ReadyToExecuteCrosschainRequestList    []CrosschainRequest           `protobuf:"bytes,15,rep,name=readyToExecuteCrosschainRequestList,proto3" json:"readyToExecuteCrosschainRequestList"`
	ExecutedCrosschainRequestList          []CrosschainRequest           `protobuf:"bytes,16,rep,name=executedCrosschainRequestList,proto3" json:"executedCrosschainRequestList"`
	FeesSettledCrosschainRequestList       []CrosschainRequest           `protobuf:"bytes,17,rep,name=feesSettledCrosschainRequestList,proto3" json:"feesSettledCrosschainRequestList"`
	CompletedCrosschainRequestList         []CrosschainRequest           `protobuf:"bytes,18,rep,name=completedCrosschainRequestList,proto3" json:"completedCrosschainRequestList"`
	ValidCrosschainAckRequestList          []CrosschainAckRequest        `protobuf:"bytes,19,rep,name=validCrosschainAckRequestList,proto3" json:"validCrosschainAckRequestList"`
	ReadyToExecuteCrosschainAckRequestList []CrosschainAckRequest        `protobuf:"bytes,20,rep,name=readyToExecuteCrosschainAckRequestList,proto3" json:"readyToExecuteCrosschainAckRequestList"`
	ExecutedCrosschainAckRequestList       []CrosschainAckRequest        `protobuf:"bytes,21,rep,name=executedCrosschainAckRequestList,proto3" json:"executedCrosschainAckRequestList"`
	FeesSettledCrosschainAckRequestList    []CrosschainAckRequest        `protobuf:"bytes,22,rep,name=feesSettledCrosschainAckRequestList,proto3" json:"feesSettledCrosschainAckRequestList"`
	CompletedCrosschainAckRequestList      []CrosschainAckRequest        `protobuf:"bytes,23,rep,name=completedCrosschainAckRequestList,proto3" json:"completedCrosschainAckRequestList"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_43a0f02ebde52a8a, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *GenesisState) GetCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.CrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetCrosschainRequestConfirmList() []CrosschainRequestConfirm {
	if m != nil {
		return m.CrosschainRequestConfirmList
	}
	return nil
}

func (m *GenesisState) GetCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.CrosschainAckRequestList
	}
	return nil
}

func (m *GenesisState) GetCrosschainAckRequestConfirmList() []CrosschainAckRequestConfirm {
	if m != nil {
		return m.CrosschainAckRequestConfirmList
	}
	return nil
}

func (m *GenesisState) GetCrosschainAckReceiptList() []CrosschainAckReceipt {
	if m != nil {
		return m.CrosschainAckReceiptList
	}
	return nil
}

func (m *GenesisState) GetRelayerConfigList() []RelayerConfig {
	if m != nil {
		return m.RelayerConfigList
	}
	return nil
}

func (m *GenesisState) GetBlockedCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.BlockedCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetBlockedCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.BlockedCrosschainAckRequestList
	}
	return nil
}

func (m *GenesisState) GetExpiredCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.ExpiredCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetExpiredCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.ExpiredCrosschainAckRequestList
	}
	return nil
}

func (m *GenesisState) GetValidCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.ValidCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetNativeTransferedCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.NativeTransferedCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetReadyToExecuteCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.ReadyToExecuteCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetExecutedCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.ExecutedCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetFeesSettledCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.FeesSettledCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetCompletedCrosschainRequestList() []CrosschainRequest {
	if m != nil {
		return m.CompletedCrosschainRequestList
	}
	return nil
}

func (m *GenesisState) GetValidCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.ValidCrosschainAckRequestList
	}
	return nil
}

func (m *GenesisState) GetReadyToExecuteCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.ReadyToExecuteCrosschainAckRequestList
	}
	return nil
}

func (m *GenesisState) GetExecutedCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.ExecutedCrosschainAckRequestList
	}
	return nil
}

func (m *GenesisState) GetFeesSettledCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.FeesSettledCrosschainAckRequestList
	}
	return nil
}

func (m *GenesisState) GetCompletedCrosschainAckRequestList() []CrosschainAckRequest {
	if m != nil {
		return m.CompletedCrosschainAckRequestList
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "routerprotocol.routerchain.crosschain.GenesisState")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/genesis.proto", fileDescriptor_43a0f02ebde52a8a)
}

var fileDescriptor_43a0f02ebde52a8a = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0xb4, 0xa4, 0xf4, 0x5a, 0x7e, 0xf4, 0x68, 0x49, 0x14, 0xb5, 0x4e, 0x20, 0x14,
	0x45, 0x42, 0x75, 0xa4, 0x16, 0x09, 0x44, 0x07, 0x44, 0x22, 0x84, 0x10, 0x0c, 0x28, 0xcd, 0xc4,
	0x12, 0x39, 0xce, 0xc5, 0xb1, 0xe2, 0xe4, 0xcc, 0xf9, 0x52, 0x25, 0x03, 0x0c, 0x08, 0x81, 0x00,
	0x21, 0x2a, 0x60, 0xe1, 0x9f, 0x61, 0xee, 0xd8, 0x91, 0x09, 0xa1, 0xe4, 0x1f, 0x41, 0x3d, 0x3b,
	0x24, 0x38, 0x3e, 0xdb, 0x6d, 0x6f, 0xb3, 0xe5, 0xf7, 0xde, 0xe7, 0xe3, 0xaf, 0xdf, 0x0d, 0x86,
	0x37, 0x29, 0xe9, 0x31, 0x4c, 0xf5, 0x96, 0x66, 0x76, 0x8b, 0x3a, 0x25, 0x8e, 0xe3, 0x5e, 0x1a,
	0xb8, 0x8b, 0x1d, 0xd3, 0x51, 0x6d, 0x4a, 0x18, 0x41, 0x9b, 0x6e, 0x15, 0xbf, 0xd1, 0x89, 0xa5,
	0x4e, 0x35, 0xa9, 0x93, 0xa6, 0xcc, 0xaa, 0x41, 0x0c, 0xc2, 0x8b, 0x8a, 0xc7, 0x57, 0x6e, 0x73,
	0x26, 0x2f, 0x40, 0xd8, 0x1a, 0xd5, 0x3a, 0x1e, 0x21, 0x53, 0x14, 0x14, 0x4d, 0x2e, 0x6b, 0x14,
	0xbf, 0xec, 0x61, 0x87, 0x79, 0x0d, 0x77, 0x63, 0x37, 0xd4, 0x74, 0xd2, 0x6d, 0x9a, 0xb4, 0xe3,
	0x35, 0xee, 0x44, 0x37, 0x6a, 0x7a, 0xdb, 0x47, 0xdb, 0x3d, 0x51, 0xd3, 0x69, 0x89, 0x3a, 0x36,
	0xed, 0x31, 0xf1, 0xb6, 0xa0, 0x89, 0x62, 0x4b, 0x1b, 0x60, 0xea, 0x22, 0x0c, 0xb7, 0xf8, 0xc6,
	0xcf, 0x14, 0x5c, 0x7e, 0xec, 0x7e, 0xb1, 0x3d, 0xa6, 0x31, 0x8c, 0x9e, 0xc2, 0xa4, 0x1b, 0x6f,
	0x1a, 0xe4, 0x40, 0x61, 0x69, 0x7b, 0x4b, 0x8d, 0xf5, 0x05, 0xd5, 0xe7, 0xbc, 0xa9, 0x34, 0x7f,
	0xf8, 0x3b, 0x9b, 0xa8, 0x78, 0x23, 0x50, 0x0a, 0x2e, 0xd8, 0x84, 0xb2, 0x9a, 0xd9, 0x48, 0x9f,
	0xcb, 0x81, 0xc2, 0x62, 0x25, 0x79, 0x7c, 0xfb, 0xa4, 0x81, 0x18, 0x5c, 0x9b, 0xf4, 0x56, 0xdc,
	0x77, 0x7f, 0x66, 0x3a, 0x2c, 0x3d, 0x97, 0x9b, 0x2b, 0x2c, 0x6d, 0xdf, 0x8b, 0x09, 0x2d, 0xfb,
	0x67, 0x78, 0xfc, 0xe0, 0xe1, 0xe8, 0x03, 0x80, 0xeb, 0x33, 0x4f, 0xca, 0x6e, 0xe2, 0x9c, 0x3e,
	0xcf, 0xe9, 0x0f, 0x4e, 0x4b, 0xf7, 0x46, 0x79, 0x12, 0xa1, 0x28, 0xf4, 0x0a, 0xa6, 0x27, 0xcf,
	0x1f, 0xea, 0xed, 0xe9, 0x10, 0xce, 0x73, 0x8d, 0xdd, 0x13, 0x6b, 0x4c, 0xc6, 0x78, 0x0a, 0x42,
	0x04, 0xfa, 0x0a, 0x60, 0x36, 0xe8, 0xe1, 0x74, 0x1a, 0x49, 0xae, 0x51, 0x3a, 0x83, 0xc6, 0xff,
	0x81, 0x44, 0x01, 0x03, 0x32, 0xe1, 0x7b, 0xcd, 0x65, 0x16, 0xce, 0x92, 0x09, 0x1f, 0x23, 0xc8,
	0xe4, 0x1f, 0x02, 0xb5, 0xe0, 0x8a, 0x77, 0x46, 0xb8, 0x94, 0xc1, 0xb9, 0x17, 0x38, 0xf7, 0x4e,
	0x4c, 0x6e, 0x65, 0xba, 0xdf, 0x03, 0xce, 0x0e, 0x45, 0x6f, 0x00, 0x5c, 0xaf, 0x5b, 0x44, 0x6f,
	0xe3, 0x46, 0x39, 0xf0, 0x18, 0x2c, 0x4a, 0x39, 0x06, 0xa1, 0x0c, 0xf4, 0x09, 0xc0, 0xec, 0x4c,
	0x81, 0x6f, 0x13, 0xa1, 0xac, 0x4d, 0x8c, 0x22, 0xf1, 0x48, 0x70, 0xdf, 0x36, 0xa9, 0x28, 0x92,
	0x25, 0x39, 0x91, 0x84, 0x31, 0x78, 0x24, 0x33, 0x05, 0xbe, 0x48, 0x96, 0xa5, 0x45, 0x12, 0x41,
	0x42, 0xaf, 0x61, 0x66, 0x5f, 0xb3, 0x4c, 0x41, 0x1e, 0x17, 0xa5, 0xe4, 0x11, 0x42, 0x40, 0xdf,
	0x01, 0xdc, 0xec, 0x6a, 0xcc, 0xdc, 0xc7, 0x55, 0xaa, 0x75, 0x9d, 0x26, 0x16, 0x7e, 0x9b, 0x4b,
	0x52, 0x5c, 0xe2, 0xc1, 0xd0, 0x01, 0x80, 0x79, 0x8a, 0xb5, 0xc6, 0xa0, 0x4a, 0x1e, 0xf5, 0xb1,
	0xde, 0x63, 0x38, 0x58, 0xea, 0xb2, 0x14, 0xa9, 0x38, 0x28, 0xf4, 0x16, 0xc0, 0x0d, 0xec, 0x16,
	0x08, 0x12, 0xba, 0x22, 0x45, 0x26, 0x1c, 0x82, 0x3e, 0x02, 0x98, 0x6b, 0x62, 0xec, 0xec, 0x61,
	0xc6, 0x2c, 0x91, 0xc9, 0x8a, 0x14, 0x93, 0x48, 0x0e, 0x7a, 0x07, 0xa0, 0xa2, 0x93, 0x8e, 0x6d,
	0x61, 0x61, 0x28, 0x48, 0x8a, 0x4a, 0x04, 0x05, 0xbd, 0x07, 0x70, 0xc3, 0xb7, 0xe5, 0xbe, 0x23,
	0x7d, 0x55, 0xd6, 0x91, 0x0e, 0xe7, 0xa0, 0x1f, 0x00, 0xde, 0x12, 0xad, 0x93, 0x4f, 0x69, 0x55,
	0x96, 0x52, 0x4c, 0x20, 0xfa, 0x0c, 0x60, 0x6e, 0x76, 0xbb, 0x7c, 0x56, 0x6b, 0xb2, 0xac, 0x22,
	0x51, 0xe8, 0x1b, 0x80, 0xf9, 0xc0, 0x1d, 0xf3, 0x29, 0x5d, 0x93, 0xa5, 0x14, 0x87, 0x86, 0xbe,
	0x00, 0x78, 0x3d, 0x60, 0xdd, 0x7c, 0x4e, 0x29, 0x59, 0x4e, 0xd1, 0xac, 0x52, 0xf5, 0x70, 0xa8,
	0x80, 0xa3, 0xa1, 0x02, 0xfe, 0x0c, 0x15, 0x70, 0x30, 0x52, 0x12, 0x47, 0x23, 0x25, 0xf1, 0x6b,
	0xa4, 0x24, 0x5e, 0xdc, 0x37, 0x4c, 0xd6, 0xea, 0xd5, 0x55, 0x9d, 0x74, 0xbc, 0x7f, 0xa4, 0xad,
	0xb1, 0xca, 0xf8, 0xde, 0xfd, 0x31, 0xe8, 0x4f, 0xff, 0x25, 0xb0, 0x81, 0x8d, 0x9d, 0x7a, 0x92,
	0x57, 0xee, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x31, 0xc8, 0xb0, 0x59, 0xe5, 0x0d, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompletedCrosschainAckRequestList) > 0 {
		for iNdEx := len(m.CompletedCrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedCrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.FeesSettledCrosschainAckRequestList) > 0 {
		for iNdEx := len(m.FeesSettledCrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeesSettledCrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.ExecutedCrosschainAckRequestList) > 0 {
		for iNdEx := len(m.ExecutedCrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutedCrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.ReadyToExecuteCrosschainAckRequestList) > 0 {
		for iNdEx := len(m.ReadyToExecuteCrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReadyToExecuteCrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.ValidCrosschainAckRequestList) > 0 {
		for iNdEx := len(m.ValidCrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidCrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.CompletedCrosschainRequestList) > 0 {
		for iNdEx := len(m.CompletedCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.FeesSettledCrosschainRequestList) > 0 {
		for iNdEx := len(m.FeesSettledCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeesSettledCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ExecutedCrosschainRequestList) > 0 {
		for iNdEx := len(m.ExecutedCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExecutedCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ReadyToExecuteCrosschainRequestList) > 0 {
		for iNdEx := len(m.ReadyToExecuteCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReadyToExecuteCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.NativeTransferedCrosschainRequestList) > 0 {
		for iNdEx := len(m.NativeTransferedCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NativeTransferedCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ValidCrosschainRequestList) > 0 {
		for iNdEx := len(m.ValidCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.ExpiredCrosschainAckRequestList) > 0 {
		for iNdEx := len(m.ExpiredCrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ExpiredCrosschainRequestList) > 0 {
		for iNdEx := len(m.ExpiredCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.BlockedCrosschainAckRequestList) > 0 {
		for iNdEx := len(m.BlockedCrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.BlockedCrosschainRequestList) > 0 {
		for iNdEx := len(m.BlockedCrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockedCrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RelayerConfigList) > 0 {
		for iNdEx := len(m.RelayerConfigList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelayerConfigList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CrosschainAckReceiptList) > 0 {
		for iNdEx := len(m.CrosschainAckReceiptList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckReceiptList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CrosschainAckRequestConfirmList) > 0 {
		for iNdEx := len(m.CrosschainAckRequestConfirmList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequestConfirmList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CrosschainAckRequestList) > 0 {
		for iNdEx := len(m.CrosschainAckRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainAckRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CrosschainRequestConfirmList) > 0 {
		for iNdEx := len(m.CrosschainRequestConfirmList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequestConfirmList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CrosschainRequestList) > 0 {
		for iNdEx := len(m.CrosschainRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CrosschainRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.CrosschainRequestList) > 0 {
		for _, e := range m.CrosschainRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CrosschainRequestConfirmList) > 0 {
		for _, e := range m.CrosschainRequestConfirmList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CrosschainAckRequestList) > 0 {
		for _, e := range m.CrosschainAckRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CrosschainAckRequestConfirmList) > 0 {
		for _, e := range m.CrosschainAckRequestConfirmList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CrosschainAckReceiptList) > 0 {
		for _, e := range m.CrosschainAckReceiptList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RelayerConfigList) > 0 {
		for _, e := range m.RelayerConfigList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BlockedCrosschainRequestList) > 0 {
		for _, e := range m.BlockedCrosschainRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BlockedCrosschainAckRequestList) > 0 {
		for _, e := range m.BlockedCrosschainAckRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ExpiredCrosschainRequestList) > 0 {
		for _, e := range m.ExpiredCrosschainRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ExpiredCrosschainAckRequestList) > 0 {
		for _, e := range m.ExpiredCrosschainAckRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValidCrosschainRequestList) > 0 {
		for _, e := range m.ValidCrosschainRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NativeTransferedCrosschainRequestList) > 0 {
		for _, e := range m.NativeTransferedCrosschainRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ReadyToExecuteCrosschainRequestList) > 0 {
		for _, e := range m.ReadyToExecuteCrosschainRequestList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ExecutedCrosschainRequestList) > 0 {
		for _, e := range m.ExecutedCrosschainRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FeesSettledCrosschainRequestList) > 0 {
		for _, e := range m.FeesSettledCrosschainRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CompletedCrosschainRequestList) > 0 {
		for _, e := range m.CompletedCrosschainRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ValidCrosschainAckRequestList) > 0 {
		for _, e := range m.ValidCrosschainAckRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ReadyToExecuteCrosschainAckRequestList) > 0 {
		for _, e := range m.ReadyToExecuteCrosschainAckRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ExecutedCrosschainAckRequestList) > 0 {
		for _, e := range m.ExecutedCrosschainAckRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FeesSettledCrosschainAckRequestList) > 0 {
		for _, e := range m.FeesSettledCrosschainAckRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CompletedCrosschainAckRequestList) > 0 {
		for _, e := range m.CompletedCrosschainAckRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequestList = append(m.CrosschainRequestList, CrosschainRequest{})
			if err := m.CrosschainRequestList[len(m.CrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainRequestConfirmList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainRequestConfirmList = append(m.CrosschainRequestConfirmList, CrosschainRequestConfirm{})
			if err := m.CrosschainRequestConfirmList[len(m.CrosschainRequestConfirmList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequestList = append(m.CrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.CrosschainAckRequestList[len(m.CrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckRequestConfirmList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckRequestConfirmList = append(m.CrosschainAckRequestConfirmList, CrosschainAckRequestConfirm{})
			if err := m.CrosschainAckRequestConfirmList[len(m.CrosschainAckRequestConfirmList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainAckReceiptList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainAckReceiptList = append(m.CrosschainAckReceiptList, CrosschainAckReceipt{})
			if err := m.CrosschainAckReceiptList[len(m.CrosschainAckReceiptList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerConfigList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerConfigList = append(m.RelayerConfigList, RelayerConfig{})
			if err := m.RelayerConfigList[len(m.RelayerConfigList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainRequestList = append(m.BlockedCrosschainRequestList, CrosschainRequest{})
			if err := m.BlockedCrosschainRequestList[len(m.BlockedCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedCrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedCrosschainAckRequestList = append(m.BlockedCrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.BlockedCrosschainAckRequestList[len(m.BlockedCrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainRequestList = append(m.ExpiredCrosschainRequestList, CrosschainRequest{})
			if err := m.ExpiredCrosschainRequestList[len(m.ExpiredCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredCrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredCrosschainAckRequestList = append(m.ExpiredCrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.ExpiredCrosschainAckRequestList[len(m.ExpiredCrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCrosschainRequestList = append(m.ValidCrosschainRequestList, CrosschainRequest{})
			if err := m.ValidCrosschainRequestList[len(m.ValidCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTransferedCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeTransferedCrosschainRequestList = append(m.NativeTransferedCrosschainRequestList, CrosschainRequest{})
			if err := m.NativeTransferedCrosschainRequestList[len(m.NativeTransferedCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyToExecuteCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadyToExecuteCrosschainRequestList = append(m.ReadyToExecuteCrosschainRequestList, CrosschainRequest{})
			if err := m.ReadyToExecuteCrosschainRequestList[len(m.ReadyToExecuteCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutedCrosschainRequestList = append(m.ExecutedCrosschainRequestList, CrosschainRequest{})
			if err := m.ExecutedCrosschainRequestList[len(m.ExecutedCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesSettledCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesSettledCrosschainRequestList = append(m.FeesSettledCrosschainRequestList, CrosschainRequest{})
			if err := m.FeesSettledCrosschainRequestList[len(m.FeesSettledCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedCrosschainRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedCrosschainRequestList = append(m.CompletedCrosschainRequestList, CrosschainRequest{})
			if err := m.CompletedCrosschainRequestList[len(m.CompletedCrosschainRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidCrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidCrosschainAckRequestList = append(m.ValidCrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.ValidCrosschainAckRequestList[len(m.ValidCrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyToExecuteCrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadyToExecuteCrosschainAckRequestList = append(m.ReadyToExecuteCrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.ReadyToExecuteCrosschainAckRequestList[len(m.ReadyToExecuteCrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedCrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutedCrosschainAckRequestList = append(m.ExecutedCrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.ExecutedCrosschainAckRequestList[len(m.ExecutedCrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesSettledCrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesSettledCrosschainAckRequestList = append(m.FeesSettledCrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.FeesSettledCrosschainAckRequestList[len(m.FeesSettledCrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedCrosschainAckRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedCrosschainAckRequestList = append(m.CompletedCrosschainAckRequestList, CrosschainAckRequest{})
			if err := m.CompletedCrosschainAckRequestList[len(m.CompletedCrosschainAckRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
