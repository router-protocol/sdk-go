// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/ibc_packet.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosschainIbcPacket struct {
	Version         uint64                                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	RouteAmount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient  string                                 `protobuf:"bytes,3,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	SrcChainId      string                                 `protobuf:"bytes,4,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DestChainId     string                                 `protobuf:"bytes,5,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestMetadata []byte                                 `protobuf:"bytes,6,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	RequestPacket   []byte                                 `protobuf:"bytes,7,opt,name=request_packet,json=requestPacket,proto3" json:"request_packet,omitempty"`
	BlockHeight     uint64                                 `protobuf:"varint,8,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	SrcTimestamp    uint64                                 `protobuf:"varint,9,opt,name=src_timestamp,json=srcTimestamp,proto3" json:"src_timestamp,omitempty"`
	RequestSender   string                                 `protobuf:"bytes,10,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
}

func (m *CrosschainIbcPacket) Reset()         { *m = CrosschainIbcPacket{} }
func (m *CrosschainIbcPacket) String() string { return proto.CompactTextString(m) }
func (*CrosschainIbcPacket) ProtoMessage()    {}
func (*CrosschainIbcPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d74d5222367ae63, []int{0}
}
func (m *CrosschainIbcPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainIbcPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainIbcPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainIbcPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainIbcPacket.Merge(m, src)
}
func (m *CrosschainIbcPacket) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainIbcPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainIbcPacket.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainIbcPacket proto.InternalMessageInfo

func (m *CrosschainIbcPacket) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CrosschainIbcPacket) GetRouteRecipient() string {
	if m != nil {
		return m.RouteRecipient
	}
	return ""
}

func (m *CrosschainIbcPacket) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *CrosschainIbcPacket) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *CrosschainIbcPacket) GetRequestMetadata() []byte {
	if m != nil {
		return m.RequestMetadata
	}
	return nil
}

func (m *CrosschainIbcPacket) GetRequestPacket() []byte {
	if m != nil {
		return m.RequestPacket
	}
	return nil
}

func (m *CrosschainIbcPacket) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrosschainIbcPacket) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *CrosschainIbcPacket) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func init() {
	proto.RegisterType((*CrosschainIbcPacket)(nil), "routerprotocol.routerchain.crosschain.CrosschainIbcPacket")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/ibc_packet.proto", fileDescriptor_2d74d5222367ae63)
}

var fileDescriptor_2d74d5222367ae63 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x3f, 0x8f, 0xd3, 0x30,
	0x14, 0xc0, 0x13, 0xee, 0xb8, 0xe3, 0xdc, 0xf4, 0x8a, 0x0c, 0x83, 0xc5, 0x90, 0x86, 0xa2, 0xd2,
	0x32, 0x34, 0x19, 0xd8, 0xd8, 0x68, 0x17, 0x3a, 0x20, 0x41, 0xe8, 0xc4, 0x12, 0x25, 0x8e, 0x95,
	0x58, 0x6d, 0xe2, 0x60, 0x3b, 0x08, 0xbe, 0x05, 0x9f, 0x85, 0x4f, 0xd1, 0xb1, 0x23, 0x62, 0xa8,
	0x50, 0xfb, 0x45, 0x50, 0x5e, 0xe2, 0x6b, 0xa6, 0xfa, 0xfd, 0xf4, 0x7b, 0x7f, 0xfa, 0xf2, 0xd0,
	0x4c, 0x8a, 0x5a, 0x33, 0x49, 0xf3, 0x98, 0x97, 0x01, 0x95, 0x42, 0xa9, 0xf6, 0xc9, 0x13, 0x1a,
	0x55, 0x31, 0xdd, 0x32, 0xed, 0x57, 0x52, 0x68, 0x81, 0xa7, 0xad, 0x08, 0x01, 0x15, 0x3b, 0xbf,
	0x97, 0xe7, 0x5f, 0xf2, 0x5e, 0x3c, 0xcf, 0x44, 0x26, 0x40, 0x0a, 0x9a, 0x57, 0x9b, 0x3c, 0xf9,
	0x7d, 0x85, 0x9e, 0xad, 0x1e, 0xa4, 0x75, 0x42, 0x3f, 0x41, 0x69, 0x4c, 0xd0, 0xed, 0x77, 0x26,
	0x15, 0x17, 0x25, 0xb1, 0x3d, 0x7b, 0x7e, 0x1d, 0x9a, 0x10, 0x7f, 0x46, 0x0e, 0x74, 0x88, 0xe2,
	0x42, 0xd4, 0xa5, 0x26, 0x8f, 0x3c, 0x7b, 0x7e, 0xb7, 0xf4, 0xf7, 0xc7, 0xb1, 0xf5, 0xf7, 0x38,
	0x7e, 0x9d, 0x71, 0x9d, 0xd7, 0x89, 0x4f, 0x45, 0x11, 0x50, 0xa1, 0x0a, 0xa1, 0xba, 0x9f, 0x85,
	0x4a, 0xb7, 0x81, 0xfe, 0x59, 0x31, 0xe5, 0xaf, 0x4b, 0x1d, 0x0e, 0xa0, 0xc6, 0x7b, 0x28, 0x81,
	0x67, 0x68, 0xd4, 0x96, 0x94, 0x8c, 0xf2, 0x8a, 0xb3, 0x52, 0x93, 0xab, 0xa6, 0x6a, 0x78, 0x0f,
	0x38, 0x34, 0x14, 0x7b, 0xc8, 0x51, 0x92, 0x46, 0x30, 0x6b, 0xc4, 0x53, 0x72, 0x0d, 0x16, 0x52,
	0x92, 0xae, 0x60, 0xfc, 0x14, 0x4f, 0xd0, 0x30, 0x65, 0x4a, 0x5f, 0x94, 0xc7, 0xa0, 0x0c, 0x1a,
	0x68, 0x9c, 0x37, 0xe8, 0xa9, 0x64, 0xdf, 0xea, 0x46, 0x2b, 0x98, 0x8e, 0xd3, 0x58, 0xc7, 0xe4,
	0xc6, 0xb3, 0xe7, 0x4e, 0x38, 0xea, 0xf8, 0xc7, 0x0e, 0xe3, 0x29, 0xba, 0x37, 0x6a, 0xbb, 0x73,
	0x72, 0x0b, 0xe2, 0xb0, 0xa3, 0xdd, 0xb6, 0x5e, 0x22, 0x27, 0xd9, 0x09, 0xba, 0x8d, 0x72, 0xc6,
	0xb3, 0x5c, 0x93, 0x27, 0xb0, 0xb2, 0x01, 0xb0, 0x0f, 0x80, 0xf0, 0x2b, 0x34, 0x6c, 0x46, 0xd7,
	0xbc, 0x60, 0x4a, 0xc7, 0x45, 0x45, 0xee, 0xc0, 0x69, 0xfe, 0xcf, 0xc6, 0xb0, 0x7e, 0x3b, 0xc5,
	0xca, 0x94, 0x49, 0x82, 0x60, 0x7c, 0xd3, 0xee, 0x0b, 0xc0, 0xe5, 0x66, 0x7f, 0x72, 0xed, 0xc3,
	0xc9, 0xb5, 0xff, 0x9d, 0x5c, 0xfb, 0xd7, 0xd9, 0xb5, 0x0e, 0x67, 0xd7, 0xfa, 0x73, 0x76, 0xad,
	0xaf, 0xef, 0x7a, 0xeb, 0x6f, 0xef, 0x60, 0x61, 0xee, 0xc2, 0xc4, 0xed, 0x15, 0xfd, 0xe8, 0x9f,
	0x14, 0x7c, 0x96, 0xe4, 0x06, 0xcc, 0xb7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x89, 0xcf, 0xac,
	0x4c, 0x79, 0x02, 0x00, 0x00,
}

func (m *CrosschainIbcPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainIbcPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainIbcPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintIbcPacket(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x52
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintIbcPacket(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.BlockHeight != 0 {
		i = encodeVarintIbcPacket(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RequestPacket) > 0 {
		i -= len(m.RequestPacket)
		copy(dAtA[i:], m.RequestPacket)
		i = encodeVarintIbcPacket(dAtA, i, uint64(len(m.RequestPacket)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RequestMetadata) > 0 {
		i -= len(m.RequestMetadata)
		copy(dAtA[i:], m.RequestMetadata)
		i = encodeVarintIbcPacket(dAtA, i, uint64(len(m.RequestMetadata)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintIbcPacket(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintIbcPacket(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintIbcPacket(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIbcPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Version != 0 {
		i = encodeVarintIbcPacket(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIbcPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovIbcPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosschainIbcPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovIbcPacket(uint64(m.Version))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovIbcPacket(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovIbcPacket(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovIbcPacket(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovIbcPacket(uint64(l))
	}
	l = len(m.RequestMetadata)
	if l > 0 {
		n += 1 + l + sovIbcPacket(uint64(l))
	}
	l = len(m.RequestPacket)
	if l > 0 {
		n += 1 + l + sovIbcPacket(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIbcPacket(uint64(m.BlockHeight))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovIbcPacket(uint64(m.SrcTimestamp))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovIbcPacket(uint64(l))
	}
	return n
}

func sovIbcPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIbcPacket(x uint64) (n int) {
	return sovIbcPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosschainIbcPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainIbcPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainIbcPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestMetadata = append(m.RequestMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestMetadata == nil {
				m.RequestMetadata = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPacket = append(m.RequestPacket[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestPacket == nil {
				m.RequestPacket = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIbcPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIbcPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIbcPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIbcPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIbcPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIbcPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIbcPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIbcPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIbcPacket = fmt.Errorf("proto: unexpected end of group")
)
