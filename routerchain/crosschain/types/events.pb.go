// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/events.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCrosschainRequestCreated struct {
	AttestationId     []byte                                 `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	SrcChainId        string                                 `protobuf:"bytes,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier uint64                                 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	BlockHeight       uint64                                 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	SourceTxHash      string                                 `protobuf:"bytes,5,opt,name=source_tx_hash,json=sourceTxHash,proto3" json:"source_tx_hash,omitempty"`
	SrcTimestamp      uint64                                 `protobuf:"varint,6,opt,name=src_timestamp,json=srcTimestamp,proto3" json:"src_timestamp,omitempty"`
	SrcTxOrigin       string                                 `protobuf:"bytes,7,opt,name=src_tx_origin,json=srcTxOrigin,proto3" json:"src_tx_origin,omitempty"`
	RouteAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient    string                                 `protobuf:"bytes,10,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	DestChainId       string                                 `protobuf:"bytes,11,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestSender     string                                 `protobuf:"bytes,12,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestMetadata   []byte                                 `protobuf:"bytes,13,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	RequestPacket     []byte                                 `protobuf:"bytes,14,opt,name=request_packet,json=requestPacket,proto3" json:"request_packet,omitempty"`
	SrcChainType      types.ChainType                        `protobuf:"varint,15,opt,name=src_chain_type,json=srcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"src_chain_type,omitempty"`
	DestChainType     types.ChainType                        `protobuf:"varint,16,opt,name=dest_chain_type,json=destChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"dest_chain_type,omitempty"`
}

func (m *EventCrosschainRequestCreated) Reset()         { *m = EventCrosschainRequestCreated{} }
func (m *EventCrosschainRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainRequestCreated) ProtoMessage()    {}
func (*EventCrosschainRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{0}
}
func (m *EventCrosschainRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainRequestCreated.Merge(m, src)
}
func (m *EventCrosschainRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainRequestCreated proto.InternalMessageInfo

func (m *EventCrosschainRequestCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainRequestCreated) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainRequestCreated) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainRequestCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventCrosschainRequestCreated) GetSourceTxHash() string {
	if m != nil {
		return m.SourceTxHash
	}
	return ""
}

func (m *EventCrosschainRequestCreated) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

func (m *EventCrosschainRequestCreated) GetSrcTxOrigin() string {
	if m != nil {
		return m.SrcTxOrigin
	}
	return ""
}

func (m *EventCrosschainRequestCreated) GetRouteRecipient() string {
	if m != nil {
		return m.RouteRecipient
	}
	return ""
}

func (m *EventCrosschainRequestCreated) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *EventCrosschainRequestCreated) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *EventCrosschainRequestCreated) GetRequestMetadata() []byte {
	if m != nil {
		return m.RequestMetadata
	}
	return nil
}

func (m *EventCrosschainRequestCreated) GetRequestPacket() []byte {
	if m != nil {
		return m.RequestPacket
	}
	return nil
}

func (m *EventCrosschainRequestCreated) GetSrcChainType() types.ChainType {
	if m != nil {
		return m.SrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventCrosschainRequestCreated) GetDestChainType() types.ChainType {
	if m != nil {
		return m.DestChainType
	}
	return types.CHAIN_TYPE_NONE
}

type EventCrosschainRequestConfirm struct {
	SourceChainId     string `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ClaimHash         []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	EthSigner         string `protobuf:"bytes,4,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty"`
	Signature         string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator      string `protobuf:"bytes,6,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *EventCrosschainRequestConfirm) Reset()         { *m = EventCrosschainRequestConfirm{} }
func (m *EventCrosschainRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainRequestConfirm) ProtoMessage()    {}
func (*EventCrosschainRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{1}
}
func (m *EventCrosschainRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainRequestConfirm.Merge(m, src)
}
func (m *EventCrosschainRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainRequestConfirm proto.InternalMessageInfo

func (m *EventCrosschainRequestConfirm) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosschainRequestConfirm) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosschainRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventCrosschainRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *EventCrosschainRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type EventHandleNativeTransfer struct {
	SourceChainId     string                                 `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	RequestIdentifier uint64                                 `protobuf:"varint,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	RouteAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=route_amount,json=routeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"route_amount"`
	RouteRecipient    string                                 `protobuf:"bytes,4,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
}

func (m *EventHandleNativeTransfer) Reset()         { *m = EventHandleNativeTransfer{} }
func (m *EventHandleNativeTransfer) String() string { return proto.CompactTextString(m) }
func (*EventHandleNativeTransfer) ProtoMessage()    {}
func (*EventHandleNativeTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{2}
}
func (m *EventHandleNativeTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventHandleNativeTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventHandleNativeTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventHandleNativeTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventHandleNativeTransfer.Merge(m, src)
}
func (m *EventHandleNativeTransfer) XXX_Size() int {
	return m.Size()
}
func (m *EventHandleNativeTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventHandleNativeTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_EventHandleNativeTransfer proto.InternalMessageInfo

func (m *EventHandleNativeTransfer) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventHandleNativeTransfer) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventHandleNativeTransfer) GetRouteRecipient() string {
	if m != nil {
		return m.RouteRecipient
	}
	return ""
}

type EventCrosschainReadyToExecute struct {
	SourceChainId           string      `protobuf:"bytes,1,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	RequestIdentifier       uint64      `protobuf:"varint,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ClaimHash               []byte      `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	FeePayer                string      `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	DestTxFeeInRoute        types1.Coin `protobuf:"bytes,5,opt,name=dest_tx_fee_in_route,json=destTxFeeInRoute,proto3" json:"dest_tx_fee_in_route"`
	DestGasLimit            uint64      `protobuf:"varint,6,opt,name=dest_gas_limit,json=destGasLimit,proto3" json:"dest_gas_limit,omitempty"`
	DestGasPrice            uint64      `protobuf:"varint,7,opt,name=dest_gas_price,json=destGasPrice,proto3" json:"dest_gas_price,omitempty"`
	RelayerIncentiveInRoute types1.Coin `protobuf:"bytes,8,opt,name=relayer_incentive_in_route,json=relayerIncentiveInRoute,proto3" json:"relayer_incentive_in_route"`
}

func (m *EventCrosschainReadyToExecute) Reset()         { *m = EventCrosschainReadyToExecute{} }
func (m *EventCrosschainReadyToExecute) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainReadyToExecute) ProtoMessage()    {}
func (*EventCrosschainReadyToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{3}
}
func (m *EventCrosschainReadyToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainReadyToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainReadyToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainReadyToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainReadyToExecute.Merge(m, src)
}
func (m *EventCrosschainReadyToExecute) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainReadyToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainReadyToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainReadyToExecute proto.InternalMessageInfo

func (m *EventCrosschainReadyToExecute) GetSourceChainId() string {
	if m != nil {
		return m.SourceChainId
	}
	return ""
}

func (m *EventCrosschainReadyToExecute) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainReadyToExecute) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosschainReadyToExecute) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosschainReadyToExecute) GetDestTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.DestTxFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventCrosschainReadyToExecute) GetDestGasLimit() uint64 {
	if m != nil {
		return m.DestGasLimit
	}
	return 0
}

func (m *EventCrosschainReadyToExecute) GetDestGasPrice() uint64 {
	if m != nil {
		return m.DestGasPrice
	}
	return 0
}

func (m *EventCrosschainReadyToExecute) GetRelayerIncentiveInRoute() types1.Coin {
	if m != nil {
		return m.RelayerIncentiveInRoute
	}
	return types1.Coin{}
}

type EventCrosschainRequestBlocked struct {
	AttestationId       []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	SrcChainId          string `protobuf:"bytes,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier   uint64 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	BlockedExpiryHeight uint64 `protobuf:"varint,4,opt,name=blocked_expiry_height,json=blockedExpiryHeight,proto3" json:"blocked_expiry_height,omitempty"`
}

func (m *EventCrosschainRequestBlocked) Reset()         { *m = EventCrosschainRequestBlocked{} }
func (m *EventCrosschainRequestBlocked) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainRequestBlocked) ProtoMessage()    {}
func (*EventCrosschainRequestBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{4}
}
func (m *EventCrosschainRequestBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainRequestBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainRequestBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainRequestBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainRequestBlocked.Merge(m, src)
}
func (m *EventCrosschainRequestBlocked) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainRequestBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainRequestBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainRequestBlocked proto.InternalMessageInfo

func (m *EventCrosschainRequestBlocked) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainRequestBlocked) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainRequestBlocked) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainRequestBlocked) GetBlockedExpiryHeight() uint64 {
	if m != nil {
		return m.BlockedExpiryHeight
	}
	return 0
}

type EventCrosschainRequestExpired struct {
	AttestationId       []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	SrcChainId          string `protobuf:"bytes,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier   uint64 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	BlockedExpiryHeight uint64 `protobuf:"varint,4,opt,name=blocked_expiry_height,json=blockedExpiryHeight,proto3" json:"blocked_expiry_height,omitempty"`
}

func (m *EventCrosschainRequestExpired) Reset()         { *m = EventCrosschainRequestExpired{} }
func (m *EventCrosschainRequestExpired) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainRequestExpired) ProtoMessage()    {}
func (*EventCrosschainRequestExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{5}
}
func (m *EventCrosschainRequestExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainRequestExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainRequestExpired.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainRequestExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainRequestExpired.Merge(m, src)
}
func (m *EventCrosschainRequestExpired) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainRequestExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainRequestExpired.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainRequestExpired proto.InternalMessageInfo

func (m *EventCrosschainRequestExpired) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainRequestExpired) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainRequestExpired) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainRequestExpired) GetBlockedExpiryHeight() uint64 {
	if m != nil {
		return m.BlockedExpiryHeight
	}
	return 0
}

type EventCrosschainExecuted struct {
	AttestationId     []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	SrcChainId        string `protobuf:"bytes,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ExecResponse      []byte `protobuf:"bytes,4,opt,name=exec_response,json=execResponse,proto3" json:"exec_response,omitempty"`
}

func (m *EventCrosschainExecuted) Reset()         { *m = EventCrosschainExecuted{} }
func (m *EventCrosschainExecuted) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainExecuted) ProtoMessage()    {}
func (*EventCrosschainExecuted) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{6}
}
func (m *EventCrosschainExecuted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainExecuted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainExecuted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainExecuted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainExecuted.Merge(m, src)
}
func (m *EventCrosschainExecuted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainExecuted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainExecuted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainExecuted proto.InternalMessageInfo

func (m *EventCrosschainExecuted) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainExecuted) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainExecuted) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainExecuted) GetExecResponse() []byte {
	if m != nil {
		return m.ExecResponse
	}
	return nil
}

type EventCrosschainExecutionFailed struct {
	AttestationId     []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	SrcChainId        string `protobuf:"bytes,2,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ExecErrResponse   []byte `protobuf:"bytes,4,opt,name=exec_err_response,json=execErrResponse,proto3" json:"exec_err_response,omitempty"`
}

func (m *EventCrosschainExecutionFailed) Reset()         { *m = EventCrosschainExecutionFailed{} }
func (m *EventCrosschainExecutionFailed) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainExecutionFailed) ProtoMessage()    {}
func (*EventCrosschainExecutionFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{7}
}
func (m *EventCrosschainExecutionFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainExecutionFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainExecutionFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainExecutionFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainExecutionFailed.Merge(m, src)
}
func (m *EventCrosschainExecutionFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainExecutionFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainExecutionFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainExecutionFailed proto.InternalMessageInfo

func (m *EventCrosschainExecutionFailed) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainExecutionFailed) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainExecutionFailed) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainExecutionFailed) GetExecErrResponse() []byte {
	if m != nil {
		return m.ExecErrResponse
	}
	return nil
}

type EventCrosschainFeePayerUpdated struct {
	SrcChainId        string `protobuf:"bytes,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ClaimHash         []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	FeePayer          string `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
}

func (m *EventCrosschainFeePayerUpdated) Reset()         { *m = EventCrosschainFeePayerUpdated{} }
func (m *EventCrosschainFeePayerUpdated) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainFeePayerUpdated) ProtoMessage()    {}
func (*EventCrosschainFeePayerUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{8}
}
func (m *EventCrosschainFeePayerUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainFeePayerUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainFeePayerUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainFeePayerUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainFeePayerUpdated.Merge(m, src)
}
func (m *EventCrosschainFeePayerUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainFeePayerUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainFeePayerUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainFeePayerUpdated proto.InternalMessageInfo

func (m *EventCrosschainFeePayerUpdated) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainFeePayerUpdated) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainFeePayerUpdated) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosschainFeePayerUpdated) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

type EventCrosschainDestGasIncremented struct {
	SrcChainId        string `protobuf:"bytes,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ClaimHash         []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	FeePayer          string `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	DestGasLimit      uint64 `protobuf:"varint,5,opt,name=dest_gas_limit,json=destGasLimit,proto3" json:"dest_gas_limit,omitempty"`
	DestGasPrice      uint64 `protobuf:"varint,6,opt,name=dest_gas_price,json=destGasPrice,proto3" json:"dest_gas_price,omitempty"`
}

func (m *EventCrosschainDestGasIncremented) Reset()         { *m = EventCrosschainDestGasIncremented{} }
func (m *EventCrosschainDestGasIncremented) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainDestGasIncremented) ProtoMessage()    {}
func (*EventCrosschainDestGasIncremented) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{9}
}
func (m *EventCrosschainDestGasIncremented) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainDestGasIncremented) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainDestGasIncremented.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainDestGasIncremented) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainDestGasIncremented.Merge(m, src)
}
func (m *EventCrosschainDestGasIncremented) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainDestGasIncremented) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainDestGasIncremented.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainDestGasIncremented proto.InternalMessageInfo

func (m *EventCrosschainDestGasIncremented) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainDestGasIncremented) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainDestGasIncremented) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosschainDestGasIncremented) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosschainDestGasIncremented) GetDestGasLimit() uint64 {
	if m != nil {
		return m.DestGasLimit
	}
	return 0
}

func (m *EventCrosschainDestGasIncremented) GetDestGasPrice() uint64 {
	if m != nil {
		return m.DestGasPrice
	}
	return 0
}

type EventCrosschainRequestFeeSettlement struct {
	SrcChainId        string      `protobuf:"bytes,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier uint64      `protobuf:"varint,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	RelayerFeeInRoute types1.Coin `protobuf:"bytes,3,opt,name=relayer_fee_in_route,json=relayerFeeInRoute,proto3" json:"relayer_fee_in_route"`
	RefundFeeInRoute  types1.Coin `protobuf:"bytes,4,opt,name=refund_fee_in_route,json=refundFeeInRoute,proto3" json:"refund_fee_in_route"`
}

func (m *EventCrosschainRequestFeeSettlement) Reset()         { *m = EventCrosschainRequestFeeSettlement{} }
func (m *EventCrosschainRequestFeeSettlement) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainRequestFeeSettlement) ProtoMessage()    {}
func (*EventCrosschainRequestFeeSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{10}
}
func (m *EventCrosschainRequestFeeSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainRequestFeeSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainRequestFeeSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainRequestFeeSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainRequestFeeSettlement.Merge(m, src)
}
func (m *EventCrosschainRequestFeeSettlement) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainRequestFeeSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainRequestFeeSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainRequestFeeSettlement proto.InternalMessageInfo

func (m *EventCrosschainRequestFeeSettlement) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainRequestFeeSettlement) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainRequestFeeSettlement) GetRelayerFeeInRoute() types1.Coin {
	if m != nil {
		return m.RelayerFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventCrosschainRequestFeeSettlement) GetRefundFeeInRoute() types1.Coin {
	if m != nil {
		return m.RefundFeeInRoute
	}
	return types1.Coin{}
}

type EventCrosschainRequestCompleted struct {
	SrcChainId        string `protobuf:"bytes,1,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	RequestIdentifier uint64 `protobuf:"varint,2,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	ClaimHash         []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
}

func (m *EventCrosschainRequestCompleted) Reset()         { *m = EventCrosschainRequestCompleted{} }
func (m *EventCrosschainRequestCompleted) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainRequestCompleted) ProtoMessage()    {}
func (*EventCrosschainRequestCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{11}
}
func (m *EventCrosschainRequestCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainRequestCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainRequestCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainRequestCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainRequestCompleted.Merge(m, src)
}
func (m *EventCrosschainRequestCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainRequestCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainRequestCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainRequestCompleted proto.InternalMessageInfo

func (m *EventCrosschainRequestCompleted) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *EventCrosschainRequestCompleted) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainRequestCompleted) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

type EventCrosschainAckRequestCreated struct {
	AttestationId        []byte          `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	AckSrcChainId        string          `protobuf:"bytes,2,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64          `protobuf:"varint,3,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	BlockHeight          uint64          `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	DestTxHash           string          `protobuf:"bytes,5,opt,name=dest_tx_hash,json=destTxHash,proto3" json:"dest_tx_hash,omitempty"`
	RelayerRouterAddress string          `protobuf:"bytes,6,opt,name=relayer_router_address,json=relayerRouterAddress,proto3" json:"relayer_router_address,omitempty"`
	AckDestChainId       string          `protobuf:"bytes,7,opt,name=ack_dest_chain_id,json=ackDestChainId,proto3" json:"ack_dest_chain_id,omitempty"`
	RequestSender        string          `protobuf:"bytes,8,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	RequestIdentifier    uint64          `protobuf:"varint,9,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	AckSrcChainType      types.ChainType `protobuf:"varint,10,opt,name=ack_src_chain_type,json=ackSrcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_src_chain_type,omitempty"`
	AckDestChainType     types.ChainType `protobuf:"varint,11,opt,name=ack_dest_chain_type,json=ackDestChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_dest_chain_type,omitempty"`
	ExecData             []byte          `protobuf:"bytes,12,opt,name=exec_data,json=execData,proto3" json:"exec_data,omitempty"`
	ExecStatus           bool            `protobuf:"varint,13,opt,name=exec_status,json=execStatus,proto3" json:"exec_status,omitempty"`
}

func (m *EventCrosschainAckRequestCreated) Reset()         { *m = EventCrosschainAckRequestCreated{} }
func (m *EventCrosschainAckRequestCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckRequestCreated) ProtoMessage()    {}
func (*EventCrosschainAckRequestCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{12}
}
func (m *EventCrosschainAckRequestCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckRequestCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckRequestCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckRequestCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckRequestCreated.Merge(m, src)
}
func (m *EventCrosschainAckRequestCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckRequestCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckRequestCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckRequestCreated proto.InternalMessageInfo

func (m *EventCrosschainAckRequestCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainAckRequestCreated) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckRequestCreated) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckRequestCreated) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventCrosschainAckRequestCreated) GetDestTxHash() string {
	if m != nil {
		return m.DestTxHash
	}
	return ""
}

func (m *EventCrosschainAckRequestCreated) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *EventCrosschainAckRequestCreated) GetAckDestChainId() string {
	if m != nil {
		return m.AckDestChainId
	}
	return ""
}

func (m *EventCrosschainAckRequestCreated) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *EventCrosschainAckRequestCreated) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckRequestCreated) GetAckSrcChainType() types.ChainType {
	if m != nil {
		return m.AckSrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventCrosschainAckRequestCreated) GetAckDestChainType() types.ChainType {
	if m != nil {
		return m.AckDestChainType
	}
	return types.CHAIN_TYPE_NONE
}

func (m *EventCrosschainAckRequestCreated) GetExecData() []byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *EventCrosschainAckRequestCreated) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

type EventCrosschainAckRequestConfirm struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	EthSigner            string `protobuf:"bytes,4,opt,name=eth_signer,json=ethSigner,proto3" json:"eth_signer,omitempty"`
	Signature            string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	Orchestrator         string `protobuf:"bytes,6,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *EventCrosschainAckRequestConfirm) Reset()         { *m = EventCrosschainAckRequestConfirm{} }
func (m *EventCrosschainAckRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckRequestConfirm) ProtoMessage()    {}
func (*EventCrosschainAckRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{13}
}
func (m *EventCrosschainAckRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckRequestConfirm.Merge(m, src)
}
func (m *EventCrosschainAckRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckRequestConfirm proto.InternalMessageInfo

func (m *EventCrosschainAckRequestConfirm) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckRequestConfirm) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosschainAckRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *EventCrosschainAckRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *EventCrosschainAckRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type EventCrosschainAckRequestBlocked struct {
	AttestationId        []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	AckSrcChainId        string `protobuf:"bytes,2,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,3,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	BlockedExpiryHeight  uint64 `protobuf:"varint,4,opt,name=blocked_expiry_height,json=blockedExpiryHeight,proto3" json:"blocked_expiry_height,omitempty"`
}

func (m *EventCrosschainAckRequestBlocked) Reset()         { *m = EventCrosschainAckRequestBlocked{} }
func (m *EventCrosschainAckRequestBlocked) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckRequestBlocked) ProtoMessage()    {}
func (*EventCrosschainAckRequestBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{14}
}
func (m *EventCrosschainAckRequestBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckRequestBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckRequestBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckRequestBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckRequestBlocked.Merge(m, src)
}
func (m *EventCrosschainAckRequestBlocked) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckRequestBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckRequestBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckRequestBlocked proto.InternalMessageInfo

func (m *EventCrosschainAckRequestBlocked) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainAckRequestBlocked) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckRequestBlocked) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckRequestBlocked) GetBlockedExpiryHeight() uint64 {
	if m != nil {
		return m.BlockedExpiryHeight
	}
	return 0
}

type EventCrosschainAckRequestExpired struct {
	AttestationId        []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	AckSrcChainId        string `protobuf:"bytes,2,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,3,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	BlockedExpiryHeight  uint64 `protobuf:"varint,4,opt,name=blocked_expiry_height,json=blockedExpiryHeight,proto3" json:"blocked_expiry_height,omitempty"`
}

func (m *EventCrosschainAckRequestExpired) Reset()         { *m = EventCrosschainAckRequestExpired{} }
func (m *EventCrosschainAckRequestExpired) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckRequestExpired) ProtoMessage()    {}
func (*EventCrosschainAckRequestExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{15}
}
func (m *EventCrosschainAckRequestExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckRequestExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckRequestExpired.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckRequestExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckRequestExpired.Merge(m, src)
}
func (m *EventCrosschainAckRequestExpired) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckRequestExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckRequestExpired.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckRequestExpired proto.InternalMessageInfo

func (m *EventCrosschainAckRequestExpired) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainAckRequestExpired) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckRequestExpired) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckRequestExpired) GetBlockedExpiryHeight() uint64 {
	if m != nil {
		return m.BlockedExpiryHeight
	}
	return 0
}

type EventCrosschainAckReadyToExecute struct {
	AckSrcChainId              string      `protobuf:"bytes,1,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier       uint64      `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	ClaimHash                  []byte      `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	FeePayer                   string      `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	TxFeeInRoute               types1.Coin `protobuf:"bytes,5,opt,name=tx_fee_in_route,json=txFeeInRoute,proto3" json:"tx_fee_in_route"`
	AckGasLimit                uint64      `protobuf:"varint,6,opt,name=ack_gas_limit,json=ackGasLimit,proto3" json:"ack_gas_limit,omitempty"`
	AckGasPrice                uint64      `protobuf:"varint,7,opt,name=ack_gas_price,json=ackGasPrice,proto3" json:"ack_gas_price,omitempty"`
	AckRelayerIncentiveInRoute types1.Coin `protobuf:"bytes,8,opt,name=ack_relayer_incentive_in_route,json=ackRelayerIncentiveInRoute,proto3" json:"ack_relayer_incentive_in_route"`
}

func (m *EventCrosschainAckReadyToExecute) Reset()         { *m = EventCrosschainAckReadyToExecute{} }
func (m *EventCrosschainAckReadyToExecute) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckReadyToExecute) ProtoMessage()    {}
func (*EventCrosschainAckReadyToExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{16}
}
func (m *EventCrosschainAckReadyToExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckReadyToExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckReadyToExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckReadyToExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckReadyToExecute.Merge(m, src)
}
func (m *EventCrosschainAckReadyToExecute) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckReadyToExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckReadyToExecute.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckReadyToExecute proto.InternalMessageInfo

func (m *EventCrosschainAckReadyToExecute) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckReadyToExecute) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckReadyToExecute) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosschainAckReadyToExecute) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosschainAckReadyToExecute) GetTxFeeInRoute() types1.Coin {
	if m != nil {
		return m.TxFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventCrosschainAckReadyToExecute) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *EventCrosschainAckReadyToExecute) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

func (m *EventCrosschainAckReadyToExecute) GetAckRelayerIncentiveInRoute() types1.Coin {
	if m != nil {
		return m.AckRelayerIncentiveInRoute
	}
	return types1.Coin{}
}

type EventCrosschainAckExecuted struct {
	AttestationId        []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	AckSrcChainId        string `protobuf:"bytes,2,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,3,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	AckExecResponse      []byte `protobuf:"bytes,4,opt,name=ack_exec_response,json=ackExecResponse,proto3" json:"ack_exec_response,omitempty"`
}

func (m *EventCrosschainAckExecuted) Reset()         { *m = EventCrosschainAckExecuted{} }
func (m *EventCrosschainAckExecuted) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckExecuted) ProtoMessage()    {}
func (*EventCrosschainAckExecuted) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{17}
}
func (m *EventCrosschainAckExecuted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckExecuted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckExecuted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckExecuted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckExecuted.Merge(m, src)
}
func (m *EventCrosschainAckExecuted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckExecuted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckExecuted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckExecuted proto.InternalMessageInfo

func (m *EventCrosschainAckExecuted) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainAckExecuted) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckExecuted) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckExecuted) GetAckExecResponse() []byte {
	if m != nil {
		return m.AckExecResponse
	}
	return nil
}

type EventCrosschainAckExecutionFailed struct {
	AttestationId        []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	AckSrcChainId        string `protobuf:"bytes,2,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,3,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	AckExecErrResponse   []byte `protobuf:"bytes,4,opt,name=ack_exec_err_response,json=ackExecErrResponse,proto3" json:"ack_exec_err_response,omitempty"`
}

func (m *EventCrosschainAckExecutionFailed) Reset()         { *m = EventCrosschainAckExecutionFailed{} }
func (m *EventCrosschainAckExecutionFailed) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckExecutionFailed) ProtoMessage()    {}
func (*EventCrosschainAckExecutionFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{18}
}
func (m *EventCrosschainAckExecutionFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckExecutionFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckExecutionFailed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckExecutionFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckExecutionFailed.Merge(m, src)
}
func (m *EventCrosschainAckExecutionFailed) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckExecutionFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckExecutionFailed.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckExecutionFailed proto.InternalMessageInfo

func (m *EventCrosschainAckExecutionFailed) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainAckExecutionFailed) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckExecutionFailed) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckExecutionFailed) GetAckExecErrResponse() []byte {
	if m != nil {
		return m.AckExecErrResponse
	}
	return nil
}

type EventCrosschainAckFeeSettlement struct {
	AckSrcChainId        string      `protobuf:"bytes,1,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64      `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	RelayerFeeInRoute    types1.Coin `protobuf:"bytes,3,opt,name=relayer_fee_in_route,json=relayerFeeInRoute,proto3" json:"relayer_fee_in_route"`
	RefundFeeInRoute     types1.Coin `protobuf:"bytes,4,opt,name=refund_fee_in_route,json=refundFeeInRoute,proto3" json:"refund_fee_in_route"`
}

func (m *EventCrosschainAckFeeSettlement) Reset()         { *m = EventCrosschainAckFeeSettlement{} }
func (m *EventCrosschainAckFeeSettlement) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckFeeSettlement) ProtoMessage()    {}
func (*EventCrosschainAckFeeSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{19}
}
func (m *EventCrosschainAckFeeSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckFeeSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckFeeSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckFeeSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckFeeSettlement.Merge(m, src)
}
func (m *EventCrosschainAckFeeSettlement) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckFeeSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckFeeSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckFeeSettlement proto.InternalMessageInfo

func (m *EventCrosschainAckFeeSettlement) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckFeeSettlement) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckFeeSettlement) GetRelayerFeeInRoute() types1.Coin {
	if m != nil {
		return m.RelayerFeeInRoute
	}
	return types1.Coin{}
}

func (m *EventCrosschainAckFeeSettlement) GetRefundFeeInRoute() types1.Coin {
	if m != nil {
		return m.RefundFeeInRoute
	}
	return types1.Coin{}
}

type EventCrosschainAckCompleted struct {
	AckSrcChainId        string `protobuf:"bytes,1,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
}

func (m *EventCrosschainAckCompleted) Reset()         { *m = EventCrosschainAckCompleted{} }
func (m *EventCrosschainAckCompleted) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckCompleted) ProtoMessage()    {}
func (*EventCrosschainAckCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{20}
}
func (m *EventCrosschainAckCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckCompleted.Merge(m, src)
}
func (m *EventCrosschainAckCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckCompleted proto.InternalMessageInfo

func (m *EventCrosschainAckCompleted) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckCompleted) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckCompleted) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

type EventCrosschainAckGasIncremented struct {
	AckSrcChainType      string `protobuf:"bytes,1,opt,name=ack_src_chain_type,json=ackSrcChainType,proto3" json:"ack_src_chain_type,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
	FeePayer             string `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	AckGasLimit          uint64 `protobuf:"varint,5,opt,name=ack_gas_limit,json=ackGasLimit,proto3" json:"ack_gas_limit,omitempty"`
	AckGasPrice          uint64 `protobuf:"varint,6,opt,name=ack_gas_price,json=ackGasPrice,proto3" json:"ack_gas_price,omitempty"`
}

func (m *EventCrosschainAckGasIncremented) Reset()         { *m = EventCrosschainAckGasIncremented{} }
func (m *EventCrosschainAckGasIncremented) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckGasIncremented) ProtoMessage()    {}
func (*EventCrosschainAckGasIncremented) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{21}
}
func (m *EventCrosschainAckGasIncremented) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckGasIncremented) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckGasIncremented.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckGasIncremented) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckGasIncremented.Merge(m, src)
}
func (m *EventCrosschainAckGasIncremented) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckGasIncremented) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckGasIncremented.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckGasIncremented proto.InternalMessageInfo

func (m *EventCrosschainAckGasIncremented) GetAckSrcChainType() string {
	if m != nil {
		return m.AckSrcChainType
	}
	return ""
}

func (m *EventCrosschainAckGasIncremented) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *EventCrosschainAckGasIncremented) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *EventCrosschainAckGasIncremented) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *EventCrosschainAckGasIncremented) GetAckGasLimit() uint64 {
	if m != nil {
		return m.AckGasLimit
	}
	return 0
}

func (m *EventCrosschainAckGasIncremented) GetAckGasPrice() uint64 {
	if m != nil {
		return m.AckGasPrice
	}
	return 0
}

type EventCrosschainAckReceiptCreated struct {
	AttestationId         []byte `protobuf:"bytes,1,opt,name=attestation_id,json=attestationId,proto3" json:"attestation_id,omitempty"`
	AckReceiptSrcChainId  string `protobuf:"bytes,2,opt,name=ack_receipt_src_chain_id,json=ackReceiptSrcChainId,proto3" json:"ack_receipt_src_chain_id,omitempty"`
	AckReceiptIdentifier  uint64 `protobuf:"varint,3,opt,name=ack_receipt_identifier,json=ackReceiptIdentifier,proto3" json:"ack_receipt_identifier,omitempty"`
	AckReceiptBlockHeight uint64 `protobuf:"varint,4,opt,name=ack_receipt_block_height,json=ackReceiptBlockHeight,proto3" json:"ack_receipt_block_height,omitempty"`
	AckReceiptTxHash      string `protobuf:"bytes,5,opt,name=ack_receipt_tx_hash,json=ackReceiptTxHash,proto3" json:"ack_receipt_tx_hash,omitempty"`
	RelayerRouterAddress  string `protobuf:"bytes,6,opt,name=relayer_router_address,json=relayerRouterAddress,proto3" json:"relayer_router_address,omitempty"`
	RequestIdentifier     uint64 `protobuf:"varint,7,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
}

func (m *EventCrosschainAckReceiptCreated) Reset()         { *m = EventCrosschainAckReceiptCreated{} }
func (m *EventCrosschainAckReceiptCreated) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainAckReceiptCreated) ProtoMessage()    {}
func (*EventCrosschainAckReceiptCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{22}
}
func (m *EventCrosschainAckReceiptCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainAckReceiptCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainAckReceiptCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainAckReceiptCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainAckReceiptCreated.Merge(m, src)
}
func (m *EventCrosschainAckReceiptCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainAckReceiptCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainAckReceiptCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainAckReceiptCreated proto.InternalMessageInfo

func (m *EventCrosschainAckReceiptCreated) GetAttestationId() []byte {
	if m != nil {
		return m.AttestationId
	}
	return nil
}

func (m *EventCrosschainAckReceiptCreated) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *EventCrosschainAckReceiptCreated) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

func (m *EventCrosschainAckReceiptCreated) GetAckReceiptBlockHeight() uint64 {
	if m != nil {
		return m.AckReceiptBlockHeight
	}
	return 0
}

func (m *EventCrosschainAckReceiptCreated) GetAckReceiptTxHash() string {
	if m != nil {
		return m.AckReceiptTxHash
	}
	return ""
}

func (m *EventCrosschainAckReceiptCreated) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *EventCrosschainAckReceiptCreated) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

type EventCrosschainReceiptCompleted struct {
	AckReceiptSrcChainId string `protobuf:"bytes,1,opt,name=ack_receipt_src_chain_id,json=ackReceiptSrcChainId,proto3" json:"ack_receipt_src_chain_id,omitempty"`
	AckReceiptIdentifier uint64 `protobuf:"varint,2,opt,name=ack_receipt_identifier,json=ackReceiptIdentifier,proto3" json:"ack_receipt_identifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,3,opt,name=claim_hash,json=claimHash,proto3" json:"claim_hash,omitempty"`
}

func (m *EventCrosschainReceiptCompleted) Reset()         { *m = EventCrosschainReceiptCompleted{} }
func (m *EventCrosschainReceiptCompleted) String() string { return proto.CompactTextString(m) }
func (*EventCrosschainReceiptCompleted) ProtoMessage()    {}
func (*EventCrosschainReceiptCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{23}
}
func (m *EventCrosschainReceiptCompleted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrosschainReceiptCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrosschainReceiptCompleted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrosschainReceiptCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrosschainReceiptCompleted.Merge(m, src)
}
func (m *EventCrosschainReceiptCompleted) XXX_Size() int {
	return m.Size()
}
func (m *EventCrosschainReceiptCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrosschainReceiptCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrosschainReceiptCompleted proto.InternalMessageInfo

func (m *EventCrosschainReceiptCompleted) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *EventCrosschainReceiptCompleted) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

func (m *EventCrosschainReceiptCompleted) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

type EventCreateIBCConfig struct {
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *EventCreateIBCConfig) Reset()         { *m = EventCreateIBCConfig{} }
func (m *EventCreateIBCConfig) String() string { return proto.CompactTextString(m) }
func (*EventCreateIBCConfig) ProtoMessage()    {}
func (*EventCreateIBCConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{24}
}
func (m *EventCreateIBCConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateIBCConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateIBCConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateIBCConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateIBCConfig.Merge(m, src)
}
func (m *EventCreateIBCConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateIBCConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateIBCConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateIBCConfig proto.InternalMessageInfo

func (m *EventCreateIBCConfig) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

type EventUpdateIBCConfig struct {
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *EventUpdateIBCConfig) Reset()         { *m = EventUpdateIBCConfig{} }
func (m *EventUpdateIBCConfig) String() string { return proto.CompactTextString(m) }
func (*EventUpdateIBCConfig) ProtoMessage()    {}
func (*EventUpdateIBCConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8d768f98a104c2a, []int{25}
}
func (m *EventUpdateIBCConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateIBCConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateIBCConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateIBCConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateIBCConfig.Merge(m, src)
}
func (m *EventUpdateIBCConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateIBCConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateIBCConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateIBCConfig proto.InternalMessageInfo

func (m *EventUpdateIBCConfig) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCrosschainRequestCreated)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated")
	proto.RegisterType((*EventCrosschainRequestConfirm)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm")
	proto.RegisterType((*EventHandleNativeTransfer)(nil), "routerprotocol.routerchain.crosschain.EventHandleNativeTransfer")
	proto.RegisterType((*EventCrosschainReadyToExecute)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute")
	proto.RegisterType((*EventCrosschainRequestBlocked)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainRequestBlocked")
	proto.RegisterType((*EventCrosschainRequestExpired)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainRequestExpired")
	proto.RegisterType((*EventCrosschainExecuted)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainExecuted")
	proto.RegisterType((*EventCrosschainExecutionFailed)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed")
	proto.RegisterType((*EventCrosschainFeePayerUpdated)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated")
	proto.RegisterType((*EventCrosschainDestGasIncremented)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented")
	proto.RegisterType((*EventCrosschainRequestFeeSettlement)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement")
	proto.RegisterType((*EventCrosschainRequestCompleted)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted")
	proto.RegisterType((*EventCrosschainAckRequestCreated)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated")
	proto.RegisterType((*EventCrosschainAckRequestConfirm)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm")
	proto.RegisterType((*EventCrosschainAckRequestBlocked)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckRequestBlocked")
	proto.RegisterType((*EventCrosschainAckRequestExpired)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckRequestExpired")
	proto.RegisterType((*EventCrosschainAckReadyToExecute)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute")
	proto.RegisterType((*EventCrosschainAckExecuted)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted")
	proto.RegisterType((*EventCrosschainAckExecutionFailed)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed")
	proto.RegisterType((*EventCrosschainAckFeeSettlement)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement")
	proto.RegisterType((*EventCrosschainAckCompleted)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted")
	proto.RegisterType((*EventCrosschainAckGasIncremented)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented")
	proto.RegisterType((*EventCrosschainAckReceiptCreated)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated")
	proto.RegisterType((*EventCrosschainReceiptCompleted)(nil), "routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted")
	proto.RegisterType((*EventCreateIBCConfig)(nil), "routerprotocol.routerchain.crosschain.EventCreateIBCConfig")
	proto.RegisterType((*EventUpdateIBCConfig)(nil), "routerprotocol.routerchain.crosschain.EventUpdateIBCConfig")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/events.proto", fileDescriptor_d8d768f98a104c2a)
}

var fileDescriptor_d8d768f98a104c2a = []byte{
	// 1590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xe6, 0x57, 0xe3, 0x67, 0xc7, 0x4e, 0xb6, 0x69, 0xeb, 0x26, 0xdf, 0x3a, 0xe9, 0xe6,
	0xdb, 0x36, 0x2d, 0x8a, 0x4d, 0x4b, 0x05, 0x12, 0xb7, 0x24, 0x4d, 0xa8, 0x25, 0x68, 0x83, 0x13,
	0x10, 0x42, 0xa0, 0xd5, 0x64, 0x77, 0x62, 0x8f, 0x6c, 0xef, 0x9a, 0xd9, 0x71, 0xe4, 0x1c, 0x91,
	0xb8, 0x70, 0x83, 0x1b, 0x12, 0xb7, 0xde, 0xcb, 0x81, 0x03, 0x7f, 0x01, 0x87, 0x4a, 0x48, 0xa8,
	0x47, 0x84, 0xaa, 0x0a, 0xb5, 0x77, 0x4e, 0x88, 0x13, 0x07, 0x34, 0x6f, 0x76, 0xd7, 0x6b, 0x7b,
	0xed, 0x26, 0x29, 0xc1, 0xe5, 0x92, 0x78, 0x3f, 0xf3, 0xe6, 0xed, 0xfb, 0x35, 0x6f, 0xde, 0xc7,
	0x86, 0x65, 0xee, 0x36, 0x05, 0xe5, 0x56, 0x85, 0x30, 0xa7, 0x60, 0x71, 0xd7, 0xf3, 0xd4, 0x47,
	0x7a, 0x40, 0x1d, 0xe1, 0xe5, 0x1b, 0xdc, 0x15, 0xae, 0x7e, 0x45, 0x09, 0xe1, 0x83, 0xe5, 0xd6,
	0xf2, 0x91, 0x3d, 0xf9, 0xf6, 0x9e, 0xf9, 0x85, 0x7a, 0xb3, 0x26, 0x98, 0xaf, 0x4a, 0xfe, 0x35,
	0xc5, 0x61, 0x83, 0x2a, 0x1d, 0xf3, 0x39, 0xcb, 0xf5, 0xea, 0xae, 0x57, 0xd8, 0x23, 0x1e, 0x2d,
	0x1c, 0xdc, 0xdc, 0xa3, 0x82, 0xdc, 0x2c, 0x58, 0x2e, 0x73, 0xfc, 0xf5, 0xb9, 0xb2, 0x5b, 0x76,
	0xf1, 0x63, 0x41, 0x7e, 0x52, 0xa8, 0xf1, 0xc7, 0x04, 0x5c, 0xda, 0x94, 0xa6, 0x6c, 0x84, 0xaf,
	0x29, 0xd1, 0xcf, 0x9a, 0xd4, 0x13, 0x1b, 0x9c, 0x12, 0x41, 0x6d, 0xfd, 0x0a, 0xa4, 0x89, 0x10,
	0xd4, 0x13, 0x44, 0x30, 0xd7, 0x31, 0x99, 0x9d, 0xd5, 0x96, 0xb4, 0x95, 0x54, 0x69, 0x3a, 0x82,
	0x16, 0x6d, 0x7d, 0x09, 0x52, 0x1e, 0xb7, 0x4c, 0x65, 0x16, 0xb3, 0xb3, 0xa3, 0x4b, 0xda, 0x4a,
	0xa2, 0x04, 0x1e, 0xb7, 0x36, 0x24, 0x54, 0xb4, 0xf5, 0x55, 0xd0, 0xb9, 0x52, 0x6d, 0x32, 0x9b,
	0x3a, 0x82, 0xed, 0x33, 0xca, 0xb3, 0x63, 0x4b, 0xda, 0xca, 0x78, 0x69, 0xd6, 0x5f, 0x29, 0x86,
	0x0b, 0xfa, 0x65, 0x48, 0xed, 0xd5, 0x5c, 0xab, 0x6a, 0x56, 0x28, 0x2b, 0x57, 0x44, 0x76, 0x1c,
	0x05, 0x93, 0x88, 0xdd, 0x45, 0x48, 0xff, 0x3f, 0xa4, 0x3d, 0xb7, 0xc9, 0x2d, 0x6a, 0x8a, 0x96,
	0x59, 0x21, 0x5e, 0x25, 0x3b, 0x81, 0x6f, 0x4d, 0x29, 0x74, 0xb7, 0x75, 0x97, 0x78, 0x15, 0x7d,
	0x19, 0xa6, 0xa5, 0x65, 0x82, 0xd5, 0xa5, 0xb9, 0xf5, 0x46, 0x76, 0x12, 0x35, 0x49, 0x73, 0x77,
	0x03, 0x4c, 0x37, 0x7c, 0xa1, 0x96, 0xe9, 0x72, 0x56, 0x66, 0x4e, 0xf6, 0x0c, 0x6a, 0x4a, 0x4a,
	0xa1, 0xd6, 0x7d, 0x84, 0xf4, 0xf7, 0x21, 0x85, 0x89, 0x31, 0x49, 0xdd, 0x6d, 0x3a, 0x22, 0x9b,
	0x90, 0x22, 0xeb, 0xf9, 0x47, 0x4f, 0x17, 0x47, 0x7e, 0x7d, 0xba, 0x78, 0xb5, 0xcc, 0x44, 0xa5,
	0xb9, 0x97, 0xb7, 0xdc, 0x7a, 0xc1, 0x4f, 0x85, 0xfa, 0xb7, 0xea, 0xd9, 0xd5, 0x82, 0x4c, 0x94,
	0x97, 0x2f, 0x3a, 0xa2, 0x94, 0x44, 0x1d, 0x6b, 0xa8, 0x42, 0xbf, 0x06, 0x19, 0xa5, 0x92, 0x53,
	0x8b, 0x35, 0x18, 0x75, 0x44, 0x16, 0xf0, 0xc5, 0x69, 0x84, 0x4b, 0x01, 0x2a, 0xed, 0xb3, 0x65,
	0xe4, 0xc2, 0xf8, 0x26, 0x95, 0x7d, 0x12, 0x0c, 0x02, 0x7c, 0x05, 0xd2, 0x41, 0x80, 0x3d, 0xea,
	0xd8, 0x94, 0x67, 0x53, 0x28, 0x34, 0xed, 0xa3, 0x3b, 0x08, 0xea, 0xd7, 0x61, 0x26, 0x10, 0xab,
	0x53, 0x41, 0x6c, 0x22, 0x48, 0x76, 0x1a, 0x53, 0x9a, 0xf1, 0xf1, 0xf7, 0x7c, 0x38, 0xaa, 0xb1,
	0x41, 0xac, 0x2a, 0x15, 0xd9, 0xb4, 0xca, 0xbd, 0x8f, 0x6e, 0x23, 0xa8, 0x7f, 0x08, 0xe9, 0x76,
	0xee, 0xa5, 0xa7, 0xd9, 0xcc, 0x92, 0xb6, 0x92, 0xbe, 0xf5, 0x7a, 0x7e, 0x40, 0x5d, 0xb7, 0x6b,
	0x39, 0x8f, 0x0e, 0xec, 0x1e, 0x36, 0x28, 0x26, 0x25, 0x7c, 0xd2, 0x3f, 0x82, 0x4c, 0xc4, 0x69,
	0x54, 0x3c, 0x73, 0x42, 0xc5, 0xd3, 0x61, 0xa0, 0xe4, 0xa3, 0xf1, 0xa7, 0xd6, 0xb7, 0xec, 0x5d,
	0x67, 0x9f, 0xf1, 0xba, 0x7e, 0x15, 0x32, 0x7e, 0x6d, 0x85, 0x21, 0xd7, 0x54, 0x34, 0x15, 0x3c,
	0xb8, 0xaa, 0x47, 0xfb, 0x55, 0xf5, 0x25, 0x00, 0xab, 0x46, 0x58, 0x5d, 0x95, 0xeb, 0x18, 0x46,
	0x33, 0x81, 0x08, 0xd6, 0xea, 0x25, 0x00, 0x2a, 0x2a, 0xa6, 0xc7, 0xca, 0x0e, 0xe5, 0x58, 0xf2,
	0x89, 0x52, 0x82, 0x8a, 0xca, 0x0e, 0x02, 0xfa, 0xff, 0x20, 0x21, 0x97, 0x88, 0x68, 0x72, 0xea,
	0xd7, 0x7a, 0x1b, 0xd0, 0x0d, 0x48, 0xb9, 0xdc, 0xaa, 0x50, 0x4f, 0x70, 0x22, 0x5c, 0x8e, 0x75,
	0x9e, 0x28, 0x75, 0x60, 0xc6, 0xef, 0x1a, 0x5c, 0x44, 0xc7, 0xef, 0x12, 0xc7, 0xae, 0xd1, 0x7b,
	0x44, 0xb0, 0x03, 0xba, 0xcb, 0x89, 0xe3, 0xed, 0x53, 0x7e, 0x5a, 0x4e, 0x77, 0x1f, 0x9c, 0xb1,
	0x53, 0x39, 0x38, 0xe3, 0x71, 0x07, 0xc7, 0x78, 0x38, 0x16, 0x93, 0x69, 0x62, 0x1f, 0xee, 0xba,
	0x9b, 0x2d, 0x6a, 0x35, 0x05, 0x1d, 0x52, 0xa6, 0x17, 0x20, 0xb1, 0x4f, 0xa9, 0xd9, 0x20, 0x87,
	0x61, 0xa2, 0xa7, 0xf6, 0x29, 0xdd, 0x96, 0xcf, 0xfa, 0x7d, 0x98, 0xc3, 0xc2, 0x17, 0x2d, 0x53,
	0x0a, 0x31, 0xc7, 0x44, 0xaf, 0x30, 0xe5, 0xc9, 0x5b, 0x17, 0xf3, 0x2a, 0x3e, 0x79, 0xd9, 0xea,
	0xf3, 0x7e, 0xab, 0xcf, 0x6f, 0xb8, 0xcc, 0x59, 0x1f, 0x97, 0x31, 0x2d, 0xcd, 0xc8, 0xcd, 0xbb,
	0xad, 0x2d, 0x4a, 0x8b, 0x4e, 0x49, 0x6e, 0x94, 0x9d, 0x12, 0x15, 0x96, 0x89, 0x67, 0xd6, 0x58,
	0x9d, 0x89, 0xa0, 0x09, 0x4a, 0xf4, 0x1d, 0xe2, 0xbd, 0x2b, 0xb1, 0x0e, 0xa9, 0x06, 0x67, 0x16,
	0xc5, 0x2e, 0xd8, 0x96, 0xda, 0x96, 0x98, 0xfe, 0x09, 0xcc, 0x73, 0x5a, 0x93, 0x76, 0x9a, 0xcc,
	0xb1, 0xa4, 0xbf, 0x07, 0x11, 0x13, 0xa7, 0x8e, 0x66, 0xe2, 0x05, 0x5f, 0x45, 0x31, 0xd0, 0xe0,
	0x5b, 0x6a, 0xfc, 0xd4, 0xf7, 0x64, 0xae, 0xcb, 0xce, 0x3f, 0xc4, 0x0b, 0xe9, 0x16, 0x9c, 0xdb,
	0x53, 0x26, 0x98, 0xb4, 0xd5, 0x60, 0xfc, 0xb0, 0xf3, 0x66, 0x3a, 0xeb, 0x2f, 0x6e, 0xe2, 0x9a,
	0xba, 0xa1, 0x06, 0x78, 0x83, 0x62, 0xff, 0x31, 0x6f, 0x7e, 0xd0, 0xe0, 0x42, 0x97, 0x37, 0xfe,
	0x21, 0x1a, 0x9e, 0x1f, 0xcb, 0x30, 0x4d, 0x5b, 0xd4, 0x32, 0x39, 0xf5, 0x1a, 0xae, 0xe3, 0x51,
	0xb4, 0x3f, 0x55, 0x4a, 0x49, 0xb0, 0xe4, 0x63, 0xc6, 0x8f, 0x1a, 0xe4, 0x62, 0x0d, 0x67, 0xae,
	0xb3, 0x45, 0x58, 0x6d, 0x88, 0xf6, 0xdf, 0x80, 0x59, 0xb4, 0x9f, 0x72, 0xde, 0xed, 0x43, 0x46,
	0x2e, 0x6c, 0x72, 0x1e, 0xba, 0xf1, 0xb0, 0xd7, 0x8d, 0x2d, 0xbf, 0x65, 0x7c, 0xd0, 0xb0, 0x71,
	0x5a, 0xeb, 0xb6, 0x4f, 0x3b, 0xa2, 0x7d, 0xa7, 0xd1, 0xc6, 0x8c, 0xbf, 0x34, 0xb8, 0xdc, 0x65,
	0xef, 0x1d, 0xd5, 0x49, 0x8a, 0x8e, 0xc5, 0x69, 0x9d, 0x3a, 0xaf, 0x9a, 0xc9, 0x31, 0x8d, 0x72,
	0xe2, 0x48, 0x8d, 0x72, 0xb2, 0xb7, 0x51, 0x1a, 0xdf, 0x8c, 0xc2, 0x72, 0xfc, 0xe1, 0xdf, 0xa2,
	0x74, 0x87, 0x0a, 0x51, 0xc3, 0x10, 0xfc, 0xf3, 0x01, 0xd8, 0x86, 0xb9, 0xa0, 0x43, 0x77, 0x5c,
	0x1f, 0x63, 0x47, 0xeb, 0xcd, 0xb3, 0xfe, 0xe6, 0xc8, 0xfd, 0x71, 0x0f, 0xce, 0x72, 0xba, 0xdf,
	0x74, 0xec, 0x4e, 0x85, 0xe3, 0x47, 0xbc, 0x8f, 0xd4, 0xde, 0xb6, 0x3e, 0xe3, 0x6b, 0x0d, 0x16,
	0xfb, 0xcd, 0x5f, 0xf5, 0x46, 0x8d, 0x0e, 0xa1, 0x2e, 0x8c, 0x07, 0x13, 0xb0, 0xd4, 0x65, 0xd3,
	0x9a, 0x55, 0x3d, 0x19, 0x1b, 0xba, 0x06, 0x33, 0xc4, 0xaa, 0x9a, 0x31, 0xad, 0x62, 0x9a, 0x58,
	0xd5, 0x9d, 0xb6, 0x0b, 0xb7, 0xe1, 0xbc, 0x14, 0xec, 0xdb, 0x31, 0xe6, 0x48, 0x68, 0xc2, 0xf1,
	0xb8, 0xd1, 0x12, 0xa4, 0x82, 0x11, 0x22, 0xc2, 0x8c, 0x40, 0x4d, 0x06, 0x78, 0x0e, 0x6e, 0xc3,
	0xf9, 0xa0, 0x4a, 0xd4, 0xf8, 0x6c, 0x12, 0xdb, 0xe6, 0xd4, 0xf3, 0xfc, 0xc1, 0x31, 0xa8, 0x21,
	0xcc, 0x18, 0x5f, 0x53, 0x6b, 0xfa, 0x75, 0x98, 0x95, 0x06, 0x77, 0x92, 0x11, 0x45, 0x96, 0xd2,
	0xc4, 0xaa, 0xde, 0x19, 0xc8, 0x47, 0xa6, 0xe2, 0xf8, 0x48, 0x7c, 0x16, 0x13, 0xfd, 0xb2, 0xf8,
	0x29, 0xe8, 0x9d, 0xa1, 0x45, 0x5e, 0x00, 0x27, 0xe4, 0x05, 0x99, 0x48, 0x3a, 0x90, 0x73, 0x98,
	0x70, 0xb6, 0xcb, 0x3f, 0xd4, 0x9f, 0x3c, 0xa1, 0xfe, 0x99, 0x68, 0x4c, 0xf0, 0x05, 0x0b, 0x90,
	0xc0, 0x86, 0x8f, 0xbc, 0x2b, 0x85, 0xc5, 0x33, 0x25, 0x81, 0x3b, 0x92, 0x70, 0x2d, 0x42, 0x12,
	0x17, 0x65, 0x25, 0x35, 0x3d, 0xa4, 0x65, 0x53, 0x25, 0x90, 0xd0, 0x0e, 0x22, 0xc6, 0xe7, 0xa3,
	0x83, 0x8a, 0xd4, 0xe7, 0x2e, 0x71, 0xd5, 0xa7, 0x1d, 0xaf, 0xfa, 0x46, 0x07, 0x54, 0xdf, 0xb0,
	0x39, 0xcc, 0x13, 0x6d, 0x40, 0x0c, 0x8e, 0x39, 0x25, 0x9e, 0xf2, 0x41, 0x3d, 0xc9, 0x94, 0x35,
	0xd0, 0xbd, 0x63, 0x8e, 0x8d, 0xaf, 0xa0, 0x7b, 0xdf, 0x8f, 0xc5, 0xbb, 0xd7, 0xc1, 0xc9, 0x86,
	0x5b, 0xc1, 0x03, 0x27, 0x84, 0x2d, 0xc8, 0x9c, 0x90, 0x96, 0xa5, 0x44, 0x94, 0x92, 0x19, 0x20,
	0x5d, 0xe9, 0x61, 0x64, 0x49, 0x62, 0x55, 0xc3, 0x39, 0x23, 0x22, 0x13, 0xe5, 0x63, 0xbe, 0x8c,
	0xa2, 0x63, 0x16, 0xe4, 0x54, 0x04, 0x5e, 0x96, 0x92, 0xcd, 0x63, 0xa8, 0xe2, 0x59, 0xd9, 0xcf,
	0x1a, 0xcc, 0xf7, 0x26, 0xed, 0xb8, 0xc3, 0xff, 0x29, 0x57, 0xe3, 0x0d, 0x75, 0x35, 0xc5, 0xd1,
	0x01, 0xd9, 0xe6, 0x37, 0xa3, 0x8c, 0xe0, 0x49, 0xef, 0x68, 0x1a, 0x3a, 0x74, 0x6c, 0x52, 0x70,
	0xca, 0x7e, 0xdd, 0x84, 0x73, 0xa1, 0x5f, 0x31, 0x34, 0x41, 0xf7, 0x7d, 0x8b, 0x32, 0x85, 0x07,
	0xa3, 0x3d, 0xf3, 0xd5, 0x9a, 0x55, 0xed, 0x1c, 0x3b, 0x4f, 0xf9, 0x8c, 0xbd, 0xfa, 0x43, 0xe8,
	0xb7, 0x1a, 0x2c, 0xf4, 0x06, 0xa9, 0x3d, 0x80, 0x0e, 0xb5, 0x09, 0x19, 0x5f, 0xc6, 0xde, 0xf4,
	0x5d, 0xdc, 0xe9, 0xb5, 0xd8, 0x61, 0x48, 0x19, 0xd9, 0x33, 0xda, 0xfc, 0xfb, 0xbd, 0xb2, 0xa7,
	0xc7, 0x4d, 0x1c, 0xa1, 0xc7, 0x4d, 0xf6, 0xf4, 0x38, 0xe3, 0x8b, 0x3e, 0x77, 0x86, 0x45, 0x59,
	0xe3, 0xb8, 0xa3, 0xf9, 0x9b, 0x90, 0x55, 0x51, 0xc0, 0xcd, 0x71, 0x87, 0x56, 0xc5, 0x01, 0x97,
	0xe3, 0x92, 0xac, 0xf6, 0xf5, 0x39, 0xbb, 0xb8, 0x18, 0x89, 0xde, 0x5b, 0x9d, 0x6f, 0x8b, 0x99,
	0xda, 0xcf, 0xb5, 0xf7, 0xad, 0x47, 0xe6, 0xf7, 0x55, 0x35, 0x87, 0x06, 0x1b, 0x3b, 0xc7, 0xf8,
	0x99, 0xf6, 0x9e, 0x97, 0x1a, 0xe6, 0xe3, 0x47, 0xef, 0x33, 0x7d, 0x46, 0x6f, 0xe3, 0xbb, 0x38,
	0xd6, 0xa6, 0x72, 0x10, 0x1e, 0x9a, 0x41, 0xe1, 0xd5, 0x4e, 0x14, 0xde, 0xd1, 0x01, 0xe1, 0x7d,
	0xc1, 0x19, 0x2a, 0xc0, 0x9c, 0x6f, 0xaf, 0x2c, 0x91, 0xe2, 0xfa, 0x06, 0x4e, 0xc8, 0x65, 0xfd,
	0x02, 0x9c, 0x69, 0xb8, 0x5c, 0xb4, 0x6d, 0x9a, 0x94, 0x8f, 0x45, 0x3b, 0xdc, 0xa0, 0xbe, 0x4e,
	0x79, 0xf1, 0x86, 0xf5, 0xdd, 0x47, 0xcf, 0x72, 0xda, 0xe3, 0x67, 0x39, 0xed, 0xb7, 0x67, 0x39,
	0xed, 0xab, 0xe7, 0xb9, 0x91, 0xc7, 0xcf, 0x73, 0x23, 0xbf, 0x3c, 0xcf, 0x8d, 0x7c, 0xfc, 0x76,
	0xe4, 0x6b, 0x6d, 0x95, 0x92, 0xd5, 0x80, 0x36, 0x04, 0xcf, 0xea, 0x97, 0xbc, 0x56, 0xf4, 0x67,
	0x41, 0xfc, 0xba, 0x7b, 0x6f, 0x12, 0x25, 0xdf, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x58, 0xd0,
	0x4c, 0x10, 0x3d, 0x1c, 0x00, 0x00,
}

func (m *EventCrosschainRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestChainType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SrcChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SrcChainType))
		i--
		dAtA[i] = 0x78
	}
	if len(m.RequestPacket) > 0 {
		i -= len(m.RequestPacket)
		copy(dAtA[i:], m.RequestPacket)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestPacket)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RequestMetadata) > 0 {
		i -= len(m.RequestMetadata)
		copy(dAtA[i:], m.RequestMetadata)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestMetadata)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x52
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.SrcTxOrigin) > 0 {
		i -= len(m.SrcTxOrigin)
		copy(dAtA[i:], m.SrcTxOrigin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcTxOrigin)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SrcTimestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SourceTxHash) > 0 {
		i -= len(m.SourceTxHash)
		copy(dAtA[i:], m.SourceTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventHandleNativeTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHandleNativeTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventHandleNativeTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainReadyToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainReadyToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainReadyToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RelayerIncentiveInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.DestGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestGasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.DestGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestGasLimit))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.DestTxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainRequestBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainRequestBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainRequestBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockedExpiryHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockedExpiryHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainRequestExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainRequestExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainRequestExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockedExpiryHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockedExpiryHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainExecuted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainExecuted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainExecuted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecResponse) > 0 {
		i -= len(m.ExecResponse)
		copy(dAtA[i:], m.ExecResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecResponse)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainExecutionFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainExecutionFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainExecutionFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecErrResponse) > 0 {
		i -= len(m.ExecErrResponse)
		copy(dAtA[i:], m.ExecErrResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecErrResponse)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainFeePayerUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainFeePayerUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainFeePayerUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainDestGasIncremented) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainDestGasIncremented) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainDestGasIncremented) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DestGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestGasPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.DestGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DestGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainRequestFeeSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainRequestFeeSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainRequestFeeSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.RelayerFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainRequestCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainRequestCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainRequestCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckRequestCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckRequestCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckRequestCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.ExecData) > 0 {
		i -= len(m.ExecData)
		copy(dAtA[i:], m.ExecData)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecData)))
		i--
		dAtA[i] = 0x62
	}
	if m.AckDestChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckDestChainType))
		i--
		dAtA[i] = 0x58
	}
	if m.AckSrcChainType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckSrcChainType))
		i--
		dAtA[i] = 0x50
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AckDestChainId) > 0 {
		i -= len(m.AckDestChainId)
		copy(dAtA[i:], m.AckDestChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckDestChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestTxHash) > 0 {
		i -= len(m.DestTxHash)
		copy(dAtA[i:], m.DestTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DestTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckRequestBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckRequestBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckRequestBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockedExpiryHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockedExpiryHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckRequestExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckRequestExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckRequestExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockedExpiryHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockedExpiryHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckReadyToExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckReadyToExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckReadyToExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AckRelayerIncentiveInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.AckGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x38
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.TxFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckExecuted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckExecuted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckExecuted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AckExecResponse) > 0 {
		i -= len(m.AckExecResponse)
		copy(dAtA[i:], m.AckExecResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckExecResponse)))
		i--
		dAtA[i] = 0x22
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckExecutionFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckExecutionFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckExecutionFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AckExecErrResponse) > 0 {
		i -= len(m.AckExecErrResponse)
		copy(dAtA[i:], m.AckExecErrResponse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckExecErrResponse)))
		i--
		dAtA[i] = 0x22
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckFeeSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckFeeSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckFeeSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.RelayerFeeInRoute.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckGasIncremented) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckGasIncremented) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckGasIncremented) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckGasPrice != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.AckGasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckGasLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckSrcChainType) > 0 {
		i -= len(m.AckSrcChainType)
		copy(dAtA[i:], m.AckSrcChainType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckSrcChainType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainAckReceiptCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainAckReceiptCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainAckReceiptCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AckReceiptTxHash) > 0 {
		i -= len(m.AckReceiptTxHash)
		copy(dAtA[i:], m.AckReceiptTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckReceiptTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AckReceiptBlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckReceiptBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AttestationId) > 0 {
		i -= len(m.AttestationId)
		copy(dAtA[i:], m.AttestationId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttestationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCrosschainReceiptCompleted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrosschainReceiptCompleted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrosschainReceiptCompleted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateIBCConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateIBCConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateIBCConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateIBCConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateIBCConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateIBCConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCrosschainRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.SourceTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovEvents(uint64(m.SrcTimestamp))
	}
	l = len(m.SrcTxOrigin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestMetadata)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestPacket)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SrcChainType != 0 {
		n += 1 + sovEvents(uint64(m.SrcChainType))
	}
	if m.DestChainType != 0 {
		n += 2 + sovEvents(uint64(m.DestChainType))
	}
	return n
}

func (m *EventCrosschainRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventHandleNativeTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = m.RouteAmount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainReadyToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.DestTxFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.DestGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.DestGasLimit))
	}
	if m.DestGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.DestGasPrice))
	}
	l = m.RelayerIncentiveInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosschainRequestBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	if m.BlockedExpiryHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockedExpiryHeight))
	}
	return n
}

func (m *EventCrosschainRequestExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	if m.BlockedExpiryHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockedExpiryHeight))
	}
	return n
}

func (m *EventCrosschainExecuted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = len(m.ExecResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainExecutionFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = len(m.ExecErrResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainFeePayerUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainDestGasIncremented) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DestGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.DestGasLimit))
	}
	if m.DestGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.DestGasPrice))
	}
	return n
}

func (m *EventCrosschainRequestFeeSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = m.RelayerFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.RefundFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosschainRequestCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainAckRequestCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = len(m.DestTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AckDestChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	if m.AckSrcChainType != 0 {
		n += 1 + sovEvents(uint64(m.AckSrcChainType))
	}
	if m.AckDestChainType != 0 {
		n += 1 + sovEvents(uint64(m.AckDestChainType))
	}
	l = len(m.ExecData)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ExecStatus {
		n += 2
	}
	return n
}

func (m *EventCrosschainAckRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainAckRequestBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	if m.BlockedExpiryHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockedExpiryHeight))
	}
	return n
}

func (m *EventCrosschainAckRequestExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	if m.BlockedExpiryHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockedExpiryHeight))
	}
	return n
}

func (m *EventCrosschainAckReadyToExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.TxFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.AckGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.AckGasPrice))
	}
	l = m.AckRelayerIncentiveInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosschainAckExecuted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	l = len(m.AckExecResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainAckExecutionFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	l = len(m.AckExecErrResponse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainAckFeeSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	l = m.RelayerFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.RefundFeeInRoute.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCrosschainAckCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCrosschainAckGasIncremented) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckSrcChainType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckGasLimit != 0 {
		n += 1 + sovEvents(uint64(m.AckGasLimit))
	}
	if m.AckGasPrice != 0 {
		n += 1 + sovEvents(uint64(m.AckGasPrice))
	}
	return n
}

func (m *EventCrosschainAckReceiptCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttestationId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckReceiptIdentifier))
	}
	if m.AckReceiptBlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.AckReceiptBlockHeight))
	}
	l = len(m.AckReceiptTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.RequestIdentifier))
	}
	return n
}

func (m *EventCrosschainReceiptCompleted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovEvents(uint64(m.AckReceiptIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCreateIBCConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateIBCConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCrosschainRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcTxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestMetadata = append(m.RequestMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestMetadata == nil {
				m.RequestMetadata = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPacket = append(m.RequestPacket[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestPacket == nil {
				m.RequestPacket = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainType", wireType)
			}
			m.SrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainType", wireType)
			}
			m.DestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventHandleNativeTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventHandleNativeTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventHandleNativeTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainReadyToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainReadyToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainReadyToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestTxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DestTxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestGasLimit", wireType)
			}
			m.DestGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestGasPrice", wireType)
			}
			m.DestGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerIncentiveInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerIncentiveInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainRequestBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainRequestBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainRequestBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedExpiryHeight", wireType)
			}
			m.BlockedExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainRequestExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainRequestExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainRequestExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedExpiryHeight", wireType)
			}
			m.BlockedExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainExecuted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainExecuted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainExecuted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecResponse = append(m.ExecResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecResponse == nil {
				m.ExecResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainExecutionFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainExecutionFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainExecutionFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecErrResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecErrResponse = append(m.ExecErrResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecErrResponse == nil {
				m.ExecErrResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainFeePayerUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainFeePayerUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainFeePayerUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainDestGasIncremented) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainDestGasIncremented: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainDestGasIncremented: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestGasLimit", wireType)
			}
			m.DestGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestGasPrice", wireType)
			}
			m.DestGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainRequestFeeSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainRequestFeeSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainRequestFeeSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainRequestCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainRequestCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainRequestCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckRequestCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckRequestCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckRequestCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckDestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainType", wireType)
			}
			m.AckSrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckSrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckDestChainType", wireType)
			}
			m.AckDestChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckDestChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecData == nil {
				m.ExecData = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckRequestBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckRequestBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckRequestBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedExpiryHeight", wireType)
			}
			m.BlockedExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckRequestExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckRequestExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckRequestExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedExpiryHeight", wireType)
			}
			m.BlockedExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockedExpiryHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckReadyToExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckReadyToExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckReadyToExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRelayerIncentiveInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AckRelayerIncentiveInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckExecuted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckExecuted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckExecuted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckExecResponse = append(m.AckExecResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.AckExecResponse == nil {
				m.AckExecResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckExecutionFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckExecutionFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckExecutionFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecErrResponse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckExecErrResponse = append(m.AckExecErrResponse[:0], dAtA[iNdEx:postIndex]...)
			if m.AckExecErrResponse == nil {
				m.AckExecErrResponse = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckFeeSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckFeeSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckFeeSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFeeInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundFeeInRoute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckGasIncremented) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckGasIncremented: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckGasIncremented: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasLimit", wireType)
			}
			m.AckGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckGasPrice", wireType)
			}
			m.AckGasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckGasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainAckReceiptCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainAckReceiptCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainAckReceiptCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationId = append(m.AttestationId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationId == nil {
				m.AttestationId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptBlockHeight", wireType)
			}
			m.AckReceiptBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrosschainReceiptCompleted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrosschainReceiptCompleted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrosschainReceiptCompleted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateIBCConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateIBCConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateIBCConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateIBCConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateIBCConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateIBCConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
