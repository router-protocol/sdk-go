// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerprotocol/routerchain/crosschain/crosschain_ack_receipt.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/router-protocol/sdk-go/routerchain/multichain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosschainAckReceipt struct {
	AckReceiptSrcChainId   string                       `protobuf:"bytes,1,opt,name=ackReceiptSrcChainId,proto3" json:"ackReceiptSrcChainId,omitempty"`
	Contract               string                       `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	AckReceiptIdentifier   uint64                       `protobuf:"varint,3,opt,name=ack_receipt_identifier,json=ackReceiptIdentifier,proto3" json:"ack_receipt_identifier,omitempty"`
	AckReceiptBlockHeight  uint64                       `protobuf:"varint,4,opt,name=ack_receipt_blockHeight,json=ackReceiptBlockHeight,proto3" json:"ack_receipt_blockHeight,omitempty"`
	AckReceiptTxHash       string                       `protobuf:"bytes,5,opt,name=ack_receipt_txHash,json=ackReceiptTxHash,proto3" json:"ack_receipt_txHash,omitempty"`
	RelayerRouterAddress   string                       `protobuf:"bytes,6,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	RequestIdentifier      uint64                       `protobuf:"varint,7,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	Status                 CrosschainAckReceiptTxStatus `protobuf:"varint,8,opt,name=status,proto3,enum=routerprotocol.routerchain.crosschain.CrosschainAckReceiptTxStatus" json:"status,omitempty"`
	AckSrcChainId          string                       `protobuf:"bytes,9,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier   uint64                       `protobuf:"varint,10,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	AckExecData            []byte                       `protobuf:"bytes,11,opt,name=ackExecData,proto3" json:"ackExecData,omitempty"`
	AckExecStatus          bool                         `protobuf:"varint,12,opt,name=ackExecStatus,proto3" json:"ackExecStatus,omitempty"`
	FeeConsumed            uint64                       `protobuf:"varint,13,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
	AckReceiptSrcChainType types.ChainType              `protobuf:"varint,14,opt,name=ack_receipt_src_chain_type,json=ackReceiptSrcChainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"ack_receipt_src_chain_type,omitempty"`
}

func (m *CrosschainAckReceipt) Reset()         { *m = CrosschainAckReceipt{} }
func (m *CrosschainAckReceipt) String() string { return proto.CompactTextString(m) }
func (*CrosschainAckReceipt) ProtoMessage()    {}
func (*CrosschainAckReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc439ac55d16a92, []int{0}
}
func (m *CrosschainAckReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainAckReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainAckReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainAckReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainAckReceipt.Merge(m, src)
}
func (m *CrosschainAckReceipt) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainAckReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainAckReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainAckReceipt proto.InternalMessageInfo

func (m *CrosschainAckReceipt) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *CrosschainAckReceipt) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *CrosschainAckReceipt) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

func (m *CrosschainAckReceipt) GetAckReceiptBlockHeight() uint64 {
	if m != nil {
		return m.AckReceiptBlockHeight
	}
	return 0
}

func (m *CrosschainAckReceipt) GetAckReceiptTxHash() string {
	if m != nil {
		return m.AckReceiptTxHash
	}
	return ""
}

func (m *CrosschainAckReceipt) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrosschainAckReceipt) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *CrosschainAckReceipt) GetStatus() CrosschainAckReceiptTxStatus {
	if m != nil {
		return m.Status
	}
	return CROSSCHAIN_ACK_RECEIPT_TX_CREATED
}

func (m *CrosschainAckReceipt) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *CrosschainAckReceipt) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *CrosschainAckReceipt) GetAckExecData() []byte {
	if m != nil {
		return m.AckExecData
	}
	return nil
}

func (m *CrosschainAckReceipt) GetAckExecStatus() bool {
	if m != nil {
		return m.AckExecStatus
	}
	return false
}

func (m *CrosschainAckReceipt) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func (m *CrosschainAckReceipt) GetAckReceiptSrcChainType() types.ChainType {
	if m != nil {
		return m.AckReceiptSrcChainType
	}
	return types.CHAIN_TYPE_NONE
}

type CrosschainAckReceiptClaimHash struct {
	AckReceiptSrcChainId  string `protobuf:"bytes,1,opt,name=ackReceiptSrcChainId,proto3" json:"ackReceiptSrcChainId,omitempty"`
	Contract              string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	AckReceiptIdentifier  uint64 `protobuf:"varint,3,opt,name=ack_receipt_identifier,json=ackReceiptIdentifier,proto3" json:"ack_receipt_identifier,omitempty"`
	AckReceiptBlockHeight uint64 `protobuf:"varint,4,opt,name=ack_receipt_blockHeight,json=ackReceiptBlockHeight,proto3" json:"ack_receipt_blockHeight,omitempty"`
	AckReceiptTxHash      string `protobuf:"bytes,5,opt,name=ack_receipt_txHash,json=ackReceiptTxHash,proto3" json:"ack_receipt_txHash,omitempty"`
	RelayerRouterAddress  string `protobuf:"bytes,6,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	RequestIdentifier     uint64 `protobuf:"varint,7,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
	AckSrcChainId         string `protobuf:"bytes,8,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier  uint64 `protobuf:"varint,9,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	AckExecData           []byte `protobuf:"bytes,10,opt,name=ackExecData,proto3" json:"ackExecData,omitempty"`
	AckExecStatus         bool   `protobuf:"varint,11,opt,name=ackExecStatus,proto3" json:"ackExecStatus,omitempty"`
	FeeConsumed           uint64 `protobuf:"varint,12,opt,name=feeConsumed,proto3" json:"feeConsumed,omitempty"`
}

func (m *CrosschainAckReceiptClaimHash) Reset()         { *m = CrosschainAckReceiptClaimHash{} }
func (m *CrosschainAckReceiptClaimHash) String() string { return proto.CompactTextString(m) }
func (*CrosschainAckReceiptClaimHash) ProtoMessage()    {}
func (*CrosschainAckReceiptClaimHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc439ac55d16a92, []int{1}
}
func (m *CrosschainAckReceiptClaimHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainAckReceiptClaimHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainAckReceiptClaimHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainAckReceiptClaimHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainAckReceiptClaimHash.Merge(m, src)
}
func (m *CrosschainAckReceiptClaimHash) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainAckReceiptClaimHash) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainAckReceiptClaimHash.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainAckReceiptClaimHash proto.InternalMessageInfo

func (m *CrosschainAckReceiptClaimHash) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *CrosschainAckReceiptClaimHash) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *CrosschainAckReceiptClaimHash) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

func (m *CrosschainAckReceiptClaimHash) GetAckReceiptBlockHeight() uint64 {
	if m != nil {
		return m.AckReceiptBlockHeight
	}
	return 0
}

func (m *CrosschainAckReceiptClaimHash) GetAckReceiptTxHash() string {
	if m != nil {
		return m.AckReceiptTxHash
	}
	return ""
}

func (m *CrosschainAckReceiptClaimHash) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrosschainAckReceiptClaimHash) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *CrosschainAckReceiptClaimHash) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *CrosschainAckReceiptClaimHash) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *CrosschainAckReceiptClaimHash) GetAckExecData() []byte {
	if m != nil {
		return m.AckExecData
	}
	return nil
}

func (m *CrosschainAckReceiptClaimHash) GetAckExecStatus() bool {
	if m != nil {
		return m.AckExecStatus
	}
	return false
}

func (m *CrosschainAckReceiptClaimHash) GetFeeConsumed() uint64 {
	if m != nil {
		return m.FeeConsumed
	}
	return 0
}

func init() {
	proto.RegisterType((*CrosschainAckReceipt)(nil), "routerprotocol.routerchain.crosschain.CrosschainAckReceipt")
	proto.RegisterType((*CrosschainAckReceiptClaimHash)(nil), "routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash")
}

func init() {
	proto.RegisterFile("routerprotocol/routerchain/crosschain/crosschain_ack_receipt.proto", fileDescriptor_2cc439ac55d16a92)
}

var fileDescriptor_2cc439ac55d16a92 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0x42, 0x1a, 0x92, 0x4d, 0x5a, 0xc1, 0xaa, 0x94, 0x55, 0x24, 0x2c, 0xab, 0x02, 0xc9,
	0x87, 0xd6, 0x45, 0x05, 0xf5, 0xc0, 0xad, 0x31, 0x48, 0xad, 0xc4, 0xc9, 0xcd, 0x09, 0x0e, 0xd6,
	0x66, 0xbd, 0x6d, 0x56, 0x76, 0xb2, 0x61, 0x77, 0x2d, 0x25, 0x6f, 0xc1, 0xab, 0xf0, 0x16, 0x1c,
	0x7b, 0xe4, 0x88, 0x92, 0x47, 0xe0, 0x05, 0x90, 0xd7, 0xc1, 0xde, 0xfc, 0xa8, 0x0a, 0x82, 0x23,
	0x37, 0xcf, 0x8c, 0xbf, 0x6f, 0xbe, 0x9d, 0xf9, 0x34, 0xb0, 0x2b, 0x45, 0xa6, 0x99, 0x1c, 0x4b,
	0xa1, 0x05, 0x15, 0xe9, 0x69, 0x11, 0xd2, 0x01, 0xe1, 0xa3, 0x53, 0x2a, 0x85, 0x52, 0xab, 0x9f,
	0x11, 0xa1, 0x49, 0x24, 0x19, 0x65, 0x7c, 0xac, 0x7d, 0x03, 0x43, 0x2f, 0x97, 0x39, 0x7c, 0x8b,
	0xc3, 0xaf, 0x80, 0x9d, 0x0f, 0x7f, 0xd3, 0x2a, 0xd2, 0x93, 0x48, 0x69, 0xa2, 0x33, 0x55, 0x34,
	0xed, 0x9c, 0xdf, 0xc3, 0x36, 0xcc, 0x52, 0xcd, 0x17, 0x6c, 0x86, 0x48, 0x4f, 0xc7, 0xac, 0xc0,
	0x1d, 0xfd, 0xdc, 0x85, 0x07, 0x41, 0xd9, 0xe2, 0x82, 0x26, 0x61, 0xd1, 0x00, 0x9d, 0xc1, 0x03,
	0x52, 0x46, 0xd7, 0x92, 0x06, 0x79, 0xfd, 0x2a, 0xc6, 0xc0, 0x05, 0x5e, 0x33, 0xdc, 0x58, 0x43,
	0x1d, 0xd8, 0xa0, 0x62, 0xa4, 0x25, 0xa1, 0x1a, 0x3f, 0x30, 0xff, 0x95, 0x31, 0x7a, 0x03, 0x0f,
	0x6d, 0xfd, 0x3c, 0x66, 0x23, 0xcd, 0x6f, 0x38, 0x93, 0xf8, 0xa1, 0x0b, 0xbc, 0x9a, 0xcd, 0x78,
	0x55, 0xd6, 0xd0, 0x39, 0x7c, 0x66, 0xa3, 0xfa, 0xa9, 0xa0, 0xc9, 0x25, 0xe3, 0xb7, 0x03, 0x8d,
	0x6b, 0x06, 0xf6, 0xb4, 0x82, 0x75, 0xab, 0x22, 0x3a, 0x86, 0x68, 0x79, 0x5a, 0x97, 0x44, 0x0d,
	0xf0, 0xae, 0xd1, 0xf4, 0xb8, 0x82, 0xf4, 0x4c, 0x3e, 0x7f, 0xab, 0x64, 0x29, 0x99, 0x32, 0x19,
	0x9a, 0xb1, 0x5d, 0xc4, 0xb1, 0x64, 0x4a, 0xe1, 0x7a, 0xf1, 0xd6, 0x4d, 0x35, 0x74, 0x0c, 0x9f,
	0x48, 0xf6, 0x39, 0x63, 0xca, 0x92, 0x8b, 0x1f, 0x19, 0x4d, 0xeb, 0x05, 0xf4, 0x09, 0xd6, 0x8b,
	0x75, 0xe1, 0x86, 0x0b, 0xbc, 0xfd, 0xb3, 0xc0, 0xdf, 0xca, 0x24, 0xfe, 0xa6, 0xd5, 0xf4, 0x26,
	0xd7, 0x86, 0x2a, 0x5c, 0x50, 0xa2, 0x17, 0x70, 0x8f, 0xd0, 0xc4, 0xda, 0x51, 0xd3, 0xe8, 0x5e,
	0x4e, 0x96, 0x0b, 0x5d, 0xd5, 0x0c, 0xad, 0xf1, 0xaf, 0xca, 0x76, 0x61, 0x8b, 0xd0, 0xe4, 0xfd,
	0x84, 0xd1, 0x77, 0x44, 0x13, 0xdc, 0x72, 0x81, 0xd7, 0x0e, 0xed, 0xd4, 0xa2, 0x77, 0x1e, 0x16,
	0xa2, 0x70, 0xdb, 0x05, 0x5e, 0x23, 0x5c, 0x4e, 0xe6, 0x3c, 0x37, 0x8c, 0x05, 0x62, 0xa4, 0xb2,
	0x21, 0x8b, 0xf1, 0x9e, 0x69, 0x69, 0xa7, 0x50, 0x0a, 0x3b, 0xf6, 0xc2, 0x94, 0xa4, 0x51, 0xe5,
	0x55, 0xbc, 0x6f, 0x86, 0xf6, 0xea, 0xbe, 0xa1, 0x55, 0x26, 0xf7, 0xcd, 0x8b, 0x7b, 0xd3, 0x31,
	0x0b, 0x0f, 0xd7, 0x6d, 0x9a, 0xe7, 0x8f, 0xbe, 0xd6, 0xe0, 0xf3, 0x4d, 0xa3, 0x0d, 0x52, 0xc2,
	0x87, 0xbf, 0x2d, 0xf1, 0xdf, 0xfe, 0xff, 0xcc, 0xfe, 0x6b, 0x0e, 0x6d, 0xfc, 0x89, 0x43, 0x9b,
	0xdb, 0x3b, 0x14, 0x6e, 0xe1, 0xd0, 0xd6, 0x16, 0x0e, 0x6d, 0xaf, 0x39, 0xb4, 0xdb, 0xfb, 0x36,
	0x73, 0xc0, 0xdd, 0xcc, 0x01, 0x3f, 0x66, 0x0e, 0xf8, 0x32, 0x77, 0x76, 0xee, 0xe6, 0xce, 0xce,
	0xf7, 0xb9, 0xb3, 0xf3, 0xf1, 0xed, 0x2d, 0xd7, 0x83, 0xac, 0xef, 0x53, 0x31, 0x5c, 0xdc, 0xdd,
	0x93, 0x95, 0x3b, 0x7c, 0x52, 0x5c, 0xdf, 0x89, 0x7d, 0xd8, 0x73, 0x63, 0xab, 0x7e, 0xdd, 0xfc,
	0xf9, 0xfa, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0x27, 0xec, 0x26, 0x79, 0x06, 0x00, 0x00,
}

func (m *CrosschainAckReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainAckReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainAckReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckReceiptSrcChainType != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.AckReceiptSrcChainType))
		i--
		dAtA[i] = 0x70
	}
	if m.FeeConsumed != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x68
	}
	if m.AckExecStatus {
		i--
		if m.AckExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.AckExecData) > 0 {
		i -= len(m.AckExecData)
		copy(dAtA[i:], m.AckExecData)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckExecData)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x50
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Status != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AckReceiptTxHash) > 0 {
		i -= len(m.AckReceiptTxHash)
		copy(dAtA[i:], m.AckReceiptTxHash)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckReceiptTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AckReceiptBlockHeight != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.AckReceiptBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrosschainAckReceiptClaimHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainAckReceiptClaimHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainAckReceiptClaimHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeConsumed != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.FeeConsumed))
		i--
		dAtA[i] = 0x60
	}
	if m.AckExecStatus {
		i--
		if m.AckExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.AckExecData) > 0 {
		i -= len(m.AckExecData)
		copy(dAtA[i:], m.AckExecData)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckExecData)))
		i--
		dAtA[i] = 0x52
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x48
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x42
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AckReceiptTxHash) > 0 {
		i -= len(m.AckReceiptTxHash)
		copy(dAtA[i:], m.AckReceiptTxHash)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckReceiptTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AckReceiptBlockHeight != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.AckReceiptBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainAckReceipt(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainAckReceipt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosschainAckReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.AckReceiptIdentifier))
	}
	if m.AckReceiptBlockHeight != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.AckReceiptBlockHeight))
	}
	l = len(m.AckReceiptTxHash)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.RequestIdentifier))
	}
	if m.Status != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.Status))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.AckRequestIdentifier))
	}
	l = len(m.AckExecData)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.AckExecStatus {
		n += 2
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.FeeConsumed))
	}
	if m.AckReceiptSrcChainType != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.AckReceiptSrcChainType))
	}
	return n
}

func (m *CrosschainAckReceiptClaimHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.AckReceiptIdentifier))
	}
	if m.AckReceiptBlockHeight != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.AckReceiptBlockHeight))
	}
	l = len(m.AckReceiptTxHash)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.RequestIdentifier))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.AckRequestIdentifier))
	}
	l = len(m.AckExecData)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.AckExecStatus {
		n += 2
	}
	if m.FeeConsumed != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.FeeConsumed))
	}
	return n
}

func sovCrosschainAckReceipt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainAckReceipt(x uint64) (n int) {
	return sovCrosschainAckReceipt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosschainAckReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainAckReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainAckReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainAckReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptBlockHeight", wireType)
			}
			m.AckReceiptBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CrosschainAckReceiptTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckExecData = append(m.AckExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.AckExecData == nil {
				m.AckExecData = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AckExecStatus = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainType", wireType)
			}
			m.AckReceiptSrcChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptSrcChainType |= types.ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainAckReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrosschainAckReceiptClaimHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainAckReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainAckReceiptClaimHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainAckReceiptClaimHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptBlockHeight", wireType)
			}
			m.AckReceiptBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckExecData = append(m.AckExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.AckExecData == nil {
				m.AckExecData = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AckExecStatus = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConsumed", wireType)
			}
			m.FeeConsumed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeConsumed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainAckReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainAckReceipt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainAckReceipt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainAckReceipt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainAckReceipt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainAckReceipt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainAckReceipt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainAckReceipt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainAckReceipt = fmt.Errorf("proto: unexpected end of group")
)
