// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/crosschain_ack_receipt.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosschainAckReceipt struct {
	ChainId              string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	EventNonce           uint64 `protobuf:"varint,2,opt,name=eventNonce,proto3" json:"eventNonce,omitempty"`
	BlockHeight          uint64 `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	TxHash               string `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
	RelayerRouterAddress string `protobuf:"bytes,5,opt,name=relayerRouterAddress,proto3" json:"relayerRouterAddress,omitempty"`
	RequestIdentifier    uint64 `protobuf:"varint,6,opt,name=requestIdentifier,proto3" json:"requestIdentifier,omitempty"`
}

func (m *CrosschainAckReceipt) Reset()         { *m = CrosschainAckReceipt{} }
func (m *CrosschainAckReceipt) String() string { return proto.CompactTextString(m) }
func (*CrosschainAckReceipt) ProtoMessage()    {}
func (*CrosschainAckReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_91f770ae8d22ce96, []int{0}
}
func (m *CrosschainAckReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainAckReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainAckReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainAckReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainAckReceipt.Merge(m, src)
}
func (m *CrosschainAckReceipt) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainAckReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainAckReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainAckReceipt proto.InternalMessageInfo

func (m *CrosschainAckReceipt) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *CrosschainAckReceipt) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *CrosschainAckReceipt) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CrosschainAckReceipt) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *CrosschainAckReceipt) GetRelayerRouterAddress() string {
	if m != nil {
		return m.RelayerRouterAddress
	}
	return ""
}

func (m *CrosschainAckReceipt) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func init() {
	proto.RegisterType((*CrosschainAckReceipt)(nil), "routerprotocol.routerchain.crosschain.CrosschainAckReceipt")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/crosschain_ack_receipt.proto", fileDescriptor_91f770ae8d22ce96)
}

var fileDescriptor_91f770ae8d22ce96 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0x2f, 0x41, 0x98, 0x09, 0xab, 0x42, 0x9e, 0xac, 0x08, 0x09, 0xa9, 0x03,
	0xa4, 0x12, 0xdd, 0xd8, 0x0a, 0x4b, 0xbb, 0x30, 0x44, 0x4c, 0x2c, 0x55, 0xe2, 0x5c, 0x1a, 0x2b,
	0x21, 0x0e, 0xf6, 0x0d, 0x6a, 0xdf, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x95, 0x87, 0x40,
	0x72, 0x08, 0x44, 0xc0, 0xe6, 0xef, 0xdc, 0x73, 0x8f, 0xad, 0x63, 0x3a, 0x33, 0xba, 0x46, 0x30,
	0x32, 0x8b, 0x55, 0x39, 0x95, 0x46, 0x5b, 0xfb, 0xf3, 0xb8, 0x8a, 0x65, 0xbe, 0x32, 0x20, 0x41,
	0x55, 0x18, 0x56, 0x46, 0xa3, 0x66, 0xa7, 0xdd, 0x92, 0x03, 0xa9, 0x8b, 0x70, 0x90, 0x11, 0x7e,
	0x2f, 0x9e, 0xbc, 0x13, 0x3a, 0xbe, 0xfe, 0xc2, 0xb9, 0xcc, 0xa3, 0x2e, 0x85, 0x71, 0xba, 0xef,
	0xa4, 0x65, 0xca, 0x49, 0x40, 0x26, 0x07, 0x51, 0x8f, 0x4c, 0x50, 0x0a, 0x4f, 0x50, 0xe2, 0x8d,
	0x2e, 0x25, 0xf0, 0x7f, 0x01, 0x99, 0x8c, 0xa2, 0x81, 0xc2, 0x02, 0x7a, 0x98, 0x14, 0x5a, 0xe6,
	0x0b, 0x50, 0xeb, 0x0c, 0xf9, 0x7f, 0x67, 0x18, 0x4a, 0xec, 0x98, 0xfa, 0xb8, 0x59, 0xc4, 0x36,
	0xe3, 0x23, 0x17, 0xfd, 0x49, 0xec, 0x82, 0x8e, 0x0d, 0x14, 0xf1, 0x16, 0x4c, 0xe4, 0x5e, 0x3b,
	0x4f, 0x53, 0x03, 0xd6, 0xf2, 0x3d, 0xe7, 0xfa, 0x73, 0xc6, 0xce, 0xe8, 0x91, 0x81, 0xc7, 0x1a,
	0x2c, 0x2e, 0x53, 0x28, 0x51, 0xdd, 0x2b, 0x30, 0xdc, 0x77, 0x77, 0xfe, 0x1e, 0x5c, 0xdd, 0xbe,
	0x34, 0x82, 0xec, 0x1a, 0x41, 0xde, 0x1a, 0x41, 0x9e, 0x5b, 0xe1, 0xed, 0x5a, 0xe1, 0xbd, 0xb6,
	0xc2, 0xbb, 0xbb, 0x5c, 0x2b, 0xcc, 0xea, 0x24, 0x94, 0xfa, 0x61, 0xda, 0x75, 0x75, 0xde, 0x77,
	0xd7, 0x73, 0xd7, 0xfa, 0x66, 0xf8, 0x05, 0xb8, 0xad, 0xc0, 0x26, 0xbe, 0x73, 0xce, 0x3e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x23, 0x88, 0xb6, 0x45, 0xa9, 0x01, 0x00, 0x00,
}

func (m *CrosschainAckReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainAckReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainAckReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RelayerRouterAddress) > 0 {
		i -= len(m.RelayerRouterAddress)
		copy(dAtA[i:], m.RelayerRouterAddress)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.RelayerRouterAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCrosschainAckReceipt(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainAckReceipt(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainAckReceipt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosschainAckReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.EventNonce))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.BlockHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	l = len(m.RelayerRouterAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainAckReceipt(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovCrosschainAckReceipt(uint64(m.RequestIdentifier))
	}
	return n
}

func sovCrosschainAckReceipt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainAckReceipt(x uint64) (n int) {
	return sovCrosschainAckReceipt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosschainAckReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainAckReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainAckReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainAckReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerRouterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerRouterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainAckReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainAckReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainAckReceipt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainAckReceipt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainAckReceipt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainAckReceipt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainAckReceipt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainAckReceipt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainAckReceipt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainAckReceipt = fmt.Errorf("proto: unexpected end of group")
)
