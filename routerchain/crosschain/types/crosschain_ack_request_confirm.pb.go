// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/crosschain_ack_request_confirm.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosschainAckRequestConfirm struct {
	Orchestrator         string `protobuf:"bytes,1,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
	AckSrcChainId        string `protobuf:"bytes,2,opt,name=ackSrcChainId,proto3" json:"ackSrcChainId,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,3,opt,name=ackRequestIdentifier,proto3" json:"ackRequestIdentifier,omitempty"`
	ClaimHash            []byte `protobuf:"bytes,4,opt,name=claimHash,proto3" json:"claimHash,omitempty"`
	EthSigner            string `protobuf:"bytes,5,opt,name=ethSigner,proto3" json:"ethSigner,omitempty"`
	Signature            string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CrosschainAckRequestConfirm) Reset()         { *m = CrosschainAckRequestConfirm{} }
func (m *CrosschainAckRequestConfirm) String() string { return proto.CompactTextString(m) }
func (*CrosschainAckRequestConfirm) ProtoMessage()    {}
func (*CrosschainAckRequestConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f5e13418258d0e6, []int{0}
}
func (m *CrosschainAckRequestConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrosschainAckRequestConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrosschainAckRequestConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrosschainAckRequestConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrosschainAckRequestConfirm.Merge(m, src)
}
func (m *CrosschainAckRequestConfirm) XXX_Size() int {
	return m.Size()
}
func (m *CrosschainAckRequestConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_CrosschainAckRequestConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_CrosschainAckRequestConfirm proto.InternalMessageInfo

func (m *CrosschainAckRequestConfirm) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

func (m *CrosschainAckRequestConfirm) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *CrosschainAckRequestConfirm) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *CrosschainAckRequestConfirm) GetClaimHash() []byte {
	if m != nil {
		return m.ClaimHash
	}
	return nil
}

func (m *CrosschainAckRequestConfirm) GetEthSigner() string {
	if m != nil {
		return m.EthSigner
	}
	return ""
}

func (m *CrosschainAckRequestConfirm) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*CrosschainAckRequestConfirm)(nil), "routerprotocol.routerchain.crosschain.CrosschainAckRequestConfirm")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/crosschain_ack_request_confirm.proto", fileDescriptor_1f5e13418258d0e6)
}

var fileDescriptor_1f5e13418258d0e6 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x73, 0x5a, 0x0b, 0x3d, 0xea, 0x12, 0x1c, 0x0e, 0x94, 0x23, 0x14, 0x85, 0x2c, 0xa6,
	0xa0, 0x9b, 0x4e, 0x9a, 0xc5, 0xae, 0xa9, 0x93, 0x4b, 0xb8, 0x5e, 0xaf, 0xc9, 0x91, 0x26, 0x57,
	0xdf, 0x5d, 0x40, 0xbf, 0x85, 0x1f, 0xcb, 0xb1, 0xa3, 0xa3, 0x24, 0x9f, 0xc1, 0x5d, 0x92, 0xa3,
	0x49, 0x2b, 0x6e, 0xf9, 0xff, 0xfe, 0x2f, 0xbf, 0x83, 0xf7, 0xf0, 0x3d, 0xa8, 0xd2, 0x08, 0xe0,
	0x29, 0x93, 0xc5, 0x94, 0x83, 0xd2, 0xfa, 0xef, 0x67, 0xcc, 0x78, 0x16, 0x83, 0x78, 0x2d, 0x85,
	0x36, 0x31, 0x57, 0xc5, 0x4a, 0x42, 0x1e, 0x6c, 0x40, 0x19, 0xe5, 0x5e, 0xd9, 0x9f, 0xdb, 0xc0,
	0xd5, 0x3a, 0xd8, 0x73, 0x05, 0xbd, 0x60, 0xf2, 0x83, 0xf0, 0x79, 0xd8, 0xc5, 0x07, 0x9e, 0x45,
	0xd6, 0x16, 0x5a, 0x99, 0x3b, 0xc1, 0x63, 0x05, 0x3c, 0x15, 0xda, 0x00, 0x33, 0x0a, 0x08, 0xf2,
	0x90, 0x3f, 0x8a, 0x0e, 0x98, 0x7b, 0x89, 0x4f, 0x19, 0xcf, 0xe6, 0xc0, 0xc3, 0xc6, 0x31, 0x5b,
	0x92, 0xa3, 0x76, 0xe8, 0x10, 0xba, 0x37, 0xf8, 0x8c, 0x75, 0xfa, 0xd9, 0x52, 0x14, 0x46, 0xae,
	0xa4, 0x00, 0x72, 0xec, 0x21, 0x7f, 0x10, 0xfd, 0xdb, 0xb9, 0x17, 0x78, 0xc4, 0xd7, 0x4c, 0xe6,
	0x4f, 0x4c, 0xa7, 0x64, 0xe0, 0x21, 0x7f, 0x1c, 0xf5, 0xa0, 0x69, 0x85, 0x49, 0xe7, 0x32, 0x29,
	0x04, 0x90, 0x93, 0xf6, 0xcd, 0x1e, 0x34, 0xad, 0x96, 0x49, 0xc1, 0x4c, 0x09, 0x82, 0x0c, 0x6d,
	0xdb, 0x81, 0xc7, 0xe7, 0xcf, 0x8a, 0xa2, 0x6d, 0x45, 0xd1, 0x77, 0x45, 0xd1, 0x47, 0x4d, 0x9d,
	0x6d, 0x4d, 0x9d, 0xaf, 0x9a, 0x3a, 0x2f, 0x77, 0x89, 0x34, 0x69, 0xb9, 0x08, 0xb8, 0xca, 0xa7,
	0x76, 0x69, 0xd7, 0xbb, 0x25, 0xee, 0xb2, 0x3d, 0xc3, 0xdb, 0xfe, 0x4d, 0xcc, 0xfb, 0x46, 0xe8,
	0xc5, 0xb0, 0x9d, 0xbc, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x89, 0x3d, 0x46, 0xba, 0x01,
	0x00, 0x00,
}

func (m *CrosschainAckRequestConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrosschainAckRequestConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrosschainAckRequestConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCrosschainAckRequestConfirm(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EthSigner) > 0 {
		i -= len(m.EthSigner)
		copy(dAtA[i:], m.EthSigner)
		i = encodeVarintCrosschainAckRequestConfirm(dAtA, i, uint64(len(m.EthSigner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimHash) > 0 {
		i -= len(m.ClaimHash)
		copy(dAtA[i:], m.ClaimHash)
		i = encodeVarintCrosschainAckRequestConfirm(dAtA, i, uint64(len(m.ClaimHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintCrosschainAckRequestConfirm(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintCrosschainAckRequestConfirm(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintCrosschainAckRequestConfirm(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainAckRequestConfirm(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainAckRequestConfirm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrosschainAckRequestConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequestConfirm(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequestConfirm(uint64(l))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovCrosschainAckRequestConfirm(uint64(m.AckRequestIdentifier))
	}
	l = len(m.ClaimHash)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequestConfirm(uint64(l))
	}
	l = len(m.EthSigner)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequestConfirm(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCrosschainAckRequestConfirm(uint64(l))
	}
	return n
}

func sovCrosschainAckRequestConfirm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainAckRequestConfirm(x uint64) (n int) {
	return sovCrosschainAckRequestConfirm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrosschainAckRequestConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainAckRequestConfirm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrosschainAckRequestConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrosschainAckRequestConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimHash = append(m.ClaimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimHash == nil {
				m.ClaimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainAckRequestConfirm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainAckRequestConfirm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainAckRequestConfirm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainAckRequestConfirm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainAckRequestConfirm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainAckRequestConfirm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainAckRequestConfirm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainAckRequestConfirm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainAckRequestConfirm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainAckRequestConfirm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainAckRequestConfirm = fmt.Errorf("proto: unexpected end of group")
)
