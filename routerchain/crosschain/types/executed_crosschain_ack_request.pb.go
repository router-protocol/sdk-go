// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/executed_crosschain_ack_request.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecutedCrosschainAckRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *ExecutedCrosschainAckRequest) Reset()         { *m = ExecutedCrosschainAckRequest{} }
func (m *ExecutedCrosschainAckRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutedCrosschainAckRequest) ProtoMessage()    {}
func (*ExecutedCrosschainAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_47328a41c5812051, []int{0}
}
func (m *ExecutedCrosschainAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutedCrosschainAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutedCrosschainAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutedCrosschainAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutedCrosschainAckRequest.Merge(m, src)
}
func (m *ExecutedCrosschainAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecutedCrosschainAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutedCrosschainAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutedCrosschainAckRequest proto.InternalMessageInfo

func (m *ExecutedCrosschainAckRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func init() {
	proto.RegisterType((*ExecutedCrosschainAckRequest)(nil), "routerprotocol.routerchain.crosschain.ExecutedCrosschainAckRequest")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/executed_crosschain_ack_request.proto", fileDescriptor_47328a41c5812051)
}

var fileDescriptor_47328a41c5812051 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x29, 0xca, 0x2f, 0x2d,
	0x49, 0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0x2e, 0xca, 0x2f, 0x2e, 0x86, 0x30, 0x53,
	0x2b, 0x52, 0x93, 0x4b, 0x4b, 0x52, 0x53, 0xe2, 0x11, 0x62, 0xf1, 0x89, 0xc9, 0xd9, 0xf1, 0x45,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xaa, 0x10, 0xdd,
	0x60, 0x4e, 0x72, 0x7e, 0x8e, 0x1e, 0x92, 0x61, 0x7a, 0x08, 0x8d, 0x4a, 0x26, 0x5c, 0x32, 0xae,
	0x50, 0xf3, 0x9c, 0xe1, 0xa2, 0x8e, 0xc9, 0xd9, 0x41, 0x10, 0xc3, 0x84, 0x44, 0xb8, 0x58, 0x33,
	0xf3, 0x52, 0x52, 0x2b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0xa7, 0x90, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xb2, 0x4a, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x87, 0x58, 0xa9, 0x0b, 0x73, 0x02, 0x8c, 0x0f, 0xf1, 0x45, 0x05,
	0xb2, 0x97, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x2a, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x1e, 0x95, 0x9f, 0xb9, 0xf9, 0x00, 0x00, 0x00,
}

func (m *ExecutedCrosschainAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutedCrosschainAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutedCrosschainAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintExecutedCrosschainAckRequest(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecutedCrosschainAckRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutedCrosschainAckRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecutedCrosschainAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovExecutedCrosschainAckRequest(uint64(l))
	}
	return n
}

func sovExecutedCrosschainAckRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutedCrosschainAckRequest(x uint64) (n int) {
	return sovExecutedCrosschainAckRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecutedCrosschainAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutedCrosschainAckRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutedCrosschainAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutedCrosschainAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutedCrosschainAckRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutedCrosschainAckRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutedCrosschainAckRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutedCrosschainAckRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutedCrosschainAckRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutedCrosschainAckRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutedCrosschainAckRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutedCrosschainAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutedCrosschainAckRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutedCrosschainAckRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutedCrosschainAckRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutedCrosschainAckRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutedCrosschainAckRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutedCrosschainAckRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutedCrosschainAckRequest = fmt.Errorf("proto: unexpected end of group")
)
