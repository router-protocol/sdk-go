// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/ibc_receive_payload.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReceivePayload struct {
	Version                uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	RouteAmount            uint64 `protobuf:"varint,2,opt,name=route_amount,json=routeAmount,proto3" json:"route_amount,omitempty"`
	RequestIdentifier      uint64 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	RequestSender          string `protobuf:"bytes,4,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	SrcChainId             string `protobuf:"bytes,5,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DestChainId            string `protobuf:"bytes,6,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RouteRecipient         string `protobuf:"bytes,7,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	GatewayContractAddress string `protobuf:"bytes,8,opt,name=gateway_contract_address,json=gatewayContractAddress,proto3" json:"gateway_contract_address,omitempty"`
	RequestMetadata        []byte `protobuf:"bytes,9,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	RequestPacket          []byte `protobuf:"bytes,10,opt,name=request_packet,json=requestPacket,proto3" json:"request_packet,omitempty"`
	BlockHeight            uint64 `protobuf:"varint,11,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	SrcTimestamp           uint64 `protobuf:"varint,12,opt,name=src_timestamp,json=srcTimestamp,proto3" json:"src_timestamp,omitempty"`
}

func (m *ReceivePayload) Reset()         { *m = ReceivePayload{} }
func (m *ReceivePayload) String() string { return proto.CompactTextString(m) }
func (*ReceivePayload) ProtoMessage()    {}
func (*ReceivePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_870caa48356d5c56, []int{0}
}
func (m *ReceivePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceivePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceivePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceivePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceivePayload.Merge(m, src)
}
func (m *ReceivePayload) XXX_Size() int {
	return m.Size()
}
func (m *ReceivePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceivePayload.DiscardUnknown(m)
}

var xxx_messageInfo_ReceivePayload proto.InternalMessageInfo

func (m *ReceivePayload) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReceivePayload) GetRouteAmount() uint64 {
	if m != nil {
		return m.RouteAmount
	}
	return 0
}

func (m *ReceivePayload) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *ReceivePayload) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *ReceivePayload) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *ReceivePayload) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *ReceivePayload) GetRouteRecipient() string {
	if m != nil {
		return m.RouteRecipient
	}
	return ""
}

func (m *ReceivePayload) GetGatewayContractAddress() string {
	if m != nil {
		return m.GatewayContractAddress
	}
	return ""
}

func (m *ReceivePayload) GetRequestMetadata() []byte {
	if m != nil {
		return m.RequestMetadata
	}
	return nil
}

func (m *ReceivePayload) GetRequestPacket() []byte {
	if m != nil {
		return m.RequestPacket
	}
	return nil
}

func (m *ReceivePayload) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ReceivePayload) GetSrcTimestamp() uint64 {
	if m != nil {
		return m.SrcTimestamp
	}
	return 0
}

type ReceiveMetadata struct {
	FeePayerAddress        string `protobuf:"bytes,1,opt,name=fee_payer_address,json=feePayerAddress,proto3" json:"fee_payer_address,omitempty"`
	ChainId                string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	GatewayContractAddress string `protobuf:"bytes,3,opt,name=gateway_contract_address,json=gatewayContractAddress,proto3" json:"gateway_contract_address,omitempty"`
	DappAddress            string `protobuf:"bytes,4,opt,name=dapp_address,json=dappAddress,proto3" json:"dapp_address,omitempty"`
	RequestIdentifier      uint64 `protobuf:"varint,5,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	BlockHeight            uint64 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *ReceiveMetadata) Reset()         { *m = ReceiveMetadata{} }
func (m *ReceiveMetadata) String() string { return proto.CompactTextString(m) }
func (*ReceiveMetadata) ProtoMessage()    {}
func (*ReceiveMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_870caa48356d5c56, []int{1}
}
func (m *ReceiveMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveMetadata.Merge(m, src)
}
func (m *ReceiveMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveMetadata proto.InternalMessageInfo

func (m *ReceiveMetadata) GetFeePayerAddress() string {
	if m != nil {
		return m.FeePayerAddress
	}
	return ""
}

func (m *ReceiveMetadata) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ReceiveMetadata) GetGatewayContractAddress() string {
	if m != nil {
		return m.GatewayContractAddress
	}
	return ""
}

func (m *ReceiveMetadata) GetDappAddress() string {
	if m != nil {
		return m.DappAddress
	}
	return ""
}

func (m *ReceiveMetadata) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *ReceiveMetadata) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AckReceivePayload struct {
	RequestIdentifier    uint64 `protobuf:"varint,1,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	SrcChainId           string `protobuf:"bytes,3,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DestChainId          string `protobuf:"bytes,4,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestSender        string `protobuf:"bytes,5,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	ExecData             []byte `protobuf:"bytes,6,opt,name=exec_data,json=execData,proto3" json:"exec_data,omitempty"`
	ExecStatus           bool   `protobuf:"varint,7,opt,name=exec_status,json=execStatus,proto3" json:"exec_status,omitempty"`
	BlockHeight          uint64 `protobuf:"varint,8,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *AckReceivePayload) Reset()         { *m = AckReceivePayload{} }
func (m *AckReceivePayload) String() string { return proto.CompactTextString(m) }
func (*AckReceivePayload) ProtoMessage()    {}
func (*AckReceivePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_870caa48356d5c56, []int{2}
}
func (m *AckReceivePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckReceivePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckReceivePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckReceivePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckReceivePayload.Merge(m, src)
}
func (m *AckReceivePayload) XXX_Size() int {
	return m.Size()
}
func (m *AckReceivePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_AckReceivePayload.DiscardUnknown(m)
}

var xxx_messageInfo_AckReceivePayload proto.InternalMessageInfo

func (m *AckReceivePayload) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *AckReceivePayload) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *AckReceivePayload) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *AckReceivePayload) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *AckReceivePayload) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *AckReceivePayload) GetExecData() []byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *AckReceivePayload) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *AckReceivePayload) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AckReceiptPayload struct {
	AckReceiptIdentifier uint64 `protobuf:"varint,1,opt,name=ack_receipt_identifier,json=ackReceiptIdentifier,proto3" json:"ack_receipt_identifier,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	RequestIdentifier    uint64 `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	AckReceiptSrcChainId string `protobuf:"bytes,4,opt,name=ack_receipt_src_chain_id,json=ackReceiptSrcChainId,proto3" json:"ack_receipt_src_chain_id,omitempty"`
	AckSrcChainId        string `protobuf:"bytes,5,opt,name=ack_src_chain_id,json=ackSrcChainId,proto3" json:"ack_src_chain_id,omitempty"`
	AckExecData          []byte `protobuf:"bytes,6,opt,name=ack_exec_data,json=ackExecData,proto3" json:"ack_exec_data,omitempty"`
	AckExecStatus        bool   `protobuf:"varint,7,opt,name=ack_exec_status,json=ackExecStatus,proto3" json:"ack_exec_status,omitempty"`
	BlockHeight          uint64 `protobuf:"varint,8,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *AckReceiptPayload) Reset()         { *m = AckReceiptPayload{} }
func (m *AckReceiptPayload) String() string { return proto.CompactTextString(m) }
func (*AckReceiptPayload) ProtoMessage()    {}
func (*AckReceiptPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_870caa48356d5c56, []int{3}
}
func (m *AckReceiptPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckReceiptPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckReceiptPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckReceiptPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckReceiptPayload.Merge(m, src)
}
func (m *AckReceiptPayload) XXX_Size() int {
	return m.Size()
}
func (m *AckReceiptPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_AckReceiptPayload.DiscardUnknown(m)
}

var xxx_messageInfo_AckReceiptPayload proto.InternalMessageInfo

func (m *AckReceiptPayload) GetAckReceiptIdentifier() uint64 {
	if m != nil {
		return m.AckReceiptIdentifier
	}
	return 0
}

func (m *AckReceiptPayload) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *AckReceiptPayload) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *AckReceiptPayload) GetAckReceiptSrcChainId() string {
	if m != nil {
		return m.AckReceiptSrcChainId
	}
	return ""
}

func (m *AckReceiptPayload) GetAckSrcChainId() string {
	if m != nil {
		return m.AckSrcChainId
	}
	return ""
}

func (m *AckReceiptPayload) GetAckExecData() []byte {
	if m != nil {
		return m.AckExecData
	}
	return nil
}

func (m *AckReceiptPayload) GetAckExecStatus() bool {
	if m != nil {
		return m.AckExecStatus
	}
	return false
}

func (m *AckReceiptPayload) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type IBCAckReceivePayload struct {
	// Types that are valid to be assigned to Receive:
	//	*IBCAckReceivePayload_AckReceivePayload
	//	*IBCAckReceivePayload_AckReceiptPayload
	Receive isIBCAckReceivePayload_Receive `protobuf_oneof:"receive"`
}

func (m *IBCAckReceivePayload) Reset()         { *m = IBCAckReceivePayload{} }
func (m *IBCAckReceivePayload) String() string { return proto.CompactTextString(m) }
func (*IBCAckReceivePayload) ProtoMessage()    {}
func (*IBCAckReceivePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_870caa48356d5c56, []int{4}
}
func (m *IBCAckReceivePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCAckReceivePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCAckReceivePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCAckReceivePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCAckReceivePayload.Merge(m, src)
}
func (m *IBCAckReceivePayload) XXX_Size() int {
	return m.Size()
}
func (m *IBCAckReceivePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCAckReceivePayload.DiscardUnknown(m)
}

var xxx_messageInfo_IBCAckReceivePayload proto.InternalMessageInfo

type isIBCAckReceivePayload_Receive interface {
	isIBCAckReceivePayload_Receive()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IBCAckReceivePayload_AckReceivePayload struct {
	AckReceivePayload *AckReceivePayload `protobuf:"bytes,1,opt,name=ack_receive_payload,json=ackReceivePayload,proto3,oneof" json:"ack_receive_payload,omitempty"`
}
type IBCAckReceivePayload_AckReceiptPayload struct {
	AckReceiptPayload *AckReceiptPayload `protobuf:"bytes,2,opt,name=ack_receipt_payload,json=ackReceiptPayload,proto3,oneof" json:"ack_receipt_payload,omitempty"`
}

func (*IBCAckReceivePayload_AckReceivePayload) isIBCAckReceivePayload_Receive() {}
func (*IBCAckReceivePayload_AckReceiptPayload) isIBCAckReceivePayload_Receive() {}

func (m *IBCAckReceivePayload) GetReceive() isIBCAckReceivePayload_Receive {
	if m != nil {
		return m.Receive
	}
	return nil
}

func (m *IBCAckReceivePayload) GetAckReceivePayload() *AckReceivePayload {
	if x, ok := m.GetReceive().(*IBCAckReceivePayload_AckReceivePayload); ok {
		return x.AckReceivePayload
	}
	return nil
}

func (m *IBCAckReceivePayload) GetAckReceiptPayload() *AckReceiptPayload {
	if x, ok := m.GetReceive().(*IBCAckReceivePayload_AckReceiptPayload); ok {
		return x.AckReceiptPayload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IBCAckReceivePayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IBCAckReceivePayload_AckReceivePayload)(nil),
		(*IBCAckReceivePayload_AckReceiptPayload)(nil),
	}
}

type IBCReceivePayload struct {
	// Types that are valid to be assigned to Receive:
	//	*IBCReceivePayload_ReceivePayload
	//	*IBCReceivePayload_ReceiveMetadata
	Receive isIBCReceivePayload_Receive `protobuf_oneof:"receive"`
}

func (m *IBCReceivePayload) Reset()         { *m = IBCReceivePayload{} }
func (m *IBCReceivePayload) String() string { return proto.CompactTextString(m) }
func (*IBCReceivePayload) ProtoMessage()    {}
func (*IBCReceivePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_870caa48356d5c56, []int{5}
}
func (m *IBCReceivePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCReceivePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCReceivePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCReceivePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCReceivePayload.Merge(m, src)
}
func (m *IBCReceivePayload) XXX_Size() int {
	return m.Size()
}
func (m *IBCReceivePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCReceivePayload.DiscardUnknown(m)
}

var xxx_messageInfo_IBCReceivePayload proto.InternalMessageInfo

type isIBCReceivePayload_Receive interface {
	isIBCReceivePayload_Receive()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IBCReceivePayload_ReceivePayload struct {
	ReceivePayload *ReceivePayload `protobuf:"bytes,1,opt,name=receive_payload,json=receivePayload,proto3,oneof" json:"receive_payload,omitempty"`
}
type IBCReceivePayload_ReceiveMetadata struct {
	ReceiveMetadata *ReceiveMetadata `protobuf:"bytes,2,opt,name=receive_metadata,json=receiveMetadata,proto3,oneof" json:"receive_metadata,omitempty"`
}

func (*IBCReceivePayload_ReceivePayload) isIBCReceivePayload_Receive()  {}
func (*IBCReceivePayload_ReceiveMetadata) isIBCReceivePayload_Receive() {}

func (m *IBCReceivePayload) GetReceive() isIBCReceivePayload_Receive {
	if m != nil {
		return m.Receive
	}
	return nil
}

func (m *IBCReceivePayload) GetReceivePayload() *ReceivePayload {
	if x, ok := m.GetReceive().(*IBCReceivePayload_ReceivePayload); ok {
		return x.ReceivePayload
	}
	return nil
}

func (m *IBCReceivePayload) GetReceiveMetadata() *ReceiveMetadata {
	if x, ok := m.GetReceive().(*IBCReceivePayload_ReceiveMetadata); ok {
		return x.ReceiveMetadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IBCReceivePayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IBCReceivePayload_ReceivePayload)(nil),
		(*IBCReceivePayload_ReceiveMetadata)(nil),
	}
}

func init() {
	proto.RegisterType((*ReceivePayload)(nil), "routerprotocol.routerchain.crosschain.ReceivePayload")
	proto.RegisterType((*ReceiveMetadata)(nil), "routerprotocol.routerchain.crosschain.ReceiveMetadata")
	proto.RegisterType((*AckReceivePayload)(nil), "routerprotocol.routerchain.crosschain.AckReceivePayload")
	proto.RegisterType((*AckReceiptPayload)(nil), "routerprotocol.routerchain.crosschain.AckReceiptPayload")
	proto.RegisterType((*IBCAckReceivePayload)(nil), "routerprotocol.routerchain.crosschain.IBCAckReceivePayload")
	proto.RegisterType((*IBCReceivePayload)(nil), "routerprotocol.routerchain.crosschain.IBCReceivePayload")
}

func init() {
	proto.RegisterFile("routerchain/crosschain/ibc_receive_payload.proto", fileDescriptor_870caa48356d5c56)
}

var fileDescriptor_870caa48356d5c56 = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x93, 0x34, 0x1f, 0x93, 0xaf, 0xc6, 0x54, 0x95, 0x11, 0x52, 0x48, 0x83, 0x4a, 0x0b,
	0x52, 0x53, 0xc4, 0x47, 0x55, 0x71, 0x6b, 0x02, 0x52, 0x73, 0x40, 0xaa, 0x9c, 0x9e, 0xb8, 0x98,
	0xcd, 0x7a, 0xdb, 0x98, 0x34, 0xb6, 0x59, 0x6f, 0x4a, 0xfb, 0x0b, 0xb8, 0xf2, 0xab, 0x10, 0xc7,
	0x1e, 0x39, 0xa2, 0x56, 0xf0, 0x1f, 0xb8, 0x20, 0xe4, 0xb1, 0xd7, 0x75, 0xe2, 0xb4, 0xb4, 0x70,
	0xcb, 0xbe, 0x79, 0xbb, 0x33, 0xf3, 0xe6, 0xed, 0xc6, 0xf0, 0x84, 0x3b, 0x13, 0xc1, 0x38, 0x1d,
	0x12, 0xcb, 0xde, 0xa4, 0xdc, 0xf1, 0xbc, 0xe0, 0xa7, 0x35, 0xa0, 0x06, 0x67, 0x94, 0x59, 0xc7,
	0xcc, 0x70, 0xc9, 0xe9, 0x91, 0x43, 0xcc, 0xb6, 0xcb, 0x1d, 0xe1, 0xa8, 0xab, 0xc1, 0x0e, 0x5c,
	0x50, 0xe7, 0xa8, 0x1d, 0x3b, 0xa0, 0x7d, 0x79, 0x40, 0xeb, 0x67, 0x06, 0xaa, 0x7a, 0x70, 0xc0,
	0x5e, 0xb0, 0x5f, 0xd5, 0x20, 0x7f, 0xcc, 0xb8, 0x67, 0x39, 0xb6, 0xa6, 0x34, 0x95, 0xf5, 0xac,
	0x2e, 0x97, 0xea, 0x0a, 0x94, 0xf1, 0x18, 0x83, 0x8c, 0x9d, 0x89, 0x2d, 0xb4, 0x34, 0x86, 0x4b,
	0x88, 0xed, 0x20, 0xa4, 0x6e, 0x80, 0xca, 0xd9, 0x87, 0x09, 0xf3, 0x84, 0x61, 0x99, 0xcc, 0x16,
	0xd6, 0x81, 0xc5, 0xb8, 0x96, 0x41, 0x62, 0x3d, 0x8c, 0xf4, 0xa2, 0x80, 0xba, 0x0a, 0x55, 0x49,
	0xf7, 0x98, 0x6d, 0x32, 0xae, 0x65, 0x9b, 0xca, 0x7a, 0x51, 0xaf, 0x84, 0x68, 0x1f, 0x41, 0xb5,
	0x09, 0x65, 0x8f, 0x53, 0x03, 0x4b, 0x36, 0x2c, 0x53, 0x5b, 0x40, 0x12, 0x78, 0x9c, 0x76, 0x7d,
	0xa8, 0x67, 0xaa, 0x2d, 0xa8, 0x98, 0xfe, 0x29, 0x11, 0x25, 0x87, 0x94, 0x92, 0x0f, 0x4a, 0xce,
	0x1a, 0xd4, 0x82, 0xf2, 0x39, 0xa3, 0x96, 0x6b, 0x31, 0x5b, 0x68, 0x79, 0x64, 0x55, 0x11, 0xd6,
	0x25, 0xaa, 0x6e, 0x83, 0x76, 0x48, 0x04, 0xfb, 0x48, 0x4e, 0x0d, 0xea, 0xd8, 0x82, 0x13, 0x2a,
	0x0c, 0x62, 0x9a, 0x9c, 0x79, 0x9e, 0x56, 0xc0, 0x1d, 0xcb, 0x61, 0xbc, 0x1b, 0x86, 0x77, 0x82,
	0xa8, 0xfa, 0x08, 0x16, 0x65, 0x3f, 0x63, 0x26, 0x88, 0x49, 0x04, 0xd1, 0x8a, 0x4d, 0x65, 0xbd,
	0xac, 0xd7, 0x42, 0xfc, 0x4d, 0x08, 0xc7, 0x5b, 0x77, 0x09, 0x1d, 0x31, 0xa1, 0x01, 0x12, 0x65,
	0xeb, 0x7b, 0x08, 0xfa, 0x9a, 0x0f, 0x8e, 0x1c, 0x3a, 0x32, 0x86, 0xcc, 0x3a, 0x1c, 0x0a, 0xad,
	0x14, 0x68, 0x8e, 0xd8, 0x2e, 0x42, 0xea, 0x03, 0xa8, 0xf8, 0xea, 0x08, 0x6b, 0xcc, 0x3c, 0x41,
	0xc6, 0xae, 0x56, 0x46, 0x8e, 0x2f, 0xd9, 0xbe, 0xc4, 0x5a, 0x9f, 0xd2, 0x50, 0x0b, 0x07, 0x1d,
	0x95, 0xf0, 0x18, 0xea, 0x07, 0x0c, 0x8d, 0xc3, 0x78, 0xd4, 0xa0, 0x82, 0x0d, 0xd6, 0x0e, 0x98,
	0x6f, 0x08, 0xc6, 0x65, 0x67, 0x77, 0xa1, 0x10, 0x69, 0x9b, 0x46, 0x4a, 0x9e, 0x86, 0xba, 0x5e,
	0x27, 0x57, 0xe6, 0x5a, 0xb9, 0x56, 0xa0, 0x6c, 0x12, 0xd7, 0x8d, 0xd8, 0xd9, 0x70, 0x68, 0xc4,
	0x75, 0x25, 0x65, 0xbe, 0xa1, 0x16, 0xae, 0x32, 0xd4, 0xac, 0x5c, 0xb9, 0x84, 0x5c, 0xad, 0x2f,
	0x69, 0xa8, 0xef, 0xd0, 0xd1, 0x8c, 0xeb, 0xe7, 0xe7, 0x51, 0xae, 0xca, 0xf3, 0x1c, 0x96, 0x09,
	0x1d, 0x19, 0x73, 0xb6, 0x04, 0x97, 0x62, 0x89, 0xf8, 0x19, 0x66, 0x77, 0xcd, 0xfa, 0x38, 0xf3,
	0x77, 0x1f, 0x67, 0x93, 0x3e, 0x4e, 0x5e, 0x9a, 0x85, 0x79, 0x97, 0xe6, 0x1e, 0x14, 0xd9, 0x09,
	0xa3, 0x06, 0x9a, 0x30, 0x87, 0xde, 0x2a, 0xf8, 0xc0, 0x2b, 0x7f, 0xf4, 0xf7, 0xa1, 0x84, 0x41,
	0x4f, 0x10, 0x31, 0xf1, 0xf0, 0x1e, 0x14, 0x74, 0xf0, 0xa1, 0x3e, 0x22, 0x09, 0x21, 0x0b, 0x49,
	0x21, 0x7f, 0xc7, 0x84, 0x74, 0x85, 0x14, 0x32, 0x52, 0x06, 0xd1, 0xa4, 0x98, 0x81, 0x32, 0x18,
	0xfc, 0x6f, 0x3d, 0x6f, 0xf9, 0xda, 0x6c, 0x81, 0x16, 0x2f, 0x6d, 0x6a, 0x14, 0x81, 0xce, 0xb1,
	0xe2, 0xfa, 0x97, 0x43, 0x59, 0x83, 0x45, 0x7f, 0xdf, 0x9c, 0x27, 0xa8, 0x42, 0xe8, 0xa8, 0x3f,
	0x35, 0x3d, 0x9f, 0x38, 0x2b, 0x7b, 0x89, 0xd0, 0xd1, 0x6b, 0xa9, 0xfc, 0x43, 0xa8, 0x45, 0x9c,
	0x29, 0xf5, 0x2b, 0x21, 0xeb, 0xe6, 0x03, 0xf8, 0xa5, 0xc0, 0x52, 0xaf, 0xd3, 0x4d, 0x9a, 0xf9,
	0x3d, 0xdc, 0x89, 0x1a, 0xbd, 0xfc, 0x67, 0xc0, 0x01, 0x94, 0x9e, 0x6e, 0xb7, 0x6f, 0xf4, 0xd7,
	0xd0, 0x4e, 0x1c, 0xbb, 0x9b, 0xd2, 0xeb, 0xe4, 0xda, 0x5c, 0xae, 0x88, 0x72, 0xa5, 0xff, 0x29,
	0x57, 0x64, 0xa3, 0x78, 0xae, 0x08, 0xec, 0x14, 0x21, 0x1f, 0xf6, 0xd4, 0xfa, 0xa1, 0x40, 0xbd,
	0xd7, 0xe9, 0xce, 0x14, 0xf3, 0x0e, 0x6a, 0xf3, 0x9b, 0x7e, 0x71, 0xc3, 0x42, 0x12, 0x1d, 0x57,
	0xf9, 0x74, 0x06, 0xea, 0xbf, 0xf0, 0x41, 0x86, 0xe8, 0x85, 0x0f, 0x7a, 0xdd, 0xba, 0x5d, 0x0a,
	0xf9, 0x0a, 0xef, 0xa6, 0x74, 0x59, 0xb3, 0x84, 0x62, 0x7d, 0x76, 0xf6, 0xbf, 0x9e, 0x37, 0x94,
	0xb3, 0xf3, 0x86, 0xf2, 0xfd, 0xbc, 0xa1, 0x7c, 0xbe, 0x68, 0xa4, 0xce, 0x2e, 0x1a, 0xa9, 0x6f,
	0x17, 0x8d, 0xd4, 0xdb, 0x97, 0x87, 0x96, 0x18, 0x4e, 0x06, 0x6d, 0xea, 0x8c, 0x37, 0x83, 0x54,
	0x1b, 0x32, 0xb5, 0x5c, 0x07, 0x1f, 0x09, 0x27, 0xf1, 0x2f, 0x06, 0x71, 0xea, 0x32, 0x6f, 0x90,
	0x43, 0xe6, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xd3, 0x41, 0x1f, 0x58, 0x08, 0x00,
	0x00,
}

func (m *ReceivePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceivePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceivePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SrcTimestamp != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.SrcTimestamp))
		i--
		dAtA[i] = 0x60
	}
	if m.BlockHeight != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.RequestPacket) > 0 {
		i -= len(m.RequestPacket)
		copy(dAtA[i:], m.RequestPacket)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.RequestPacket)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RequestMetadata) > 0 {
		i -= len(m.RequestMetadata)
		copy(dAtA[i:], m.RequestMetadata)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.RequestMetadata)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GatewayContractAddress) > 0 {
		i -= len(m.GatewayContractAddress)
		copy(dAtA[i:], m.GatewayContractAddress)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.GatewayContractAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if m.RouteAmount != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.RouteAmount))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReceiveMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReceiveMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DappAddress) > 0 {
		i -= len(m.DappAddress)
		copy(dAtA[i:], m.DappAddress)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.DappAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GatewayContractAddress) > 0 {
		i -= len(m.GatewayContractAddress)
		copy(dAtA[i:], m.GatewayContractAddress)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.GatewayContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeePayerAddress) > 0 {
		i -= len(m.FeePayerAddress)
		copy(dAtA[i:], m.FeePayerAddress)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.FeePayerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AckReceivePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckReceivePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckReceivePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ExecData) > 0 {
		i -= len(m.ExecData)
		copy(dAtA[i:], m.ExecData)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.ExecData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AckReceiptPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckReceiptPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckReceiptPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.AckExecStatus {
		i--
		if m.AckExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.AckExecData) > 0 {
		i -= len(m.AckExecData)
		copy(dAtA[i:], m.AckExecData)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.AckExecData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AckSrcChainId) > 0 {
		i -= len(m.AckSrcChainId)
		copy(dAtA[i:], m.AckSrcChainId)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.AckSrcChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AckReceiptSrcChainId) > 0 {
		i -= len(m.AckReceiptSrcChainId)
		copy(dAtA[i:], m.AckReceiptSrcChainId)
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(len(m.AckReceiptSrcChainId)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.AckReceiptIdentifier != 0 {
		i = encodeVarintIbcReceivePayload(dAtA, i, uint64(m.AckReceiptIdentifier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IBCAckReceivePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCAckReceivePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCAckReceivePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receive != nil {
		{
			size := m.Receive.Size()
			i -= size
			if _, err := m.Receive.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IBCAckReceivePayload_AckReceivePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCAckReceivePayload_AckReceivePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AckReceivePayload != nil {
		{
			size, err := m.AckReceivePayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIbcReceivePayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IBCAckReceivePayload_AckReceiptPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCAckReceivePayload_AckReceiptPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AckReceiptPayload != nil {
		{
			size, err := m.AckReceiptPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIbcReceivePayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *IBCReceivePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCReceivePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCReceivePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receive != nil {
		{
			size := m.Receive.Size()
			i -= size
			if _, err := m.Receive.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IBCReceivePayload_ReceivePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCReceivePayload_ReceivePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReceivePayload != nil {
		{
			size, err := m.ReceivePayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIbcReceivePayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IBCReceivePayload_ReceiveMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCReceivePayload_ReceiveMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReceiveMetadata != nil {
		{
			size, err := m.ReceiveMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIbcReceivePayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintIbcReceivePayload(dAtA []byte, offset int, v uint64) int {
	offset -= sovIbcReceivePayload(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReceivePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.Version))
	}
	if m.RouteAmount != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.RouteAmount))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.RequestIdentifier))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.GatewayContractAddress)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.RequestMetadata)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.RequestPacket)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.BlockHeight))
	}
	if m.SrcTimestamp != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.SrcTimestamp))
	}
	return n
}

func (m *ReceiveMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeePayerAddress)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.GatewayContractAddress)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.DappAddress)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.RequestIdentifier))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.BlockHeight))
	}
	return n
}

func (m *AckReceivePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.RequestIdentifier))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.AckRequestIdentifier))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.ExecData)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	if m.ExecStatus {
		n += 2
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.BlockHeight))
	}
	return n
}

func (m *AckReceiptPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckReceiptIdentifier != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.AckReceiptIdentifier))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.AckRequestIdentifier))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.RequestIdentifier))
	}
	l = len(m.AckReceiptSrcChainId)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.AckSrcChainId)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	l = len(m.AckExecData)
	if l > 0 {
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	if m.AckExecStatus {
		n += 2
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIbcReceivePayload(uint64(m.BlockHeight))
	}
	return n
}

func (m *IBCAckReceivePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receive != nil {
		n += m.Receive.Size()
	}
	return n
}

func (m *IBCAckReceivePayload_AckReceivePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckReceivePayload != nil {
		l = m.AckReceivePayload.Size()
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	return n
}
func (m *IBCAckReceivePayload_AckReceiptPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckReceiptPayload != nil {
		l = m.AckReceiptPayload.Size()
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	return n
}
func (m *IBCReceivePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receive != nil {
		n += m.Receive.Size()
	}
	return n
}

func (m *IBCReceivePayload_ReceivePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceivePayload != nil {
		l = m.ReceivePayload.Size()
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	return n
}
func (m *IBCReceivePayload_ReceiveMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceiveMetadata != nil {
		l = m.ReceiveMetadata.Size()
		n += 1 + l + sovIbcReceivePayload(uint64(l))
	}
	return n
}

func sovIbcReceivePayload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIbcReceivePayload(x uint64) (n int) {
	return sovIbcReceivePayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReceivePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcReceivePayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceivePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceivePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			m.RouteAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestMetadata = append(m.RequestMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestMetadata == nil {
				m.RequestMetadata = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPacket = append(m.RequestPacket[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestPacket == nil {
				m.RequestPacket = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcTimestamp", wireType)
			}
			m.SrcTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIbcReceivePayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcReceivePayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIbcReceivePayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckReceivePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcReceivePayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckReceivePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckReceivePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecData == nil {
				m.ExecData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIbcReceivePayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AckReceiptPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcReceivePayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckReceiptPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckReceiptPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptIdentifier", wireType)
			}
			m.AckReceiptIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckReceiptIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckReceiptSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckSrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckSrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AckExecData = append(m.AckExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.AckExecData == nil {
				m.AckExecData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AckExecStatus = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIbcReceivePayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCAckReceivePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcReceivePayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCAckReceivePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCAckReceivePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceivePayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AckReceivePayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receive = &IBCAckReceivePayload_AckReceivePayload{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckReceiptPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AckReceiptPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receive = &IBCAckReceivePayload_AckReceiptPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIbcReceivePayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCReceivePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcReceivePayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCReceivePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCReceivePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivePayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReceivePayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receive = &IBCReceivePayload_ReceivePayload{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReceiveMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Receive = &IBCReceivePayload_ReceiveMetadata{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIbcReceivePayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcReceivePayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIbcReceivePayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIbcReceivePayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcReceivePayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIbcReceivePayload
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIbcReceivePayload
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIbcReceivePayload
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIbcReceivePayload        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIbcReceivePayload          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIbcReceivePayload = fmt.Errorf("proto: unexpected end of group")
)
