// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerprotocol/routerchain/crosschain/ibc_send_payload.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AckRequestPayload struct {
	RequestIdentifier    uint64 `protobuf:"varint,1,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	AckRequestIdentifier uint64 `protobuf:"varint,2,opt,name=ack_request_identifier,json=ackRequestIdentifier,proto3" json:"ack_request_identifier,omitempty"`
	SrcChainId           string `protobuf:"bytes,3,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DestChainId          string `protobuf:"bytes,4,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestSender        string `protobuf:"bytes,5,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	ExecData             []byte `protobuf:"bytes,6,opt,name=exec_data,json=execData,proto3" json:"exec_data,omitempty"`
	ExecStatus           bool   `protobuf:"varint,7,opt,name=exec_status,json=execStatus,proto3" json:"exec_status,omitempty"`
	BlockHeight          uint64 `protobuf:"varint,8,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *AckRequestPayload) Reset()         { *m = AckRequestPayload{} }
func (m *AckRequestPayload) String() string { return proto.CompactTextString(m) }
func (*AckRequestPayload) ProtoMessage()    {}
func (*AckRequestPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_369da21193b4a7c8, []int{0}
}
func (m *AckRequestPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AckRequestPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AckRequestPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AckRequestPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequestPayload.Merge(m, src)
}
func (m *AckRequestPayload) XXX_Size() int {
	return m.Size()
}
func (m *AckRequestPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequestPayload.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequestPayload proto.InternalMessageInfo

func (m *AckRequestPayload) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *AckRequestPayload) GetAckRequestIdentifier() uint64 {
	if m != nil {
		return m.AckRequestIdentifier
	}
	return 0
}

func (m *AckRequestPayload) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *AckRequestPayload) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *AckRequestPayload) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *AckRequestPayload) GetExecData() []byte {
	if m != nil {
		return m.ExecData
	}
	return nil
}

func (m *AckRequestPayload) GetExecStatus() bool {
	if m != nil {
		return m.ExecStatus
	}
	return false
}

func (m *AckRequestPayload) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type RequestPayload struct {
	RouteAmount       cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=route_amount,json=routeAmount,proto3,customtype=cosmossdk.io/math.Int" json:"route_amount"`
	RouteRecipient    string                `protobuf:"bytes,2,opt,name=route_recipient,json=routeRecipient,proto3" json:"route_recipient,omitempty"`
	RequestIdentifier uint64                `protobuf:"varint,3,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
	RequestTimestamp  uint64                `protobuf:"varint,4,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	AsmAddress        string                `protobuf:"bytes,5,opt,name=asm_address,json=asmAddress,proto3" json:"asm_address,omitempty"`
	SrcChainId        string                `protobuf:"bytes,6,opt,name=src_chain_id,json=srcChainId,proto3" json:"src_chain_id,omitempty"`
	DestChainId       string                `protobuf:"bytes,7,opt,name=dest_chain_id,json=destChainId,proto3" json:"dest_chain_id,omitempty"`
	RequestSender     string                `protobuf:"bytes,8,opt,name=request_sender,json=requestSender,proto3" json:"request_sender,omitempty"`
	HandlerAddress    string                `protobuf:"bytes,9,opt,name=handler_address,json=handlerAddress,proto3" json:"handler_address,omitempty"`
	RequestPacket     []byte                `protobuf:"bytes,10,opt,name=request_packet,json=requestPacket,proto3" json:"request_packet,omitempty"`
	IsReadCall        bool                  `protobuf:"varint,11,opt,name=is_read_call,json=isReadCall,proto3" json:"is_read_call,omitempty"`
}

func (m *RequestPayload) Reset()         { *m = RequestPayload{} }
func (m *RequestPayload) String() string { return proto.CompactTextString(m) }
func (*RequestPayload) ProtoMessage()    {}
func (*RequestPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_369da21193b4a7c8, []int{1}
}
func (m *RequestPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPayload.Merge(m, src)
}
func (m *RequestPayload) XXX_Size() int {
	return m.Size()
}
func (m *RequestPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPayload.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPayload proto.InternalMessageInfo

func (m *RequestPayload) GetRouteRecipient() string {
	if m != nil {
		return m.RouteRecipient
	}
	return ""
}

func (m *RequestPayload) GetRequestIdentifier() uint64 {
	if m != nil {
		return m.RequestIdentifier
	}
	return 0
}

func (m *RequestPayload) GetRequestTimestamp() uint64 {
	if m != nil {
		return m.RequestTimestamp
	}
	return 0
}

func (m *RequestPayload) GetAsmAddress() string {
	if m != nil {
		return m.AsmAddress
	}
	return ""
}

func (m *RequestPayload) GetSrcChainId() string {
	if m != nil {
		return m.SrcChainId
	}
	return ""
}

func (m *RequestPayload) GetDestChainId() string {
	if m != nil {
		return m.DestChainId
	}
	return ""
}

func (m *RequestPayload) GetRequestSender() string {
	if m != nil {
		return m.RequestSender
	}
	return ""
}

func (m *RequestPayload) GetHandlerAddress() string {
	if m != nil {
		return m.HandlerAddress
	}
	return ""
}

func (m *RequestPayload) GetRequestPacket() []byte {
	if m != nil {
		return m.RequestPacket
	}
	return nil
}

func (m *RequestPayload) GetIsReadCall() bool {
	if m != nil {
		return m.IsReadCall
	}
	return false
}

type IBCRequestPayload struct {
	// Types that are valid to be assigned to Send:
	//
	//	*IBCRequestPayload_RequestPayload
	//	*IBCRequestPayload_AckRequestPayload
	Send isIBCRequestPayload_Send `protobuf_oneof:"send"`
}

func (m *IBCRequestPayload) Reset()         { *m = IBCRequestPayload{} }
func (m *IBCRequestPayload) String() string { return proto.CompactTextString(m) }
func (*IBCRequestPayload) ProtoMessage()    {}
func (*IBCRequestPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_369da21193b4a7c8, []int{2}
}
func (m *IBCRequestPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IBCRequestPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IBCRequestPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IBCRequestPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IBCRequestPayload.Merge(m, src)
}
func (m *IBCRequestPayload) XXX_Size() int {
	return m.Size()
}
func (m *IBCRequestPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_IBCRequestPayload.DiscardUnknown(m)
}

var xxx_messageInfo_IBCRequestPayload proto.InternalMessageInfo

type isIBCRequestPayload_Send interface {
	isIBCRequestPayload_Send()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IBCRequestPayload_RequestPayload struct {
	RequestPayload *RequestPayload `protobuf:"bytes,1,opt,name=request_payload,json=requestPayload,proto3,oneof" json:"request_payload,omitempty"`
}
type IBCRequestPayload_AckRequestPayload struct {
	AckRequestPayload *AckRequestPayload `protobuf:"bytes,2,opt,name=ack_request_payload,json=ackRequestPayload,proto3,oneof" json:"ack_request_payload,omitempty"`
}

func (*IBCRequestPayload_RequestPayload) isIBCRequestPayload_Send()    {}
func (*IBCRequestPayload_AckRequestPayload) isIBCRequestPayload_Send() {}

func (m *IBCRequestPayload) GetSend() isIBCRequestPayload_Send {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *IBCRequestPayload) GetRequestPayload() *RequestPayload {
	if x, ok := m.GetSend().(*IBCRequestPayload_RequestPayload); ok {
		return x.RequestPayload
	}
	return nil
}

func (m *IBCRequestPayload) GetAckRequestPayload() *AckRequestPayload {
	if x, ok := m.GetSend().(*IBCRequestPayload_AckRequestPayload); ok {
		return x.AckRequestPayload
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*IBCRequestPayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*IBCRequestPayload_RequestPayload)(nil),
		(*IBCRequestPayload_AckRequestPayload)(nil),
	}
}

func init() {
	proto.RegisterType((*AckRequestPayload)(nil), "routerprotocol.routerchain.crosschain.AckRequestPayload")
	proto.RegisterType((*RequestPayload)(nil), "routerprotocol.routerchain.crosschain.RequestPayload")
	proto.RegisterType((*IBCRequestPayload)(nil), "routerprotocol.routerchain.crosschain.IBCRequestPayload")
}

func init() {
	proto.RegisterFile("routerprotocol/routerchain/crosschain/ibc_send_payload.proto", fileDescriptor_369da21193b4a7c8)
}

var fileDescriptor_369da21193b4a7c8 = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0x13, 0x3d,
	0x14, 0xc5, 0x33, 0x6d, 0xbe, 0x34, 0x71, 0xd2, 0xf4, 0xcb, 0x50, 0xd0, 0x08, 0x44, 0x1a, 0x22,
	0x55, 0x8d, 0x84, 0x3a, 0x91, 0xf8, 0x23, 0x21, 0xc4, 0x82, 0xa6, 0x2c, 0x9a, 0x5d, 0xe5, 0x76,
	0xc5, 0xc6, 0x38, 0xb6, 0xc9, 0x98, 0xcc, 0x8c, 0x07, 0xdb, 0x91, 0xda, 0xb7, 0xe0, 0xa9, 0x50,
	0x97, 0xdd, 0x81, 0x58, 0x54, 0xa8, 0x5d, 0xf1, 0x16, 0x68, 0xee, 0xcc, 0xa4, 0x69, 0xda, 0x8a,
	0xec, 0x26, 0x3f, 0xdf, 0x73, 0xaf, 0x73, 0x8e, 0x7c, 0xd1, 0x3b, 0xad, 0xa6, 0x56, 0xe8, 0x44,
	0x2b, 0xab, 0x98, 0x0a, 0xfb, 0xd9, 0x4f, 0x16, 0x50, 0x19, 0xf7, 0x99, 0x56, 0xc6, 0x64, 0x9f,
	0x72, 0xc4, 0x88, 0x11, 0x31, 0x27, 0x09, 0x3d, 0x0d, 0x15, 0xe5, 0x3e, 0x08, 0xdc, 0xed, 0x9b,
	0x6a, 0x7f, 0x4e, 0xed, 0x5f, 0xab, 0x1f, 0x6f, 0x8e, 0xd5, 0x58, 0x41, 0x51, 0x3f, 0xfd, 0xca,
	0xc4, 0xdd, 0xef, 0x2b, 0xa8, 0xb5, 0xc7, 0x26, 0x58, 0x7c, 0x9d, 0x0a, 0x63, 0x0f, 0xb3, 0xc6,
	0xee, 0x2e, 0x72, 0x75, 0x46, 0x88, 0xe4, 0x22, 0xb6, 0xf2, 0xb3, 0x14, 0xda, 0x73, 0x3a, 0x4e,
	0xaf, 0x8c, 0x5b, 0xf9, 0xc9, 0x70, 0x76, 0xe0, 0xbe, 0x42, 0x8f, 0x28, 0x9b, 0x90, 0x3b, 0x24,
	0x2b, 0x20, 0xd9, 0xa4, 0xb3, 0x09, 0x73, 0xaa, 0x0e, 0x6a, 0x18, 0xcd, 0x08, 0xdc, 0x8e, 0x48,
	0xee, 0xad, 0x76, 0x9c, 0x5e, 0x0d, 0x23, 0xa3, 0xd9, 0x7e, 0x8a, 0x86, 0xdc, 0xed, 0xa2, 0x75,
	0x9e, 0x36, 0x9c, 0x95, 0x94, 0xa1, 0xa4, 0x9e, 0xc2, 0xa2, 0x66, 0x1b, 0x35, 0x8b, 0xb9, 0xa9,
	0x37, 0x42, 0x7b, 0xff, 0x41, 0xd1, 0x7a, 0x4e, 0x8f, 0x00, 0xba, 0x4f, 0x50, 0x4d, 0x9c, 0x08,
	0x46, 0x38, 0xb5, 0xd4, 0xab, 0x74, 0x9c, 0x5e, 0x03, 0x57, 0x53, 0xf0, 0x81, 0x5a, 0xea, 0x6e,
	0xa1, 0x3a, 0x1c, 0x1a, 0x4b, 0xed, 0xd4, 0x78, 0x6b, 0x1d, 0xa7, 0x57, 0xc5, 0x28, 0x45, 0x47,
	0x40, 0xdc, 0x67, 0xa8, 0x31, 0x0a, 0x15, 0x9b, 0x90, 0x40, 0xc8, 0x71, 0x60, 0xbd, 0x2a, 0xfc,
	0xad, 0x3a, 0xb0, 0x03, 0x40, 0xdd, 0x1f, 0xab, 0xa8, 0xb9, 0xe0, 0xe2, 0x7b, 0xd4, 0x80, 0x2c,
	0x08, 0x8d, 0xd4, 0x34, 0xb6, 0xe0, 0x5f, 0x6d, 0xf0, 0xf4, 0xec, 0x62, 0xab, 0xf4, 0xeb, 0x62,
	0xeb, 0x21, 0x53, 0x26, 0x52, 0xc6, 0xf0, 0x89, 0x2f, 0x55, 0x3f, 0xa2, 0x36, 0xf0, 0x87, 0xb1,
	0xc5, 0x75, 0x90, 0xec, 0x81, 0xc2, 0xdd, 0x41, 0x1b, 0x59, 0x07, 0x2d, 0x98, 0x4c, 0xa4, 0x88,
	0x2d, 0x38, 0x5a, 0xc3, 0x4d, 0xc0, 0xb8, 0xa0, 0xf7, 0x04, 0xb6, 0x7a, 0x5f, 0x60, 0xcf, 0x51,
	0x01, 0x89, 0x95, 0x91, 0x30, 0x96, 0x46, 0x09, 0x98, 0x5b, 0xc6, 0xff, 0xe7, 0x07, 0xc7, 0x05,
	0x4f, 0xdd, 0xa1, 0x26, 0x22, 0x94, 0x73, 0x2d, 0x8c, 0xc9, 0xed, 0x45, 0xd4, 0x44, 0x7b, 0x19,
	0xb9, 0x15, 0x64, 0xe5, 0xdf, 0x41, 0xae, 0x2d, 0x13, 0x64, 0xf5, 0xae, 0x20, 0x77, 0xd0, 0x46,
	0x40, 0x63, 0x1e, 0x0a, 0x3d, 0xbb, 0x51, 0x2d, 0xb3, 0x24, 0xc7, 0xc5, 0xad, 0xe6, 0xfa, 0x25,
	0x94, 0x4d, 0x84, 0xf5, 0x10, 0xc4, 0x5e, 0xf4, 0x3b, 0x04, 0x98, 0x5e, 0x5e, 0x1a, 0xa2, 0x05,
	0xe5, 0x84, 0xd1, 0x30, 0xf4, 0xea, 0x59, 0xf8, 0xd2, 0x60, 0x41, 0xf9, 0x3e, 0x0d, 0xc3, 0xee,
	0x1f, 0x07, 0xb5, 0x86, 0x83, 0xfd, 0x85, 0x70, 0x3f, 0xa1, 0x8d, 0xeb, 0xf6, 0x80, 0x20, 0xdf,
	0xfa, 0x8b, 0xd7, 0xfe, 0x52, 0xef, 0xd1, 0xbf, 0xd9, 0xef, 0xa0, 0x84, 0x9b, 0xfa, 0xe6, 0x84,
	0x2f, 0xe8, 0xc1, 0xfc, 0xab, 0x2a, 0xa6, 0xac, 0xc0, 0x94, 0x37, 0x4b, 0x4e, 0xb9, 0xf5, 0xb6,
	0x0f, 0x4a, 0xb8, 0x45, 0x17, 0xe1, 0xa0, 0x82, 0xca, 0xa9, 0xe9, 0x83, 0xe3, 0xb3, 0xcb, 0xb6,
	0x73, 0x7e, 0xd9, 0x76, 0x7e, 0x5f, 0xb6, 0x9d, 0x6f, 0x57, 0xed, 0xd2, 0xf9, 0x55, 0xbb, 0xf4,
	0xf3, 0xaa, 0x5d, 0xfa, 0xf8, 0x76, 0x2c, 0x6d, 0x30, 0x1d, 0xf9, 0x4c, 0x45, 0xf9, 0x7e, 0xda,
	0x5d, 0xd8, 0x57, 0xbb, 0xd9, 0x96, 0x3a, 0x99, 0x5f, 0x59, 0xf6, 0x34, 0x11, 0x66, 0x54, 0x81,
	0xca, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x22, 0x21, 0x7e, 0x21, 0xe8, 0x04, 0x00, 0x00,
}

func (m *AckRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AckRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AckRequestPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.ExecStatus {
		i--
		if m.ExecStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ExecData) > 0 {
		i -= len(m.ExecData)
		copy(dAtA[i:], m.ExecData)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.ExecData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AckRequestIdentifier != 0 {
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(m.AckRequestIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReadCall {
		i--
		if m.IsReadCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.RequestPacket) > 0 {
		i -= len(m.RequestPacket)
		copy(dAtA[i:], m.RequestPacket)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.RequestPacket)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.HandlerAddress) > 0 {
		i -= len(m.HandlerAddress)
		copy(dAtA[i:], m.HandlerAddress)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.HandlerAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RequestSender) > 0 {
		i -= len(m.RequestSender)
		copy(dAtA[i:], m.RequestSender)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.RequestSender)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DestChainId) > 0 {
		i -= len(m.DestChainId)
		copy(dAtA[i:], m.DestChainId)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.DestChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SrcChainId) > 0 {
		i -= len(m.SrcChainId)
		copy(dAtA[i:], m.SrcChainId)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.SrcChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AsmAddress) > 0 {
		i -= len(m.AsmAddress)
		copy(dAtA[i:], m.AsmAddress)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.AsmAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RequestTimestamp != 0 {
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(m.RequestTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestIdentifier != 0 {
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(m.RequestIdentifier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RouteRecipient) > 0 {
		i -= len(m.RouteRecipient)
		copy(dAtA[i:], m.RouteRecipient)
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(len(m.RouteRecipient)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.RouteAmount.Size()
		i -= size
		if _, err := m.RouteAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIbcSendPayload(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IBCRequestPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IBCRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCRequestPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Send != nil {
		{
			size := m.Send.Size()
			i -= size
			if _, err := m.Send.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *IBCRequestPayload_RequestPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCRequestPayload_RequestPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestPayload != nil {
		{
			size, err := m.RequestPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIbcSendPayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *IBCRequestPayload_AckRequestPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IBCRequestPayload_AckRequestPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AckRequestPayload != nil {
		{
			size, err := m.AckRequestPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIbcSendPayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintIbcSendPayload(dAtA []byte, offset int, v uint64) int {
	offset -= sovIbcSendPayload(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AckRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestIdentifier != 0 {
		n += 1 + sovIbcSendPayload(uint64(m.RequestIdentifier))
	}
	if m.AckRequestIdentifier != 0 {
		n += 1 + sovIbcSendPayload(uint64(m.AckRequestIdentifier))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.ExecData)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	if m.ExecStatus {
		n += 2
	}
	if m.BlockHeight != 0 {
		n += 1 + sovIbcSendPayload(uint64(m.BlockHeight))
	}
	return n
}

func (m *RequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RouteAmount.Size()
	n += 1 + l + sovIbcSendPayload(uint64(l))
	l = len(m.RouteRecipient)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	if m.RequestIdentifier != 0 {
		n += 1 + sovIbcSendPayload(uint64(m.RequestIdentifier))
	}
	if m.RequestTimestamp != 0 {
		n += 1 + sovIbcSendPayload(uint64(m.RequestTimestamp))
	}
	l = len(m.AsmAddress)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.SrcChainId)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.DestChainId)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.RequestSender)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.HandlerAddress)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	l = len(m.RequestPacket)
	if l > 0 {
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	if m.IsReadCall {
		n += 2
	}
	return n
}

func (m *IBCRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Send != nil {
		n += m.Send.Size()
	}
	return n
}

func (m *IBCRequestPayload_RequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestPayload != nil {
		l = m.RequestPayload.Size()
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	return n
}
func (m *IBCRequestPayload_AckRequestPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckRequestPayload != nil {
		l = m.AckRequestPayload.Size()
		n += 1 + l + sovIbcSendPayload(uint64(l))
	}
	return n
}

func sovIbcSendPayload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIbcSendPayload(x uint64) (n int) {
	return sovIbcSendPayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AckRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcSendPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AckRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AckRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestIdentifier", wireType)
			}
			m.AckRequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckRequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecData = append(m.ExecData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecData == nil {
				m.ExecData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecStatus = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIbcSendPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcSendPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RouteAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIdentifier", wireType)
			}
			m.RequestIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimestamp", wireType)
			}
			m.RequestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandlerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPacket", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestPacket = append(m.RequestPacket[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestPacket == nil {
				m.RequestPacket = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReadCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReadCall = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIbcSendPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IBCRequestPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIbcSendPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IBCRequestPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IBCRequestPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Send = &IBCRequestPayload_RequestPayload{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckRequestPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AckRequestPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Send = &IBCRequestPayload_AckRequestPayload{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIbcSendPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIbcSendPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIbcSendPayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIbcSendPayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIbcSendPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIbcSendPayload
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIbcSendPayload
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIbcSendPayload
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIbcSendPayload        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIbcSendPayload          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIbcSendPayload = fmt.Errorf("proto: unexpected end of group")
)
