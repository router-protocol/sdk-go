// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/crosschain/crosschain_ack_tx_status.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CrosschainAckTxStatus int32

const (
	CROSSCHAIN_ACK_TX_CREATED          CrosschainAckTxStatus = 0
	CROSSCHAIN_ACK_TX_VALIDATED        CrosschainAckTxStatus = 1
	CROSSCHAIN_ACK_TX_BLOCKED          CrosschainAckTxStatus = 2
	CROSSCHAIN_ACK_TX_READY_TO_EXECUTE CrosschainAckTxStatus = 3
	CROSSCHAIN_ACK_TX_EXECUTED         CrosschainAckTxStatus = 4
	CROSSCHAIN_ACK_TX_EXECUTION_FAILED CrosschainAckTxStatus = 5
	CROSSCHAIN_ACK_TX_FEES_SETTLED     CrosschainAckTxStatus = 6
	CROSSCHAIN_ACK_TX_COMPLETED        CrosschainAckTxStatus = 7
)

var CrosschainAckTxStatus_name = map[int32]string{
	0: "CROSSCHAIN_ACK_TX_CREATED",
	1: "CROSSCHAIN_ACK_TX_VALIDATED",
	2: "CROSSCHAIN_ACK_TX_BLOCKED",
	3: "CROSSCHAIN_ACK_TX_READY_TO_EXECUTE",
	4: "CROSSCHAIN_ACK_TX_EXECUTED",
	5: "CROSSCHAIN_ACK_TX_EXECUTION_FAILED",
	6: "CROSSCHAIN_ACK_TX_FEES_SETTLED",
	7: "CROSSCHAIN_ACK_TX_COMPLETED",
}

var CrosschainAckTxStatus_value = map[string]int32{
	"CROSSCHAIN_ACK_TX_CREATED":          0,
	"CROSSCHAIN_ACK_TX_VALIDATED":        1,
	"CROSSCHAIN_ACK_TX_BLOCKED":          2,
	"CROSSCHAIN_ACK_TX_READY_TO_EXECUTE": 3,
	"CROSSCHAIN_ACK_TX_EXECUTED":         4,
	"CROSSCHAIN_ACK_TX_EXECUTION_FAILED": 5,
	"CROSSCHAIN_ACK_TX_FEES_SETTLED":     6,
	"CROSSCHAIN_ACK_TX_COMPLETED":        7,
}

func (x CrosschainAckTxStatus) String() string {
	return proto.EnumName(CrosschainAckTxStatus_name, int32(x))
}

func (CrosschainAckTxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bddb92c34d61e985, []int{0}
}

func init() {
	proto.RegisterEnum("routerprotocol.routerchain.crosschain.CrosschainAckTxStatus", CrosschainAckTxStatus_name, CrosschainAckTxStatus_value)
}

func init() {
	proto.RegisterFile("routerchain/crosschain/crosschain_ack_tx_status.proto", fileDescriptor_bddb92c34d61e985)
}

var fileDescriptor_bddb92c34d61e985 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2d, 0xca, 0x2f, 0x2d,
	0x49, 0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0x2e, 0xca, 0x2f, 0x2e, 0x46, 0x67, 0xc6,
	0x27, 0x26, 0x67, 0xc7, 0x97, 0x54, 0xc4, 0x17, 0x97, 0x24, 0x96, 0x94, 0x16, 0xeb, 0x15, 0x14,
	0xe5, 0x97, 0xe4, 0x0b, 0xa9, 0x42, 0xb4, 0x81, 0x39, 0xc9, 0xf9, 0x39, 0x7a, 0x48, 0xa6, 0xe8,
	0x21, 0xb4, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0x15, 0xe9, 0x83, 0x58, 0x10, 0xcd, 0x52,
	0x92, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x62, 0x5e,
	0x25, 0x44, 0x4a, 0xeb, 0x28, 0x0b, 0x97, 0xa8, 0x33, 0x5c, 0xbf, 0x63, 0x72, 0x76, 0x48, 0x45,
	0x30, 0xd8, 0x5e, 0x21, 0x1b, 0x2e, 0x49, 0xe7, 0x20, 0xff, 0xe0, 0x60, 0x67, 0x0f, 0x47, 0x4f,
	0xbf, 0x78, 0x47, 0x67, 0xef, 0xf8, 0x90, 0x88, 0x78, 0xe7, 0x20, 0x57, 0xc7, 0x10, 0x57, 0x17,
	0x01, 0x06, 0x29, 0xd9, 0xae, 0xb9, 0x0a, 0xb8, 0x15, 0x08, 0x39, 0x70, 0x49, 0x63, 0x4a, 0x86,
	0x39, 0xfa, 0x78, 0xba, 0x80, 0xf5, 0x33, 0x4a, 0xc9, 0x77, 0xcd, 0x55, 0xc0, 0xa7, 0x04, 0xbb,
	0xfd, 0x4e, 0x3e, 0xfe, 0xce, 0xde, 0xae, 0x2e, 0x02, 0x4c, 0xb8, 0xec, 0x87, 0x2a, 0x10, 0xf2,
	0xe3, 0x52, 0xc2, 0x94, 0x0c, 0x72, 0x75, 0x74, 0x89, 0x8c, 0x0f, 0xf1, 0x8f, 0x77, 0x8d, 0x70,
	0x75, 0x0e, 0x0d, 0x71, 0x15, 0x60, 0x96, 0x52, 0xeb, 0x9a, 0xab, 0x40, 0x84, 0x4a, 0x21, 0x3b,
	0x2e, 0x29, 0x4c, 0x55, 0x50, 0x49, 0x17, 0x01, 0x16, 0x29, 0xb9, 0xae, 0xb9, 0x0a, 0x78, 0x54,
	0x60, 0x77, 0x0f, 0x44, 0xd6, 0xd3, 0xdf, 0x2f, 0xde, 0xcd, 0xd1, 0xd3, 0xc7, 0xd5, 0x45, 0x80,
	0x15, 0x97, 0x7b, 0xd0, 0x55, 0x0a, 0xb9, 0x71, 0xc9, 0x61, 0xaa, 0x72, 0x73, 0x75, 0x0d, 0x8e,
	0x0f, 0x76, 0x0d, 0x09, 0x01, 0x99, 0xc5, 0x26, 0xa5, 0xd4, 0x35, 0x57, 0x81, 0x80, 0x2a, 0xec,
	0xf1, 0xe4, 0xec, 0xef, 0x1b, 0xe0, 0xe3, 0x0a, 0xf2, 0x18, 0x3b, 0xae, 0x78, 0x82, 0x2b, 0x91,
	0x62, 0xe9, 0x58, 0x2c, 0xc7, 0xe0, 0x14, 0x72, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0x56, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x90, 0x54,
	0xab, 0x0b, 0x4b, 0xc5, 0x30, 0x3e, 0x24, 0x07, 0x54, 0x20, 0x67, 0x87, 0x92, 0xca, 0x82, 0xd4,
	0xe2, 0x24, 0x36, 0xb0, 0x4a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xda, 0x22, 0x10,
	0x35, 0x03, 0x00, 0x00,
}
