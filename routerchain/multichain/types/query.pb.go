// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multichain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetChainConfigRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainConfigRequest) Reset()         { *m = QueryGetChainConfigRequest{} }
func (m *QueryGetChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainConfigRequest) ProtoMessage()    {}
func (*QueryGetChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{2}
}
func (m *QueryGetChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainConfigRequest.Merge(m, src)
}
func (m *QueryGetChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainConfigRequest proto.InternalMessageInfo

func (m *QueryGetChainConfigRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetChainConfigResponse struct {
	ChainConfig ChainConfig `protobuf:"bytes,1,opt,name=chainConfig,proto3" json:"chainConfig"`
}

func (m *QueryGetChainConfigResponse) Reset()         { *m = QueryGetChainConfigResponse{} }
func (m *QueryGetChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainConfigResponse) ProtoMessage()    {}
func (*QueryGetChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{3}
}
func (m *QueryGetChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainConfigResponse.Merge(m, src)
}
func (m *QueryGetChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainConfigResponse proto.InternalMessageInfo

func (m *QueryGetChainConfigResponse) GetChainConfig() ChainConfig {
	if m != nil {
		return m.ChainConfig
	}
	return ChainConfig{}
}

type QueryAllChainConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainConfigRequest) Reset()         { *m = QueryAllChainConfigRequest{} }
func (m *QueryAllChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainConfigRequest) ProtoMessage()    {}
func (*QueryAllChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{4}
}
func (m *QueryAllChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainConfigRequest.Merge(m, src)
}
func (m *QueryAllChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainConfigRequest proto.InternalMessageInfo

func (m *QueryAllChainConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChainConfigResponse struct {
	ChainConfig []ChainConfig       `protobuf:"bytes,1,rep,name=chainConfig,proto3" json:"chainConfig"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainConfigResponse) Reset()         { *m = QueryAllChainConfigResponse{} }
func (m *QueryAllChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainConfigResponse) ProtoMessage()    {}
func (*QueryAllChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{5}
}
func (m *QueryAllChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainConfigResponse.Merge(m, src)
}
func (m *QueryAllChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainConfigResponse proto.InternalMessageInfo

func (m *QueryAllChainConfigResponse) GetChainConfig() []ChainConfig {
	if m != nil {
		return m.ChainConfig
	}
	return nil
}

func (m *QueryAllChainConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractConfigByChainIdRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryAllContractConfigByChainIdRequest) Reset() {
	*m = QueryAllContractConfigByChainIdRequest{}
}
func (m *QueryAllContractConfigByChainIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigByChainIdRequest) ProtoMessage()    {}
func (*QueryAllContractConfigByChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{6}
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigByChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigByChainIdRequest.Merge(m, src)
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigByChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigByChainIdRequest proto.InternalMessageInfo

func (m *QueryAllContractConfigByChainIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryAllContractConfigByChainIdResponse struct {
	ContractConfig []ContractConfig `protobuf:"bytes,1,rep,name=contractConfig,proto3" json:"contractConfig"`
}

func (m *QueryAllContractConfigByChainIdResponse) Reset() {
	*m = QueryAllContractConfigByChainIdResponse{}
}
func (m *QueryAllContractConfigByChainIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigByChainIdResponse) ProtoMessage()    {}
func (*QueryAllContractConfigByChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{7}
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigByChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigByChainIdResponse.Merge(m, src)
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigByChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigByChainIdResponse proto.InternalMessageInfo

func (m *QueryAllContractConfigByChainIdResponse) GetContractConfig() []ContractConfig {
	if m != nil {
		return m.ContractConfig
	}
	return nil
}

type QueryAllContractConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractConfigRequest) Reset()         { *m = QueryAllContractConfigRequest{} }
func (m *QueryAllContractConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigRequest) ProtoMessage()    {}
func (*QueryAllContractConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{8}
}
func (m *QueryAllContractConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigRequest.Merge(m, src)
}
func (m *QueryAllContractConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigRequest proto.InternalMessageInfo

func (m *QueryAllContractConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractConfigResponse struct {
	ContractConfig []ContractConfig    `protobuf:"bytes,1,rep,name=contractConfig,proto3" json:"contractConfig"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractConfigResponse) Reset()         { *m = QueryAllContractConfigResponse{} }
func (m *QueryAllContractConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigResponse) ProtoMessage()    {}
func (*QueryAllContractConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_232e36992b7f3d2c, []int{9}
}
func (m *QueryAllContractConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigResponse.Merge(m, src)
}
func (m *QueryAllContractConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigResponse proto.InternalMessageInfo

func (m *QueryAllContractConfigResponse) GetContractConfig() []ContractConfig {
	if m != nil {
		return m.ContractConfig
	}
	return nil
}

func (m *QueryAllContractConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.multichain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.multichain.QueryParamsResponse")
	proto.RegisterType((*QueryGetChainConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryGetChainConfigRequest")
	proto.RegisterType((*QueryGetChainConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryGetChainConfigResponse")
	proto.RegisterType((*QueryAllChainConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllChainConfigRequest")
	proto.RegisterType((*QueryAllChainConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllChainConfigResponse")
	proto.RegisterType((*QueryAllContractConfigByChainIdRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigByChainIdRequest")
	proto.RegisterType((*QueryAllContractConfigByChainIdResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigByChainIdResponse")
	proto.RegisterType((*QueryAllContractConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigRequest")
	proto.RegisterType((*QueryAllContractConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigResponse")
}

func init() { proto.RegisterFile("multichain/query.proto", fileDescriptor_232e36992b7f3d2c) }

var fileDescriptor_232e36992b7f3d2c = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x51, 0x63, 0x7d, 0x81, 0x82, 0x63, 0xb1, 0xba, 0xda, 0x55, 0x16, 0x6c, 0x45,
	0xe8, 0x2e, 0x89, 0x94, 0x68, 0x40, 0x68, 0x12, 0x6b, 0x95, 0xa2, 0xd4, 0xe0, 0xa9, 0x17, 0xd9,
	0x6c, 0xc6, 0xed, 0xc2, 0x66, 0x67, 0xbb, 0x3b, 0x11, 0x83, 0x78, 0x11, 0xbc, 0x8a, 0xe0, 0x3f,
	0xe3, 0xd9, 0x53, 0x4f, 0x52, 0x10, 0xc4, 0x53, 0x91, 0xc4, 0x8b, 0xff, 0x85, 0x64, 0x66, 0x62,
	0x76, 0xdb, 0x4d, 0xbb, 0xf9, 0x81, 0x97, 0x90, 0xd9, 0x79, 0xef, 0xfb, 0xbe, 0x9f, 0x79, 0xb3,
	0x6f, 0xe1, 0x72, 0xab, 0xed, 0x32, 0xc7, 0xda, 0x35, 0x1d, 0xcf, 0xd8, 0x6b, 0x93, 0xa0, 0xa3,
	0xfb, 0x01, 0x65, 0x14, 0xdf, 0x0a, 0x68, 0x9b, 0x91, 0x80, 0x2f, 0x2c, 0xea, 0xea, 0x62, 0xc9,
	0xe3, 0xf4, 0x61, 0x8a, 0xb2, 0x60, 0x53, 0x9b, 0xf2, 0x20, 0xa3, 0xff, 0x4f, 0x24, 0x2b, 0xd7,
	0x6d, 0x4a, 0x6d, 0x97, 0x18, 0xa6, 0xef, 0x18, 0xa6, 0xe7, 0x51, 0x66, 0x32, 0x87, 0x7a, 0xa1,
	0xdc, 0xbd, 0x63, 0xd1, 0xb0, 0x45, 0x43, 0xa3, 0x61, 0x86, 0x44, 0xd4, 0x34, 0x5e, 0x17, 0x1a,
	0x84, 0x99, 0x05, 0xc3, 0x37, 0x6d, 0xc7, 0xe3, 0xc1, 0x32, 0x76, 0x31, 0x62, 0xcf, 0x37, 0x03,
	0xb3, 0x35, 0x10, 0x59, 0x8a, 0x6c, 0xf0, 0xdf, 0x97, 0x16, 0xf5, 0x5e, 0x39, 0xb6, 0xd8, 0xd6,
	0x16, 0x00, 0x3f, 0xef, 0x2b, 0x6f, 0xf3, 0x9c, 0x3a, 0xd9, 0x6b, 0x93, 0x90, 0x69, 0x0d, 0xb8,
	0x14, 0x7b, 0x1a, 0xfa, 0xd4, 0x0b, 0x09, 0xde, 0x82, 0x9c, 0xd0, 0xbe, 0x82, 0x6e, 0xa2, 0xdb,
	0xf9, 0xe2, 0xaa, 0x9e, 0x0a, 0x5e, 0x17, 0x32, 0xd5, 0xb3, 0xfb, 0x87, 0x37, 0x32, 0x75, 0x29,
	0xa1, 0x95, 0x40, 0xe1, 0x35, 0x36, 0x09, 0xab, 0xf5, 0xa3, 0x6a, 0xdc, 0x96, 0x74, 0x80, 0xaf,
	0xc2, 0x9c, 0x70, 0xeb, 0x34, 0x79, 0xb1, 0x0b, 0xf5, 0xf3, 0x7c, 0xfd, 0xa4, 0xa9, 0x75, 0xe0,
	0x5a, 0x62, 0xa2, 0x34, 0xb9, 0x03, 0x79, 0x6b, 0xf8, 0x58, 0x3a, 0x2d, 0xa6, 0x74, 0x1a, 0x11,
	0x94, 0x76, 0xa3, 0x62, 0x5a, 0x53, 0x7a, 0xae, 0xb8, 0x6e, 0x82, 0xe7, 0x47, 0x00, 0xc3, 0xbe,
	0xc8, 0xc2, 0xcb, 0xba, 0x68, 0xa2, 0xde, 0x6f, 0xa2, 0x2e, 0x2e, 0x8e, 0x6c, 0xa2, 0xbe, 0x6d,
	0xda, 0x44, 0xe6, 0xd6, 0x23, 0x99, 0xda, 0x57, 0x24, 0x09, 0x8f, 0x96, 0x19, 0x45, 0x78, 0x66,
	0x66, 0x84, 0x78, 0x33, 0xc6, 0x90, 0xe5, 0x0c, 0x2b, 0xa7, 0x32, 0x08, 0x63, 0x31, 0x88, 0x1a,
	0x2c, 0xff, 0x63, 0xa0, 0x1e, 0x0b, 0x4c, 0x8b, 0xc9, 0xaa, 0x9d, 0x9a, 0x68, 0x64, 0x8a, 0x56,
	0x7f, 0x44, 0xb0, 0x72, 0xaa, 0x8a, 0x3c, 0x15, 0x0b, 0xe6, 0xad, 0x58, 0x88, 0x3c, 0x98, 0xb5,
	0xb4, 0x07, 0x13, 0xd7, 0x17, 0x67, 0x73, 0x44, 0x52, 0xb3, 0x61, 0x29, 0xd9, 0xcf, 0xac, 0xef,
	0xc0, 0x37, 0x04, 0xea, 0xa8, 0x4a, 0xff, 0x11, 0x78, 0x66, 0xf7, 0xa1, 0xf8, 0x67, 0x0e, 0xce,
	0x71, 0x20, 0xfc, 0x05, 0x41, 0x4e, 0x4c, 0x04, 0x7c, 0x3f, 0xa5, 0xd5, 0xe3, 0x23, 0x4a, 0x29,
	0x4f, 0x92, 0x2a, 0x7c, 0x69, 0xa5, 0xf7, 0xdf, 0x7f, 0x7f, 0xce, 0x16, 0xb0, 0x61, 0x88, 0xa4,
	0xd5, 0x81, 0xc8, 0x60, 0x2d, 0xc6, 0xe5, 0xb1, 0x91, 0x8a, 0x0f, 0x11, 0xe4, 0x23, 0x2f, 0x10,
	0xae, 0x8c, 0x63, 0x22, 0x71, 0xd0, 0x29, 0xd5, 0x69, 0x24, 0x24, 0xcf, 0x63, 0xce, 0x53, 0xc5,
	0xeb, 0xa9, 0x79, 0xa2, 0x5f, 0x02, 0xe3, 0xed, 0xe0, 0xf5, 0x7b, 0x87, 0x7f, 0x20, 0x98, 0x8f,
	0x54, 0xa8, 0xb8, 0xee, 0x78, 0x8c, 0x89, 0x83, 0x71, 0x3c, 0xc6, 0xe4, 0xa1, 0xa7, 0x3d, 0xe0,
	0x8c, 0x25, 0xbc, 0x36, 0x11, 0x23, 0xfe, 0x90, 0x85, 0xc5, 0x11, 0x13, 0x04, 0x3f, 0x1d, 0xd7,
	0xde, 0x89, 0xf3, 0x4c, 0x79, 0x36, 0x2b, 0x39, 0x49, 0xbe, 0xc5, 0xc9, 0x37, 0x70, 0x2d, 0x3d,
	0xb9, 0x54, 0x4c, 0x68, 0x70, 0x17, 0xc1, 0xc5, 0x78, 0xc1, 0x7e, 0x8f, 0x1f, 0x4e, 0x65, 0x79,
	0x00, 0xbe, 0x31, 0xa5, 0x8a, 0xe4, 0x5d, 0xe7, 0xbc, 0x65, 0x7c, 0x6f, 0x52, 0xde, 0xea, 0x8b,
	0xfd, 0xae, 0x8a, 0x0e, 0xba, 0x2a, 0xfa, 0xd5, 0x55, 0xd1, 0xa7, 0x9e, 0x9a, 0x39, 0xe8, 0xa9,
	0x99, 0x9f, 0x3d, 0x35, 0xb3, 0x53, 0xb6, 0x1d, 0xb6, 0xdb, 0x6e, 0xe8, 0x16, 0x6d, 0x9d, 0xac,
	0xfe, 0x26, 0xaa, 0xcf, 0x3a, 0x3e, 0x09, 0x1b, 0x39, 0x1e, 0x79, 0xf7, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf5, 0x7f, 0x4c, 0x63, 0x0a, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a ChainConfig by chain_id.
	ChainConfig(ctx context.Context, in *QueryGetChainConfigRequest, opts ...grpc.CallOption) (*QueryGetChainConfigResponse, error)
	// Queries a list of ChainConfig items.
	ChainConfigAll(ctx context.Context, in *QueryAllChainConfigRequest, opts ...grpc.CallOption) (*QueryAllChainConfigResponse, error)
	// Queries a ContractConfig by chain_id and address.
	ContractConfigByChainId(ctx context.Context, in *QueryAllContractConfigByChainIdRequest, opts ...grpc.CallOption) (*QueryAllContractConfigByChainIdResponse, error)
	// Queries a list of ContractConfig items.
	ContractConfigAll(ctx context.Context, in *QueryAllContractConfigRequest, opts ...grpc.CallOption) (*QueryAllContractConfigResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainConfig(ctx context.Context, in *QueryGetChainConfigRequest, opts ...grpc.CallOption) (*QueryGetChainConfigResponse, error) {
	out := new(QueryGetChainConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainConfigAll(ctx context.Context, in *QueryAllChainConfigRequest, opts ...grpc.CallOption) (*QueryAllChainConfigResponse, error) {
	out := new(QueryAllChainConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ChainConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractConfigByChainId(ctx context.Context, in *QueryAllContractConfigByChainIdRequest, opts ...grpc.CallOption) (*QueryAllContractConfigByChainIdResponse, error) {
	out := new(QueryAllContractConfigByChainIdResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ContractConfigByChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractConfigAll(ctx context.Context, in *QueryAllContractConfigRequest, opts ...grpc.CallOption) (*QueryAllContractConfigResponse, error) {
	out := new(QueryAllContractConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ContractConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a ChainConfig by chain_id.
	ChainConfig(context.Context, *QueryGetChainConfigRequest) (*QueryGetChainConfigResponse, error)
	// Queries a list of ChainConfig items.
	ChainConfigAll(context.Context, *QueryAllChainConfigRequest) (*QueryAllChainConfigResponse, error)
	// Queries a ContractConfig by chain_id and address.
	ContractConfigByChainId(context.Context, *QueryAllContractConfigByChainIdRequest) (*QueryAllContractConfigByChainIdResponse, error)
	// Queries a list of ContractConfig items.
	ContractConfigAll(context.Context, *QueryAllContractConfigRequest) (*QueryAllContractConfigResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ChainConfig(ctx context.Context, req *QueryGetChainConfigRequest) (*QueryGetChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainConfig not implemented")
}
func (*UnimplementedQueryServer) ChainConfigAll(ctx context.Context, req *QueryAllChainConfigRequest) (*QueryAllChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainConfigAll not implemented")
}
func (*UnimplementedQueryServer) ContractConfigByChainId(ctx context.Context, req *QueryAllContractConfigByChainIdRequest) (*QueryAllContractConfigByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractConfigByChainId not implemented")
}
func (*UnimplementedQueryServer) ContractConfigAll(ctx context.Context, req *QueryAllContractConfigRequest) (*QueryAllContractConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractConfigAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainConfig(ctx, req.(*QueryGetChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ChainConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainConfigAll(ctx, req.(*QueryAllChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractConfigByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractConfigByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractConfigByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ContractConfigByChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractConfigByChainId(ctx, req.(*QueryAllContractConfigByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ContractConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractConfigAll(ctx, req.(*QueryAllContractConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.multichain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ChainConfig",
			Handler:    _Query_ChainConfig_Handler,
		},
		{
			MethodName: "ChainConfigAll",
			Handler:    _Query_ChainConfigAll_Handler,
		},
		{
			MethodName: "ContractConfigByChainId",
			Handler:    _Query_ContractConfigByChainId_Handler,
		},
		{
			MethodName: "ContractConfigAll",
			Handler:    _Query_ContractConfigAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multichain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainConfig) > 0 {
		for iNdEx := len(m.ChainConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigByChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigByChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigByChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigByChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigByChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigByChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractConfig) > 0 {
		for iNdEx := len(m.ContractConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractConfig) > 0 {
		for iNdEx := len(m.ContractConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainConfig) > 0 {
		for _, e := range m.ChainConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractConfigByChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractConfigByChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractConfig) > 0 {
		for _, e := range m.ContractConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllContractConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractConfig) > 0 {
		for _, e := range m.ContractConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainConfig = append(m.ChainConfig, ChainConfig{})
			if err := m.ChainConfig[len(m.ChainConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigByChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigByChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractConfig = append(m.ContractConfig, ContractConfig{})
			if err := m.ContractConfig[len(m.ContractConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractConfig = append(m.ContractConfig, ContractConfig{})
			if err := m.ContractConfig[len(m.ContractConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
