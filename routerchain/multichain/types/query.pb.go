// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/multichain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetChainConfigRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainConfigRequest) Reset()         { *m = QueryGetChainConfigRequest{} }
func (m *QueryGetChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainConfigRequest) ProtoMessage()    {}
func (*QueryGetChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{2}
}
func (m *QueryGetChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainConfigRequest.Merge(m, src)
}
func (m *QueryGetChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainConfigRequest proto.InternalMessageInfo

func (m *QueryGetChainConfigRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryGetChainConfigResponse struct {
	ChainConfig ChainConfig `protobuf:"bytes,1,opt,name=chainConfig,proto3" json:"chainConfig"`
}

func (m *QueryGetChainConfigResponse) Reset()         { *m = QueryGetChainConfigResponse{} }
func (m *QueryGetChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainConfigResponse) ProtoMessage()    {}
func (*QueryGetChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{3}
}
func (m *QueryGetChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainConfigResponse.Merge(m, src)
}
func (m *QueryGetChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainConfigResponse proto.InternalMessageInfo

func (m *QueryGetChainConfigResponse) GetChainConfig() ChainConfig {
	if m != nil {
		return m.ChainConfig
	}
	return ChainConfig{}
}

type QueryAllChainConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainConfigRequest) Reset()         { *m = QueryAllChainConfigRequest{} }
func (m *QueryAllChainConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainConfigRequest) ProtoMessage()    {}
func (*QueryAllChainConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{4}
}
func (m *QueryAllChainConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainConfigRequest.Merge(m, src)
}
func (m *QueryAllChainConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainConfigRequest proto.InternalMessageInfo

func (m *QueryAllChainConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChainConfigResponse struct {
	ChainConfig []ChainConfig       `protobuf:"bytes,1,rep,name=chainConfig,proto3" json:"chainConfig"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainConfigResponse) Reset()         { *m = QueryAllChainConfigResponse{} }
func (m *QueryAllChainConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainConfigResponse) ProtoMessage()    {}
func (*QueryAllChainConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{5}
}
func (m *QueryAllChainConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainConfigResponse.Merge(m, src)
}
func (m *QueryAllChainConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainConfigResponse proto.InternalMessageInfo

func (m *QueryAllChainConfigResponse) GetChainConfig() []ChainConfig {
	if m != nil {
		return m.ChainConfig
	}
	return nil
}

func (m *QueryAllChainConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetContractConfigRequest struct {
	ChainId         string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryGetContractConfigRequest) Reset()         { *m = QueryGetContractConfigRequest{} }
func (m *QueryGetContractConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractConfigRequest) ProtoMessage()    {}
func (*QueryGetContractConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{6}
}
func (m *QueryGetContractConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractConfigRequest.Merge(m, src)
}
func (m *QueryGetContractConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractConfigRequest proto.InternalMessageInfo

func (m *QueryGetContractConfigRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetContractConfigRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type QueryGetContractConfigResponse struct {
	ContractConfig ContractConfig `protobuf:"bytes,1,opt,name=contractConfig,proto3" json:"contractConfig"`
}

func (m *QueryGetContractConfigResponse) Reset()         { *m = QueryGetContractConfigResponse{} }
func (m *QueryGetContractConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContractConfigResponse) ProtoMessage()    {}
func (*QueryGetContractConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{7}
}
func (m *QueryGetContractConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContractConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContractConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContractConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContractConfigResponse.Merge(m, src)
}
func (m *QueryGetContractConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContractConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContractConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContractConfigResponse proto.InternalMessageInfo

func (m *QueryGetContractConfigResponse) GetContractConfig() ContractConfig {
	if m != nil {
		return m.ContractConfig
	}
	return ContractConfig{}
}

type QueryAllContractConfigByChainIdRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryAllContractConfigByChainIdRequest) Reset() {
	*m = QueryAllContractConfigByChainIdRequest{}
}
func (m *QueryAllContractConfigByChainIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigByChainIdRequest) ProtoMessage()    {}
func (*QueryAllContractConfigByChainIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{8}
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigByChainIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigByChainIdRequest.Merge(m, src)
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigByChainIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigByChainIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigByChainIdRequest proto.InternalMessageInfo

func (m *QueryAllContractConfigByChainIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryAllContractConfigByChainIdResponse struct {
	ContractConfig []ContractConfig `protobuf:"bytes,1,rep,name=contractConfig,proto3" json:"contractConfig"`
}

func (m *QueryAllContractConfigByChainIdResponse) Reset() {
	*m = QueryAllContractConfigByChainIdResponse{}
}
func (m *QueryAllContractConfigByChainIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigByChainIdResponse) ProtoMessage()    {}
func (*QueryAllContractConfigByChainIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{9}
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigByChainIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigByChainIdResponse.Merge(m, src)
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigByChainIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigByChainIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigByChainIdResponse proto.InternalMessageInfo

func (m *QueryAllContractConfigByChainIdResponse) GetContractConfig() []ContractConfig {
	if m != nil {
		return m.ContractConfig
	}
	return nil
}

type QueryAllContractConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractConfigRequest) Reset()         { *m = QueryAllContractConfigRequest{} }
func (m *QueryAllContractConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigRequest) ProtoMessage()    {}
func (*QueryAllContractConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{10}
}
func (m *QueryAllContractConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigRequest.Merge(m, src)
}
func (m *QueryAllContractConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigRequest proto.InternalMessageInfo

func (m *QueryAllContractConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllContractConfigResponse struct {
	ContractConfig []ContractConfig    `protobuf:"bytes,1,rep,name=contractConfig,proto3" json:"contractConfig"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContractConfigResponse) Reset()         { *m = QueryAllContractConfigResponse{} }
func (m *QueryAllContractConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContractConfigResponse) ProtoMessage()    {}
func (*QueryAllContractConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{11}
}
func (m *QueryAllContractConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContractConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContractConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContractConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContractConfigResponse.Merge(m, src)
}
func (m *QueryAllContractConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContractConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContractConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContractConfigResponse proto.InternalMessageInfo

func (m *QueryAllContractConfigResponse) GetContractConfig() []ContractConfig {
	if m != nil {
		return m.ContractConfig
	}
	return nil
}

func (m *QueryAllContractConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetIbcRelayerConfigRequest struct {
	ChainId        string                   `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ConnectionType IbcRelayerConnectionType `protobuf:"varint,2,opt,name=connectionType,proto3,enum=routerprotocol.routerchain.multichain.IbcRelayerConnectionType" json:"connectionType,omitempty"`
}

func (m *QueryGetIbcRelayerConfigRequest) Reset()         { *m = QueryGetIbcRelayerConfigRequest{} }
func (m *QueryGetIbcRelayerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIbcRelayerConfigRequest) ProtoMessage()    {}
func (*QueryGetIbcRelayerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{12}
}
func (m *QueryGetIbcRelayerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIbcRelayerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIbcRelayerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIbcRelayerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIbcRelayerConfigRequest.Merge(m, src)
}
func (m *QueryGetIbcRelayerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIbcRelayerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIbcRelayerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIbcRelayerConfigRequest proto.InternalMessageInfo

func (m *QueryGetIbcRelayerConfigRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetIbcRelayerConfigRequest) GetConnectionType() IbcRelayerConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return GATEWAY_ENDPOINT
}

type QueryGetIbcRelayerConfigResponse struct {
	RelayerConfig IbcRelayerConfig `protobuf:"bytes,1,opt,name=relayerConfig,proto3" json:"relayerConfig"`
}

func (m *QueryGetIbcRelayerConfigResponse) Reset()         { *m = QueryGetIbcRelayerConfigResponse{} }
func (m *QueryGetIbcRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIbcRelayerConfigResponse) ProtoMessage()    {}
func (*QueryGetIbcRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{13}
}
func (m *QueryGetIbcRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIbcRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIbcRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIbcRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIbcRelayerConfigResponse.Merge(m, src)
}
func (m *QueryGetIbcRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIbcRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIbcRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIbcRelayerConfigResponse proto.InternalMessageInfo

func (m *QueryGetIbcRelayerConfigResponse) GetRelayerConfig() IbcRelayerConfig {
	if m != nil {
		return m.RelayerConfig
	}
	return IbcRelayerConfig{}
}

type QueryAllIbcRelayerConfigRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIbcRelayerConfigRequest) Reset()         { *m = QueryAllIbcRelayerConfigRequest{} }
func (m *QueryAllIbcRelayerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIbcRelayerConfigRequest) ProtoMessage()    {}
func (*QueryAllIbcRelayerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{14}
}
func (m *QueryAllIbcRelayerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIbcRelayerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIbcRelayerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIbcRelayerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIbcRelayerConfigRequest.Merge(m, src)
}
func (m *QueryAllIbcRelayerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIbcRelayerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIbcRelayerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIbcRelayerConfigRequest proto.InternalMessageInfo

func (m *QueryAllIbcRelayerConfigRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIbcRelayerConfigResponse struct {
	RelayerConfig []IbcRelayerConfig  `protobuf:"bytes,1,rep,name=relayerConfig,proto3" json:"relayerConfig"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIbcRelayerConfigResponse) Reset()         { *m = QueryAllIbcRelayerConfigResponse{} }
func (m *QueryAllIbcRelayerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIbcRelayerConfigResponse) ProtoMessage()    {}
func (*QueryAllIbcRelayerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{15}
}
func (m *QueryAllIbcRelayerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIbcRelayerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIbcRelayerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIbcRelayerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIbcRelayerConfigResponse.Merge(m, src)
}
func (m *QueryAllIbcRelayerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIbcRelayerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIbcRelayerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIbcRelayerConfigResponse proto.InternalMessageInfo

func (m *QueryAllIbcRelayerConfigResponse) GetRelayerConfig() []IbcRelayerConfig {
	if m != nil {
		return m.RelayerConfig
	}
	return nil
}

func (m *QueryAllIbcRelayerConfigResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// this line is used by starport scaffolding # 3
type QueryGetNonceObservedStatusRequest struct {
	ChainId         string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	EventNonce      uint64 `protobuf:"varint,3,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryGetNonceObservedStatusRequest) Reset()         { *m = QueryGetNonceObservedStatusRequest{} }
func (m *QueryGetNonceObservedStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNonceObservedStatusRequest) ProtoMessage()    {}
func (*QueryGetNonceObservedStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{16}
}
func (m *QueryGetNonceObservedStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNonceObservedStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNonceObservedStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNonceObservedStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNonceObservedStatusRequest.Merge(m, src)
}
func (m *QueryGetNonceObservedStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNonceObservedStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNonceObservedStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNonceObservedStatusRequest proto.InternalMessageInfo

func (m *QueryGetNonceObservedStatusRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetNonceObservedStatusRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryGetNonceObservedStatusRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryGetNonceObservedStatusResponse struct {
	NonceObservedStatus NonceObservedStatus `protobuf:"bytes,1,opt,name=nonceObservedStatus,proto3" json:"nonceObservedStatus"`
}

func (m *QueryGetNonceObservedStatusResponse) Reset()         { *m = QueryGetNonceObservedStatusResponse{} }
func (m *QueryGetNonceObservedStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNonceObservedStatusResponse) ProtoMessage()    {}
func (*QueryGetNonceObservedStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{17}
}
func (m *QueryGetNonceObservedStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNonceObservedStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNonceObservedStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNonceObservedStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNonceObservedStatusResponse.Merge(m, src)
}
func (m *QueryGetNonceObservedStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNonceObservedStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNonceObservedStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNonceObservedStatusResponse proto.InternalMessageInfo

func (m *QueryGetNonceObservedStatusResponse) GetNonceObservedStatus() NonceObservedStatus {
	if m != nil {
		return m.NonceObservedStatus
	}
	return NonceObservedStatus{}
}

type QueryAllNonceObservedStatusRequest struct {
	ChainId         string             `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string             `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNonceObservedStatusRequest) Reset()         { *m = QueryAllNonceObservedStatusRequest{} }
func (m *QueryAllNonceObservedStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNonceObservedStatusRequest) ProtoMessage()    {}
func (*QueryAllNonceObservedStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{18}
}
func (m *QueryAllNonceObservedStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNonceObservedStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNonceObservedStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNonceObservedStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNonceObservedStatusRequest.Merge(m, src)
}
func (m *QueryAllNonceObservedStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNonceObservedStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNonceObservedStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNonceObservedStatusRequest proto.InternalMessageInfo

func (m *QueryAllNonceObservedStatusRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryAllNonceObservedStatusRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryAllNonceObservedStatusRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNonceObservedStatusResponse struct {
	NonceObservedStatus []NonceObservedStatus `protobuf:"bytes,1,rep,name=nonceObservedStatus,proto3" json:"nonceObservedStatus"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNonceObservedStatusResponse) Reset()         { *m = QueryAllNonceObservedStatusResponse{} }
func (m *QueryAllNonceObservedStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNonceObservedStatusResponse) ProtoMessage()    {}
func (*QueryAllNonceObservedStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a82aaaeab887bc20, []int{19}
}
func (m *QueryAllNonceObservedStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNonceObservedStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNonceObservedStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNonceObservedStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNonceObservedStatusResponse.Merge(m, src)
}
func (m *QueryAllNonceObservedStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNonceObservedStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNonceObservedStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNonceObservedStatusResponse proto.InternalMessageInfo

func (m *QueryAllNonceObservedStatusResponse) GetNonceObservedStatus() []NonceObservedStatus {
	if m != nil {
		return m.NonceObservedStatus
	}
	return nil
}

func (m *QueryAllNonceObservedStatusResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "routerprotocol.routerchain.multichain.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "routerprotocol.routerchain.multichain.QueryParamsResponse")
	proto.RegisterType((*QueryGetChainConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryGetChainConfigRequest")
	proto.RegisterType((*QueryGetChainConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryGetChainConfigResponse")
	proto.RegisterType((*QueryAllChainConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllChainConfigRequest")
	proto.RegisterType((*QueryAllChainConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllChainConfigResponse")
	proto.RegisterType((*QueryGetContractConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryGetContractConfigRequest")
	proto.RegisterType((*QueryGetContractConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryGetContractConfigResponse")
	proto.RegisterType((*QueryAllContractConfigByChainIdRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigByChainIdRequest")
	proto.RegisterType((*QueryAllContractConfigByChainIdResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigByChainIdResponse")
	proto.RegisterType((*QueryAllContractConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigRequest")
	proto.RegisterType((*QueryAllContractConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllContractConfigResponse")
	proto.RegisterType((*QueryGetIbcRelayerConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryGetIbcRelayerConfigRequest")
	proto.RegisterType((*QueryGetIbcRelayerConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryGetIbcRelayerConfigResponse")
	proto.RegisterType((*QueryAllIbcRelayerConfigRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllIbcRelayerConfigRequest")
	proto.RegisterType((*QueryAllIbcRelayerConfigResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllIbcRelayerConfigResponse")
	proto.RegisterType((*QueryGetNonceObservedStatusRequest)(nil), "routerprotocol.routerchain.multichain.QueryGetNonceObservedStatusRequest")
	proto.RegisterType((*QueryGetNonceObservedStatusResponse)(nil), "routerprotocol.routerchain.multichain.QueryGetNonceObservedStatusResponse")
	proto.RegisterType((*QueryAllNonceObservedStatusRequest)(nil), "routerprotocol.routerchain.multichain.QueryAllNonceObservedStatusRequest")
	proto.RegisterType((*QueryAllNonceObservedStatusResponse)(nil), "routerprotocol.routerchain.multichain.QueryAllNonceObservedStatusResponse")
}

func init() {
	proto.RegisterFile("routerchain/multichain/query.proto", fileDescriptor_a82aaaeab887bc20)
}

var fileDescriptor_a82aaaeab887bc20 = []byte{
	// 1098 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xce, 0xec, 0x96, 0x40, 0x5f, 0x44, 0x28, 0xb3, 0x15, 0x04, 0x03, 0x9b, 0x68, 0x2a, 0xfa,
	0x03, 0xa9, 0xb6, 0xb2, 0xa8, 0x0a, 0x04, 0x55, 0x74, 0xb3, 0x4d, 0xc2, 0x52, 0xb5, 0x94, 0xa5,
	0x42, 0xa8, 0x42, 0x5d, 0x79, 0xed, 0xc1, 0x35, 0x72, 0x3c, 0x5b, 0xdb, 0x1b, 0xb1, 0x8a, 0x72,
	0x41, 0xaa, 0x7a, 0x40, 0x42, 0x48, 0x88, 0x03, 0x37, 0x0e, 0xfc, 0x05, 0x9c, 0x38, 0x73, 0xea,
	0x09, 0x45, 0x42, 0x42, 0x9c, 0x2a, 0xb4, 0xe1, 0xc6, 0x8d, 0x3b, 0x12, 0xf2, 0x78, 0x9c, 0xb5,
	0x77, 0xed, 0x8d, 0xbd, 0xeb, 0xf4, 0x12, 0xad, 0xed, 0xf7, 0xe3, 0xfb, 0xbe, 0xf7, 0x66, 0xe6,
	0x4d, 0x80, 0x38, 0xac, 0xe7, 0x51, 0x47, 0xbb, 0xaf, 0x9a, 0xb6, 0xb2, 0xd3, 0xb3, 0x3c, 0x33,
	0xf8, 0xf9, 0xa0, 0x47, 0x9d, 0xbe, 0xdc, 0x75, 0x98, 0xc7, 0xf0, 0x1b, 0x81, 0x0d, 0x7f, 0xd0,
	0x98, 0x25, 0x47, 0x5c, 0xe4, 0xa1, 0x8b, 0x74, 0xd6, 0x60, 0x06, 0xe3, 0x46, 0x8a, 0xff, 0x2b,
	0x70, 0x96, 0x5e, 0x33, 0x18, 0x33, 0x2c, 0xaa, 0xa8, 0x5d, 0x53, 0x51, 0x6d, 0x9b, 0x79, 0xaa,
	0x67, 0x32, 0xdb, 0x15, 0x5f, 0xdf, 0xd4, 0x98, 0xbb, 0xc3, 0x5c, 0xa5, 0xa3, 0xba, 0x34, 0xc8,
	0xa9, 0xec, 0xae, 0x76, 0xa8, 0xa7, 0xae, 0x2a, 0x5d, 0xd5, 0x30, 0x6d, 0x6e, 0x2c, 0x6c, 0xcf,
	0xa5, 0x40, 0xed, 0xaa, 0x8e, 0xba, 0x13, 0x06, 0xbc, 0x94, 0x62, 0xc4, 0xff, 0xb6, 0x35, 0x66,
	0x7f, 0x6e, 0x1a, 0xc2, 0x54, 0x49, 0x31, 0x35, 0x3b, 0x5a, 0xdb, 0xa1, 0x96, 0xda, 0xa7, 0x4e,
	0xdc, 0xa1, 0x96, 0xe2, 0x60, 0x33, 0x5b, 0xa3, 0x6d, 0xd6, 0x71, 0xa9, 0xb3, 0x4b, 0xf5, 0xb6,
	0xeb, 0xa9, 0x5e, 0x4f, 0xe0, 0x21, 0x67, 0x01, 0x7f, 0xe4, 0xd3, 0xba, 0xcd, 0x41, 0xb6, 0xe8,
	0x83, 0x1e, 0x75, 0x3d, 0xd2, 0x81, 0x4a, 0xec, 0xad, 0xdb, 0x65, 0xb6, 0x4b, 0xf1, 0x0d, 0x98,
	0x0f, 0xc8, 0x2c, 0xa1, 0x15, 0x74, 0x71, 0xa1, 0x76, 0x59, 0xce, 0xa4, 0xbc, 0x1c, 0x84, 0xd9,
	0x38, 0xf5, 0xf8, 0xc9, 0xf2, 0x5c, 0x4b, 0x84, 0x20, 0x6b, 0x20, 0xf1, 0x1c, 0xdb, 0xd4, 0x6b,
	0xf8, 0x56, 0x0d, 0x4e, 0x45, 0x20, 0xc0, 0xaf, 0xc0, 0x73, 0x81, 0x24, 0xa6, 0xce, 0x93, 0x9d,
	0x6e, 0x3d, 0xcb, 0x9f, 0x9b, 0x3a, 0xe9, 0xc3, 0xab, 0x89, 0x8e, 0x02, 0xe4, 0x5d, 0x58, 0xd0,
	0x86, 0xaf, 0x05, 0xd2, 0x5a, 0x46, 0xa4, 0x91, 0x80, 0x02, 0x6e, 0x34, 0x18, 0xd1, 0x05, 0xe6,
	0xba, 0x65, 0x25, 0x60, 0xde, 0x02, 0x18, 0x36, 0x85, 0x48, 0x7c, 0x5e, 0x0e, 0x3a, 0x48, 0xf6,
	0x3b, 0x48, 0x0e, 0xba, 0x56, 0x74, 0x90, 0x7c, 0x5b, 0x35, 0xa8, 0xf0, 0x6d, 0x45, 0x3c, 0xc9,
	0xaf, 0x48, 0x30, 0x1c, 0x4d, 0x93, 0xc6, 0xb0, 0x5c, 0x18, 0x43, 0xbc, 0x1d, 0xe3, 0x50, 0xe2,
	0x1c, 0x2e, 0x1c, 0xcb, 0x21, 0x00, 0x16, 0x23, 0x41, 0xe1, 0xf5, 0xa3, 0x2a, 0x31, 0xdb, 0x73,
	0x54, 0xcd, 0xcb, 0x5a, 0x61, 0x7c, 0x09, 0xce, 0x68, 0xc2, 0xa7, 0xad, 0xea, 0xba, 0x43, 0x5d,
	0x97, 0x43, 0x39, 0xdd, 0x7a, 0x21, 0x7c, 0x5f, 0x0f, 0x5e, 0x93, 0x87, 0x08, 0xaa, 0x69, 0x79,
	0x84, 0x5c, 0x1a, 0x2c, 0x6a, 0xb1, 0x2f, 0xa2, 0x34, 0x57, 0xb2, 0x2a, 0x16, 0x73, 0x16, 0xa2,
	0x8d, 0x84, 0x24, 0x0d, 0x38, 0x7f, 0x54, 0xb2, 0xb8, 0x7d, 0xbf, 0x11, 0xb0, 0xca, 0xd0, 0xd9,
	0xdf, 0x20, 0xb8, 0x70, 0x6c, 0x94, 0x09, 0xac, 0xca, 0x45, 0xb3, 0x32, 0x44, 0x11, 0xc7, 0xf0,
	0x14, 0xdd, 0xf2, 0xbf, 0x85, 0x65, 0x4c, 0xc8, 0xf4, 0x14, 0x09, 0x17, 0xd7, 0xfe, 0x3f, 0x21,
	0x58, 0x0e, 0xfb, 0xb2, 0xd9, 0xd1, 0x5a, 0xc1, 0x7e, 0x1d, 0x17, 0x6f, 0x09, 0xc2, 0xca, 0x8f,
	0x2e, 0x00, 0x83, 0x73, 0xb5, 0xa9, 0xe6, 0xc7, 0xba, 0xd3, 0xef, 0x52, 0x0e, 0x65, 0xb1, 0xf6,
	0x5e, 0x46, 0xae, 0xb1, 0x8c, 0x91, 0x30, 0xad, 0x91, 0xb0, 0xe4, 0x11, 0x82, 0x95, 0x74, 0x98,
	0x47, 0xca, 0x3f, 0xef, 0x44, 0x3f, 0x88, 0x3a, 0xaf, 0x4d, 0x03, 0x66, 0x28, 0x7d, 0x3c, 0x26,
	0x31, 0x85, 0x5e, 0x75, 0xcb, 0x4a, 0xd3, 0xab, 0xa8, 0x66, 0x3b, 0x08, 0x49, 0x27, 0xe6, 0x4a,
	0x27, 0x5d, 0x2e, 0x9a, 0x74, 0x71, 0xed, 0xf6, 0x35, 0x02, 0x12, 0xd6, 0xf1, 0x96, 0x7f, 0xdc,
	0x7f, 0x28, 0x4e, 0xfb, 0x8f, 0xf9, 0x61, 0x5f, 0xe8, 0x9e, 0x8b, 0x97, 0x61, 0x81, 0xee, 0x52,
	0xdb, 0x6b, 0xf3, 0xc1, 0x62, 0xa9, 0xbc, 0x82, 0x2e, 0x9e, 0x6a, 0x01, 0x7f, 0xc5, 0x73, 0x93,
	0x1f, 0x10, 0x9c, 0x9b, 0x88, 0x46, 0x68, 0xec, 0x40, 0xc5, 0x1e, 0xff, 0x2c, 0x2a, 0xbb, 0x9e,
	0x51, 0xe9, 0x84, 0x04, 0x42, 0xec, 0xa4, 0xe0, 0xe4, 0xe7, 0x50, 0xa9, 0xba, 0x65, 0x9d, 0xb8,
	0x52, 0xf1, 0x8e, 0x2d, 0x4f, 0xdd, 0xb1, 0x83, 0x50, 0xd0, 0x34, 0xd0, 0xc7, 0x09, 0x5a, 0x3e,
	0x31, 0x41, 0x0b, 0xeb, 0xe1, 0xda, 0xa3, 0x0a, 0x3c, 0xc3, 0x49, 0xe2, 0x5f, 0x10, 0xcc, 0x07,
	0x33, 0x23, 0x7e, 0x27, 0x23, 0xe8, 0xf1, 0x21, 0x56, 0x5a, 0x9f, 0xc6, 0x35, 0xc0, 0x45, 0xd6,
	0xbe, 0xfa, 0xfd, 0xef, 0xef, 0x4a, 0xab, 0x58, 0x11, 0x43, 0xf8, 0xe5, 0x30, 0x48, 0xf8, 0x9c,
	0x32, 0xe5, 0xe3, 0x27, 0x08, 0x16, 0x22, 0x23, 0x16, 0xae, 0xe7, 0x01, 0x91, 0x38, 0x0a, 0x4b,
	0x1b, 0xb3, 0x84, 0x10, 0x7c, 0xde, 0xe7, 0x7c, 0x36, 0xf0, 0xb5, 0xcc, 0x7c, 0xa2, 0x17, 0x12,
	0x65, 0x2f, 0x5c, 0x0b, 0xfb, 0xf8, 0x0f, 0x04, 0x8b, 0x91, 0x0c, 0x75, 0xcb, 0xca, 0xc7, 0x31,
	0x71, 0x74, 0xce, 0xc7, 0x31, 0x79, 0x2c, 0x26, 0x57, 0x39, 0xc7, 0x35, 0x7c, 0x65, 0x2a, 0x8e,
	0xf8, 0x3f, 0x9f, 0x58, 0x7c, 0x1a, 0xb8, 0x9e, 0x57, 0xf9, 0xa4, 0x19, 0x49, 0xda, 0x9c, 0x31,
	0x8a, 0xa0, 0x77, 0x8f, 0xd3, 0xfb, 0x14, 0x7f, 0x92, 0x9d, 0x5e, 0xb8, 0x4b, 0x8d, 0x55, 0x51,
	0xd9, 0x1b, 0xdd, 0xc1, 0xf6, 0xf1, 0xbf, 0x08, 0xce, 0x8c, 0x9e, 0x5a, 0x78, 0x2b, 0x27, 0xf6,
	0x94, 0xa3, 0x5b, 0xda, 0x9e, 0x39, 0x8e, 0x50, 0xe1, 0x26, 0x57, 0x61, 0x1b, 0x6f, 0x66, 0x56,
	0x61, 0xfc, 0xba, 0x2c, 0x84, 0x68, 0xea, 0xfb, 0xf8, 0x1f, 0x04, 0x95, 0xd1, 0x5c, 0x7e, 0x4b,
	0x6f, 0xe5, 0xec, 0xc7, 0x42, 0x78, 0x4f, 0x18, 0x47, 0x48, 0x83, 0xf3, 0xbe, 0x8a, 0xdf, 0x9d,
	0x81, 0x37, 0x7e, 0x58, 0x82, 0x97, 0x53, 0xee, 0x15, 0xf8, 0x66, 0xde, 0x15, 0x38, 0xf1, 0x96,
	0x23, 0xdd, 0x2a, 0x2a, 0x9c, 0xe0, 0x7f, 0x83, 0xf3, 0xdf, 0xc4, 0x8d, 0x02, 0xba, 0x1f, 0x0f,
	0x10, 0xbc, 0x18, 0x4f, 0xe8, 0xd7, 0xfc, 0xfa, 0x4c, 0x90, 0xa7, 0x5a, 0xed, 0xa9, 0xb7, 0x1d,
	0x72, 0x8d, 0xf3, 0x5d, 0xc7, 0x6f, 0x4f, 0xcb, 0x17, 0xff, 0x58, 0x82, 0x4a, 0xc2, 0x51, 0x8e,
	0x9b, 0x39, 0x97, 0x62, 0xfa, 0x90, 0x24, 0x7d, 0x50, 0x44, 0x28, 0x41, 0xd8, 0xe1, 0x84, 0x2d,
	0xfc, 0x45, 0x66, 0xc2, 0x89, 0xff, 0xd6, 0x9a, 0xbc, 0xc9, 0x29, 0x7b, 0x91, 0xc1, 0x75, 0x1f,
	0x7f, 0x5f, 0x82, 0x97, 0x12, 0x30, 0xf9, 0xcd, 0xd0, 0xcc, 0x59, 0xc6, 0xa2, 0x54, 0x9a, 0x3c,
	0xe0, 0x11, 0x9d, 0xab, 0x74, 0x0f, 0x7f, 0x76, 0x92, 0x2a, 0x6d, 0xdc, 0x79, 0x3c, 0xa8, 0xa2,
	0x83, 0x41, 0x15, 0xfd, 0x35, 0xa8, 0xa2, 0x6f, 0x0f, 0xab, 0x73, 0x07, 0x87, 0xd5, 0xb9, 0x3f,
	0x0f, 0xab, 0x73, 0x77, 0xd7, 0x0d, 0xd3, 0xbb, 0xdf, 0xeb, 0xc8, 0x1a, 0xdb, 0x99, 0x8c, 0xe0,
	0xcb, 0x28, 0x06, 0xaf, 0xdf, 0xa5, 0x6e, 0x67, 0x9e, 0x5b, 0xbe, 0xf5, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb3, 0x3c, 0xf2, 0x7f, 0xd3, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a ChainConfig by chain_id.
	ChainConfig(ctx context.Context, in *QueryGetChainConfigRequest, opts ...grpc.CallOption) (*QueryGetChainConfigResponse, error)
	// Queries a list of ChainConfig items.
	ChainConfigAll(ctx context.Context, in *QueryAllChainConfigRequest, opts ...grpc.CallOption) (*QueryAllChainConfigResponse, error)
	// Queries a ContractConfig by chain_id and address.
	ContractConfig(ctx context.Context, in *QueryGetContractConfigRequest, opts ...grpc.CallOption) (*QueryGetContractConfigResponse, error)
	// Queries a list of IbcRelayerConfig items.
	IbcRelayerConfig(ctx context.Context, in *QueryGetIbcRelayerConfigRequest, opts ...grpc.CallOption) (*QueryGetIbcRelayerConfigResponse, error)
	IbcRelayerConfigAll(ctx context.Context, in *QueryAllIbcRelayerConfigRequest, opts ...grpc.CallOption) (*QueryAllIbcRelayerConfigResponse, error)
	// Queries a ContractConfig by chain_id.
	ContractConfigByChainId(ctx context.Context, in *QueryAllContractConfigByChainIdRequest, opts ...grpc.CallOption) (*QueryAllContractConfigByChainIdResponse, error)
	// Queries a list of ContractConfig items.
	ContractConfigAll(ctx context.Context, in *QueryAllContractConfigRequest, opts ...grpc.CallOption) (*QueryAllContractConfigResponse, error)
	// Queries a list of NonceObservedStatus items.
	NonceObservedStatus(ctx context.Context, in *QueryGetNonceObservedStatusRequest, opts ...grpc.CallOption) (*QueryGetNonceObservedStatusResponse, error)
	NonceObservedStatusAll(ctx context.Context, in *QueryAllNonceObservedStatusRequest, opts ...grpc.CallOption) (*QueryAllNonceObservedStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainConfig(ctx context.Context, in *QueryGetChainConfigRequest, opts ...grpc.CallOption) (*QueryGetChainConfigResponse, error) {
	out := new(QueryGetChainConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ChainConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainConfigAll(ctx context.Context, in *QueryAllChainConfigRequest, opts ...grpc.CallOption) (*QueryAllChainConfigResponse, error) {
	out := new(QueryAllChainConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ChainConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractConfig(ctx context.Context, in *QueryGetContractConfigRequest, opts ...grpc.CallOption) (*QueryGetContractConfigResponse, error) {
	out := new(QueryGetContractConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ContractConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IbcRelayerConfig(ctx context.Context, in *QueryGetIbcRelayerConfigRequest, opts ...grpc.CallOption) (*QueryGetIbcRelayerConfigResponse, error) {
	out := new(QueryGetIbcRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/IbcRelayerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IbcRelayerConfigAll(ctx context.Context, in *QueryAllIbcRelayerConfigRequest, opts ...grpc.CallOption) (*QueryAllIbcRelayerConfigResponse, error) {
	out := new(QueryAllIbcRelayerConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/IbcRelayerConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractConfigByChainId(ctx context.Context, in *QueryAllContractConfigByChainIdRequest, opts ...grpc.CallOption) (*QueryAllContractConfigByChainIdResponse, error) {
	out := new(QueryAllContractConfigByChainIdResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ContractConfigByChainId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractConfigAll(ctx context.Context, in *QueryAllContractConfigRequest, opts ...grpc.CallOption) (*QueryAllContractConfigResponse, error) {
	out := new(QueryAllContractConfigResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/ContractConfigAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NonceObservedStatus(ctx context.Context, in *QueryGetNonceObservedStatusRequest, opts ...grpc.CallOption) (*QueryGetNonceObservedStatusResponse, error) {
	out := new(QueryGetNonceObservedStatusResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/NonceObservedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NonceObservedStatusAll(ctx context.Context, in *QueryAllNonceObservedStatusRequest, opts ...grpc.CallOption) (*QueryAllNonceObservedStatusResponse, error) {
	out := new(QueryAllNonceObservedStatusResponse)
	err := c.cc.Invoke(ctx, "/routerprotocol.routerchain.multichain.Query/NonceObservedStatusAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a ChainConfig by chain_id.
	ChainConfig(context.Context, *QueryGetChainConfigRequest) (*QueryGetChainConfigResponse, error)
	// Queries a list of ChainConfig items.
	ChainConfigAll(context.Context, *QueryAllChainConfigRequest) (*QueryAllChainConfigResponse, error)
	// Queries a ContractConfig by chain_id and address.
	ContractConfig(context.Context, *QueryGetContractConfigRequest) (*QueryGetContractConfigResponse, error)
	// Queries a list of IbcRelayerConfig items.
	IbcRelayerConfig(context.Context, *QueryGetIbcRelayerConfigRequest) (*QueryGetIbcRelayerConfigResponse, error)
	IbcRelayerConfigAll(context.Context, *QueryAllIbcRelayerConfigRequest) (*QueryAllIbcRelayerConfigResponse, error)
	// Queries a ContractConfig by chain_id.
	ContractConfigByChainId(context.Context, *QueryAllContractConfigByChainIdRequest) (*QueryAllContractConfigByChainIdResponse, error)
	// Queries a list of ContractConfig items.
	ContractConfigAll(context.Context, *QueryAllContractConfigRequest) (*QueryAllContractConfigResponse, error)
	// Queries a list of NonceObservedStatus items.
	NonceObservedStatus(context.Context, *QueryGetNonceObservedStatusRequest) (*QueryGetNonceObservedStatusResponse, error)
	NonceObservedStatusAll(context.Context, *QueryAllNonceObservedStatusRequest) (*QueryAllNonceObservedStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ChainConfig(ctx context.Context, req *QueryGetChainConfigRequest) (*QueryGetChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainConfig not implemented")
}
func (*UnimplementedQueryServer) ChainConfigAll(ctx context.Context, req *QueryAllChainConfigRequest) (*QueryAllChainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainConfigAll not implemented")
}
func (*UnimplementedQueryServer) ContractConfig(ctx context.Context, req *QueryGetContractConfigRequest) (*QueryGetContractConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractConfig not implemented")
}
func (*UnimplementedQueryServer) IbcRelayerConfig(ctx context.Context, req *QueryGetIbcRelayerConfigRequest) (*QueryGetIbcRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcRelayerConfig not implemented")
}
func (*UnimplementedQueryServer) IbcRelayerConfigAll(ctx context.Context, req *QueryAllIbcRelayerConfigRequest) (*QueryAllIbcRelayerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcRelayerConfigAll not implemented")
}
func (*UnimplementedQueryServer) ContractConfigByChainId(ctx context.Context, req *QueryAllContractConfigByChainIdRequest) (*QueryAllContractConfigByChainIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractConfigByChainId not implemented")
}
func (*UnimplementedQueryServer) ContractConfigAll(ctx context.Context, req *QueryAllContractConfigRequest) (*QueryAllContractConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractConfigAll not implemented")
}
func (*UnimplementedQueryServer) NonceObservedStatus(ctx context.Context, req *QueryGetNonceObservedStatusRequest) (*QueryGetNonceObservedStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonceObservedStatus not implemented")
}
func (*UnimplementedQueryServer) NonceObservedStatusAll(ctx context.Context, req *QueryAllNonceObservedStatusRequest) (*QueryAllNonceObservedStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonceObservedStatusAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ChainConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainConfig(ctx, req.(*QueryGetChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ChainConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainConfigAll(ctx, req.(*QueryAllChainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContractConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ContractConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractConfig(ctx, req.(*QueryGetContractConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IbcRelayerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIbcRelayerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IbcRelayerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/IbcRelayerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IbcRelayerConfig(ctx, req.(*QueryGetIbcRelayerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IbcRelayerConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIbcRelayerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IbcRelayerConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/IbcRelayerConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IbcRelayerConfigAll(ctx, req.(*QueryAllIbcRelayerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractConfigByChainId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractConfigByChainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractConfigByChainId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ContractConfigByChainId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractConfigByChainId(ctx, req.(*QueryAllContractConfigByChainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractConfigAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContractConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractConfigAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/ContractConfigAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractConfigAll(ctx, req.(*QueryAllContractConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NonceObservedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNonceObservedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NonceObservedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/NonceObservedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NonceObservedStatus(ctx, req.(*QueryGetNonceObservedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NonceObservedStatusAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNonceObservedStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NonceObservedStatusAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerprotocol.routerchain.multichain.Query/NonceObservedStatusAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NonceObservedStatusAll(ctx, req.(*QueryAllNonceObservedStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerprotocol.routerchain.multichain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ChainConfig",
			Handler:    _Query_ChainConfig_Handler,
		},
		{
			MethodName: "ChainConfigAll",
			Handler:    _Query_ChainConfigAll_Handler,
		},
		{
			MethodName: "ContractConfig",
			Handler:    _Query_ContractConfig_Handler,
		},
		{
			MethodName: "IbcRelayerConfig",
			Handler:    _Query_IbcRelayerConfig_Handler,
		},
		{
			MethodName: "IbcRelayerConfigAll",
			Handler:    _Query_IbcRelayerConfigAll_Handler,
		},
		{
			MethodName: "ContractConfigByChainId",
			Handler:    _Query_ContractConfigByChainId_Handler,
		},
		{
			MethodName: "ContractConfigAll",
			Handler:    _Query_ContractConfigAll_Handler,
		},
		{
			MethodName: "NonceObservedStatus",
			Handler:    _Query_NonceObservedStatus_Handler,
		},
		{
			MethodName: "NonceObservedStatusAll",
			Handler:    _Query_NonceObservedStatusAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerchain/multichain/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllChainConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainConfig) > 0 {
		for iNdEx := len(m.ChainConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContractConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContractConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContractConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ContractConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigByChainIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigByChainIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigByChainIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigByChainIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigByChainIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigByChainIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractConfig) > 0 {
		for iNdEx := len(m.ContractConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContractConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContractConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContractConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractConfig) > 0 {
		for iNdEx := len(m.ContractConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIbcRelayerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIbcRelayerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIbcRelayerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConnectionType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIbcRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIbcRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIbcRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RelayerConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIbcRelayerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIbcRelayerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIbcRelayerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIbcRelayerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIbcRelayerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIbcRelayerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RelayerConfig) > 0 {
		for iNdEx := len(m.RelayerConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RelayerConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNonceObservedStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNonceObservedStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNonceObservedStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNonceObservedStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNonceObservedStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNonceObservedStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NonceObservedStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNonceObservedStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNonceObservedStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNonceObservedStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNonceObservedStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNonceObservedStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNonceObservedStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NonceObservedStatus) > 0 {
		for iNdEx := len(m.NonceObservedStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonceObservedStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllChainConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainConfig) > 0 {
		for _, e := range m.ChainConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContractConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContractConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllContractConfigByChainIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractConfigByChainIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractConfig) > 0 {
		for _, e := range m.ContractConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllContractConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContractConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractConfig) > 0 {
		for _, e := range m.ContractConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIbcRelayerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ConnectionType != 0 {
		n += 1 + sovQuery(uint64(m.ConnectionType))
	}
	return n
}

func (m *QueryGetIbcRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RelayerConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIbcRelayerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIbcRelayerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RelayerConfig) > 0 {
		for _, e := range m.RelayerConfig {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNonceObservedStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryGetNonceObservedStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NonceObservedStatus.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNonceObservedStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNonceObservedStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NonceObservedStatus) > 0 {
		for _, e := range m.NonceObservedStatus {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainConfig = append(m.ChainConfig, ChainConfig{})
			if err := m.ChainConfig[len(m.ChainConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContractConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContractConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContractConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigByChainIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigByChainIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigByChainIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractConfig = append(m.ContractConfig, ContractConfig{})
			if err := m.ContractConfig[len(m.ContractConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContractConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContractConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContractConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractConfig = append(m.ContractConfig, ContractConfig{})
			if err := m.ContractConfig[len(m.ContractConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIbcRelayerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIbcRelayerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIbcRelayerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionType", wireType)
			}
			m.ConnectionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionType |= IbcRelayerConnectionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIbcRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIbcRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIbcRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIbcRelayerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIbcRelayerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIbcRelayerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIbcRelayerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIbcRelayerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIbcRelayerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerConfig = append(m.RelayerConfig, IbcRelayerConfig{})
			if err := m.RelayerConfig[len(m.RelayerConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNonceObservedStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNonceObservedStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNonceObservedStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNonceObservedStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNonceObservedStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNonceObservedStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceObservedStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NonceObservedStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNonceObservedStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNonceObservedStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNonceObservedStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNonceObservedStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNonceObservedStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNonceObservedStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceObservedStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonceObservedStatus = append(m.NonceObservedStatus, NonceObservedStatus{})
			if err := m.NonceObservedStatus[len(m.NonceObservedStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
