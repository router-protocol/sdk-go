// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: routerchain/multichain/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCreateChainConfig struct {
	ChainId                 string    `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ChainName               string    `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Symbol                  string    `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	NativeDecimals          int64     `protobuf:"varint,4,opt,name=native_decimals,json=nativeDecimals,proto3" json:"native_decimals,omitempty"`
	ChainType               ChainType `protobuf:"varint,5,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ConfirmationsRequired   uint64    `protobuf:"varint,6,opt,name=confirmationsRequired,proto3" json:"confirmationsRequired,omitempty"`
	LastObservedValsetNonce uint64    `protobuf:"varint,7,opt,name=lastObservedValsetNonce,proto3" json:"lastObservedValsetNonce,omitempty"`
	ChainEnabled            bool      `protobuf:"varint,8,opt,name=chain_enabled,json=chainEnabled,proto3" json:"chain_enabled,omitempty"`
}

func (m *EventCreateChainConfig) Reset()         { *m = EventCreateChainConfig{} }
func (m *EventCreateChainConfig) String() string { return proto.CompactTextString(m) }
func (*EventCreateChainConfig) ProtoMessage()    {}
func (*EventCreateChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{0}
}
func (m *EventCreateChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateChainConfig.Merge(m, src)
}
func (m *EventCreateChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateChainConfig proto.InternalMessageInfo

func (m *EventCreateChainConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCreateChainConfig) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *EventCreateChainConfig) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventCreateChainConfig) GetNativeDecimals() int64 {
	if m != nil {
		return m.NativeDecimals
	}
	return 0
}

func (m *EventCreateChainConfig) GetChainType() ChainType {
	if m != nil {
		return m.ChainType
	}
	return CHAIN_TYPE_NONE
}

func (m *EventCreateChainConfig) GetConfirmationsRequired() uint64 {
	if m != nil {
		return m.ConfirmationsRequired
	}
	return 0
}

func (m *EventCreateChainConfig) GetLastObservedValsetNonce() uint64 {
	if m != nil {
		return m.LastObservedValsetNonce
	}
	return 0
}

func (m *EventCreateChainConfig) GetChainEnabled() bool {
	if m != nil {
		return m.ChainEnabled
	}
	return false
}

type EventUpdatedChainConfig struct {
	ChainId                 string    `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ChainName               string    `protobuf:"bytes,2,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Symbol                  string    `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	NativeDecimals          int64     `protobuf:"varint,4,opt,name=native_decimals,json=nativeDecimals,proto3" json:"native_decimals,omitempty"`
	ChainType               ChainType `protobuf:"varint,5,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
	ConfirmationsRequired   uint64    `protobuf:"varint,6,opt,name=confirmationsRequired,proto3" json:"confirmationsRequired,omitempty"`
	LastObservedValsetNonce uint64    `protobuf:"varint,7,opt,name=lastObservedValsetNonce,proto3" json:"lastObservedValsetNonce,omitempty"`
	ChainEnabled            bool      `protobuf:"varint,8,opt,name=chain_enabled,json=chainEnabled,proto3" json:"chain_enabled,omitempty"`
}

func (m *EventUpdatedChainConfig) Reset()         { *m = EventUpdatedChainConfig{} }
func (m *EventUpdatedChainConfig) String() string { return proto.CompactTextString(m) }
func (*EventUpdatedChainConfig) ProtoMessage()    {}
func (*EventUpdatedChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{1}
}
func (m *EventUpdatedChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdatedChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdatedChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdatedChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdatedChainConfig.Merge(m, src)
}
func (m *EventUpdatedChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdatedChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdatedChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdatedChainConfig proto.InternalMessageInfo

func (m *EventUpdatedChainConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventUpdatedChainConfig) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *EventUpdatedChainConfig) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventUpdatedChainConfig) GetNativeDecimals() int64 {
	if m != nil {
		return m.NativeDecimals
	}
	return 0
}

func (m *EventUpdatedChainConfig) GetChainType() ChainType {
	if m != nil {
		return m.ChainType
	}
	return CHAIN_TYPE_NONE
}

func (m *EventUpdatedChainConfig) GetConfirmationsRequired() uint64 {
	if m != nil {
		return m.ConfirmationsRequired
	}
	return 0
}

func (m *EventUpdatedChainConfig) GetLastObservedValsetNonce() uint64 {
	if m != nil {
		return m.LastObservedValsetNonce
	}
	return 0
}

func (m *EventUpdatedChainConfig) GetChainEnabled() bool {
	if m != nil {
		return m.ChainEnabled
	}
	return false
}

type EventDeletedChainConfig struct {
	ChainId   string    `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ChainType ChainType `protobuf:"varint,2,opt,name=chainType,proto3,enum=routerprotocol.routerchain.multichain.ChainType" json:"chainType,omitempty"`
}

func (m *EventDeletedChainConfig) Reset()         { *m = EventDeletedChainConfig{} }
func (m *EventDeletedChainConfig) String() string { return proto.CompactTextString(m) }
func (*EventDeletedChainConfig) ProtoMessage()    {}
func (*EventDeletedChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{2}
}
func (m *EventDeletedChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeletedChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeletedChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeletedChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeletedChainConfig.Merge(m, src)
}
func (m *EventDeletedChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventDeletedChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeletedChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeletedChainConfig proto.InternalMessageInfo

func (m *EventDeletedChainConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventDeletedChainConfig) GetChainType() ChainType {
	if m != nil {
		return m.ChainType
	}
	return CHAIN_TYPE_NONE
}

type EventCreateContractConfig struct {
	ChainId                       string                                 `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ContractAddress               string                                 `protobuf:"bytes,2,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	ContractHeight                uint64                                 `protobuf:"varint,3,opt,name=contractHeight,proto3" json:"contractHeight,omitempty"`
	LastObservedEventNonce        uint64                                 `protobuf:"varint,4,opt,name=lastObservedEventNonce,proto3" json:"lastObservedEventNonce,omitempty"`
	LastObservedEventBlockHeight  uint64                                 `protobuf:"varint,5,opt,name=lastObservedEventBlockHeight,proto3" json:"lastObservedEventBlockHeight,omitempty"`
	ContractType                  ContractType                           `protobuf:"varint,6,opt,name=ContractType,proto3,enum=routerprotocol.routerchain.multichain.ContractType" json:"ContractType,omitempty"`
	ClaimSlashingEnabled          bool                                   `protobuf:"varint,7,opt,name=claimSlashingEnabled,proto3" json:"claimSlashingEnabled,omitempty"`
	ClaimSlashingWindow           uint64                                 `protobuf:"varint,8,opt,name=claimSlashingWindow,proto3" json:"claimSlashingWindow,omitempty"`
	SlashFractionMissingClaim     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=slash_fraction_missing_claim,json=slashFractionMissingClaim,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_missing_claim"`
	SlashFractionConflictingClaim github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=slash_fraction_conflicting_claim,json=slashFractionConflictingClaim,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_conflicting_claim"`
	ContractEnabled               bool                                   `protobuf:"varint,11,opt,name=contract_enabled,json=contractEnabled,proto3" json:"contract_enabled,omitempty"`
}

func (m *EventCreateContractConfig) Reset()         { *m = EventCreateContractConfig{} }
func (m *EventCreateContractConfig) String() string { return proto.CompactTextString(m) }
func (*EventCreateContractConfig) ProtoMessage()    {}
func (*EventCreateContractConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{3}
}
func (m *EventCreateContractConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateContractConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateContractConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateContractConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateContractConfig.Merge(m, src)
}
func (m *EventCreateContractConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateContractConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateContractConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateContractConfig proto.InternalMessageInfo

func (m *EventCreateContractConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCreateContractConfig) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *EventCreateContractConfig) GetContractHeight() uint64 {
	if m != nil {
		return m.ContractHeight
	}
	return 0
}

func (m *EventCreateContractConfig) GetLastObservedEventNonce() uint64 {
	if m != nil {
		return m.LastObservedEventNonce
	}
	return 0
}

func (m *EventCreateContractConfig) GetLastObservedEventBlockHeight() uint64 {
	if m != nil {
		return m.LastObservedEventBlockHeight
	}
	return 0
}

func (m *EventCreateContractConfig) GetContractType() ContractType {
	if m != nil {
		return m.ContractType
	}
	return GATEWAY
}

func (m *EventCreateContractConfig) GetClaimSlashingEnabled() bool {
	if m != nil {
		return m.ClaimSlashingEnabled
	}
	return false
}

func (m *EventCreateContractConfig) GetClaimSlashingWindow() uint64 {
	if m != nil {
		return m.ClaimSlashingWindow
	}
	return 0
}

func (m *EventCreateContractConfig) GetContractEnabled() bool {
	if m != nil {
		return m.ContractEnabled
	}
	return false
}

type EventUpdatedContractConfig struct {
	ChainId                       string                                 `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ContractAddress               string                                 `protobuf:"bytes,2,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	ContractHeight                uint64                                 `protobuf:"varint,3,opt,name=contractHeight,proto3" json:"contractHeight,omitempty"`
	LastObservedEventNonce        uint64                                 `protobuf:"varint,4,opt,name=lastObservedEventNonce,proto3" json:"lastObservedEventNonce,omitempty"`
	LastObservedEventBlockHeight  uint64                                 `protobuf:"varint,5,opt,name=lastObservedEventBlockHeight,proto3" json:"lastObservedEventBlockHeight,omitempty"`
	ContractType                  ContractType                           `protobuf:"varint,6,opt,name=ContractType,proto3,enum=routerprotocol.routerchain.multichain.ContractType" json:"ContractType,omitempty"`
	ClaimSlashingEnabled          bool                                   `protobuf:"varint,7,opt,name=claimSlashingEnabled,proto3" json:"claimSlashingEnabled,omitempty"`
	ClaimSlashingWindow           uint64                                 `protobuf:"varint,8,opt,name=claimSlashingWindow,proto3" json:"claimSlashingWindow,omitempty"`
	SlashFractionMissingClaim     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=slash_fraction_missing_claim,json=slashFractionMissingClaim,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_missing_claim"`
	SlashFractionConflictingClaim github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=slash_fraction_conflicting_claim,json=slashFractionConflictingClaim,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_conflicting_claim"`
	ContractEnabled               bool                                   `protobuf:"varint,11,opt,name=contract_enabled,json=contractEnabled,proto3" json:"contract_enabled,omitempty"`
}

func (m *EventUpdatedContractConfig) Reset()         { *m = EventUpdatedContractConfig{} }
func (m *EventUpdatedContractConfig) String() string { return proto.CompactTextString(m) }
func (*EventUpdatedContractConfig) ProtoMessage()    {}
func (*EventUpdatedContractConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{4}
}
func (m *EventUpdatedContractConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdatedContractConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdatedContractConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdatedContractConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdatedContractConfig.Merge(m, src)
}
func (m *EventUpdatedContractConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdatedContractConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdatedContractConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdatedContractConfig proto.InternalMessageInfo

func (m *EventUpdatedContractConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventUpdatedContractConfig) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *EventUpdatedContractConfig) GetContractHeight() uint64 {
	if m != nil {
		return m.ContractHeight
	}
	return 0
}

func (m *EventUpdatedContractConfig) GetLastObservedEventNonce() uint64 {
	if m != nil {
		return m.LastObservedEventNonce
	}
	return 0
}

func (m *EventUpdatedContractConfig) GetLastObservedEventBlockHeight() uint64 {
	if m != nil {
		return m.LastObservedEventBlockHeight
	}
	return 0
}

func (m *EventUpdatedContractConfig) GetContractType() ContractType {
	if m != nil {
		return m.ContractType
	}
	return GATEWAY
}

func (m *EventUpdatedContractConfig) GetClaimSlashingEnabled() bool {
	if m != nil {
		return m.ClaimSlashingEnabled
	}
	return false
}

func (m *EventUpdatedContractConfig) GetClaimSlashingWindow() uint64 {
	if m != nil {
		return m.ClaimSlashingWindow
	}
	return 0
}

func (m *EventUpdatedContractConfig) GetContractEnabled() bool {
	if m != nil {
		return m.ContractEnabled
	}
	return false
}

type EventDeletedContractConfig struct {
	ChainId         string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *EventDeletedContractConfig) Reset()         { *m = EventDeletedContractConfig{} }
func (m *EventDeletedContractConfig) String() string { return proto.CompactTextString(m) }
func (*EventDeletedContractConfig) ProtoMessage()    {}
func (*EventDeletedContractConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{5}
}
func (m *EventDeletedContractConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeletedContractConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeletedContractConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeletedContractConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeletedContractConfig.Merge(m, src)
}
func (m *EventDeletedContractConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventDeletedContractConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeletedContractConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeletedContractConfig proto.InternalMessageInfo

func (m *EventDeletedContractConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventDeletedContractConfig) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

type EventCreateIbcRelayerConfig struct {
	ChainId        string                   `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	RelayerName    string                   `protobuf:"bytes,2,opt,name=relayerName,proto3" json:"relayerName,omitempty"`
	Channel        string                   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	RelayerEnabled bool                     `protobuf:"varint,4,opt,name=relayerEnabled,proto3" json:"relayerEnabled,omitempty"`
	Creator        string                   `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionType IbcRelayerConnectionType `protobuf:"varint,6,opt,name=connectionType,proto3,enum=routerprotocol.routerchain.multichain.IbcRelayerConnectionType" json:"connectionType,omitempty"`
}

func (m *EventCreateIbcRelayerConfig) Reset()         { *m = EventCreateIbcRelayerConfig{} }
func (m *EventCreateIbcRelayerConfig) String() string { return proto.CompactTextString(m) }
func (*EventCreateIbcRelayerConfig) ProtoMessage()    {}
func (*EventCreateIbcRelayerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{6}
}
func (m *EventCreateIbcRelayerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateIbcRelayerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateIbcRelayerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateIbcRelayerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateIbcRelayerConfig.Merge(m, src)
}
func (m *EventCreateIbcRelayerConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateIbcRelayerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateIbcRelayerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateIbcRelayerConfig proto.InternalMessageInfo

func (m *EventCreateIbcRelayerConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventCreateIbcRelayerConfig) GetRelayerName() string {
	if m != nil {
		return m.RelayerName
	}
	return ""
}

func (m *EventCreateIbcRelayerConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *EventCreateIbcRelayerConfig) GetRelayerEnabled() bool {
	if m != nil {
		return m.RelayerEnabled
	}
	return false
}

func (m *EventCreateIbcRelayerConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventCreateIbcRelayerConfig) GetConnectionType() IbcRelayerConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return GATEWAY_ENDPOINT
}

type EventUpdateIbcRelayerConfig struct {
	ChainId        string                   `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	RelayerName    string                   `protobuf:"bytes,2,opt,name=relayerName,proto3" json:"relayerName,omitempty"`
	Channel        string                   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	RelayerEnabled bool                     `protobuf:"varint,4,opt,name=relayerEnabled,proto3" json:"relayerEnabled,omitempty"`
	Creator        string                   `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionType IbcRelayerConnectionType `protobuf:"varint,6,opt,name=connectionType,proto3,enum=routerprotocol.routerchain.multichain.IbcRelayerConnectionType" json:"connectionType,omitempty"`
}

func (m *EventUpdateIbcRelayerConfig) Reset()         { *m = EventUpdateIbcRelayerConfig{} }
func (m *EventUpdateIbcRelayerConfig) String() string { return proto.CompactTextString(m) }
func (*EventUpdateIbcRelayerConfig) ProtoMessage()    {}
func (*EventUpdateIbcRelayerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{7}
}
func (m *EventUpdateIbcRelayerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateIbcRelayerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateIbcRelayerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateIbcRelayerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateIbcRelayerConfig.Merge(m, src)
}
func (m *EventUpdateIbcRelayerConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateIbcRelayerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateIbcRelayerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateIbcRelayerConfig proto.InternalMessageInfo

func (m *EventUpdateIbcRelayerConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventUpdateIbcRelayerConfig) GetRelayerName() string {
	if m != nil {
		return m.RelayerName
	}
	return ""
}

func (m *EventUpdateIbcRelayerConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *EventUpdateIbcRelayerConfig) GetRelayerEnabled() bool {
	if m != nil {
		return m.RelayerEnabled
	}
	return false
}

func (m *EventUpdateIbcRelayerConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventUpdateIbcRelayerConfig) GetConnectionType() IbcRelayerConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return GATEWAY_ENDPOINT
}

type EventDeleteIbcRelayerConfig struct {
	ChainId        string                   `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	RelayerName    string                   `protobuf:"bytes,2,opt,name=relayerName,proto3" json:"relayerName,omitempty"`
	Channel        string                   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	RelayerEnabled bool                     `protobuf:"varint,4,opt,name=relayerEnabled,proto3" json:"relayerEnabled,omitempty"`
	Creator        string                   `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionType IbcRelayerConnectionType `protobuf:"varint,6,opt,name=connectionType,proto3,enum=routerprotocol.routerchain.multichain.IbcRelayerConnectionType" json:"connectionType,omitempty"`
}

func (m *EventDeleteIbcRelayerConfig) Reset()         { *m = EventDeleteIbcRelayerConfig{} }
func (m *EventDeleteIbcRelayerConfig) String() string { return proto.CompactTextString(m) }
func (*EventDeleteIbcRelayerConfig) ProtoMessage()    {}
func (*EventDeleteIbcRelayerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a46b03e5f708ac7, []int{8}
}
func (m *EventDeleteIbcRelayerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteIbcRelayerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteIbcRelayerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteIbcRelayerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteIbcRelayerConfig.Merge(m, src)
}
func (m *EventDeleteIbcRelayerConfig) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteIbcRelayerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteIbcRelayerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteIbcRelayerConfig proto.InternalMessageInfo

func (m *EventDeleteIbcRelayerConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventDeleteIbcRelayerConfig) GetRelayerName() string {
	if m != nil {
		return m.RelayerName
	}
	return ""
}

func (m *EventDeleteIbcRelayerConfig) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *EventDeleteIbcRelayerConfig) GetRelayerEnabled() bool {
	if m != nil {
		return m.RelayerEnabled
	}
	return false
}

func (m *EventDeleteIbcRelayerConfig) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventDeleteIbcRelayerConfig) GetConnectionType() IbcRelayerConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return GATEWAY_ENDPOINT
}

func init() {
	proto.RegisterType((*EventCreateChainConfig)(nil), "routerprotocol.routerchain.multichain.EventCreateChainConfig")
	proto.RegisterType((*EventUpdatedChainConfig)(nil), "routerprotocol.routerchain.multichain.EventUpdatedChainConfig")
	proto.RegisterType((*EventDeletedChainConfig)(nil), "routerprotocol.routerchain.multichain.EventDeletedChainConfig")
	proto.RegisterType((*EventCreateContractConfig)(nil), "routerprotocol.routerchain.multichain.EventCreateContractConfig")
	proto.RegisterType((*EventUpdatedContractConfig)(nil), "routerprotocol.routerchain.multichain.EventUpdatedContractConfig")
	proto.RegisterType((*EventDeletedContractConfig)(nil), "routerprotocol.routerchain.multichain.EventDeletedContractConfig")
	proto.RegisterType((*EventCreateIbcRelayerConfig)(nil), "routerprotocol.routerchain.multichain.EventCreateIbcRelayerConfig")
	proto.RegisterType((*EventUpdateIbcRelayerConfig)(nil), "routerprotocol.routerchain.multichain.EventUpdateIbcRelayerConfig")
	proto.RegisterType((*EventDeleteIbcRelayerConfig)(nil), "routerprotocol.routerchain.multichain.EventDeleteIbcRelayerConfig")
}

func init() {
	proto.RegisterFile("routerchain/multichain/event.proto", fileDescriptor_2a46b03e5f708ac7)
}

var fileDescriptor_2a46b03e5f708ac7 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0x8e, 0xb3, 0x49, 0xb6, 0x9d, 0x2d, 0x5d, 0x34, 0x2c, 0x5d, 0xb7, 0x94, 0xac, 0x15, 0xc4,
	0x36, 0x3d, 0xd4, 0xee, 0x07, 0x42, 0x88, 0x0b, 0x22, 0x69, 0x11, 0x3d, 0x50, 0x24, 0x53, 0xa8,
	0xc4, 0x25, 0x8c, 0xc7, 0x53, 0x67, 0x54, 0x7b, 0x26, 0x78, 0x26, 0x29, 0x39, 0xf3, 0x07, 0xf8,
	0x05, 0xfc, 0x9e, 0x1e, 0x7b, 0xa3, 0xe2, 0x50, 0xa1, 0xf6, 0x3f, 0xc0, 0x15, 0x79, 0x66, 0xdc,
	0x38, 0xa1, 0x69, 0x23, 0x40, 0x1c, 0x50, 0x2e, 0xed, 0xbc, 0x5f, 0xcf, 0x3b, 0x79, 0xfc, 0xbc,
	0xe3, 0x31, 0x68, 0xa4, 0xbc, 0x2f, 0x49, 0x8a, 0xbb, 0x88, 0x32, 0x2f, 0xe9, 0xc7, 0x92, 0xea,
	0x25, 0x19, 0x10, 0x26, 0xdd, 0x5e, 0xca, 0x25, 0x87, 0xef, 0xeb, 0x1c, 0x65, 0x60, 0x1e, 0xbb,
	0x85, 0x12, 0x77, 0x54, 0xb2, 0xb6, 0x31, 0x05, 0x4a, 0xfd, 0xed, 0xc8, 0x61, 0x8f, 0x68, 0xbc,
	0xb5, 0xcd, 0x07, 0x13, 0x31, 0x67, 0xa7, 0x34, 0x32, 0xa9, 0xde, 0x94, 0x54, 0x1a, 0xe0, 0x4e,
	0x4a, 0x62, 0x34, 0x24, 0xe9, 0x78, 0x41, 0x1d, 0x73, 0x91, 0x70, 0xe1, 0x05, 0x48, 0x10, 0x6f,
	0xb0, 0x13, 0x10, 0x89, 0x76, 0x3c, 0xcc, 0x29, 0x33, 0xf1, 0x17, 0x11, 0x8f, 0xb8, 0x5a, 0x7a,
	0xd9, 0xca, 0x78, 0x57, 0x23, 0xce, 0xa3, 0x98, 0x78, 0xca, 0x0a, 0xfa, 0xa7, 0x1e, 0x62, 0x43,
	0x1d, 0x6a, 0xfc, 0x5e, 0x06, 0x2b, 0x07, 0x19, 0x19, 0xed, 0x94, 0x20, 0x49, 0xda, 0x59, 0xfb,
	0xb6, 0xea, 0x08, 0x6d, 0xf0, 0x54, 0xed, 0xe6, 0x30, 0xb4, 0x2d, 0xc7, 0x6a, 0x2e, 0xfa, 0xb9,
	0x09, 0xd7, 0xc1, 0xa2, 0x5a, 0x1e, 0xa1, 0x84, 0xd8, 0x65, 0x15, 0x1b, 0x39, 0xe0, 0x0a, 0xa8,
	0x89, 0x61, 0x12, 0xf0, 0xd8, 0x7e, 0xa2, 0x42, 0xc6, 0x82, 0x1b, 0xe0, 0x39, 0x43, 0x92, 0x0e,
	0x48, 0x27, 0x24, 0x98, 0x26, 0x28, 0x16, 0x76, 0xc5, 0xb1, 0x9a, 0x4f, 0xfc, 0x65, 0xed, 0xde,
	0x37, 0x5e, 0x78, 0x64, 0xe0, 0x8f, 0x87, 0x3d, 0x62, 0x57, 0x1d, 0xab, 0xb9, 0xbc, 0xbb, 0xed,
	0xce, 0xf4, 0x90, 0xdc, 0x76, 0x5e, 0xe7, 0x8f, 0x20, 0xe0, 0x07, 0xe0, 0x6d, 0x45, 0x62, 0x9a,
	0x20, 0x49, 0x39, 0x13, 0x3e, 0xf9, 0xbe, 0x4f, 0x53, 0x12, 0xda, 0x35, 0xc7, 0x6a, 0x56, 0xfc,
	0xfb, 0x83, 0xf0, 0x23, 0xf0, 0x32, 0x46, 0x42, 0x7e, 0x19, 0x08, 0x92, 0x0e, 0x48, 0xf8, 0x0d,
	0x8a, 0x05, 0x91, 0x47, 0x9c, 0x61, 0x62, 0x3f, 0x55, 0x75, 0xd3, 0xc2, 0xf0, 0x3d, 0xf0, 0x86,
	0x7e, 0xd6, 0x84, 0xa1, 0x20, 0x26, 0xa1, 0xbd, 0xe0, 0x58, 0xcd, 0x05, 0x7f, 0x49, 0x39, 0x0f,
	0xb4, 0xaf, 0xf1, 0x47, 0x19, 0xbc, 0x54, 0xc4, 0x7f, 0xdd, 0x0b, 0x91, 0x24, 0xe1, 0x9c, 0xf9,
	0xff, 0x8a, 0xf9, 0x1f, 0x2d, 0xc3, 0xfc, 0x3e, 0x89, 0xc9, 0xcc, 0xcc, 0x8f, 0x51, 0x53, 0xfe,
	0xc7, 0xd4, 0x34, 0x7e, 0xa9, 0x82, 0xd5, 0xe2, 0xe0, 0x71, 0x26, 0x53, 0x84, 0xe5, 0xa3, 0xfb,
	0x68, 0x82, 0xe7, 0xd8, 0xe4, 0x7e, 0x1a, 0x86, 0x29, 0x11, 0xc2, 0xe8, 0x60, 0xd2, 0x0d, 0x5f,
	0x83, 0xe5, 0xdc, 0xf5, 0x39, 0xa1, 0x51, 0x57, 0x2a, 0x55, 0x54, 0xfc, 0x09, 0x2f, 0xfc, 0x10,
	0xac, 0x14, 0xf9, 0x54, 0x9b, 0xd2, 0x6c, 0x57, 0x54, 0xfe, 0x94, 0x28, 0x6c, 0x81, 0xf5, 0xbf,
	0x44, 0x5a, 0x31, 0xc7, 0x67, 0xa6, 0x5b, 0x55, 0x55, 0x3f, 0x98, 0x03, 0x4f, 0xc0, 0x52, 0xfe,
	0xcb, 0x15, 0xb1, 0x35, 0x45, 0xec, 0xde, 0xac, 0xc4, 0x16, 0x4a, 0xfd, 0x31, 0x20, 0xb8, 0x0b,
	0x5e, 0xe0, 0x18, 0xd1, 0xe4, 0xab, 0x18, 0x89, 0x2e, 0x65, 0x91, 0x79, 0xf8, 0x4a, 0x40, 0x0b,
	0xfe, 0xbd, 0x31, 0xb8, 0x0d, 0xde, 0x1a, 0xf3, 0x9f, 0x50, 0x16, 0xf2, 0x73, 0xa5, 0xa1, 0x8a,
	0x7f, 0x5f, 0x08, 0x72, 0xb0, 0x2e, 0x32, 0x4f, 0xe7, 0x34, 0x6b, 0x4c, 0x39, 0xeb, 0x24, 0x54,
	0x08, 0xca, 0xa2, 0x8e, 0xca, 0xb6, 0x17, 0x1d, 0xab, 0xb9, 0xd4, 0x72, 0x2f, 0xae, 0x5f, 0x95,
	0x7e, 0xbd, 0x7e, 0xf5, 0x3a, 0xa2, 0xb2, 0xdb, 0x0f, 0x5c, 0xcc, 0x13, 0xcf, 0x9c, 0xe3, 0xfa,
	0xdf, 0x96, 0x08, 0xcf, 0xbc, 0xec, 0x0d, 0x22, 0xdc, 0x7d, 0x82, 0xfd, 0x55, 0x85, 0xf9, 0x99,
	0x81, 0xfc, 0x42, 0x23, 0xb6, 0x33, 0x40, 0x78, 0x0e, 0x9c, 0x89, 0x86, 0xd9, 0x08, 0xc5, 0x14,
	0xcb, 0x51, 0x53, 0xf0, 0xb7, 0x9a, 0xbe, 0x3b, 0xd6, 0xb4, 0x3d, 0x42, 0xd5, 0x8d, 0x37, 0xc1,
	0x9b, 0xb9, 0x6c, 0xee, 0x86, 0xeb, 0x99, 0xe2, 0xf2, 0x4e, 0x77, 0xf9, 0x7c, 0x5d, 0x55, 0xc1,
	0xda, 0xd8, 0xc9, 0x36, 0x97, 0xf6, 0x5c, 0xda, 0xff, 0x0f, 0x69, 0x7f, 0x67, 0x94, 0x9d, 0xbf,
	0x39, 0xfe, 0x75, 0x65, 0x37, 0x7e, 0x2e, 0x83, 0x77, 0x0a, 0xaf, 0x85, 0xc3, 0x00, 0xfb, 0xfa,
	0x1e, 0xf8, 0x68, 0x0f, 0x07, 0x3c, 0x33, 0x57, 0xc6, 0xc2, 0xe5, 0xa0, 0xe8, 0x32, 0xb5, 0x8c,
	0x91, 0xfc, 0x7e, 0x90, 0x9b, 0xd9, 0x3c, 0x99, 0xc4, 0x5c, 0x4c, 0x15, 0x45, 0xc0, 0x84, 0x57,
	0x21, 0x64, 0xfb, 0xe2, 0xa9, 0x1a, 0x81, 0x0c, 0x41, 0x9b, 0x30, 0x52, 0x13, 0xc9, 0x88, 0xa2,
	0xb8, 0xa0, 0xf7, 0x4f, 0x66, 0xd4, 0xfb, 0xd8, 0x0f, 0x2d, 0xc0, 0xf8, 0x13, 0xb0, 0x23, 0x82,
	0xf4, 0xe9, 0x32, 0x27, 0x68, 0x2a, 0x41, 0x5a, 0xa4, 0x73, 0x82, 0x26, 0x60, 0x5b, 0xc7, 0x17,
	0x37, 0x75, 0xeb, 0xf2, 0xa6, 0x6e, 0xfd, 0x76, 0x53, 0xb7, 0x7e, 0xba, 0xad, 0x97, 0x2e, 0x6f,
	0xeb, 0xa5, 0xab, 0xdb, 0x7a, 0xe9, 0xdb, 0x8f, 0x0b, 0x07, 0x8a, 0xee, 0xb2, 0x95, 0x77, 0xcd,
	0x6d, 0xfd, 0x7d, 0xf6, 0x43, 0xf1, 0x63, 0x4d, 0x1d, 0x34, 0x41, 0x4d, 0x65, 0xee, 0xfd, 0x19,
	0x00, 0x00, 0xff, 0xff, 0x86, 0xe8, 0x44, 0xdf, 0x72, 0x0e, 0x00, 0x00,
}

func (m *EventCreateChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainEnabled {
		i--
		if m.ChainEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.LastObservedValsetNonce != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LastObservedValsetNonce))
		i--
		dAtA[i] = 0x38
	}
	if m.ConfirmationsRequired != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ConfirmationsRequired))
		i--
		dAtA[i] = 0x30
	}
	if m.ChainType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x28
	}
	if m.NativeDecimals != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NativeDecimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdatedChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdatedChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdatedChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainEnabled {
		i--
		if m.ChainEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.LastObservedValsetNonce != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LastObservedValsetNonce))
		i--
		dAtA[i] = 0x38
	}
	if m.ConfirmationsRequired != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ConfirmationsRequired))
		i--
		dAtA[i] = 0x30
	}
	if m.ChainType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x28
	}
	if m.NativeDecimals != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NativeDecimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeletedChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeletedChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeletedChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateContractConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateContractConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateContractConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractEnabled {
		i--
		if m.ContractEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.SlashFractionConflictingClaim.Size()
		i -= size
		if _, err := m.SlashFractionConflictingClaim.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.SlashFractionMissingClaim.Size()
		i -= size
		if _, err := m.SlashFractionMissingClaim.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.ClaimSlashingWindow != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClaimSlashingWindow))
		i--
		dAtA[i] = 0x40
	}
	if m.ClaimSlashingEnabled {
		i--
		if m.ClaimSlashingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ContractType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ContractType))
		i--
		dAtA[i] = 0x30
	}
	if m.LastObservedEventBlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LastObservedEventBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.LastObservedEventNonce != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LastObservedEventNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.ContractHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ContractHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdatedContractConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdatedContractConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdatedContractConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractEnabled {
		i--
		if m.ContractEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.SlashFractionConflictingClaim.Size()
		i -= size
		if _, err := m.SlashFractionConflictingClaim.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.SlashFractionMissingClaim.Size()
		i -= size
		if _, err := m.SlashFractionMissingClaim.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.ClaimSlashingWindow != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ClaimSlashingWindow))
		i--
		dAtA[i] = 0x40
	}
	if m.ClaimSlashingEnabled {
		i--
		if m.ClaimSlashingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ContractType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ContractType))
		i--
		dAtA[i] = 0x30
	}
	if m.LastObservedEventBlockHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LastObservedEventBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.LastObservedEventNonce != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LastObservedEventNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.ContractHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ContractHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeletedContractConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeletedContractConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeletedContractConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCreateIbcRelayerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateIbcRelayerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateIbcRelayerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ConnectionType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RelayerEnabled {
		i--
		if m.RelayerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RelayerName) > 0 {
		i -= len(m.RelayerName)
		copy(dAtA[i:], m.RelayerName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RelayerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateIbcRelayerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateIbcRelayerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateIbcRelayerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ConnectionType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RelayerEnabled {
		i--
		if m.RelayerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RelayerName) > 0 {
		i -= len(m.RelayerName)
		copy(dAtA[i:], m.RelayerName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RelayerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteIbcRelayerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteIbcRelayerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteIbcRelayerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ConnectionType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RelayerEnabled {
		i--
		if m.RelayerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RelayerName) > 0 {
		i -= len(m.RelayerName)
		copy(dAtA[i:], m.RelayerName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RelayerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NativeDecimals != 0 {
		n += 1 + sovEvent(uint64(m.NativeDecimals))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvent(uint64(m.ChainType))
	}
	if m.ConfirmationsRequired != 0 {
		n += 1 + sovEvent(uint64(m.ConfirmationsRequired))
	}
	if m.LastObservedValsetNonce != 0 {
		n += 1 + sovEvent(uint64(m.LastObservedValsetNonce))
	}
	if m.ChainEnabled {
		n += 2
	}
	return n
}

func (m *EventUpdatedChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NativeDecimals != 0 {
		n += 1 + sovEvent(uint64(m.NativeDecimals))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvent(uint64(m.ChainType))
	}
	if m.ConfirmationsRequired != 0 {
		n += 1 + sovEvent(uint64(m.ConfirmationsRequired))
	}
	if m.LastObservedValsetNonce != 0 {
		n += 1 + sovEvent(uint64(m.LastObservedValsetNonce))
	}
	if m.ChainEnabled {
		n += 2
	}
	return n
}

func (m *EventDeletedChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovEvent(uint64(m.ChainType))
	}
	return n
}

func (m *EventCreateContractConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ContractHeight != 0 {
		n += 1 + sovEvent(uint64(m.ContractHeight))
	}
	if m.LastObservedEventNonce != 0 {
		n += 1 + sovEvent(uint64(m.LastObservedEventNonce))
	}
	if m.LastObservedEventBlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.LastObservedEventBlockHeight))
	}
	if m.ContractType != 0 {
		n += 1 + sovEvent(uint64(m.ContractType))
	}
	if m.ClaimSlashingEnabled {
		n += 2
	}
	if m.ClaimSlashingWindow != 0 {
		n += 1 + sovEvent(uint64(m.ClaimSlashingWindow))
	}
	l = m.SlashFractionMissingClaim.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.SlashFractionConflictingClaim.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.ContractEnabled {
		n += 2
	}
	return n
}

func (m *EventUpdatedContractConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ContractHeight != 0 {
		n += 1 + sovEvent(uint64(m.ContractHeight))
	}
	if m.LastObservedEventNonce != 0 {
		n += 1 + sovEvent(uint64(m.LastObservedEventNonce))
	}
	if m.LastObservedEventBlockHeight != 0 {
		n += 1 + sovEvent(uint64(m.LastObservedEventBlockHeight))
	}
	if m.ContractType != 0 {
		n += 1 + sovEvent(uint64(m.ContractType))
	}
	if m.ClaimSlashingEnabled {
		n += 2
	}
	if m.ClaimSlashingWindow != 0 {
		n += 1 + sovEvent(uint64(m.ClaimSlashingWindow))
	}
	l = m.SlashFractionMissingClaim.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.SlashFractionConflictingClaim.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.ContractEnabled {
		n += 2
	}
	return n
}

func (m *EventDeletedContractConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventCreateIbcRelayerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RelayerName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.RelayerEnabled {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ConnectionType != 0 {
		n += 1 + sovEvent(uint64(m.ConnectionType))
	}
	return n
}

func (m *EventUpdateIbcRelayerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RelayerName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.RelayerEnabled {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ConnectionType != 0 {
		n += 1 + sovEvent(uint64(m.ConnectionType))
	}
	return n
}

func (m *EventDeleteIbcRelayerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RelayerName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.RelayerEnabled {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ConnectionType != 0 {
		n += 1 + sovEvent(uint64(m.ConnectionType))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDecimals", wireType)
			}
			m.NativeDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationsRequired", wireType)
			}
			m.ConfirmationsRequired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationsRequired |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedValsetNonce", wireType)
			}
			m.LastObservedValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChainEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdatedChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdatedChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdatedChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeDecimals", wireType)
			}
			m.NativeDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeDecimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationsRequired", wireType)
			}
			m.ConfirmationsRequired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationsRequired |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedValsetNonce", wireType)
			}
			m.LastObservedValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChainEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeletedChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeletedChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeletedChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= ChainType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateContractConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateContractConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateContractConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractHeight", wireType)
			}
			m.ContractHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventNonce", wireType)
			}
			m.LastObservedEventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventBlockHeight", wireType)
			}
			m.LastObservedEventBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEventBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractType", wireType)
			}
			m.ContractType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractType |= ContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimSlashingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimSlashingEnabled = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimSlashingWindow", wireType)
			}
			m.ClaimSlashingWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimSlashingWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionMissingClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionMissingClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionConflictingClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionConflictingClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdatedContractConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdatedContractConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdatedContractConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractHeight", wireType)
			}
			m.ContractHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventNonce", wireType)
			}
			m.LastObservedEventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventBlockHeight", wireType)
			}
			m.LastObservedEventBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEventBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractType", wireType)
			}
			m.ContractType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractType |= ContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimSlashingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimSlashingEnabled = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimSlashingWindow", wireType)
			}
			m.ClaimSlashingWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimSlashingWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionMissingClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionMissingClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionConflictingClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionConflictingClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContractEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeletedContractConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeletedContractConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeletedContractConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCreateIbcRelayerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateIbcRelayerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateIbcRelayerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelayerEnabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionType", wireType)
			}
			m.ConnectionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionType |= IbcRelayerConnectionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateIbcRelayerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateIbcRelayerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateIbcRelayerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelayerEnabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionType", wireType)
			}
			m.ConnectionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionType |= IbcRelayerConnectionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteIbcRelayerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteIbcRelayerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteIbcRelayerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RelayerEnabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionType", wireType)
			}
			m.ConnectionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionType |= IbcRelayerConnectionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
